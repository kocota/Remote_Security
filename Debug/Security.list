
Security.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a470  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0801a600  0801a600  0002a600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ad90  0801ad90  000300d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ad90  0801ad90  0002ad90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ad98  0801ad98  000300d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ad98  0801ad98  0002ad98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ad9c  0801ad9c  0002ad9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0801ada0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300d4  2**0
                  CONTENTS
 10 .bss          0000a164  200000d8  200000d8  000300d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000a23c  2000a23c  000300d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003826e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006c71  00000000  00000000  00068372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002138  00000000  00000000  0006efe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e50  00000000  00000000  00071120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c29d  00000000  00000000  00072f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000301a6  00000000  00000000  0009f20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eefa9  00000000  00000000  000cf3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001be35c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008a60  00000000  00000000  001be3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a5e8 	.word	0x0801a5e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0801a5e8 	.word	0x0801a5e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000f4 	.word	0x200000f4
 80005a8:	200001a8 	.word	0x200001a8

080005ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetTimerTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	200003a8 	.word	0x200003a8
 80005dc:	2000045c 	.word	0x2000045c

080005e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005f2:	4904      	ldr	r1, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_SystemReset+0x28>)
 80005f6:	4313      	orrs	r3, r2
 80005f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <__NVIC_SystemReset+0x20>
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	05fa0004 	.word	0x05fa0004

0800060c <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <HAL_UART_TxCpltCallback+0x50>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d104      	bne.n	8000628 <HAL_UART_TxCpltCallback+0x1c>
	  {
		  osSemaphoreRelease(TransmissionStateHandle);
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <HAL_UART_TxCpltCallback+0x54>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f006 fc9a 	bl	8006f5c <osSemaphoreRelease>
	  }

	  if (huart->Instance == USART6)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <HAL_UART_TxCpltCallback+0x58>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d10f      	bne.n	8000652 <HAL_UART_TxCpltCallback+0x46>
	  {
		  //LED8_TOGGLE();
		  osSemaphoreRelease(RS485TransmissionStateHandle);
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <HAL_UART_TxCpltCallback+0x5c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fc90 	bl	8006f5c <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET); // устанавливаем микросхему на прием
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <HAL_UART_TxCpltCallback+0x60>)
 8000644:	f002 fe12 	bl	800326c <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart6, &meter_data[0], 1); // включаем прием со счетчика
 8000648:	2201      	movs	r2, #1
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <HAL_UART_TxCpltCallback+0x64>)
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <HAL_UART_TxCpltCallback+0x68>)
 800064e:	f005 f943 	bl	80058d8 <HAL_UART_Receive_DMA>

	  }

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40004800 	.word	0x40004800
 8000660:	20009cb8 	.word	0x20009cb8
 8000664:	40011400 	.word	0x40011400
 8000668:	20009a50 	.word	0x20009a50
 800066c:	40021800 	.word	0x40021800
 8000670:	20009730 	.word	0x20009730
 8000674:	20009c70 	.word	0x20009c70

08000678 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART3)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	; (800070c <HAL_UART_RxCpltCallback+0x94>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d119      	bne.n	80006be <HAL_UART_RxCpltCallback+0x46>
	  {
		  //LED_VD5_TOGGLE();
		  modem_rx_buffer[modem_rx_number++] = modem_rx_data[0];
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <HAL_UART_RxCpltCallback+0x98>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	b2d1      	uxtb	r1, r2
 8000692:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <HAL_UART_RxCpltCallback+0x98>)
 8000694:	7011      	strb	r1, [r2, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <HAL_UART_RxCpltCallback+0x9c>)
 800069a:	7819      	ldrb	r1, [r3, #0]
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <HAL_UART_RxCpltCallback+0xa0>)
 800069e:	5499      	strb	r1, [r3, r2]
		  osMessagePut(ModbusQueueHandle, (uint32_t)modem_rx_data[0], 2000);
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <HAL_UART_RxCpltCallback+0xa4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <HAL_UART_RxCpltCallback+0x9c>)
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	4611      	mov	r1, r2
 80006aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 fcb2 	bl	8007018 <osMessagePut>
		  HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 80006b4:	2201      	movs	r2, #1
 80006b6:	4917      	ldr	r1, [pc, #92]	; (8000714 <HAL_UART_RxCpltCallback+0x9c>)
 80006b8:	4819      	ldr	r0, [pc, #100]	; (8000720 <HAL_UART_RxCpltCallback+0xa8>)
 80006ba:	f005 f90d 	bl	80058d8 <HAL_UART_Receive_DMA>
	  }

	  if (huart->Instance == USART6)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <HAL_UART_RxCpltCallback+0xac>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d11c      	bne.n	8000702 <HAL_UART_RxCpltCallback+0x8a>
	  {
		  //LED7_TOGGLE();
		  meter_data[0] = meter_data[0]&0x7F;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_UART_RxCpltCallback+0xb0>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_UART_RxCpltCallback+0xb0>)
 80006d4:	701a      	strb	r2, [r3, #0]
		  meter_rx_buffer[meter_rx_number++] = meter_data[0];
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_UART_RxCpltCallback+0xb4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	b2d1      	uxtb	r1, r2
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <HAL_UART_RxCpltCallback+0xb4>)
 80006e0:	7011      	strb	r1, [r2, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_UART_RxCpltCallback+0xb0>)
 80006e6:	7819      	ldrb	r1, [r3, #0]
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <HAL_UART_RxCpltCallback+0xb8>)
 80006ea:	5499      	strb	r1, [r3, r2]
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET); // устанавливаем микросхему на прием
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f2:	4810      	ldr	r0, [pc, #64]	; (8000734 <HAL_UART_RxCpltCallback+0xbc>)
 80006f4:	f002 fdba 	bl	800326c <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart6, &meter_data[0], 1); // включаем прием со счетчика
 80006f8:	2201      	movs	r2, #1
 80006fa:	490b      	ldr	r1, [pc, #44]	; (8000728 <HAL_UART_RxCpltCallback+0xb0>)
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <HAL_UART_RxCpltCallback+0xc0>)
 80006fe:	f005 f8eb 	bl	80058d8 <HAL_UART_Receive_DMA>

		  //if(meter_rx_number>10){meter_rx_number=0;}

	  }

}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40004800 	.word	0x40004800
 8000710:	2000085c 	.word	0x2000085c
 8000714:	20009a70 	.word	0x20009a70
 8000718:	20009b70 	.word	0x20009b70
 800071c:	20008294 	.word	0x20008294
 8000720:	20008238 	.word	0x20008238
 8000724:	40011400 	.word	0x40011400
 8000728:	20009730 	.word	0x20009730
 800072c:	2000085d 	.word	0x2000085d
 8000730:	200098e4 	.word	0x200098e4
 8000734:	40021800 	.word	0x40021800
 8000738:	20009c70 	.word	0x20009c70

0800073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b0fc      	sub	sp, #496	; 0x1f0
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000742:	f001 fa9d 	bl	8001c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000746:	f000 fa29 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 fc93 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 800074e:	f000 fc4b 	bl	8000fe8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000752:	f000 fbcb 	bl	8000eec <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000756:	f000 fbf3 	bl	8000f40 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800075a:	f000 fc1b 	bl	8000f94 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800075e:	f000 fa8b 	bl	8000c78 <MX_ADC1_Init>
  MX_IWDG_Init();
 8000762:	f000 fb19 	bl	8000d98 <MX_IWDG_Init>
  MX_RTC_Init();
 8000766:	f000 fb31 	bl	8000dcc <MX_RTC_Init>
  MX_SPI2_Init();
 800076a:	f000 fb89 	bl	8000e80 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  BUZ_ON();
 800076e:	f015 f925 	bl	80159bc <BUZ_ON>
  HAL_Delay(50);
 8000772:	2032      	movs	r0, #50	; 0x32
 8000774:	f001 fac6 	bl	8001d04 <HAL_Delay>
  BUZ_OFF();
 8000778:	f015 f92c 	bl	80159d4 <BUZ_OFF>

  if( ((RCC->BDCR)&0x02) != 0 ) // Проверяем, запустился ли часовой кварц, если запустился включаем светодиод
 800077c:	4bcf      	ldr	r3, [pc, #828]	; (8000abc <main+0x380>)
 800077e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  osMutexDef(UartMutex);
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000786:	2300      	movs	r3, #0
 8000788:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 800078c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000790:	4618      	mov	r0, r3
 8000792:	f006 fab9 	bl	8006d08 <osMutexCreate>
 8000796:	4603      	mov	r3, r0
 8000798:	4ac9      	ldr	r2, [pc, #804]	; (8000ac0 <main+0x384>)
 800079a:	6013      	str	r3, [r2, #0]

  osMutexDef(Fm25v02Mutex);
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  Fm25v02MutexHandle = osMutexCreate(osMutex(Fm25v02Mutex));
 80007a8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f006 faab 	bl	8006d08 <osMutexCreate>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4ac3      	ldr	r2, [pc, #780]	; (8000ac4 <main+0x388>)
 80007b6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  osSemaphoreDef(TransmissionState);
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  TransmissionStateHandle = osSemaphoreCreate(osSemaphore(TransmissionState), 1);
 80007c4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80007c8:	2101      	movs	r1, #1
 80007ca:	4618      	mov	r0, r3
 80007cc:	f006 fb38 	bl	8006e40 <osSemaphoreCreate>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4abd      	ldr	r2, [pc, #756]	; (8000ac8 <main+0x38c>)
 80007d4:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ReceiveState);
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  ReceiveStateHandle = osSemaphoreCreate(osSemaphore(ReceiveState), 1);
 80007e2:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80007e6:	2101      	movs	r1, #1
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 fb29 	bl	8006e40 <osSemaphoreCreate>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4ab6      	ldr	r2, [pc, #728]	; (8000acc <main+0x390>)
 80007f2:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(RS485TransmissionState);
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  RS485TransmissionStateHandle = osSemaphoreCreate(osSemaphore(RS485TransmissionState), 1);
 8000800:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000804:	2101      	movs	r1, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f006 fb1a 	bl	8006e40 <osSemaphoreCreate>
 800080c:	4603      	mov	r3, r0
 800080e:	4ab0      	ldr	r2, [pc, #704]	; (8000ad0 <main+0x394>)
 8000810:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ModbusPacketReceive);
 8000812:	2300      	movs	r3, #0
 8000814:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000818:	2300      	movs	r3, #0
 800081a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  ModbusPacketReceiveHandle = osSemaphoreCreate(osSemaphore(ModbusPacketReceive), 1);
 800081e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8000822:	2101      	movs	r1, #1
 8000824:	4618      	mov	r0, r3
 8000826:	f006 fb0b 	bl	8006e40 <osSemaphoreCreate>
 800082a:	4603      	mov	r3, r0
 800082c:	4aa9      	ldr	r2, [pc, #676]	; (8000ad4 <main+0x398>)
 800082e:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(CallRingCenter);
 8000830:	2300      	movs	r3, #0
 8000832:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8000836:	2300      	movs	r3, #0
 8000838:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  CallRingCenterHandle = osSemaphoreCreate(osSemaphore(CallRingCenter), 1);
 800083c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000840:	2101      	movs	r1, #1
 8000842:	4618      	mov	r0, r3
 8000844:	f006 fafc 	bl	8006e40 <osSemaphoreCreate>
 8000848:	4603      	mov	r3, r0
 800084a:	4aa3      	ldr	r2, [pc, #652]	; (8000ad8 <main+0x39c>)
 800084c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  osTimerDef(AT_Timer, Callback_AT_Timer);
 800084e:	4ba3      	ldr	r3, [pc, #652]	; (8000adc <main+0x3a0>)
 8000850:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  AT_TimerHandle = osTimerCreate(osTimer(AT_Timer), osTimerOnce, NULL);
 800085a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f006 f99c 	bl	8006ba0 <osTimerCreate>
 8000868:	4603      	mov	r3, r0
 800086a:	4a9d      	ldr	r2, [pc, #628]	; (8000ae0 <main+0x3a4>)
 800086c:	6013      	str	r3, [r2, #0]

  osTimerDef(Ring_Center_Timer, Callback_Ring_Center_Timer);
 800086e:	4b9d      	ldr	r3, [pc, #628]	; (8000ae4 <main+0x3a8>)
 8000870:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  Ring_Center_TimerHandle = osTimerCreate(osTimer(Ring_Center_Timer), osTimerOnce, NULL);
 800087a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f006 f98c 	bl	8006ba0 <osTimerCreate>
 8000888:	4603      	mov	r3, r0
 800088a:	4a97      	ldr	r2, [pc, #604]	; (8000ae8 <main+0x3ac>)
 800088c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  osMessageQDef(ModbusQueue, 256, uint8_t);
 800088e:	4b97      	ldr	r3, [pc, #604]	; (8000aec <main+0x3b0>)
 8000890:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 8000894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModbusQueueHandle = osMessageCreate(osMessageQ(ModbusQueue), NULL);
 800089a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f006 fb91 	bl	8006fc8 <osMessageCreate>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a91      	ldr	r2, [pc, #580]	; (8000af0 <main+0x3b4>)
 80008aa:	6013      	str	r3, [r2, #0]

  osMessageQDef(MeterQueue, 256, uint8_t);
 80008ac:	4b8f      	ldr	r3, [pc, #572]	; (8000aec <main+0x3b0>)
 80008ae:	f507 74c4 	add.w	r4, r7, #392	; 0x188
 80008b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MeterQueueHandle = osMessageCreate(osMessageQ(MeterQueue), NULL);
 80008b8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f006 fb82 	bl	8006fc8 <osMessageCreate>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4a8b      	ldr	r2, [pc, #556]	; (8000af4 <main+0x3b8>)
 80008c8:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008ca:	4b8b      	ldr	r3, [pc, #556]	; (8000af8 <main+0x3bc>)
 80008cc:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 80008d0:	461d      	mov	r5, r3
 80008d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008de:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f006 f8fa 	bl	8006ade <osThreadCreate>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a83      	ldr	r2, [pc, #524]	; (8000afc <main+0x3c0>)
 80008ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(IbuttonTask, ThreadIbuttonTask, osPriorityNormal, 0, 128);
 80008f0:	4b83      	ldr	r3, [pc, #524]	; (8000b00 <main+0x3c4>)
 80008f2:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 80008f6:	461d      	mov	r5, r3
 80008f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IbuttonTaskHandle = osThreadCreate(osThread(IbuttonTask), NULL);
 8000904:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f006 f8e7 	bl	8006ade <osThreadCreate>
 8000910:	4603      	mov	r3, r0
 8000912:	4a7c      	ldr	r2, [pc, #496]	; (8000b04 <main+0x3c8>)
 8000914:	6013      	str	r3, [r2, #0]

  osThreadDef(SecurityTask, ThreadSecurityTask, osPriorityNormal, 0, 128);
 8000916:	4b7c      	ldr	r3, [pc, #496]	; (8000b08 <main+0x3cc>)
 8000918:	f507 749a 	add.w	r4, r7, #308	; 0x134
 800091c:	461d      	mov	r5, r3
 800091e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000922:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000926:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SecurityTaskHandle = osThreadCreate(osThread(SecurityTask), NULL);
 800092a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f006 f8d4 	bl	8006ade <osThreadCreate>
 8000936:	4603      	mov	r3, r0
 8000938:	4a74      	ldr	r2, [pc, #464]	; (8000b0c <main+0x3d0>)
 800093a:	6013      	str	r3, [r2, #0]

  osThreadDef(M95Task, ThreadM95Task, osPriorityNormal, 0, 128);
 800093c:	4b74      	ldr	r3, [pc, #464]	; (8000b10 <main+0x3d4>)
 800093e:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000942:	461d      	mov	r5, r3
 8000944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000948:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  M95TaskHandle = osThreadCreate(osThread(M95Task), NULL);
 8000950:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f006 f8c1 	bl	8006ade <osThreadCreate>
 800095c:	4603      	mov	r3, r0
 800095e:	4a6d      	ldr	r2, [pc, #436]	; (8000b14 <main+0x3d8>)
 8000960:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusTask, ThreadModbusTask, osPriorityNormal, 0, 128);
 8000962:	4b6d      	ldr	r3, [pc, #436]	; (8000b18 <main+0x3dc>)
 8000964:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8000968:	461d      	mov	r5, r3
 800096a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 8000976:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f006 f8ae 	bl	8006ade <osThreadCreate>
 8000982:	4603      	mov	r3, r0
 8000984:	4a65      	ldr	r2, [pc, #404]	; (8000b1c <main+0x3e0>)
 8000986:	6013      	str	r3, [r2, #0]

  osThreadDef(MainTask, ThreadMainTask, osPriorityNormal, 0, 128);
 8000988:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800098c:	4a64      	ldr	r2, [pc, #400]	; (8000b20 <main+0x3e4>)
 800098e:	461c      	mov	r4, r3
 8000990:	4615      	mov	r5, r2
 8000992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000996:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800099a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800099e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f006 f89a 	bl	8006ade <osThreadCreate>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a5d      	ldr	r2, [pc, #372]	; (8000b24 <main+0x3e8>)
 80009ae:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusPacketTask, ThreadModbusPacketTask, osPriorityNormal, 0, 128);
 80009b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009b4:	4a5c      	ldr	r2, [pc, #368]	; (8000b28 <main+0x3ec>)
 80009b6:	461c      	mov	r4, r3
 80009b8:	4615      	mov	r5, r2
 80009ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusPacketTaskHandle = osThreadCreate(osThread(ModbusPacketTask), NULL);
 80009c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f006 f886 	bl	8006ade <osThreadCreate>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a55      	ldr	r2, [pc, #340]	; (8000b2c <main+0x3f0>)
 80009d6:	6013      	str	r3, [r2, #0]

  osThreadDef(CallRingCenterTask, ThreadCallRingCenterTask, osPriorityNormal, 0, 128);
 80009d8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80009dc:	4a54      	ldr	r2, [pc, #336]	; (8000b30 <main+0x3f4>)
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CallRingCenterTaskHandle = osThreadCreate(osThread(CallRingCenterTask), NULL);
 80009ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f006 f872 	bl	8006ade <osThreadCreate>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <main+0x3f8>)
 80009fe:	6013      	str	r3, [r2, #0]

  osThreadDef(LedTask, ThreadLedTask, osPriorityNormal, 0, 128);
 8000a00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a04:	4a4c      	ldr	r2, [pc, #304]	; (8000b38 <main+0x3fc>)
 8000a06:	461c      	mov	r4, r3
 8000a08:	4615      	mov	r5, r2
 8000a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 8000a16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f006 f85e 	bl	8006ade <osThreadCreate>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a45      	ldr	r2, [pc, #276]	; (8000b3c <main+0x400>)
 8000a26:	6013      	str	r3, [r2, #0]

  osThreadDef(ArmingTask, ThreadArmingTask, osPriorityNormal, 0, 128);
 8000a28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a2c:	4a44      	ldr	r2, [pc, #272]	; (8000b40 <main+0x404>)
 8000a2e:	461c      	mov	r4, r3
 8000a30:	4615      	mov	r5, r2
 8000a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ArmingTaskHandle = osThreadCreate(osThread(ArmingTask), NULL);
 8000a3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f006 f84a 	bl	8006ade <osThreadCreate>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a3d      	ldr	r2, [pc, #244]	; (8000b44 <main+0x408>)
 8000a4e:	6013      	str	r3, [r2, #0]

  osThreadDef(ReadRegistersTask, ThreadReadRegistersTask, osPriorityNormal, 0, 128);
 8000a50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a54:	4a3c      	ldr	r2, [pc, #240]	; (8000b48 <main+0x40c>)
 8000a56:	461c      	mov	r4, r3
 8000a58:	4615      	mov	r5, r2
 8000a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRegistersTaskHandle = osThreadCreate(osThread(ReadRegistersTask), NULL);
 8000a66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 f836 	bl	8006ade <osThreadCreate>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a35      	ldr	r2, [pc, #212]	; (8000b4c <main+0x410>)
 8000a76:	6013      	str	r3, [r2, #0]

  osThreadDef(EventWriteTask, ThreadEventWriteTask, osPriorityNormal, 0, 128);
 8000a78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a7c:	4a34      	ldr	r2, [pc, #208]	; (8000b50 <main+0x414>)
 8000a7e:	461c      	mov	r4, r3
 8000a80:	4615      	mov	r5, r2
 8000a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventWriteTaskHandle = osThreadCreate(osThread(EventWriteTask), NULL);
 8000a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f006 f822 	bl	8006ade <osThreadCreate>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4a2d      	ldr	r2, [pc, #180]	; (8000b54 <main+0x418>)
 8000a9e:	6013      	str	r3, [r2, #0]

  osThreadDef(MeterTask, ThreadMeterTask, osPriorityNormal, 0, 128);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4a2c      	ldr	r2, [pc, #176]	; (8000b58 <main+0x41c>)
 8000aa6:	461c      	mov	r4, r3
 8000aa8:	4615      	mov	r5, r2
 8000aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeterTaskHandle = osThreadCreate(osThread(MeterTask), NULL);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	e04f      	b.n	8000b5c <main+0x420>
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	200096a0 	.word	0x200096a0
 8000ac4:	20009a6c 	.word	0x20009a6c
 8000ac8:	20009cb8 	.word	0x20009cb8
 8000acc:	20009cd4 	.word	0x20009cd4
 8000ad0:	20009a50 	.word	0x20009a50
 8000ad4:	20009a28 	.word	0x20009a28
 8000ad8:	20009cb4 	.word	0x20009cb4
 8000adc:	080013e5 	.word	0x080013e5
 8000ae0:	20009698 	.word	0x20009698
 8000ae4:	08001405 	.word	0x08001405
 8000ae8:	200096a4 	.word	0x200096a4
 8000aec:	0801a6c0 	.word	0x0801a6c0
 8000af0:	20008294 	.word	0x20008294
 8000af4:	20008284 	.word	0x20008284
 8000af8:	0801a6d0 	.word	0x0801a6d0
 8000afc:	20008118 	.word	0x20008118
 8000b00:	0801a6ec 	.word	0x0801a6ec
 8000b04:	20008114 	.word	0x20008114
 8000b08:	0801a708 	.word	0x0801a708
 8000b0c:	20009cbc 	.word	0x20009cbc
 8000b10:	0801a724 	.word	0x0801a724
 8000b14:	200098e0 	.word	0x200098e0
 8000b18:	0801a740 	.word	0x0801a740
 8000b1c:	200098dc 	.word	0x200098dc
 8000b20:	0801a75c 	.word	0x0801a75c
 8000b24:	20009718 	.word	0x20009718
 8000b28:	0801a778 	.word	0x0801a778
 8000b2c:	20009710 	.word	0x20009710
 8000b30:	0801a794 	.word	0x0801a794
 8000b34:	2000827c 	.word	0x2000827c
 8000b38:	0801a7b0 	.word	0x0801a7b0
 8000b3c:	200098d8 	.word	0x200098d8
 8000b40:	0801a7cc 	.word	0x0801a7cc
 8000b44:	20009714 	.word	0x20009714
 8000b48:	0801a7e8 	.word	0x0801a7e8
 8000b4c:	20008280 	.word	0x20008280
 8000b50:	0801a804 	.word	0x0801a804
 8000b54:	2000969c 	.word	0x2000969c
 8000b58:	0801a820 	.word	0x0801a820
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f005 ffbd 	bl	8006ade <osThreadCreate>
 8000b64:	4603      	mov	r3, r0
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <main+0x458>)
 8000b68:	6013      	str	r3, [r2, #0]

  osThreadDef(DisplayTask, ThreadDisplayTask, osPriorityNormal, 0, 128);
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <main+0x45c>)
 8000b6e:	461c      	mov	r4, r3
 8000b70:	4615      	mov	r5, r2
 8000b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeterTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f005 ffab 	bl	8006ade <osThreadCreate>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4a02      	ldr	r2, [pc, #8]	; (8000b94 <main+0x458>)
 8000b8c:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b8e:	f005 ff9f 	bl	8006ad0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <main+0x456>
 8000b94:	200081d4 	.word	0x200081d4
 8000b98:	0801a83c 	.word	0x0801a83c

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	; 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	2230      	movs	r2, #48	; 0x30
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f018 fd6d 	bl	801968a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <SystemClock_Config+0xd4>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <SystemClock_Config+0xd4>)
 8000bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd0:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <SystemClock_Config+0xd4>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <SystemClock_Config+0xd8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <SystemClock_Config+0xd8>)
 8000be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <SystemClock_Config+0xd8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000bf8:	230d      	movs	r3, #13
 8000bfa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c14:	2319      	movs	r3, #25
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c22:	2304      	movs	r3, #4
 8000c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 fba4 	bl	8003378 <HAL_RCC_OscConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c36:	f000 fc17 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3a:	230f      	movs	r3, #15
 8000c3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2105      	movs	r1, #5
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fe05 	bl	8003868 <HAL_RCC_ClockConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c64:	f000 fc00 	bl	8001468 <Error_Handler>
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3750      	adds	r7, #80	; 0x50
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2220      	movs	r2, #32
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f018 fcf9 	bl	801968a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c98:	4b3b      	ldr	r3, [pc, #236]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000c9a:	4a3c      	ldr	r2, [pc, #240]	; (8000d8c <MX_ADC1_Init+0x114>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c9e:	4b3a      	ldr	r3, [pc, #232]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000ca0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ca4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ca6:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cac:	4b36      	ldr	r3, [pc, #216]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb2:	4b35      	ldr	r3, [pc, #212]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cb8:	4b33      	ldr	r3, [pc, #204]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc0:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000cc8:	4a31      	ldr	r2, [pc, #196]	; (8000d90 <MX_ADC1_Init+0x118>)
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce0:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce6:	4828      	ldr	r0, [pc, #160]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000ce8:	f001 f830 	bl	8001d4c <HAL_ADC_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000cf2:	f000 fbb9 	bl	8001468 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	4619      	mov	r1, r3
 8000d08:	481f      	ldr	r0, [pc, #124]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000d0a:	f001 f863 	bl	8001dd4 <HAL_ADC_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000d14:	f000 fba8 	bl	8001468 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000d18:	230a      	movs	r3, #10
 8000d1a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d20:	2303      	movs	r3, #3
 8000d22:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_ADC1_Init+0x11c>)
 8000d2e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000d42:	f001 fa65 	bl	8002210 <HAL_ADCEx_InjectedConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000d4c:	f000 fb8c 	bl	8001468 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	4619      	mov	r1, r3
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000d5a:	f001 fa59 	bl	8002210 <HAL_ADCEx_InjectedConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000d64:	f000 fb80 	bl	8001468 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedRank = 3;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_ADC1_Init+0x110>)
 8000d72:	f001 fa4d 	bl	8002210 <HAL_ADCEx_InjectedConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000d7c:	f000 fb74 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3730      	adds	r7, #48	; 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20009890 	.word	0x20009890
 8000d8c:	40012000 	.word	0x40012000
 8000d90:	0f000001 	.word	0x0f000001
 8000d94:	000f0001 	.word	0x000f0001

08000d98 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_IWDG_Init+0x2c>)
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <MX_IWDG_Init+0x30>)
 8000da0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_IWDG_Init+0x2c>)
 8000da4:	2203      	movs	r2, #3
 8000da6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_IWDG_Init+0x2c>)
 8000daa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000dae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_IWDG_Init+0x2c>)
 8000db2:	f002 fa8e 	bl	80032d2 <HAL_IWDG_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000dbc:	f000 fb54 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20008288 	.word	0x20008288
 8000dc8:	40003000 	.word	0x40003000

08000dcc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000de0:	2300      	movs	r3, #0
 8000de2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <MX_RTC_Init+0xac>)
 8000de6:	4a25      	ldr	r2, [pc, #148]	; (8000e7c <MX_RTC_Init+0xb0>)
 8000de8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <MX_RTC_Init+0xac>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_RTC_Init+0xac>)
 8000df2:	227f      	movs	r2, #127	; 0x7f
 8000df4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <MX_RTC_Init+0xac>)
 8000df8:	22ff      	movs	r2, #255	; 0xff
 8000dfa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <MX_RTC_Init+0xac>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_RTC_Init+0xac>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_RTC_Init+0xac>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e0e:	481a      	ldr	r0, [pc, #104]	; (8000e78 <MX_RTC_Init+0xac>)
 8000e10:	f003 f80e 	bl	8003e30 <HAL_RTC_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f000 fb25 	bl	8001468 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 8000e1e:	2317      	movs	r3, #23
 8000e20:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x47;
 8000e22:	2347      	movs	r3, #71	; 0x47
 8000e24:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2201      	movs	r2, #1
 8000e36:	4619      	mov	r1, r3
 8000e38:	480f      	ldr	r0, [pc, #60]	; (8000e78 <MX_RTC_Init+0xac>)
 8000e3a:	f003 f86f 	bl	8003f1c <HAL_RTC_SetTime>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e44:	f000 fb10 	bl	8001468 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000e4c:	2311      	movs	r3, #17
 8000e4e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x5;
 8000e50:	2305      	movs	r3, #5
 8000e52:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000e54:	2322      	movs	r3, #34	; 0x22
 8000e56:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_RTC_Init+0xac>)
 8000e60:	f003 f954 	bl	800410c <HAL_RTC_SetDate>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e6a:	f000 fafd 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20009a30 	.word	0x20009a30
 8000e7c:	40002800 	.word	0x40002800

08000e80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <MX_SPI2_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ecc:	220a      	movs	r2, #10
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_SPI2_Init+0x64>)
 8000ed2:	f003 faab 	bl	800442c <HAL_SPI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000edc:	f000 fac4 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000817c 	.word	0x2000817c
 8000ee8:	40003800 	.word	0x40003800

08000eec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART1_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f24:	f004 fad8 	bl	80054d8 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f000 fa9b 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200099e4 	.word	0x200099e4
 8000f3c:	40011000 	.word	0x40011000

08000f40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_USART3_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART3_UART_Init+0x4c>)
 8000f78:	f004 faae 	bl	80054d8 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f000 fa71 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20008238 	.word	0x20008238
 8000f90:	40004800 	.word	0x40004800

08000f94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_USART6_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fa0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fa4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb8:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_USART6_UART_Init+0x4c>)
 8000fce:	f004 fa83 	bl	80054d8 <HAL_UART_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8000fd8:	f000 fa46 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20009c70 	.word	0x20009c70
 8000fe4:	40011400 	.word	0x40011400

08000fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_DMA_Init+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <MX_DMA_Init+0x88>)
 8000ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_DMA_Init+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_DMA_Init+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <MX_DMA_Init+0x88>)
 8001014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_DMA_Init+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	200c      	movs	r0, #12
 800102c:	f001 fb3e 	bl	80026ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001030:	200c      	movs	r0, #12
 8001032:	f001 fb57 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2105      	movs	r1, #5
 800103a:	200e      	movs	r0, #14
 800103c:	f001 fb36 	bl	80026ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001040:	200e      	movs	r0, #14
 8001042:	f001 fb4f 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2105      	movs	r1, #5
 800104a:	2039      	movs	r0, #57	; 0x39
 800104c:	f001 fb2e 	bl	80026ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001050:	2039      	movs	r0, #57	; 0x39
 8001052:	f001 fb47 	bl	80026e4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2105      	movs	r1, #5
 800105a:	2045      	movs	r0, #69	; 0x45
 800105c:	f001 fb26 	bl	80026ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001060:	2045      	movs	r0, #69	; 0x45
 8001062:	f001 fb3f 	bl	80026e4 <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
 800108e:	4bb4      	ldr	r3, [pc, #720]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4ab3      	ldr	r2, [pc, #716]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001094:	f043 0310 	orr.w	r3, r3, #16
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4bb1      	ldr	r3, [pc, #708]	; (8001360 <MX_GPIO_Init+0x2ec>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	623b      	str	r3, [r7, #32]
 80010a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	4bad      	ldr	r3, [pc, #692]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4aac      	ldr	r2, [pc, #688]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4baa      	ldr	r3, [pc, #680]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010be:	61fb      	str	r3, [r7, #28]
 80010c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4ba6      	ldr	r3, [pc, #664]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4aa5      	ldr	r2, [pc, #660]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4ba3      	ldr	r3, [pc, #652]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b9f      	ldr	r3, [pc, #636]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a9e      	ldr	r2, [pc, #632]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b9c      	ldr	r3, [pc, #624]	; (8001360 <MX_GPIO_Init+0x2ec>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b98      	ldr	r3, [pc, #608]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a97      	ldr	r2, [pc, #604]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b95      	ldr	r3, [pc, #596]	; (8001360 <MX_GPIO_Init+0x2ec>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b91      	ldr	r3, [pc, #580]	; (8001360 <MX_GPIO_Init+0x2ec>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a90      	ldr	r2, [pc, #576]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b8e      	ldr	r3, [pc, #568]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b8a      	ldr	r3, [pc, #552]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a89      	ldr	r2, [pc, #548]	; (8001360 <MX_GPIO_Init+0x2ec>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b87      	ldr	r3, [pc, #540]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b83      	ldr	r3, [pc, #524]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a82      	ldr	r2, [pc, #520]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b80      	ldr	r3, [pc, #512]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b7c      	ldr	r3, [pc, #496]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a7b      	ldr	r2, [pc, #492]	; (8001360 <MX_GPIO_Init+0x2ec>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b79      	ldr	r3, [pc, #484]	; (8001360 <MX_GPIO_Init+0x2ec>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001186:	2200      	movs	r2, #0
 8001188:	f64f 6140 	movw	r1, #65088	; 0xfe40
 800118c:	4875      	ldr	r0, [pc, #468]	; (8001364 <MX_GPIO_Init+0x2f0>)
 800118e:	f002 f86d 	bl	800326c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001198:	4873      	ldr	r0, [pc, #460]	; (8001368 <MX_GPIO_Init+0x2f4>)
 800119a:	f002 f867 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
 80011a4:	4871      	ldr	r0, [pc, #452]	; (800136c <MX_GPIO_Init+0x2f8>)
 80011a6:	f002 f861 	bl	800326c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80011b0:	486d      	ldr	r0, [pc, #436]	; (8001368 <MX_GPIO_Init+0x2f4>)
 80011b2:	f002 f85b 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2138      	movs	r1, #56	; 0x38
 80011ba:	486d      	ldr	r0, [pc, #436]	; (8001370 <MX_GPIO_Init+0x2fc>)
 80011bc:	f002 f856 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2101      	movs	r1, #1
 80011c4:	486b      	ldr	r0, [pc, #428]	; (8001374 <MX_GPIO_Init+0x300>)
 80011c6:	f002 f851 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f248 010c 	movw	r1, #32780	; 0x800c
 80011d0:	4869      	ldr	r0, [pc, #420]	; (8001378 <MX_GPIO_Init+0x304>)
 80011d2:	f002 f84b 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2160      	movs	r1, #96	; 0x60
 80011da:	4867      	ldr	r0, [pc, #412]	; (8001378 <MX_GPIO_Init+0x304>)
 80011dc:	f002 f846 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
 80011e0:	2200      	movs	r2, #0
 80011e2:	f248 7128 	movw	r1, #34600	; 0x8728
 80011e6:	4863      	ldr	r0, [pc, #396]	; (8001374 <MX_GPIO_Init+0x300>)
 80011e8:	f002 f840 	bl	800326c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80011ec:	2200      	movs	r2, #0
 80011ee:	f64d 0107 	movw	r1, #55303	; 0xd807
 80011f2:	4862      	ldr	r0, [pc, #392]	; (800137c <MX_GPIO_Init+0x308>)
 80011f4:	f002 f83a 	bl	800326c <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80011f8:	2200      	movs	r2, #0
 80011fa:	f240 417c 	movw	r1, #1148	; 0x47c
 80011fe:	4860      	ldr	r0, [pc, #384]	; (8001380 <MX_GPIO_Init+0x30c>)
 8001200:	f002 f834 	bl	800326c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE6 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001204:	f64f 6340 	movw	r3, #65088	; 0xfe40
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	4619      	mov	r1, r3
 800121c:	4851      	ldr	r0, [pc, #324]	; (8001364 <MX_GPIO_Init+0x2f0>)
 800121e:	f001 fe71 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI10 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8001222:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	484b      	ldr	r0, [pc, #300]	; (8001368 <MX_GPIO_Init+0x2f4>)
 800123c:	f001 fe62 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001240:	f44f 537f 	mov.w	r3, #16320	; 0x3fc0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	4844      	ldr	r0, [pc, #272]	; (800136c <MX_GPIO_Init+0x2f8>)
 800125a:	f001 fe53 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800125e:	2338      	movs	r3, #56	; 0x38
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	483e      	ldr	r0, [pc, #248]	; (8001370 <MX_GPIO_Init+0x2fc>)
 8001276:	f001 fe45 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA5 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8
 800127a:	f248 7329 	movw	r3, #34601	; 0x8729
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	4838      	ldr	r0, [pc, #224]	; (8001374 <MX_GPIO_Init+0x300>)
 8001294:	f001 fe36 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH5 PH6
                           PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8001298:	f248 036c 	movw	r3, #32876	; 0x806c
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4831      	ldr	r0, [pc, #196]	; (8001378 <MX_GPIO_Init+0x304>)
 80012b2:	f001 fe27 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012b6:	2310      	movs	r3, #16
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	482b      	ldr	r0, [pc, #172]	; (8001378 <MX_GPIO_Init+0x304>)
 80012ca:	f001 fe1b 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ce:	2304      	movs	r3, #4
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	4828      	ldr	r0, [pc, #160]	; (8001384 <MX_GPIO_Init+0x310>)
 80012e2:	f001 fe0f 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80012e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f8:	4619      	mov	r1, r3
 80012fa:	481d      	ldr	r0, [pc, #116]	; (8001370 <MX_GPIO_Init+0x2fc>)
 80012fc:	f001 fe02 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001300:	2303      	movs	r3, #3
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	481b      	ldr	r0, [pc, #108]	; (8001380 <MX_GPIO_Init+0x30c>)
 8001314:	f001 fdf6 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001318:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001322:	2302      	movs	r3, #2
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	4812      	ldr	r0, [pc, #72]	; (800137c <MX_GPIO_Init+0x308>)
 8001332:	f001 fde7 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 PD0 PD1
                           PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001336:	f24c 0307 	movw	r3, #49159	; 0xc007
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <MX_GPIO_Init+0x308>)
 8001350:	f001 fdd8 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG4 PG5
                           PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001354:	237c      	movs	r3, #124	; 0x7c
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
 800135c:	e014      	b.n	8001388 <MX_GPIO_Init+0x314>
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40021000 	.word	0x40021000
 8001368:	40022000 	.word	0x40022000
 800136c:	40020800 	.word	0x40020800
 8001370:	40021400 	.word	0x40021400
 8001374:	40020000 	.word	0x40020000
 8001378:	40021c00 	.word	0x40021c00
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021800 	.word	0x40021800
 8001384:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <MX_GPIO_Init+0x368>)
 8001398:	f001 fdb4 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800139c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a6:	2302      	movs	r3, #2
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <MX_GPIO_Init+0x368>)
 80013b6:	f001 fda5 	bl	8002f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ba:	2301      	movs	r3, #1
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	4619      	mov	r1, r3
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_GPIO_Init+0x36c>)
 80013ce:	f001 fd99 	bl	8002f04 <HAL_GPIO_Init>

}
 80013d2:	bf00      	nop
 80013d4:	3738      	adds	r7, #56	; 0x38
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40021000 	.word	0x40021000

080013e4 <Callback_AT_Timer>:

/* USER CODE BEGIN 4 */

void Callback_AT_Timer(void const * argument)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

	read_rx_state = NOT_ACTIVE;
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <Callback_AT_Timer+0x1c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20009a2c 	.word	0x20009a2c

08001404 <Callback_Ring_Center_Timer>:

void Callback_Ring_Center_Timer(void const * argument)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	modem_reset_state = 1;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <Callback_Ring_Center_Timer+0x1c>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
	//NVIC_SystemReset();
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000085e 	.word	0x2000085e

08001424 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_IWDG_Refresh(&hiwdg);
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <StartDefaultTask+0x1c>)
 800142e:	f001 ff92 	bl	8003356 <HAL_IWDG_Refresh>
	LED_VD3_TOGGLE();
 8001432:	f014 faff 	bl	8015a34 <LED_VD3_TOGGLE>

    osDelay(1000);
 8001436:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800143a:	f005 fb9c 	bl	8006b76 <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 800143e:	e7f5      	b.n	800142c <StartDefaultTask+0x8>
 8001440:	20008288 	.word	0x20008288

08001444 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001456:	f000 fc35 	bl	8001cc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40010000 	.word	0x40010000

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	NVIC_SystemReset();
 800146c:	f7ff f8b8 	bl	80005e0 <__NVIC_SystemReset>

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_MspInit+0x54>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_MspInit+0x54>)
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_MspInit+0x54>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_MspInit+0x54>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_MspInit+0x54>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_MspInit+0x54>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	210f      	movs	r1, #15
 80014b2:	f06f 0001 	mvn.w	r0, #1
 80014b6:	f001 f8f9 	bl	80026ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_ADC_MspInit+0x7c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d127      	bne.n	800153a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_ADC_MspInit+0x80>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <HAL_ADC_MspInit+0x80>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_ADC_MspInit+0x80>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_ADC_MspInit+0x80>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_ADC_MspInit+0x80>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_ADC_MspInit+0x80>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001522:	230d      	movs	r3, #13
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <HAL_ADC_MspInit+0x84>)
 8001536:	f001 fce5 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40012000 	.word	0x40012000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020800 	.word	0x40020800

08001550 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a0c      	ldr	r2, [pc, #48]	; (800159c <HAL_RTC_MspInit+0x4c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d111      	bne.n	8001594 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001570:	2302      	movs	r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001578:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fb74 	bl	8003c6c <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800158a:	f7ff ff6d 	bl	8001468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_RTC_MspInit+0x50>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40002800 	.word	0x40002800
 80015a0:	42470e3c 	.word	0x42470e3c

080015a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	; (8001628 <HAL_SPI_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_SPI_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_SPI_MspInit+0x88>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_SPI_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_SPI_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_SPI_MspInit+0x88>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_SPI_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015fe:	230e      	movs	r3, #14
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800160e:	2305      	movs	r3, #5
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_SPI_MspInit+0x8c>)
 800161a:	f001 fc73 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40003800 	.word	0x40003800
 800162c:	40023800 	.word	0x40023800
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a63      	ldr	r2, [pc, #396]	; (80017e0 <HAL_UART_MspInit+0x1ac>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12c      	bne.n	80016b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
 800165a:	4b62      	ldr	r3, [pc, #392]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a61      	ldr	r2, [pc, #388]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a5a      	ldr	r2, [pc, #360]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b58      	ldr	r3, [pc, #352]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800169e:	2307      	movs	r3, #7
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	484f      	ldr	r0, [pc, #316]	; (80017e8 <HAL_UART_MspInit+0x1b4>)
 80016aa:	f001 fc2b 	bl	8002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80016ae:	e13e      	b.n	800192e <HAL_UART_MspInit+0x2fa>
  else if(huart->Instance==USART3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a4d      	ldr	r2, [pc, #308]	; (80017ec <HAL_UART_MspInit+0x1b8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f040 80a2 	bne.w	8001800 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	4b48      	ldr	r3, [pc, #288]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a47      	ldr	r2, [pc, #284]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 80016c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b45      	ldr	r3, [pc, #276]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4a40      	ldr	r2, [pc, #256]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 80016e2:	f043 0302 	orr.w	r3, r3, #2
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
 80016e8:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <HAL_UART_MspInit+0x1b0>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001706:	2307      	movs	r3, #7
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	4835      	ldr	r0, [pc, #212]	; (80017e8 <HAL_UART_MspInit+0x1b4>)
 8001712:	f001 fbf7 	bl	8002f04 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001716:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 8001718:	4a36      	ldr	r2, [pc, #216]	; (80017f4 <HAL_UART_MspInit+0x1c0>)
 800171a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800171c:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 800171e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001722:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 8001726:	2240      	movs	r2, #64	; 0x40
 8001728:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800172a:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001730:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 8001732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001736:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 800173a:	2200      	movs	r2, #0
 800173c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173e:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001756:	4826      	ldr	r0, [pc, #152]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 8001758:	f000 ffd2 	bl	8002700 <HAL_DMA_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001762:	f7ff fe81 	bl	8001468 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_UART_MspInit+0x1bc>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 8001774:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_UART_MspInit+0x1c8>)
 8001776:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 800177a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800177e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 800178e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001792:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80017b2:	4811      	ldr	r0, [pc, #68]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 80017b4:	f000 ffa4 	bl	8002700 <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 80017be:	f7ff fe53 	bl	8001468 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a0c      	ldr	r2, [pc, #48]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 80017c6:	639a      	str	r2, [r3, #56]	; 0x38
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_UART_MspInit+0x1c4>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	2027      	movs	r0, #39	; 0x27
 80017d4:	f000 ff6a 	bl	80026ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017d8:	2027      	movs	r0, #39	; 0x27
 80017da:	f000 ff83 	bl	80026e4 <HAL_NVIC_EnableIRQ>
}
 80017de:	e0a6      	b.n	800192e <HAL_UART_MspInit+0x2fa>
 80017e0:	40011000 	.word	0x40011000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40004800 	.word	0x40004800
 80017f0:	200096a8 	.word	0x200096a8
 80017f4:	40026058 	.word	0x40026058
 80017f8:	200081d8 	.word	0x200081d8
 80017fc:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a4c      	ldr	r2, [pc, #304]	; (8001938 <HAL_UART_MspInit+0x304>)
 8001806:	4293      	cmp	r3, r2
 8001808:	f040 8091 	bne.w	800192e <HAL_UART_MspInit+0x2fa>
    __HAL_RCC_USART6_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_UART_MspInit+0x308>)
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <HAL_UART_MspInit+0x308>)
 8001816:	f043 0320 	orr.w	r3, r3, #32
 800181a:	6453      	str	r3, [r2, #68]	; 0x44
 800181c:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_UART_MspInit+0x308>)
 800181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4b43      	ldr	r3, [pc, #268]	; (800193c <HAL_UART_MspInit+0x308>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a42      	ldr	r2, [pc, #264]	; (800193c <HAL_UART_MspInit+0x308>)
 8001832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_UART_MspInit+0x308>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001844:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001856:	2308      	movs	r3, #8
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	4837      	ldr	r0, [pc, #220]	; (8001940 <HAL_UART_MspInit+0x30c>)
 8001862:	f001 fb4f 	bl	8002f04 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_UART_MspInit+0x310>)
 8001868:	4a37      	ldr	r2, [pc, #220]	; (8001948 <HAL_UART_MspInit+0x314>)
 800186a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <HAL_UART_MspInit+0x310>)
 800186e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001872:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <HAL_UART_MspInit+0x310>)
 8001876:	2240      	movs	r2, #64	; 0x40
 8001878:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <HAL_UART_MspInit+0x310>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_UART_MspInit+0x310>)
 8001882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001886:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001888:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <HAL_UART_MspInit+0x310>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_UART_MspInit+0x310>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_UART_MspInit+0x310>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_UART_MspInit+0x310>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_UART_MspInit+0x310>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80018a6:	4827      	ldr	r0, [pc, #156]	; (8001944 <HAL_UART_MspInit+0x310>)
 80018a8:	f000 ff2a 	bl	8002700 <HAL_DMA_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_UART_MspInit+0x282>
      Error_Handler();
 80018b2:	f7ff fdd9 	bl	8001468 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_UART_MspInit+0x310>)
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <HAL_UART_MspInit+0x310>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_UART_MspInit+0x318>)
 80018c4:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_UART_MspInit+0x31c>)
 80018c6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80018c8:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_UART_MspInit+0x318>)
 80018ca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80018ce:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_UART_MspInit+0x318>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_UART_MspInit+0x318>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_UART_MspInit+0x318>)
 80018de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_UART_MspInit+0x318>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x318>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_UART_MspInit+0x318>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x318>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_UART_MspInit+0x318>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001902:	4812      	ldr	r0, [pc, #72]	; (800194c <HAL_UART_MspInit+0x318>)
 8001904:	f000 fefc 	bl	8002700 <HAL_DMA_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_UART_MspInit+0x2de>
      Error_Handler();
 800190e:	f7ff fdab 	bl	8001468 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_UART_MspInit+0x318>)
 8001916:	639a      	str	r2, [r3, #56]	; 0x38
 8001918:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_UART_MspInit+0x318>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2105      	movs	r1, #5
 8001922:	2047      	movs	r0, #71	; 0x47
 8001924:	f000 fec2 	bl	80026ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001928:	2047      	movs	r0, #71	; 0x47
 800192a:	f000 fedb 	bl	80026e4 <HAL_NVIC_EnableIRQ>
}
 800192e:	bf00      	nop
 8001930:	3738      	adds	r7, #56	; 0x38
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40011400 	.word	0x40011400
 800193c:	40023800 	.word	0x40023800
 8001940:	40021800 	.word	0x40021800
 8001944:	20009830 	.word	0x20009830
 8001948:	400264a0 	.word	0x400264a0
 800194c:	2000811c 	.word	0x2000811c
 8001950:	40026428 	.word	0x40026428

08001954 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	2019      	movs	r0, #25
 800196a:	f000 fe9f 	bl	80026ac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800196e:	2019      	movs	r0, #25
 8001970:	f000 feb8 	bl	80026e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_InitTick+0xa4>)
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <HAL_InitTick+0xa4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6453      	str	r3, [r2, #68]	; 0x44
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_InitTick+0xa4>)
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001990:	f107 0210 	add.w	r2, r7, #16
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f002 f934 	bl	8003c08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80019a0:	f002 f91e 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 80019a4:	4603      	mov	r3, r0
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_InitTick+0xa8>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0c9b      	lsrs	r3, r3, #18
 80019b4:	3b01      	subs	r3, #1
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_InitTick+0xac>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_InitTick+0xb0>)
 80019bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_InitTick+0xac>)
 80019c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019c6:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_InitTick+0xac>)
 80019c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_InitTick+0xac>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_InitTick+0xac>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019d8:	4809      	ldr	r0, [pc, #36]	; (8001a00 <HAL_InitTick+0xac>)
 80019da:	f003 facf 	bl	8004f7c <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d104      	bne.n	80019ee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019e4:	4806      	ldr	r0, [pc, #24]	; (8001a00 <HAL_InitTick+0xac>)
 80019e6:	f003 fb23 	bl	8005030 <HAL_TIM_Base_Start_IT>
 80019ea:	4603      	mov	r3, r0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	431bde83 	.word	0x431bde83
 8001a00:	20009cd8 	.word	0x20009cd8
 8001a04:	40010000 	.word	0x40010000

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <DMA1_Stream1_IRQHandler+0x10>)
 8001a3a:	f000 fff9 	bl	8002a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200081d8 	.word	0x200081d8

08001a48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <DMA1_Stream3_IRQHandler+0x10>)
 8001a4e:	f000 ffef 	bl	8002a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200096a8 	.word	0x200096a8

08001a5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a62:	f003 fb55 	bl	8005110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20009cd8 	.word	0x20009cd8

08001a70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <USART3_IRQHandler+0x10>)
 8001a76:	f003 ff5f 	bl	8005938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20008238 	.word	0x20008238

08001a84 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <DMA2_Stream1_IRQHandler+0x10>)
 8001a8a:	f000 ffd1 	bl	8002a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000811c 	.word	0x2000811c

08001a98 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA2_Stream6_IRQHandler+0x10>)
 8001a9e:	f000 ffc7 	bl	8002a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20009830 	.word	0x20009830

08001aac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <USART6_IRQHandler+0x10>)
 8001ab2:	f003 ff41 	bl	8005938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20009c70 	.word	0x20009c70

08001ac0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	e00a      	b.n	8001ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ad2:	f3af 8000 	nop.w
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	b2ca      	uxtb	r2, r1
 8001ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbf0      	blt.n	8001ad2 <_read+0x12>
	}

return len;
 8001af0:	687b      	ldr	r3, [r7, #4]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e009      	b.n	8001b20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	60ba      	str	r2, [r7, #8]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbf1      	blt.n	8001b0c <_write+0x12>
	}
	return len;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_close>:

int _close(int file)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
	return -1;
 8001b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_isatty>:

int _isatty(int file)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	return 1;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <_sbrk+0x5c>)
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <_sbrk+0x60>)
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <_sbrk+0x64>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <_sbrk+0x68>)
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d207      	bcs.n	8001bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bcc:	f017 fc2c 	bl	8019428 <__errno>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	e009      	b.n	8001bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <_sbrk+0x64>)
 8001bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bee:	68fb      	ldr	r3, [r7, #12]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20020000 	.word	0x20020000
 8001bfc:	00000400 	.word	0x00000400
 8001c00:	20000860 	.word	0x20000860
 8001c04:	2000a240 	.word	0x2000a240

08001c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c48:	4c0b      	ldr	r4, [pc, #44]	; (8001c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c56:	f7ff ffd7 	bl	8001c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f017 fce1 	bl	8019620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7fe fd6d 	bl	800073c <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001c70:	0801ada0 	.word	0x0801ada0
  ldr r2, =_sbss
 8001c74:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001c78:	2000a23c 	.word	0x2000a23c

08001c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_Init+0x40>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_Init+0x40>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_Init+0x40>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 fcf4 	bl	8002696 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	200f      	movs	r0, #15
 8001cb0:	f7ff fe50 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff fbdc 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20009d20 	.word	0x20009d20

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20009d20 	.word	0x20009d20

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008

08001d4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e033      	b.n	8001dca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fbac 	bl	80014c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d92:	f023 0302 	bic.w	r3, r3, #2
 8001d96:	f043 0202 	orr.w	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f93a 	bl	8002018 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dba:	e001      	b.n	8001dc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x1c>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e105      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x228>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b09      	cmp	r3, #9
 8001dfe:	d925      	bls.n	8001e4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68d9      	ldr	r1, [r3, #12]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	3b1e      	subs	r3, #30
 8001e16:	2207      	movs	r2, #7
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	400a      	ands	r2, r1
 8001e24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	4603      	mov	r3, r0
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4403      	add	r3, r0
 8001e3e:	3b1e      	subs	r3, #30
 8001e40:	409a      	lsls	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	e022      	b.n	8001e92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6919      	ldr	r1, [r3, #16]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	2207      	movs	r2, #7
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6919      	ldr	r1, [r3, #16]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	4603      	mov	r3, r0
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4403      	add	r3, r0
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d824      	bhi.n	8001ee4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b05      	subs	r3, #5
 8001eac:	221f      	movs	r2, #31
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	400a      	ands	r2, r1
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3b05      	subs	r3, #5
 8001ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee2:	e04c      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b0c      	cmp	r3, #12
 8001eea:	d824      	bhi.n	8001f36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b23      	subs	r3, #35	; 0x23
 8001efe:	221f      	movs	r2, #31
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43da      	mvns	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b23      	subs	r3, #35	; 0x23
 8001f28:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
 8001f34:	e023      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	3b41      	subs	r3, #65	; 0x41
 8001f48:	221f      	movs	r2, #31
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	400a      	ands	r2, r1
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	3b41      	subs	r3, #65	; 0x41
 8001f72:	fa00 f203 	lsl.w	r2, r0, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_ADC_ConfigChannel+0x234>)
 8001f80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a21      	ldr	r2, [pc, #132]	; (800200c <HAL_ADC_ConfigChannel+0x238>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d109      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1cc>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b12      	cmp	r3, #18
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	; (800200c <HAL_ADC_ConfigChannel+0x238>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d123      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x21e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d003      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x1e6>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b11      	cmp	r3, #17
 8001fb8:	d11b      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d111      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_ADC_ConfigChannel+0x23c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a10      	ldr	r2, [pc, #64]	; (8002014 <HAL_ADC_ConfigChannel+0x240>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	0c9a      	lsrs	r2, r3, #18
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fe4:	e002      	b.n	8001fec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f9      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40012300 	.word	0x40012300
 800200c:	40012000 	.word	0x40012000
 8002010:	20000000 	.word	0x20000000
 8002014:	431bde83 	.word	0x431bde83

08002018 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002020:	4b79      	ldr	r3, [pc, #484]	; (8002208 <ADC_Init+0x1f0>)
 8002022:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	431a      	orrs	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800204c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	021a      	lsls	r2, r3, #8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002070:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002092:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6899      	ldr	r1, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	4a58      	ldr	r2, [pc, #352]	; (800220c <ADC_Init+0x1f4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d022      	beq.n	80020f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6899      	ldr	r1, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6899      	ldr	r1, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	e00f      	b.n	8002116 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002104:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002114:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0202 	bic.w	r2, r2, #2
 8002124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6899      	ldr	r1, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7e1b      	ldrb	r3, [r3, #24]
 8002130:	005a      	lsls	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01b      	beq.n	800217c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002152:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002162:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6859      	ldr	r1, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	3b01      	subs	r3, #1
 8002170:	035a      	lsls	r2, r3, #13
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	e007      	b.n	800218c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	051a      	lsls	r2, r3, #20
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6899      	ldr	r1, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ce:	025a      	lsls	r2, r3, #9
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6899      	ldr	r1, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	029a      	lsls	r2, r3, #10
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	40012300 	.word	0x40012300
 800220c:	0f000001 	.word	0x0f000001

08002210 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002224:	2302      	movs	r3, #2
 8002226:	e17d      	b.n	8002524 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b09      	cmp	r3, #9
 8002236:	d925      	bls.n	8002284 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68d9      	ldr	r1, [r3, #12]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	3b1e      	subs	r3, #30
 800224e:	2207      	movs	r2, #7
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43da      	mvns	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	400a      	ands	r2, r1
 800225c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68d9      	ldr	r1, [r3, #12]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	4618      	mov	r0, r3
 8002270:	4603      	mov	r3, r0
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4403      	add	r3, r0
 8002276:	3b1e      	subs	r3, #30
 8002278:	409a      	lsls	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	e022      	b.n	80022ca <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6919      	ldr	r1, [r3, #16]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	2207      	movs	r2, #7
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	400a      	ands	r2, r1
 80022a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6919      	ldr	r1, [r3, #16]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4618      	mov	r0, r3
 80022ba:	4603      	mov	r3, r0
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4403      	add	r3, r0
 80022c0:	409a      	lsls	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	051a      	lsls	r2, r3, #20
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	3303      	adds	r3, #3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	221f      	movs	r2, #31
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43da      	mvns	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	400a      	ands	r2, r1
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	4618      	mov	r0, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3303      	adds	r3, #3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a74      	ldr	r2, [pc, #464]	; (8002530 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d022      	beq.n	80023a8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6899      	ldr	r1, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002392:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6899      	ldr	r1, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	e00f      	b.n	80023c8 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80023b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80023c6:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	7d5b      	ldrb	r3, [r3, #21]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	e007      	b.n	80023f2 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f0:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	7d1b      	ldrb	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	e007      	b.n	800241c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800241a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d02e      	beq.n	8002482 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002424:	2b03      	cmp	r3, #3
 8002426:	d840      	bhi.n	80024aa <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002428:	2b01      	cmp	r3, #1
 800242a:	d002      	beq.n	8002432 <HAL_ADCEx_InjectedConfigChannel+0x222>
 800242c:	2b02      	cmp	r3, #2
 800242e:	d014      	beq.n	800245a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002430:	e03b      	b.n	80024aa <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002440:	f023 030f 	bic.w	r3, r3, #15
 8002444:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6959      	ldr	r1, [r3, #20]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	615a      	str	r2, [r3, #20]
      break;
 8002458:	e03b      	b.n	80024d2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002468:	f023 030f 	bic.w	r3, r3, #15
 800246c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6999      	ldr	r1, [r3, #24]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	619a      	str	r2, [r3, #24]
      break;
 8002480:	e027      	b.n	80024d2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002490:	f023 030f 	bic.w	r3, r3, #15
 8002494:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69d9      	ldr	r1, [r3, #28]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	61da      	str	r2, [r3, #28]
      break;
 80024a8:	e013      	b.n	80024d2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80024b8:	f023 030f 	bic.w	r3, r3, #15
 80024bc:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a19      	ldr	r1, [r3, #32]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	621a      	str	r2, [r3, #32]
      break;
 80024d0:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024d2:	4b18      	ldr	r3, [pc, #96]	; (8002534 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80024d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a17      	ldr	r2, [pc, #92]	; (8002538 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d109      	bne.n	80024f4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b12      	cmp	r3, #18
 80024e6:	d105      	bne.n	80024f4 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10d      	bne.n	800251a <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d003      	beq.n	800250e <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b11      	cmp	r3, #17
 800250c:	d105      	bne.n	800251a <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	000f0001 	.word	0x000f0001
 8002534:	40012300 	.word	0x40012300
 8002538:	40012000 	.word	0x40012000

0800253c <__NVIC_SetPriorityGrouping>:
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <__NVIC_EnableIRQ+0x38>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000e100 	.word	0xe000e100

080025dc <__NVIC_SetPriority>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	; (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	; 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff4c 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026be:	f7ff ff61 	bl	8002584 <__NVIC_GetPriorityGrouping>
 80026c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	6978      	ldr	r0, [r7, #20]
 80026ca:	f7ff ffb1 	bl	8002630 <NVIC_EncodePriority>
 80026ce:	4602      	mov	r2, r0
 80026d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff80 	bl	80025dc <__NVIC_SetPriority>
}
 80026dc:	bf00      	nop
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff54 	bl	80025a0 <__NVIC_EnableIRQ>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff faee 	bl	8001cec <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e099      	b.n	8002850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273c:	e00f      	b.n	800275e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273e:	f7ff fad5 	bl	8001cec <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b05      	cmp	r3, #5
 800274a:	d908      	bls.n	800275e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2203      	movs	r2, #3
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e078      	b.n	8002850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e8      	bne.n	800273e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4b38      	ldr	r3, [pc, #224]	; (8002858 <HAL_DMA_Init+0x158>)
 8002778:	4013      	ands	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d107      	bne.n	80027c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	4313      	orrs	r3, r2
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0307 	bic.w	r3, r3, #7
 80027de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d117      	bne.n	8002822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fb01 	bl	8002e0c <DMA_CheckFifoParam>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2240      	movs	r2, #64	; 0x40
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800281e:	2301      	movs	r3, #1
 8002820:	e016      	b.n	8002850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fab8 	bl	8002da0 <DMA_CalcBaseAndBitshift>
 8002830:	4603      	mov	r3, r0
 8002832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	223f      	movs	r2, #63	; 0x3f
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	f010803f 	.word	0xf010803f

0800285c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_DMA_Start_IT+0x26>
 800287e:	2302      	movs	r3, #2
 8002880:	e040      	b.n	8002904 <HAL_DMA_Start_IT+0xa8>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d12f      	bne.n	80028f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fa4a 	bl	8002d44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b4:	223f      	movs	r2, #63	; 0x3f
 80028b6:	409a      	lsls	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0216 	orr.w	r2, r2, #22
 80028ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0208 	orr.w	r2, r2, #8
 80028e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e005      	b.n	8002902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
 8002900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002902:	7dfb      	ldrb	r3, [r7, #23]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800291a:	f7ff f9e7 	bl	8001cec <HAL_GetTick>
 800291e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d008      	beq.n	800293e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2280      	movs	r2, #128	; 0x80
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e052      	b.n	80029e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0216 	bic.w	r2, r2, #22
 800294c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <HAL_DMA_Abort+0x62>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0208 	bic.w	r2, r2, #8
 800297c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298e:	e013      	b.n	80029b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002990:	f7ff f9ac 	bl	8001cec <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b05      	cmp	r3, #5
 800299c:	d90c      	bls.n	80029b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2203      	movs	r2, #3
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e015      	b.n	80029e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e4      	bne.n	8002990 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	223f      	movs	r2, #63	; 0x3f
 80029cc:	409a      	lsls	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d004      	beq.n	8002a0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00c      	b.n	8002a24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2205      	movs	r2, #5
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a3c:	4b92      	ldr	r3, [pc, #584]	; (8002c88 <HAL_DMA_IRQHandler+0x258>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a92      	ldr	r2, [pc, #584]	; (8002c8c <HAL_DMA_IRQHandler+0x25c>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	0a9b      	lsrs	r3, r3, #10
 8002a48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01a      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d013      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0204 	bic.w	r2, r2, #4
 8002a82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	2208      	movs	r2, #8
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f043 0201 	orr.w	r2, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d012      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	2201      	movs	r2, #1
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d012      	beq.n	8002b08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	2204      	movs	r2, #4
 8002af6:	409a      	lsls	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	f043 0204 	orr.w	r2, r3, #4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d043      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d03c      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	2210      	movs	r2, #16
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d018      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d108      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d024      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
 8002b5e:	e01f      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01b      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
 8002b70:	e016      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0208 	bic.w	r2, r2, #8
 8002b8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 808e 	beq.w	8002cce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8086 	beq.w	8002cce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d136      	bne.n	8002c48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0216 	bic.w	r2, r2, #22
 8002be8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <HAL_DMA_IRQHandler+0x1da>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0208 	bic.w	r2, r2, #8
 8002c18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1e:	223f      	movs	r2, #63	; 0x3f
 8002c20:	409a      	lsls	r2, r3
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d07d      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
        }
        return;
 8002c46:	e078      	b.n	8002d3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01c      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d108      	bne.n	8002c76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d030      	beq.n	8002cce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
 8002c74:	e02b      	b.n	8002cce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d027      	beq.n	8002cce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
 8002c86:	e022      	b.n	8002cce <HAL_DMA_IRQHandler+0x29e>
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0210 	bic.w	r2, r2, #16
 8002cac:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d032      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d022      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d307      	bcc.n	8002d16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f2      	bne.n	8002cfa <HAL_DMA_IRQHandler+0x2ca>
 8002d14:	e000      	b.n	8002d18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d16:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4798      	blx	r3
 8002d38:	e000      	b.n	8002d3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d3a:	bf00      	nop
    }
  }
}
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop

08002d44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d108      	bne.n	8002d84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d82:	e007      	b.n	8002d94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	3b10      	subs	r3, #16
 8002db0:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <DMA_CalcBaseAndBitshift+0x64>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dba:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <DMA_CalcBaseAndBitshift+0x68>)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d909      	bls.n	8002de2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	1d1a      	adds	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	659a      	str	r2, [r3, #88]	; 0x58
 8002de0:	e007      	b.n	8002df2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	aaaaaaab 	.word	0xaaaaaaab
 8002e08:	0801aaf0 	.word	0x0801aaf0

08002e0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11f      	bne.n	8002e66 <DMA_CheckFifoParam+0x5a>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d856      	bhi.n	8002eda <DMA_CheckFifoParam+0xce>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <DMA_CheckFifoParam+0x28>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e45 	.word	0x08002e45
 8002e38:	08002e57 	.word	0x08002e57
 8002e3c:	08002e45 	.word	0x08002e45
 8002e40:	08002edb 	.word	0x08002edb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d046      	beq.n	8002ede <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e54:	e043      	b.n	8002ede <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e5e:	d140      	bne.n	8002ee2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e64:	e03d      	b.n	8002ee2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6e:	d121      	bne.n	8002eb4 <DMA_CheckFifoParam+0xa8>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d837      	bhi.n	8002ee6 <DMA_CheckFifoParam+0xda>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <DMA_CheckFifoParam+0x70>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e93 	.word	0x08002e93
 8002e84:	08002e8d 	.word	0x08002e8d
 8002e88:	08002ea5 	.word	0x08002ea5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e90:	e030      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d025      	beq.n	8002eea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea2:	e022      	b.n	8002eea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eac:	d11f      	bne.n	8002eee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eb2:	e01c      	b.n	8002eee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d903      	bls.n	8002ec2 <DMA_CheckFifoParam+0xb6>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d003      	beq.n	8002ec8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ec0:	e018      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec6:	e015      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00e      	beq.n	8002ef2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed8:	e00b      	b.n	8002ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8002eda:	bf00      	nop
 8002edc:	e00a      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e008      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e006      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e004      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002eea:	bf00      	nop
 8002eec:	e002      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ef2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop

08002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	e16b      	b.n	80031f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f20:	2201      	movs	r2, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f040 815a 	bne.w	80031f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d005      	beq.n	8002f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d130      	bne.n	8002fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0201 	and.w	r2, r3, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d017      	beq.n	8002ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d123      	bne.n	8003048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	220f      	movs	r2, #15
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	08da      	lsrs	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3208      	adds	r2, #8
 8003042:	69b9      	ldr	r1, [r7, #24]
 8003044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	2203      	movs	r2, #3
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80b4 	beq.w	80031f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b60      	ldr	r3, [pc, #384]	; (8003210 <HAL_GPIO_Init+0x30c>)
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	4a5f      	ldr	r2, [pc, #380]	; (8003210 <HAL_GPIO_Init+0x30c>)
 8003094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003098:	6453      	str	r3, [r2, #68]	; 0x44
 800309a:	4b5d      	ldr	r3, [pc, #372]	; (8003210 <HAL_GPIO_Init+0x30c>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a6:	4a5b      	ldr	r2, [pc, #364]	; (8003214 <HAL_GPIO_Init+0x310>)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	220f      	movs	r2, #15
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_GPIO_Init+0x314>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02b      	beq.n	800312a <HAL_GPIO_Init+0x226>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a51      	ldr	r2, [pc, #324]	; (800321c <HAL_GPIO_Init+0x318>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d025      	beq.n	8003126 <HAL_GPIO_Init+0x222>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a50      	ldr	r2, [pc, #320]	; (8003220 <HAL_GPIO_Init+0x31c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01f      	beq.n	8003122 <HAL_GPIO_Init+0x21e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <HAL_GPIO_Init+0x320>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d019      	beq.n	800311e <HAL_GPIO_Init+0x21a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_GPIO_Init+0x324>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0x216>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4d      	ldr	r2, [pc, #308]	; (800322c <HAL_GPIO_Init+0x328>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00d      	beq.n	8003116 <HAL_GPIO_Init+0x212>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <HAL_GPIO_Init+0x32c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x20e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4b      	ldr	r2, [pc, #300]	; (8003234 <HAL_GPIO_Init+0x330>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_GPIO_Init+0x20a>
 800310a:	2307      	movs	r3, #7
 800310c:	e00e      	b.n	800312c <HAL_GPIO_Init+0x228>
 800310e:	2308      	movs	r3, #8
 8003110:	e00c      	b.n	800312c <HAL_GPIO_Init+0x228>
 8003112:	2306      	movs	r3, #6
 8003114:	e00a      	b.n	800312c <HAL_GPIO_Init+0x228>
 8003116:	2305      	movs	r3, #5
 8003118:	e008      	b.n	800312c <HAL_GPIO_Init+0x228>
 800311a:	2304      	movs	r3, #4
 800311c:	e006      	b.n	800312c <HAL_GPIO_Init+0x228>
 800311e:	2303      	movs	r3, #3
 8003120:	e004      	b.n	800312c <HAL_GPIO_Init+0x228>
 8003122:	2302      	movs	r3, #2
 8003124:	e002      	b.n	800312c <HAL_GPIO_Init+0x228>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <HAL_GPIO_Init+0x228>
 800312a:	2300      	movs	r3, #0
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	f002 0203 	and.w	r2, r2, #3
 8003132:	0092      	lsls	r2, r2, #2
 8003134:	4093      	lsls	r3, r2
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800313c:	4935      	ldr	r1, [pc, #212]	; (8003214 <HAL_GPIO_Init+0x310>)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	089b      	lsrs	r3, r3, #2
 8003142:	3302      	adds	r3, #2
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800314a:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_GPIO_Init+0x334>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800316e:	4a32      	ldr	r2, [pc, #200]	; (8003238 <HAL_GPIO_Init+0x334>)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003174:	4b30      	ldr	r3, [pc, #192]	; (8003238 <HAL_GPIO_Init+0x334>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003198:	4a27      	ldr	r2, [pc, #156]	; (8003238 <HAL_GPIO_Init+0x334>)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_GPIO_Init+0x334>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c2:	4a1d      	ldr	r2, [pc, #116]	; (8003238 <HAL_GPIO_Init+0x334>)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_GPIO_Init+0x334>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	43db      	mvns	r3, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ec:	4a12      	ldr	r2, [pc, #72]	; (8003238 <HAL_GPIO_Init+0x334>)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3301      	adds	r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	f67f ae90 	bls.w	8002f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40023800 	.word	0x40023800
 8003214:	40013800 	.word	0x40013800
 8003218:	40020000 	.word	0x40020000
 800321c:	40020400 	.word	0x40020400
 8003220:	40020800 	.word	0x40020800
 8003224:	40020c00 	.word	0x40020c00
 8003228:	40021000 	.word	0x40021000
 800322c:	40021400 	.word	0x40021400
 8003230:	40021800 	.word	0x40021800
 8003234:	40021c00 	.word	0x40021c00
 8003238:	40013c00 	.word	0x40013c00

0800323c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	e001      	b.n	800325e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800325a:	2300      	movs	r3, #0
 800325c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
 8003278:	4613      	mov	r3, r2
 800327a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800327c:	787b      	ldrb	r3, [r7, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003288:	e003      	b.n	8003292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	041a      	lsls	r2, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	619a      	str	r2, [r3, #24]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800329e:	b480      	push	{r7}
 80032a0:	b085      	sub	sp, #20
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032b0:	887a      	ldrh	r2, [r7, #2]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4013      	ands	r3, r2
 80032b6:	041a      	lsls	r2, r3, #16
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	43d9      	mvns	r1, r3
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	400b      	ands	r3, r1
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	619a      	str	r2, [r3, #24]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e034      	b.n	800334e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80032ec:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f245 5255 	movw	r2, #21845	; 0x5555
 80032f6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6852      	ldr	r2, [r2, #4]
 8003300:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800330c:	f7fe fcee 	bl	8001cec <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003312:	e00f      	b.n	8003334 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003314:	f7fe fcea 	bl	8001cec <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b31      	cmp	r3, #49	; 0x31
 8003320:	d908      	bls.n	8003334 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e00c      	b.n	800334e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e8      	bne.n	8003314 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800334a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003366:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e264      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d075      	beq.n	8003482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003396:	4ba3      	ldr	r3, [pc, #652]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d00c      	beq.n	80033bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a2:	4ba0      	ldr	r3, [pc, #640]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d112      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ae:	4b9d      	ldr	r3, [pc, #628]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	4b99      	ldr	r3, [pc, #612]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05b      	beq.n	8003480 <HAL_RCC_OscConfig+0x108>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d157      	bne.n	8003480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e23f      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d106      	bne.n	80033ec <HAL_RCC_OscConfig+0x74>
 80033de:	4b91      	ldr	r3, [pc, #580]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a90      	ldr	r2, [pc, #576]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x98>
 80033f6:	4b8b      	ldr	r3, [pc, #556]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a8a      	ldr	r2, [pc, #552]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a87      	ldr	r2, [pc, #540]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 8003410:	4b84      	ldr	r3, [pc, #528]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a83      	ldr	r2, [pc, #524]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b81      	ldr	r3, [pc, #516]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a80      	ldr	r2, [pc, #512]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fc5c 	bl	8001cec <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe fc58 	bl	8001cec <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e204      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b76      	ldr	r3, [pc, #472]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xc0>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fc48 	bl	8001cec <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003460:	f7fe fc44 	bl	8001cec <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1f0      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b6c      	ldr	r3, [pc, #432]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0xe8>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348e:	4b65      	ldr	r3, [pc, #404]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349a:	4b62      	ldr	r3, [pc, #392]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a6:	4b5f      	ldr	r3, [pc, #380]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1c4      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b56      	ldr	r3, [pc, #344]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4952      	ldr	r1, [pc, #328]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <HAL_RCC_OscConfig+0x2b0>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fe fbfd 	bl	8001cec <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fe fbf9 	bl	8001cec <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e1a5      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b46      	ldr	r3, [pc, #280]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4940      	ldr	r1, [pc, #256]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b3f      	ldr	r3, [pc, #252]	; (8003628 <HAL_RCC_OscConfig+0x2b0>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe fbdc 	bl	8001cec <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003538:	f7fe fbd8 	bl	8001cec <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e184      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b36      	ldr	r3, [pc, #216]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d030      	beq.n	80035c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b30      	ldr	r3, [pc, #192]	; (800362c <HAL_RCC_OscConfig+0x2b4>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fe fbbc 	bl	8001cec <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003578:	f7fe fbb8 	bl	8001cec <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e164      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b26      	ldr	r3, [pc, #152]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x200>
 8003596:	e015      	b.n	80035c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003598:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCC_OscConfig+0x2b4>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7fe fba5 	bl	8001cec <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a6:	f7fe fba1 	bl	8001cec <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e14d      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f0      	bne.n	80035a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a0 	beq.w	8003712 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a0e      	ldr	r2, [pc, #56]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fe:	2301      	movs	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_OscConfig+0x2b8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d121      	bne.n	8003652 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HAL_RCC_OscConfig+0x2b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a07      	ldr	r2, [pc, #28]	; (8003630 <HAL_RCC_OscConfig+0x2b8>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361a:	f7fe fb67 	bl	8001cec <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	e011      	b.n	8003646 <HAL_RCC_OscConfig+0x2ce>
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	42470000 	.word	0x42470000
 800362c:	42470e80 	.word	0x42470e80
 8003630:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003634:	f7fe fb5a 	bl	8001cec <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e106      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003646:	4b85      	ldr	r3, [pc, #532]	; (800385c <HAL_RCC_OscConfig+0x4e4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d106      	bne.n	8003668 <HAL_RCC_OscConfig+0x2f0>
 800365a:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a80      	ldr	r2, [pc, #512]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
 8003666:	e01c      	b.n	80036a2 <HAL_RCC_OscConfig+0x32a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d10c      	bne.n	800368a <HAL_RCC_OscConfig+0x312>
 8003670:	4b7b      	ldr	r3, [pc, #492]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	4a7a      	ldr	r2, [pc, #488]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 8003676:	f043 0304 	orr.w	r3, r3, #4
 800367a:	6713      	str	r3, [r2, #112]	; 0x70
 800367c:	4b78      	ldr	r3, [pc, #480]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a77      	ldr	r2, [pc, #476]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
 8003688:	e00b      	b.n	80036a2 <HAL_RCC_OscConfig+0x32a>
 800368a:	4b75      	ldr	r3, [pc, #468]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a74      	ldr	r2, [pc, #464]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a71      	ldr	r2, [pc, #452]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fe fb1f 	bl	8001cec <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fb1b 	bl	8001cec <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0c5      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	4b65      	ldr	r3, [pc, #404]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ee      	beq.n	80036b2 <HAL_RCC_OscConfig+0x33a>
 80036d4:	e014      	b.n	8003700 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7fe fb09 	bl	8001cec <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fe fb05 	bl	8001cec <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e0af      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ee      	bne.n	80036de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d105      	bne.n	8003712 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003706:	4b56      	ldr	r3, [pc, #344]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	4a55      	ldr	r2, [pc, #340]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 800370c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003710:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 809b 	beq.w	8003852 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b08      	cmp	r3, #8
 8003726:	d05c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d141      	bne.n	80037b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003730:	4b4c      	ldr	r3, [pc, #304]	; (8003864 <HAL_RCC_OscConfig+0x4ec>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe fad9 	bl	8001cec <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373e:	f7fe fad5 	bl	8001cec <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e081      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003750:	4b43      	ldr	r3, [pc, #268]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f0      	bne.n	800373e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69da      	ldr	r2, [r3, #28]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	019b      	lsls	r3, r3, #6
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	3b01      	subs	r3, #1
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	061b      	lsls	r3, r3, #24
 8003780:	4937      	ldr	r1, [pc, #220]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 8003782:	4313      	orrs	r3, r2
 8003784:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003786:	4b37      	ldr	r3, [pc, #220]	; (8003864 <HAL_RCC_OscConfig+0x4ec>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe faae 	bl	8001cec <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe faaa 	bl	8001cec <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e056      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a6:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x41c>
 80037b2:	e04e      	b.n	8003852 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b4:	4b2b      	ldr	r3, [pc, #172]	; (8003864 <HAL_RCC_OscConfig+0x4ec>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fe fa97 	bl	8001cec <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fe fa93 	bl	8001cec <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e03f      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d4:	4b22      	ldr	r3, [pc, #136]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x44a>
 80037e0:	e037      	b.n	8003852 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e032      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ee:	4b1c      	ldr	r3, [pc, #112]	; (8003860 <HAL_RCC_OscConfig+0x4e8>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d028      	beq.n	800384e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d121      	bne.n	800384e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d11a      	bne.n	800384e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800381e:	4013      	ands	r3, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003824:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003826:	4293      	cmp	r3, r2
 8003828:	d111      	bne.n	800384e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	3b01      	subs	r3, #1
 8003838:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d107      	bne.n	800384e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40007000 	.word	0x40007000
 8003860:	40023800 	.word	0x40023800
 8003864:	42470060 	.word	0x42470060

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0cc      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d90c      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d044      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d119      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d003      	beq.n	8003926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	2b03      	cmp	r3, #3
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e067      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4934      	ldr	r1, [pc, #208]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7fe f9c8 	bl	8001cec <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fe f9c4 	bl	8001cec <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e04f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d20c      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd ffa0 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	0801aad8 	.word	0x0801aad8
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b5b0      	push	{r4, r5, r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	6079      	str	r1, [r7, #4]
 8003a3e:	2100      	movs	r1, #0
 8003a40:	60f9      	str	r1, [r7, #12]
 8003a42:	2100      	movs	r1, #0
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a46:	2100      	movs	r1, #0
 8003a48:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4a:	4952      	ldr	r1, [pc, #328]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a4c:	6889      	ldr	r1, [r1, #8]
 8003a4e:	f001 010c 	and.w	r1, r1, #12
 8003a52:	2908      	cmp	r1, #8
 8003a54:	d00d      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x3e>
 8003a56:	2908      	cmp	r1, #8
 8003a58:	f200 8094 	bhi.w	8003b84 <HAL_RCC_GetSysClockFreq+0x150>
 8003a5c:	2900      	cmp	r1, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x32>
 8003a60:	2904      	cmp	r1, #4
 8003a62:	d003      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x38>
 8003a64:	e08e      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a66:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a68:	60bb      	str	r3, [r7, #8]
       break;
 8003a6a:	e08e      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x168>)
 8003a6e:	60bb      	str	r3, [r7, #8]
      break;
 8003a70:	e08b      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a72:	4948      	ldr	r1, [pc, #288]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a74:	6849      	ldr	r1, [r1, #4]
 8003a76:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a7a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7c:	4945      	ldr	r1, [pc, #276]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a7e:	6849      	ldr	r1, [r1, #4]
 8003a80:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a84:	2900      	cmp	r1, #0
 8003a86:	d024      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a88:	4942      	ldr	r1, [pc, #264]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a8a:	6849      	ldr	r1, [r1, #4]
 8003a8c:	0989      	lsrs	r1, r1, #6
 8003a8e:	4608      	mov	r0, r1
 8003a90:	f04f 0100 	mov.w	r1, #0
 8003a94:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a98:	f04f 0500 	mov.w	r5, #0
 8003a9c:	ea00 0204 	and.w	r2, r0, r4
 8003aa0:	ea01 0305 	and.w	r3, r1, r5
 8003aa4:	493d      	ldr	r1, [pc, #244]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x168>)
 8003aa6:	fb01 f003 	mul.w	r0, r1, r3
 8003aaa:	2100      	movs	r1, #0
 8003aac:	fb01 f102 	mul.w	r1, r1, r2
 8003ab0:	1844      	adds	r4, r0, r1
 8003ab2:	493a      	ldr	r1, [pc, #232]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x168>)
 8003ab4:	fba2 0101 	umull	r0, r1, r2, r1
 8003ab8:	1863      	adds	r3, r4, r1
 8003aba:	4619      	mov	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	f7fc fbdc 	bl	8000280 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e04a      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad2:	4b30      	ldr	r3, [pc, #192]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	099b      	lsrs	r3, r3, #6
 8003ad8:	461a      	mov	r2, r3
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	ea02 0400 	and.w	r4, r2, r0
 8003aea:	ea03 0501 	and.w	r5, r3, r1
 8003aee:	4620      	mov	r0, r4
 8003af0:	4629      	mov	r1, r5
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	014b      	lsls	r3, r1, #5
 8003afc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b00:	0142      	lsls	r2, r0, #5
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	1b00      	subs	r0, r0, r4
 8003b08:	eb61 0105 	sbc.w	r1, r1, r5
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	018b      	lsls	r3, r1, #6
 8003b16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b1a:	0182      	lsls	r2, r0, #6
 8003b1c:	1a12      	subs	r2, r2, r0
 8003b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f04f 0100 	mov.w	r1, #0
 8003b2a:	00d9      	lsls	r1, r3, #3
 8003b2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b30:	00d0      	lsls	r0, r2, #3
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	1912      	adds	r2, r2, r4
 8003b38:	eb45 0303 	adc.w	r3, r5, r3
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	0299      	lsls	r1, r3, #10
 8003b46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b4a:	0290      	lsls	r0, r2, #10
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	f7fc fb90 	bl	8000280 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b68:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	3301      	adds	r3, #1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	60bb      	str	r3, [r7, #8]
      break;
 8003b82:	e002      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b86:	60bb      	str	r3, [r7, #8]
      break;
 8003b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bdb0      	pop	{r4, r5, r7, pc}
 8003b94:	40023800 	.word	0x40023800
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	017d7840 	.word	0x017d7840

08003ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000000 	.word	0x20000000

08003bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bbc:	f7ff fff0 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	0a9b      	lsrs	r3, r3, #10
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4903      	ldr	r1, [pc, #12]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	0801aae8 	.word	0x0801aae8

08003be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003be4:	f7ff ffdc 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0b5b      	lsrs	r3, r3, #13
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	0801aae8 	.word	0x0801aae8

08003c08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	220f      	movs	r2, #15
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0203 	and.w	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_RCC_GetClockConfig+0x60>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0207 	and.w	r2, r3, #7
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40023c00 	.word	0x40023c00

08003c6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d035      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c94:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c9a:	f7fe f827 	bl	8001cec <HAL_GetTick>
 8003c9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ca2:	f7fe f823 	bl	8001cec <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e0b0      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb4:	4b5b      	ldr	r3, [pc, #364]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	019a      	lsls	r2, r3, #6
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	071b      	lsls	r3, r3, #28
 8003ccc:	4955      	ldr	r1, [pc, #340]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cd4:	4b52      	ldr	r3, [pc, #328]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cda:	f7fe f807 	bl	8001cec <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ce2:	f7fe f803 	bl	8001cec <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e090      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf4:	4b4b      	ldr	r3, [pc, #300]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8083 	beq.w	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	4b44      	ldr	r3, [pc, #272]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4a43      	ldr	r2, [pc, #268]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d1e:	4b41      	ldr	r3, [pc, #260]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d2a:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a3e      	ldr	r2, [pc, #248]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d36:	f7fd ffd9 	bl	8001cec <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd ffd5 	bl	8001cec <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e062      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d50:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d5c:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d02f      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d028      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7a:	4b2a      	ldr	r3, [pc, #168]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d84:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d90:	4a24      	ldr	r2, [pc, #144]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d96:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d114      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd ffa3 	bl	8001cec <HAL_GetTick>
 8003da6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003daa:	f7fd ff9f 	bl	8001cec <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e02a      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc0:	4b18      	ldr	r3, [pc, #96]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ee      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd8:	d10d      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dee:	490d      	ldr	r1, [pc, #52]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]
 8003df4:	e005      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dfc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e00:	6093      	str	r3, [r2, #8]
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0e:	4905      	ldr	r1, [pc, #20]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	42470068 	.word	0x42470068
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	42470e40 	.word	0x42470e40

08003e30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e066      	b.n	8003f14 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7f5b      	ldrb	r3, [r3, #29]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd fb7a 	bl	8001550 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	22ca      	movs	r2, #202	; 0xca
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2253      	movs	r2, #83	; 0x53
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa45 	bl	8004302 <RTC_EnterInitMode>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d12c      	bne.n	8003edc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e94:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6899      	ldr	r1, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68d2      	ldr	r2, [r2, #12]
 8003ebc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6919      	ldr	r1, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	041a      	lsls	r2, r3, #16
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa4c 	bl	8004370 <RTC_ExitInitMode>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d113      	bne.n	8003f0a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	22ff      	movs	r2, #255	; 0xff
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	7f1b      	ldrb	r3, [r3, #28]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_RTC_SetTime+0x1c>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e087      	b.n	8004048 <HAL_RTC_SetTime+0x12c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2202      	movs	r2, #2
 8003f42:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d126      	bne.n	8003f98 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fa29 	bl	80043ba <RTC_ByteToBcd2>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fa22 	bl	80043ba <RTC_ByteToBcd2>
 8003f76:	4603      	mov	r3, r0
 8003f78:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f7a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	789b      	ldrb	r3, [r3, #2]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fa1a 	bl	80043ba <RTC_ByteToBcd2>
 8003f86:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f88:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	78db      	ldrb	r3, [r3, #3]
 8003f90:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e018      	b.n	8003fca <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d102      	bne.n	8003fac <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fb8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fbe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	78db      	ldrb	r3, [r3, #3]
 8003fc4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	22ca      	movs	r2, #202	; 0xca
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2253      	movs	r2, #83	; 0x53
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f991 	bl	8004302 <RTC_EnterInitMode>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d120      	bne.n	800402c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003ff4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003ff8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004008:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6899      	ldr	r1, [r3, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	431a      	orrs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f9a4 	bl	8004370 <RTC_ExitInitMode>
 8004028:	4603      	mov	r3, r0
 800402a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800402c:	7cfb      	ldrb	r3, [r7, #19]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d102      	bne.n	8004038 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	22ff      	movs	r2, #255	; 0xff
 800403e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	771a      	strb	r2, [r3, #28]

  return status;
 8004046:	7cfb      	ldrb	r3, [r7, #19]
}
 8004048:	4618      	mov	r0, r3
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd90      	pop	{r4, r7, pc}

08004050 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004082:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004086:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004092:	b2da      	uxtb	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	0d9b      	lsrs	r3, r3, #22
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d11a      	bne.n	8004102 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 f98f 	bl	80043f4 <RTC_Bcd2ToByte>
 80040d6:	4603      	mov	r3, r0
 80040d8:	461a      	mov	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f986 	bl	80043f4 <RTC_Bcd2ToByte>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	789b      	ldrb	r3, [r3, #2]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 f97d 	bl	80043f4 <RTC_Bcd2ToByte>
 80040fa:	4603      	mov	r3, r0
 80040fc:	461a      	mov	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	7f1b      	ldrb	r3, [r3, #28]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_RTC_SetDate+0x1c>
 8004124:	2302      	movs	r3, #2
 8004126:	e071      	b.n	800420c <HAL_RTC_SetDate+0x100>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2202      	movs	r2, #2
 8004132:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10e      	bne.n	8004158 <HAL_RTC_SetDate+0x4c>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	f023 0310 	bic.w	r3, r3, #16
 800414e:	b2db      	uxtb	r3, r3
 8004150:	330a      	adds	r3, #10
 8004152:	b2da      	uxtb	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d11c      	bne.n	8004198 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	78db      	ldrb	r3, [r3, #3]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f929 	bl	80043ba <RTC_ByteToBcd2>
 8004168:	4603      	mov	r3, r0
 800416a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f922 	bl	80043ba <RTC_ByteToBcd2>
 8004176:	4603      	mov	r3, r0
 8004178:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800417a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	789b      	ldrb	r3, [r3, #2]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 f91a 	bl	80043ba <RTC_ByteToBcd2>
 8004186:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004188:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e00e      	b.n	80041b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	78db      	ldrb	r3, [r3, #3]
 800419c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	785b      	ldrb	r3, [r3, #1]
 80041a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041a4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	22ca      	movs	r2, #202	; 0xca
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2253      	movs	r2, #83	; 0x53
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f89b 	bl	8004302 <RTC_EnterInitMode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10c      	bne.n	80041f0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f8c2 	bl	8004370 <RTC_ExitInitMode>
 80041ec:	4603      	mov	r3, r0
 80041ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	22ff      	movs	r2, #255	; 0xff
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	771a      	strb	r2, [r3, #28]

  return status;
 800420a:	7cfb      	ldrb	r3, [r7, #19]
}
 800420c:	4618      	mov	r0, r3
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bd90      	pop	{r4, r7, pc}

08004214 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800422e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004232:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	b2da      	uxtb	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	0b5b      	lsrs	r3, r3, #13
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	b2da      	uxtb	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d11a      	bne.n	80042a8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	78db      	ldrb	r3, [r3, #3]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f8bc 	bl	80043f4 <RTC_Bcd2ToByte>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 f8b3 	bl	80043f4 <RTC_Bcd2ToByte>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	789b      	ldrb	r3, [r3, #2]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f8aa 	bl	80043f4 <RTC_Bcd2ToByte>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461a      	mov	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042cc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042ce:	f7fd fd0d 	bl	8001cec <HAL_GetTick>
 80042d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042d4:	e009      	b.n	80042ea <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042d6:	f7fd fd09 	bl	8001cec <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042e4:	d901      	bls.n	80042ea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e007      	b.n	80042fa <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ee      	beq.n	80042d6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d122      	bne.n	8004366 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800432e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004330:	f7fd fcdc 	bl	8001cec <HAL_GetTick>
 8004334:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004336:	e00c      	b.n	8004352 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004338:	f7fd fcd8 	bl	8001cec <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004346:	d904      	bls.n	8004352 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2204      	movs	r2, #4
 800434c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <RTC_EnterInitMode+0x64>
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d1e8      	bne.n	8004338 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800438a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ff89 	bl	80042b2 <HAL_RTC_WaitForSynchro>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2204      	movs	r2, #4
 80043aa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	4603      	mov	r3, r0
 80043c2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80043c8:	e005      	b.n	80043d6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	3301      	adds	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	3b0a      	subs	r3, #10
 80043d4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	2b09      	cmp	r3, #9
 80043da:	d8f6      	bhi.n	80043ca <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	0092      	lsls	r2, r2, #2
 800440c:	4413      	add	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	b2da      	uxtb	r2, r3
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	4413      	add	r3, r2
 800441e:	b2db      	uxtb	r3, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07b      	b.n	8004536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d108      	bne.n	8004458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444e:	d009      	beq.n	8004464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
 8004456:	e005      	b.n	8004464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd f890 	bl	80015a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	ea42 0103 	orr.w	r1, r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	f003 0104 	and.w	r1, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0210 	and.w	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b088      	sub	sp, #32
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_SPI_Transmit+0x22>
 800455c:	2302      	movs	r3, #2
 800455e:	e126      	b.n	80047ae <HAL_SPI_Transmit+0x270>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004568:	f7fd fbc0 	bl	8001cec <HAL_GetTick>
 800456c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800457e:	2302      	movs	r3, #2
 8004580:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004582:	e10b      	b.n	800479c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Transmit+0x52>
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004594:	e102      	b.n	800479c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2203      	movs	r2, #3
 800459a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045dc:	d10f      	bne.n	80045fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d007      	beq.n	800461c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800461a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004624:	d14b      	bne.n	80046be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_SPI_Transmit+0xf6>
 800462e:	8afb      	ldrh	r3, [r7, #22]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d13e      	bne.n	80046b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	881a      	ldrh	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	1c9a      	adds	r2, r3, #2
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004658:	e02b      	b.n	80046b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d112      	bne.n	800468e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	86da      	strh	r2, [r3, #54]	; 0x36
 800468c:	e011      	b.n	80046b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800468e:	f7fd fb2d 	bl	8001cec <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d803      	bhi.n	80046a6 <HAL_SPI_Transmit+0x168>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a4:	d102      	bne.n	80046ac <HAL_SPI_Transmit+0x16e>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046b0:	e074      	b.n	800479c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ce      	bne.n	800465a <HAL_SPI_Transmit+0x11c>
 80046bc:	e04c      	b.n	8004758 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_SPI_Transmit+0x18e>
 80046c6:	8afb      	ldrh	r3, [r7, #22]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d140      	bne.n	800474e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	7812      	ldrb	r2, [r2, #0]
 80046d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046f2:	e02c      	b.n	800474e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d113      	bne.n	800472a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	330c      	adds	r3, #12
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	86da      	strh	r2, [r3, #54]	; 0x36
 8004728:	e011      	b.n	800474e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472a:	f7fd fadf 	bl	8001cec <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d803      	bhi.n	8004742 <HAL_SPI_Transmit+0x204>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d102      	bne.n	8004748 <HAL_SPI_Transmit+0x20a>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800474c:	e026      	b.n	800479c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1cd      	bne.n	80046f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	6839      	ldr	r1, [r7, #0]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fbcb 	bl	8004ef8 <SPI_EndRxTxTransaction>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e000      	b.n	800479c <HAL_SPI_Transmit+0x25e>
  }

error:
 800479a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3720      	adds	r7, #32
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b088      	sub	sp, #32
 80047ba:	af02      	add	r7, sp, #8
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	4613      	mov	r3, r2
 80047c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d2:	d112      	bne.n	80047fa <HAL_SPI_Receive+0x44>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10e      	bne.n	80047fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2204      	movs	r2, #4
 80047e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	4613      	mov	r3, r2
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	68b9      	ldr	r1, [r7, #8]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f8f1 	bl	80049d8 <HAL_SPI_TransmitReceive>
 80047f6:	4603      	mov	r3, r0
 80047f8:	e0ea      	b.n	80049d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_SPI_Receive+0x52>
 8004804:	2302      	movs	r3, #2
 8004806:	e0e3      	b.n	80049d0 <HAL_SPI_Receive+0x21a>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004810:	f7fd fa6c 	bl	8001cec <HAL_GetTick>
 8004814:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d002      	beq.n	8004828 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004822:	2302      	movs	r3, #2
 8004824:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004826:	e0ca      	b.n	80049be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_SPI_Receive+0x7e>
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004838:	e0c1      	b.n	80049be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2204      	movs	r2, #4
 800483e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004880:	d10f      	bne.n	80048a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004890:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b40      	cmp	r3, #64	; 0x40
 80048ae:	d007      	beq.n	80048c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d162      	bne.n	800498e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048c8:	e02e      	b.n	8004928 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d115      	bne.n	8004904 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f103 020c 	add.w	r2, r3, #12
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004902:	e011      	b.n	8004928 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004904:	f7fd f9f2 	bl	8001cec <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d803      	bhi.n	800491c <HAL_SPI_Receive+0x166>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d102      	bne.n	8004922 <HAL_SPI_Receive+0x16c>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004926:	e04a      	b.n	80049be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1cb      	bne.n	80048ca <HAL_SPI_Receive+0x114>
 8004932:	e031      	b.n	8004998 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d113      	bne.n	800496a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	b292      	uxth	r2, r2
 800494e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	1c9a      	adds	r2, r3, #2
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004968:	e011      	b.n	800498e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800496a:	f7fd f9bf 	bl	8001cec <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d803      	bhi.n	8004982 <HAL_SPI_Receive+0x1cc>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d102      	bne.n	8004988 <HAL_SPI_Receive+0x1d2>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800498c:	e017      	b.n	80049be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1cd      	bne.n	8004934 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fa45 	bl	8004e2c <SPI_EndRxTransaction>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	75fb      	strb	r3, [r7, #23]
 80049ba:	e000      	b.n	80049be <HAL_SPI_Receive+0x208>
  }

error :
 80049bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	; 0x30
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049e6:	2301      	movs	r3, #1
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x26>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e18a      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x33c>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a06:	f7fd f971 	bl	8001cec <HAL_GetTick>
 8004a0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a1c:	887b      	ldrh	r3, [r7, #2]
 8004a1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d00f      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x70>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2e:	d107      	bne.n	8004a40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <HAL_SPI_TransmitReceive+0x68>
 8004a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d003      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
 8004a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a46:	e15b      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_SPI_TransmitReceive+0x82>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_SPI_TransmitReceive+0x82>
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a60:	e14e      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d003      	beq.n	8004a76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2205      	movs	r2, #5
 8004a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	887a      	ldrh	r2, [r7, #2]
 8004a86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	887a      	ldrh	r2, [r7, #2]
 8004a9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d007      	beq.n	8004aca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad2:	d178      	bne.n	8004bc6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_TransmitReceive+0x10a>
 8004adc:	8b7b      	ldrh	r3, [r7, #26]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d166      	bne.n	8004bb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	881a      	ldrh	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	1c9a      	adds	r2, r3, #2
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b06:	e053      	b.n	8004bb0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d11b      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x176>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <HAL_SPI_TransmitReceive+0x176>
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d113      	bne.n	8004b4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	1c9a      	adds	r2, r3, #2
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d119      	bne.n	8004b90 <HAL_SPI_TransmitReceive+0x1b8>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d014      	beq.n	8004b90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	b292      	uxth	r2, r2
 8004b72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b90:	f7fd f8ac 	bl	8001cec <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d807      	bhi.n	8004bb0 <HAL_SPI_TransmitReceive+0x1d8>
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba6:	d003      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bae:	e0a7      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1a6      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x130>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1a1      	bne.n	8004b08 <HAL_SPI_TransmitReceive+0x130>
 8004bc4:	e07c      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_SPI_TransmitReceive+0x1fc>
 8004bce:	8b7b      	ldrh	r3, [r7, #26]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d16b      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	330c      	adds	r3, #12
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bfa:	e057      	b.n	8004cac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d11c      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x26c>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d017      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x26c>
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d114      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d119      	bne.n	8004c86 <HAL_SPI_TransmitReceive+0x2ae>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d014      	beq.n	8004c86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c82:	2301      	movs	r3, #1
 8004c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c86:	f7fd f831 	bl	8001cec <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d803      	bhi.n	8004c9e <HAL_SPI_TransmitReceive+0x2c6>
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d102      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x2cc>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004caa:	e029      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1a2      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x224>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d19d      	bne.n	8004bfc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f917 	bl	8004ef8 <SPI_EndRxTxTransaction>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d006      	beq.n	8004cde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004cdc:	e010      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	e000      	b.n	8004d00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3730      	adds	r7, #48	; 0x30
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d2c:	f7fc ffde 	bl	8001cec <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	4413      	add	r3, r2
 8004d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d3c:	f7fc ffd6 	bl	8001cec <HAL_GetTick>
 8004d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d42:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	015b      	lsls	r3, r3, #5
 8004d48:	0d1b      	lsrs	r3, r3, #20
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	fb02 f303 	mul.w	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d52:	e054      	b.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d050      	beq.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d5c:	f7fc ffc6 	bl	8001cec <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d902      	bls.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d13d      	bne.n	8004dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d8a:	d111      	bne.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d94:	d004      	beq.n	8004da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9e:	d107      	bne.n	8004db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db8:	d10f      	bne.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e017      	b.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4013      	ands	r3, r2
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	bf0c      	ite	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	2300      	movne	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	461a      	mov	r2, r3
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d19b      	bne.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000000 	.word	0x20000000

08004e2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e40:	d111      	bne.n	8004e66 <SPI_EndRxTransaction+0x3a>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4a:	d004      	beq.n	8004e56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e54:	d107      	bne.n	8004e66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6e:	d12a      	bne.n	8004ec6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e78:	d012      	beq.n	8004ea0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2200      	movs	r2, #0
 8004e82:	2180      	movs	r1, #128	; 0x80
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7ff ff49 	bl	8004d1c <SPI_WaitFlagStateUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d02d      	beq.n	8004eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e026      	b.n	8004eee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f7ff ff36 	bl	8004d1c <SPI_WaitFlagStateUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01a      	beq.n	8004eec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e013      	b.n	8004eee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2101      	movs	r1, #1
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f7ff ff23 	bl	8004d1c <SPI_WaitFlagStateUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	f043 0220 	orr.w	r2, r3, #32
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e000      	b.n	8004eee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <SPI_EndRxTxTransaction+0x7c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <SPI_EndRxTxTransaction+0x80>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	0d5b      	lsrs	r3, r3, #21
 8004f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f22:	d112      	bne.n	8004f4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2180      	movs	r1, #128	; 0x80
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f7ff fef4 	bl	8004d1c <SPI_WaitFlagStateUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e00f      	b.n	8004f6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3b01      	subs	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f60:	2b80      	cmp	r3, #128	; 0x80
 8004f62:	d0f2      	beq.n	8004f4a <SPI_EndRxTxTransaction+0x52>
 8004f64:	e000      	b.n	8004f68 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f66:	bf00      	nop
  }

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000000 	.word	0x20000000
 8004f78:	165e9f81 	.word	0x165e9f81

08004f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e041      	b.n	8005012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f839 	bl	800501a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 f9d8 	bl	8005370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d001      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e04e      	b.n	80050e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005072:	d01d      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x80>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1f      	ldr	r2, [pc, #124]	; (80050f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x80>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x80>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <HAL_TIM_Base_Start_IT+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x80>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <HAL_TIM_Base_Start_IT+0xd4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x80>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a19      	ldr	r2, [pc, #100]	; (8005108 <HAL_TIM_Base_Start_IT+0xd8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0x80>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a18      	ldr	r2, [pc, #96]	; (800510c <HAL_TIM_Base_Start_IT+0xdc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d111      	bne.n	80050d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b06      	cmp	r3, #6
 80050c0:	d010      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d2:	e007      	b.n	80050e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	40010400 	.word	0x40010400
 8005108:	40014000 	.word	0x40014000
 800510c:	40001800 	.word	0x40001800

08005110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b02      	cmp	r3, #2
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0202 	mvn.w	r2, #2
 800513c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f8ee 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f8e0 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8f1 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b04      	cmp	r3, #4
 8005178:	d122      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d11b      	bne.n	80051c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0204 	mvn.w	r2, #4
 8005190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f8c4 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 80051ac:	e005      	b.n	80051ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8b6 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f8c7 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d122      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d11b      	bne.n	8005214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0208 	mvn.w	r2, #8
 80051e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2204      	movs	r2, #4
 80051ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f89a 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8005200:	e005      	b.n	800520e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f88c 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f89d 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b10      	cmp	r3, #16
 8005220:	d122      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b10      	cmp	r3, #16
 800522e:	d11b      	bne.n	8005268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f06f 0210 	mvn.w	r2, #16
 8005238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2208      	movs	r2, #8
 800523e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f870 	bl	8005334 <HAL_TIM_IC_CaptureCallback>
 8005254:	e005      	b.n	8005262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f862 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f873 	bl	8005348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0201 	mvn.w	r2, #1
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fc f8d8 	bl	8001444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b80      	cmp	r3, #128	; 0x80
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ac:	2b80      	cmp	r3, #128	; 0x80
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f902 	bl	80054c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b40      	cmp	r3, #64	; 0x40
 80052cc:	d10e      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d107      	bne.n	80052ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f838 	bl	800535c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d10e      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b20      	cmp	r3, #32
 8005306:	d107      	bne.n	8005318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0220 	mvn.w	r2, #32
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8cc 	bl	80054b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005318:	bf00      	nop
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a40      	ldr	r2, [pc, #256]	; (8005484 <TIM_Base_SetConfig+0x114>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d00f      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a3d      	ldr	r2, [pc, #244]	; (8005488 <TIM_Base_SetConfig+0x118>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00b      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3c      	ldr	r2, [pc, #240]	; (800548c <TIM_Base_SetConfig+0x11c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3b      	ldr	r2, [pc, #236]	; (8005490 <TIM_Base_SetConfig+0x120>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a3a      	ldr	r2, [pc, #232]	; (8005494 <TIM_Base_SetConfig+0x124>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d108      	bne.n	80053c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2f      	ldr	r2, [pc, #188]	; (8005484 <TIM_Base_SetConfig+0x114>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02b      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d0:	d027      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2c      	ldr	r2, [pc, #176]	; (8005488 <TIM_Base_SetConfig+0x118>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d023      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2b      	ldr	r2, [pc, #172]	; (800548c <TIM_Base_SetConfig+0x11c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d01f      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2a      	ldr	r2, [pc, #168]	; (8005490 <TIM_Base_SetConfig+0x120>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01b      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a29      	ldr	r2, [pc, #164]	; (8005494 <TIM_Base_SetConfig+0x124>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d017      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a28      	ldr	r2, [pc, #160]	; (8005498 <TIM_Base_SetConfig+0x128>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a27      	ldr	r2, [pc, #156]	; (800549c <TIM_Base_SetConfig+0x12c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00f      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a26      	ldr	r2, [pc, #152]	; (80054a0 <TIM_Base_SetConfig+0x130>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00b      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a25      	ldr	r2, [pc, #148]	; (80054a4 <TIM_Base_SetConfig+0x134>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d007      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a24      	ldr	r2, [pc, #144]	; (80054a8 <TIM_Base_SetConfig+0x138>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d003      	beq.n	8005422 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a23      	ldr	r2, [pc, #140]	; (80054ac <TIM_Base_SetConfig+0x13c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d108      	bne.n	8005434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <TIM_Base_SetConfig+0x114>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_Base_SetConfig+0xf8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a0c      	ldr	r2, [pc, #48]	; (8005494 <TIM_Base_SetConfig+0x124>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d103      	bne.n	8005470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	615a      	str	r2, [r3, #20]
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40010000 	.word	0x40010000
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40000c00 	.word	0x40000c00
 8005494:	40010400 	.word	0x40010400
 8005498:	40014000 	.word	0x40014000
 800549c:	40014400 	.word	0x40014400
 80054a0:	40014800 	.word	0x40014800
 80054a4:	40001800 	.word	0x40001800
 80054a8:	40001c00 	.word	0x40001c00
 80054ac:	40002000 	.word	0x40002000

080054b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e03f      	b.n	800556a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fc f898 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2224      	movs	r2, #36	; 0x24
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800551a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f001 f8e5 	bl	80066ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695a      	ldr	r2, [r3, #20]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b08a      	sub	sp, #40	; 0x28
 8005576:	af02      	add	r7, sp, #8
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	603b      	str	r3, [r7, #0]
 800557e:	4613      	mov	r3, r2
 8005580:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b20      	cmp	r3, #32
 8005590:	d17c      	bne.n	800568c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_UART_Transmit+0x2c>
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e075      	b.n	800568e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_UART_Transmit+0x3e>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e06e      	b.n	800568e <HAL_UART_Transmit+0x11c>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2221      	movs	r2, #33	; 0x21
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055c6:	f7fc fb91 	bl	8001cec <HAL_GetTick>
 80055ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e0:	d108      	bne.n	80055f4 <HAL_UART_Transmit+0x82>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	e003      	b.n	80055fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005604:	e02a      	b.n	800565c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2200      	movs	r2, #0
 800560e:	2180      	movs	r1, #128	; 0x80
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fd9c 	bl	800614e <UART_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e036      	b.n	800568e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10b      	bne.n	800563e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	461a      	mov	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005634:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	3302      	adds	r3, #2
 800563a:	61bb      	str	r3, [r7, #24]
 800563c:	e007      	b.n	800564e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	781a      	ldrb	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	3301      	adds	r3, #1
 800564c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1cf      	bne.n	8005606 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2200      	movs	r2, #0
 800566e:	2140      	movs	r1, #64	; 0x40
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fd6c 	bl	800614e <UART_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e006      	b.n	800568e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	e000      	b.n	800568e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800568c:	2302      	movs	r3, #2
  }
}
 800568e:	4618      	mov	r0, r3
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b08a      	sub	sp, #40	; 0x28
 800569a:	af02      	add	r7, sp, #8
 800569c:	60f8      	str	r0, [r7, #12]
 800569e:	60b9      	str	r1, [r7, #8]
 80056a0:	603b      	str	r3, [r7, #0]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	f040 808c 	bne.w	80057d0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_UART_Receive+0x2e>
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e084      	b.n	80057d2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Receive+0x40>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e07d      	b.n	80057d2 <HAL_UART_Receive+0x13c>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2222      	movs	r2, #34	; 0x22
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056f2:	f7fc fafb 	bl	8001cec <HAL_GetTick>
 80056f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	88fa      	ldrh	r2, [r7, #6]
 8005702:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570c:	d108      	bne.n	8005720 <HAL_UART_Receive+0x8a>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e003      	b.n	8005728 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005730:	e043      	b.n	80057ba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	2120      	movs	r1, #32
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fd06 	bl	800614e <UART_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e042      	b.n	80057d2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10c      	bne.n	800576c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575e:	b29a      	uxth	r2, r3
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	3302      	adds	r3, #2
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	e01f      	b.n	80057ac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005774:	d007      	beq.n	8005786 <HAL_UART_Receive+0xf0>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10a      	bne.n	8005794 <HAL_UART_Receive+0xfe>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	b2da      	uxtb	r2, r3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	e008      	b.n	80057a6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3301      	adds	r3, #1
 80057aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057be:	b29b      	uxth	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1b6      	bne.n	8005732 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	e000      	b.n	80057d2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80057d0:	2302      	movs	r3, #2
  }
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d165      	bne.n	80058c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_UART_Transmit_DMA+0x26>
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e05e      	b.n	80058c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_UART_Transmit_DMA+0x38>
 8005810:	2302      	movs	r3, #2
 8005812:	e057      	b.n	80058c4 <HAL_UART_Transmit_DMA+0xe8>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	88fa      	ldrh	r2, [r7, #6]
 800582c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2221      	movs	r2, #33	; 0x21
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005840:	4a22      	ldr	r2, [pc, #136]	; (80058cc <HAL_UART_Transmit_DMA+0xf0>)
 8005842:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <HAL_UART_Transmit_DMA+0xf4>)
 800584a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005850:	4a20      	ldr	r2, [pc, #128]	; (80058d4 <HAL_UART_Transmit_DMA+0xf8>)
 8005852:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005858:	2200      	movs	r2, #0
 800585a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800585c:	f107 0308 	add.w	r3, r7, #8
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	6819      	ldr	r1, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3304      	adds	r3, #4
 8005870:	461a      	mov	r2, r3
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	f7fc fff2 	bl	800285c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005880:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	617b      	str	r3, [r7, #20]
   return(result);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3314      	adds	r3, #20
 80058a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058aa:	627a      	str	r2, [r7, #36]	; 0x24
 80058ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6a39      	ldr	r1, [r7, #32]
 80058b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e5      	bne.n	800588a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
  }
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3730      	adds	r7, #48	; 0x30
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	08005ea9 	.word	0x08005ea9
 80058d0:	08005f43 	.word	0x08005f43
 80058d4:	080060bb 	.word	0x080060bb

080058d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4613      	mov	r3, r2
 80058e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	d11d      	bne.n	800592e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_UART_Receive_DMA+0x26>
 80058f8:	88fb      	ldrh	r3, [r7, #6]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e016      	b.n	8005930 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_UART_Receive_DMA+0x38>
 800590c:	2302      	movs	r3, #2
 800590e:	e00f      	b.n	8005930 <HAL_UART_Receive_DMA+0x58>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	461a      	mov	r2, r3
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 fc81 	bl	800622c <UART_Start_Receive_DMA>
 800592a:	4603      	mov	r3, r0
 800592c:	e000      	b.n	8005930 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800592e:	2302      	movs	r3, #2
  }
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b0ba      	sub	sp, #232	; 0xe8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800595e:	2300      	movs	r3, #0
 8005960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005964:	2300      	movs	r3, #0
 8005966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HAL_UART_IRQHandler+0x66>
 800598a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fded 	bl	8006576 <UART_Receive_IT>
      return;
 800599c:	e256      	b.n	8005e4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800599e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80de 	beq.w	8005b64 <HAL_UART_IRQHandler+0x22c>
 80059a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80d1 	beq.w	8005b64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <HAL_UART_IRQHandler+0xae>
 80059ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f043 0201 	orr.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00b      	beq.n	8005a0a <HAL_UART_IRQHandler+0xd2>
 80059f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f043 0202 	orr.w	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <HAL_UART_IRQHandler+0xf6>
 8005a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f043 0204 	orr.w	r2, r3, #4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d011      	beq.n	8005a5e <HAL_UART_IRQHandler+0x126>
 8005a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f043 0208 	orr.w	r2, r3, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 81ed 	beq.w	8005e42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_UART_IRQHandler+0x14e>
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fd78 	bl	8006576 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x17a>
 8005aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d04f      	beq.n	8005b52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fc80 	bl	80063b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac2:	2b40      	cmp	r3, #64	; 0x40
 8005ac4:	d141      	bne.n	8005b4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3314      	adds	r3, #20
 8005acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005af2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1d9      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d013      	beq.n	8005b42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	4a7d      	ldr	r2, [pc, #500]	; (8005d14 <HAL_UART_IRQHandler+0x3dc>)
 8005b20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fc ff60 	bl	80029ec <HAL_DMA_Abort_IT>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e00e      	b.n	8005b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f99a 	bl	8005e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e00a      	b.n	8005b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f996 	bl	8005e7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e006      	b.n	8005b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f992 	bl	8005e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b5e:	e170      	b.n	8005e42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	bf00      	nop
    return;
 8005b62:	e16e      	b.n	8005e42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 814a 	bne.w	8005e02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8143 	beq.w	8005e02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 813c 	beq.w	8005e02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	f040 80b4 	bne.w	8005d18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8140 	beq.w	8005e46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	f080 8139 	bcs.w	8005e46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be6:	f000 8088 	beq.w	8005cfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1d9      	bne.n	8005bea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3314      	adds	r3, #20
 8005c3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c48:	f023 0301 	bic.w	r3, r3, #1
 8005c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3314      	adds	r3, #20
 8005c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e1      	bne.n	8005c36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e3      	bne.n	8005c72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cca:	f023 0310 	bic.w	r3, r3, #16
 8005cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	330c      	adds	r3, #12
 8005cd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ce2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e3      	bne.n	8005cb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fc fe09 	bl	800290c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f8c0 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d10:	e099      	b.n	8005e46 <HAL_UART_IRQHandler+0x50e>
 8005d12:	bf00      	nop
 8005d14:	0800647f 	.word	0x0800647f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 808b 	beq.w	8005e4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8086 	beq.w	8005e4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	330c      	adds	r3, #12
 8005d44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d62:	647a      	str	r2, [r7, #68]	; 0x44
 8005d64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e3      	bne.n	8005d3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3314      	adds	r3, #20
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	623b      	str	r3, [r7, #32]
   return(result);
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3314      	adds	r3, #20
 8005d96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d9a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e3      	bne.n	8005d76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0310 	bic.w	r3, r3, #16
 8005dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005de0:	61fa      	str	r2, [r7, #28]
 8005de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	69b9      	ldr	r1, [r7, #24]
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	617b      	str	r3, [r7, #20]
   return(result);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e3      	bne.n	8005dbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f848 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e00:	e023      	b.n	8005e4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <HAL_UART_IRQHandler+0x4ea>
 8005e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fb43 	bl	80064a6 <UART_Transmit_IT>
    return;
 8005e20:	e014      	b.n	8005e4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00e      	beq.n	8005e4c <HAL_UART_IRQHandler+0x514>
 8005e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fb83 	bl	8006546 <UART_EndTransmit_IT>
    return;
 8005e40:	e004      	b.n	8005e4c <HAL_UART_IRQHandler+0x514>
    return;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <HAL_UART_IRQHandler+0x514>
      return;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <HAL_UART_IRQHandler+0x514>
      return;
 8005e4a:	bf00      	nop
  }
}
 8005e4c:	37e8      	adds	r7, #232	; 0xe8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop

08005e54 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b090      	sub	sp, #64	; 0x40
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d137      	bne.n	8005f34 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3314      	adds	r3, #20
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005eea:	633a      	str	r2, [r7, #48]	; 0x30
 8005eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e5      	bne.n	8005eca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
 8005f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f1e:	61fa      	str	r2, [r7, #28]
 8005f20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	69b9      	ldr	r1, [r7, #24]
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e5      	bne.n	8005efe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f32:	e002      	b.n	8005f3a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005f34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005f36:	f7fa fb69 	bl	800060c <HAL_UART_TxCpltCallback>
}
 8005f3a:	bf00      	nop
 8005f3c:	3740      	adds	r7, #64	; 0x40
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff ff7f 	bl	8005e54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b09c      	sub	sp, #112	; 0x70
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d172      	bne.n	8006060 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e5      	bne.n	8005f80 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3314      	adds	r3, #20
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	667b      	str	r3, [r7, #100]	; 0x64
 8005fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005fd4:	647a      	str	r2, [r7, #68]	; 0x44
 8005fd6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3314      	adds	r3, #20
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffe:	663b      	str	r3, [r7, #96]	; 0x60
 8006000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3314      	adds	r3, #20
 8006006:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006008:	633a      	str	r2, [r7, #48]	; 0x30
 800600a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800600e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800601c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	2b01      	cmp	r3, #1
 800602a:	d119      	bne.n	8006060 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	60fb      	str	r3, [r7, #12]
   return(result);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0310 	bic.w	r3, r3, #16
 8006042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800604c:	61fa      	str	r2, [r7, #28]
 800604e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69b9      	ldr	r1, [r7, #24]
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	617b      	str	r3, [r7, #20]
   return(result);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	2b01      	cmp	r3, #1
 8006066:	d106      	bne.n	8006076 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800606c:	4619      	mov	r1, r3
 800606e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006070:	f7ff ff0e 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006074:	e002      	b.n	800607c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006076:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006078:	f7fa fafe 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 800607c:	bf00      	nop
 800607e:	3770      	adds	r7, #112	; 0x70
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	2b01      	cmp	r3, #1
 8006098:	d108      	bne.n	80060ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800609e:	085b      	lsrs	r3, r3, #1
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4619      	mov	r1, r3
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fef3 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060aa:	e002      	b.n	80060b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff fedb 	bl	8005e68 <HAL_UART_RxHalfCpltCallback>
}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b80      	cmp	r3, #128	; 0x80
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b21      	cmp	r3, #33	; 0x21
 80060ec:	d108      	bne.n	8006100 <UART_DMAError+0x46>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2200      	movs	r2, #0
 80060f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80060fa:	68b8      	ldr	r0, [r7, #8]
 80060fc:	f000 f934 	bl	8006368 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	bf0c      	ite	eq
 800610e:	2301      	moveq	r3, #1
 8006110:	2300      	movne	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b22      	cmp	r3, #34	; 0x22
 8006120:	d108      	bne.n	8006134 <UART_DMAError+0x7a>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800612e:	68b8      	ldr	r0, [r7, #8]
 8006130:	f000 f942 	bl	80063b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	f043 0210 	orr.w	r2, r3, #16
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006140:	68b8      	ldr	r0, [r7, #8]
 8006142:	f7ff fe9b 	bl	8005e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b090      	sub	sp, #64	; 0x40
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	603b      	str	r3, [r7, #0]
 800615a:	4613      	mov	r3, r2
 800615c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615e:	e050      	b.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006166:	d04c      	beq.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616a:	2b00      	cmp	r3, #0
 800616c:	d007      	beq.n	800617e <UART_WaitOnFlagUntilTimeout+0x30>
 800616e:	f7fb fdbd 	bl	8001cec <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800617a:	429a      	cmp	r2, r3
 800617c:	d241      	bcs.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	330c      	adds	r3, #12
 8006184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800619e:	637a      	str	r2, [r7, #52]	; 0x34
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e5      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3314      	adds	r3, #20
 80061b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	613b      	str	r3, [r7, #16]
   return(result);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3314      	adds	r3, #20
 80061d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061d2:	623a      	str	r2, [r7, #32]
 80061d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	69f9      	ldr	r1, [r7, #28]
 80061d8:	6a3a      	ldr	r2, [r7, #32]
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	61bb      	str	r3, [r7, #24]
   return(result);
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e5      	bne.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e00f      	b.n	8006222 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4013      	ands	r3, r2
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	429a      	cmp	r2, r3
 8006210:	bf0c      	ite	eq
 8006212:	2301      	moveq	r3, #1
 8006214:	2300      	movne	r3, #0
 8006216:	b2db      	uxtb	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	429a      	cmp	r2, r3
 800621e:	d09f      	beq.n	8006160 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3740      	adds	r7, #64	; 0x40
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b098      	sub	sp, #96	; 0x60
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2222      	movs	r2, #34	; 0x22
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	4a40      	ldr	r2, [pc, #256]	; (800635c <UART_Start_Receive_DMA+0x130>)
 800625a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	4a3f      	ldr	r2, [pc, #252]	; (8006360 <UART_Start_Receive_DMA+0x134>)
 8006262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	4a3e      	ldr	r2, [pc, #248]	; (8006364 <UART_Start_Receive_DMA+0x138>)
 800626a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	2200      	movs	r2, #0
 8006272:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006274:	f107 0308 	add.w	r3, r7, #8
 8006278:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	f7fc fae6 	bl	800285c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006290:	2300      	movs	r3, #0
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d019      	beq.n	80062ea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	330c      	adds	r3, #12
 80062bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80062d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80062dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80062e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e5      	bne.n	80062b6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3314      	adds	r3, #20
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	657b      	str	r3, [r7, #84]	; 0x54
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3314      	adds	r3, #20
 8006308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800630a:	63ba      	str	r2, [r7, #56]	; 0x38
 800630c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e5      	bne.n	80062ea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3314      	adds	r3, #20
 8006324:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	617b      	str	r3, [r7, #20]
   return(result);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006334:	653b      	str	r3, [r7, #80]	; 0x50
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3314      	adds	r3, #20
 800633c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800633e:	627a      	str	r2, [r7, #36]	; 0x24
 8006340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6a39      	ldr	r1, [r7, #32]
 8006344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	61fb      	str	r3, [r7, #28]
   return(result);
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e5      	bne.n	800631e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3760      	adds	r7, #96	; 0x60
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	08005f5f 	.word	0x08005f5f
 8006360:	08006085 	.word	0x08006085
 8006364:	080060bb 	.word	0x080060bb

08006368 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b089      	sub	sp, #36	; 0x24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	61ba      	str	r2, [r7, #24]
 8006392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	6979      	ldr	r1, [r7, #20]
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	613b      	str	r3, [r7, #16]
   return(result);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e5      	bne.n	8006370 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80063ac:	bf00      	nop
 80063ae:	3724      	adds	r7, #36	; 0x24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b095      	sub	sp, #84	; 0x54
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063e0:	643a      	str	r2, [r7, #64]	; 0x40
 80063e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3314      	adds	r3, #20
 80063fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	61fb      	str	r3, [r7, #28]
   return(result);
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f023 0301 	bic.w	r3, r3, #1
 800640a:	64bb      	str	r3, [r7, #72]	; 0x48
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006414:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800641a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	2b01      	cmp	r3, #1
 800642e:	d119      	bne.n	8006464 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	e853 3f00 	ldrex	r3, [r3]
 800643e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f023 0310 	bic.w	r3, r3, #16
 8006446:	647b      	str	r3, [r7, #68]	; 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006450:	61ba      	str	r2, [r7, #24]
 8006452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	6979      	ldr	r1, [r7, #20]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	e841 2300 	strex	r3, r2, [r1]
 800645c:	613b      	str	r3, [r7, #16]
   return(result);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e5      	bne.n	8006430 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006472:	bf00      	nop
 8006474:	3754      	adds	r7, #84	; 0x54
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f7ff fcef 	bl	8005e7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800649e:	bf00      	nop
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b21      	cmp	r3, #33	; 0x21
 80064b8:	d13e      	bne.n	8006538 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c2:	d114      	bne.n	80064ee <UART_Transmit_IT+0x48>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d110      	bne.n	80064ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	1c9a      	adds	r2, r3, #2
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	621a      	str	r2, [r3, #32]
 80064ec:	e008      	b.n	8006500 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	1c59      	adds	r1, r3, #1
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6211      	str	r1, [r2, #32]
 80064f8:	781a      	ldrb	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006504:	b29b      	uxth	r3, r3
 8006506:	3b01      	subs	r3, #1
 8006508:	b29b      	uxth	r3, r3
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4619      	mov	r1, r3
 800650e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10f      	bne.n	8006534 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006522:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006532:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	e000      	b.n	800653a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006538:	2302      	movs	r3, #2
  }
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fa f850 	bl	800060c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b08c      	sub	sp, #48	; 0x30
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b22      	cmp	r3, #34	; 0x22
 8006588:	f040 80ab 	bne.w	80066e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006594:	d117      	bne.n	80065c6 <UART_Receive_IT+0x50>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d113      	bne.n	80065c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	1c9a      	adds	r2, r3, #2
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28
 80065c4:	e026      	b.n	8006614 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80065cc:	2300      	movs	r3, #0
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d8:	d007      	beq.n	80065ea <UART_Receive_IT+0x74>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10a      	bne.n	80065f8 <UART_Receive_IT+0x82>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	701a      	strb	r2, [r3, #0]
 80065f6:	e008      	b.n	800660a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006604:	b2da      	uxtb	r2, r3
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006618:	b29b      	uxth	r3, r3
 800661a:	3b01      	subs	r3, #1
 800661c:	b29b      	uxth	r3, r3
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4619      	mov	r1, r3
 8006622:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006624:	2b00      	cmp	r3, #0
 8006626:	d15a      	bne.n	80066de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0220 	bic.w	r2, r2, #32
 8006636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	2b01      	cmp	r3, #1
 8006666:	d135      	bne.n	80066d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	330c      	adds	r3, #12
 8006674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	613b      	str	r3, [r7, #16]
   return(result);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f023 0310 	bic.w	r3, r3, #16
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	330c      	adds	r3, #12
 800668c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668e:	623a      	str	r2, [r7, #32]
 8006690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	69f9      	ldr	r1, [r7, #28]
 8006694:	6a3a      	ldr	r2, [r7, #32]
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	61bb      	str	r3, [r7, #24]
   return(result);
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e5      	bne.n	800666e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b10      	cmp	r3, #16
 80066ae:	d10a      	bne.n	80066c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff fbdf 	bl	8005e90 <HAL_UARTEx_RxEventCallback>
 80066d2:	e002      	b.n	80066da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7f9 ffcf 	bl	8000678 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	e002      	b.n	80066e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	e000      	b.n	80066e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80066e2:	2302      	movs	r3, #2
  }
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3730      	adds	r7, #48	; 0x30
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	b09f      	sub	sp, #124	; 0x7c
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006702:	68d9      	ldr	r1, [r3, #12]
 8006704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	ea40 0301 	orr.w	r3, r0, r1
 800670c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800670e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	431a      	orrs	r2, r3
 8006718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	431a      	orrs	r2, r3
 800671e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	4313      	orrs	r3, r2
 8006724:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006730:	f021 010c 	bic.w	r1, r1, #12
 8006734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800673a:	430b      	orrs	r3, r1
 800673c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800673e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674a:	6999      	ldr	r1, [r3, #24]
 800674c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	ea40 0301 	orr.w	r3, r0, r1
 8006754:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4bc5      	ldr	r3, [pc, #788]	; (8006a70 <UART_SetConfig+0x384>)
 800675c:	429a      	cmp	r2, r3
 800675e:	d004      	beq.n	800676a <UART_SetConfig+0x7e>
 8006760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4bc3      	ldr	r3, [pc, #780]	; (8006a74 <UART_SetConfig+0x388>)
 8006766:	429a      	cmp	r2, r3
 8006768:	d103      	bne.n	8006772 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800676a:	f7fd fa39 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 800676e:	6778      	str	r0, [r7, #116]	; 0x74
 8006770:	e002      	b.n	8006778 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fd fa21 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8006776:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006780:	f040 80b6 	bne.w	80068f0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006786:	461c      	mov	r4, r3
 8006788:	f04f 0500 	mov.w	r5, #0
 800678c:	4622      	mov	r2, r4
 800678e:	462b      	mov	r3, r5
 8006790:	1891      	adds	r1, r2, r2
 8006792:	6439      	str	r1, [r7, #64]	; 0x40
 8006794:	415b      	adcs	r3, r3
 8006796:	647b      	str	r3, [r7, #68]	; 0x44
 8006798:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800679c:	1912      	adds	r2, r2, r4
 800679e:	eb45 0303 	adc.w	r3, r5, r3
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f04f 0100 	mov.w	r1, #0
 80067aa:	00d9      	lsls	r1, r3, #3
 80067ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067b0:	00d0      	lsls	r0, r2, #3
 80067b2:	4602      	mov	r2, r0
 80067b4:	460b      	mov	r3, r1
 80067b6:	1911      	adds	r1, r2, r4
 80067b8:	6639      	str	r1, [r7, #96]	; 0x60
 80067ba:	416b      	adcs	r3, r5
 80067bc:	667b      	str	r3, [r7, #100]	; 0x64
 80067be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	461a      	mov	r2, r3
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	1891      	adds	r1, r2, r2
 80067ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80067cc:	415b      	adcs	r3, r3
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80067d8:	f7f9 fd52 	bl	8000280 <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4ba5      	ldr	r3, [pc, #660]	; (8006a78 <UART_SetConfig+0x38c>)
 80067e2:	fba3 2302 	umull	r2, r3, r3, r2
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	011e      	lsls	r6, r3, #4
 80067ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ec:	461c      	mov	r4, r3
 80067ee:	f04f 0500 	mov.w	r5, #0
 80067f2:	4622      	mov	r2, r4
 80067f4:	462b      	mov	r3, r5
 80067f6:	1891      	adds	r1, r2, r2
 80067f8:	6339      	str	r1, [r7, #48]	; 0x30
 80067fa:	415b      	adcs	r3, r3
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
 80067fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006802:	1912      	adds	r2, r2, r4
 8006804:	eb45 0303 	adc.w	r3, r5, r3
 8006808:	f04f 0000 	mov.w	r0, #0
 800680c:	f04f 0100 	mov.w	r1, #0
 8006810:	00d9      	lsls	r1, r3, #3
 8006812:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006816:	00d0      	lsls	r0, r2, #3
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	1911      	adds	r1, r2, r4
 800681e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006820:	416b      	adcs	r3, r5
 8006822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	461a      	mov	r2, r3
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	1891      	adds	r1, r2, r2
 8006830:	62b9      	str	r1, [r7, #40]	; 0x28
 8006832:	415b      	adcs	r3, r3
 8006834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800683a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800683e:	f7f9 fd1f 	bl	8000280 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4b8c      	ldr	r3, [pc, #560]	; (8006a78 <UART_SetConfig+0x38c>)
 8006848:	fba3 1302 	umull	r1, r3, r3, r2
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	2164      	movs	r1, #100	; 0x64
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	3332      	adds	r3, #50	; 0x32
 800685a:	4a87      	ldr	r2, [pc, #540]	; (8006a78 <UART_SetConfig+0x38c>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006868:	441e      	add	r6, r3
 800686a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686c:	4618      	mov	r0, r3
 800686e:	f04f 0100 	mov.w	r1, #0
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	1894      	adds	r4, r2, r2
 8006878:	623c      	str	r4, [r7, #32]
 800687a:	415b      	adcs	r3, r3
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
 800687e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006882:	1812      	adds	r2, r2, r0
 8006884:	eb41 0303 	adc.w	r3, r1, r3
 8006888:	f04f 0400 	mov.w	r4, #0
 800688c:	f04f 0500 	mov.w	r5, #0
 8006890:	00dd      	lsls	r5, r3, #3
 8006892:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006896:	00d4      	lsls	r4, r2, #3
 8006898:	4622      	mov	r2, r4
 800689a:	462b      	mov	r3, r5
 800689c:	1814      	adds	r4, r2, r0
 800689e:	653c      	str	r4, [r7, #80]	; 0x50
 80068a0:	414b      	adcs	r3, r1
 80068a2:	657b      	str	r3, [r7, #84]	; 0x54
 80068a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	461a      	mov	r2, r3
 80068aa:	f04f 0300 	mov.w	r3, #0
 80068ae:	1891      	adds	r1, r2, r2
 80068b0:	61b9      	str	r1, [r7, #24]
 80068b2:	415b      	adcs	r3, r3
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80068be:	f7f9 fcdf 	bl	8000280 <__aeabi_uldivmod>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4b6c      	ldr	r3, [pc, #432]	; (8006a78 <UART_SetConfig+0x38c>)
 80068c8:	fba3 1302 	umull	r1, r3, r3, r2
 80068cc:	095b      	lsrs	r3, r3, #5
 80068ce:	2164      	movs	r1, #100	; 0x64
 80068d0:	fb01 f303 	mul.w	r3, r1, r3
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	3332      	adds	r3, #50	; 0x32
 80068da:	4a67      	ldr	r2, [pc, #412]	; (8006a78 <UART_SetConfig+0x38c>)
 80068dc:	fba2 2303 	umull	r2, r3, r2, r3
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	f003 0207 	and.w	r2, r3, #7
 80068e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4432      	add	r2, r6
 80068ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068ee:	e0b9      	b.n	8006a64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f2:	461c      	mov	r4, r3
 80068f4:	f04f 0500 	mov.w	r5, #0
 80068f8:	4622      	mov	r2, r4
 80068fa:	462b      	mov	r3, r5
 80068fc:	1891      	adds	r1, r2, r2
 80068fe:	6139      	str	r1, [r7, #16]
 8006900:	415b      	adcs	r3, r3
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006908:	1912      	adds	r2, r2, r4
 800690a:	eb45 0303 	adc.w	r3, r5, r3
 800690e:	f04f 0000 	mov.w	r0, #0
 8006912:	f04f 0100 	mov.w	r1, #0
 8006916:	00d9      	lsls	r1, r3, #3
 8006918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800691c:	00d0      	lsls	r0, r2, #3
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	eb12 0804 	adds.w	r8, r2, r4
 8006926:	eb43 0905 	adc.w	r9, r3, r5
 800692a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	4618      	mov	r0, r3
 8006930:	f04f 0100 	mov.w	r1, #0
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	008b      	lsls	r3, r1, #2
 800693e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006942:	0082      	lsls	r2, r0, #2
 8006944:	4640      	mov	r0, r8
 8006946:	4649      	mov	r1, r9
 8006948:	f7f9 fc9a 	bl	8000280 <__aeabi_uldivmod>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4b49      	ldr	r3, [pc, #292]	; (8006a78 <UART_SetConfig+0x38c>)
 8006952:	fba3 2302 	umull	r2, r3, r3, r2
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	011e      	lsls	r6, r3, #4
 800695a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800695c:	4618      	mov	r0, r3
 800695e:	f04f 0100 	mov.w	r1, #0
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	1894      	adds	r4, r2, r2
 8006968:	60bc      	str	r4, [r7, #8]
 800696a:	415b      	adcs	r3, r3
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006972:	1812      	adds	r2, r2, r0
 8006974:	eb41 0303 	adc.w	r3, r1, r3
 8006978:	f04f 0400 	mov.w	r4, #0
 800697c:	f04f 0500 	mov.w	r5, #0
 8006980:	00dd      	lsls	r5, r3, #3
 8006982:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006986:	00d4      	lsls	r4, r2, #3
 8006988:	4622      	mov	r2, r4
 800698a:	462b      	mov	r3, r5
 800698c:	1814      	adds	r4, r2, r0
 800698e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006990:	414b      	adcs	r3, r1
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4618      	mov	r0, r3
 800699a:	f04f 0100 	mov.w	r1, #0
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	008b      	lsls	r3, r1, #2
 80069a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069ac:	0082      	lsls	r2, r0, #2
 80069ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80069b2:	f7f9 fc65 	bl	8000280 <__aeabi_uldivmod>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4b2f      	ldr	r3, [pc, #188]	; (8006a78 <UART_SetConfig+0x38c>)
 80069bc:	fba3 1302 	umull	r1, r3, r3, r2
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	2164      	movs	r1, #100	; 0x64
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	3332      	adds	r3, #50	; 0x32
 80069ce:	4a2a      	ldr	r2, [pc, #168]	; (8006a78 <UART_SetConfig+0x38c>)
 80069d0:	fba2 2303 	umull	r2, r3, r2, r3
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069da:	441e      	add	r6, r3
 80069dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069de:	4618      	mov	r0, r3
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	1894      	adds	r4, r2, r2
 80069ea:	603c      	str	r4, [r7, #0]
 80069ec:	415b      	adcs	r3, r3
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f4:	1812      	adds	r2, r2, r0
 80069f6:	eb41 0303 	adc.w	r3, r1, r3
 80069fa:	f04f 0400 	mov.w	r4, #0
 80069fe:	f04f 0500 	mov.w	r5, #0
 8006a02:	00dd      	lsls	r5, r3, #3
 8006a04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a08:	00d4      	lsls	r4, r2, #3
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	eb12 0a00 	adds.w	sl, r2, r0
 8006a12:	eb43 0b01 	adc.w	fp, r3, r1
 8006a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f04f 0100 	mov.w	r1, #0
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	008b      	lsls	r3, r1, #2
 8006a2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a2e:	0082      	lsls	r2, r0, #2
 8006a30:	4650      	mov	r0, sl
 8006a32:	4659      	mov	r1, fp
 8006a34:	f7f9 fc24 	bl	8000280 <__aeabi_uldivmod>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	; (8006a78 <UART_SetConfig+0x38c>)
 8006a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	2164      	movs	r1, #100	; 0x64
 8006a46:	fb01 f303 	mul.w	r3, r1, r3
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	3332      	adds	r3, #50	; 0x32
 8006a50:	4a09      	ldr	r2, [pc, #36]	; (8006a78 <UART_SetConfig+0x38c>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	f003 020f 	and.w	r2, r3, #15
 8006a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4432      	add	r2, r6
 8006a62:	609a      	str	r2, [r3, #8]
}
 8006a64:	bf00      	nop
 8006a66:	377c      	adds	r7, #124	; 0x7c
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6e:	bf00      	nop
 8006a70:	40011000 	.word	0x40011000
 8006a74:	40011400 	.word	0x40011400
 8006a78:	51eb851f 	.word	0x51eb851f

08006a7c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a8e:	2b84      	cmp	r3, #132	; 0x84
 8006a90:	d005      	beq.n	8006a9e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	3303      	adds	r3, #3
 8006a9c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ab2:	f3ef 8305 	mrs	r3, IPSR
 8006ab6:	607b      	str	r3, [r7, #4]
  return(result);
 8006ab8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	bf14      	ite	ne
 8006abe:	2301      	movne	r3, #1
 8006ac0:	2300      	moveq	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ad4:	f001 ffb0 	bl	8008a38 <vTaskStartScheduler>
  
  return osOK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	bd80      	pop	{r7, pc}

08006ade <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae0:	b089      	sub	sp, #36	; 0x24
 8006ae2:	af04      	add	r7, sp, #16
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d020      	beq.n	8006b32 <osThreadCreate+0x54>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01c      	beq.n	8006b32 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685c      	ldr	r4, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681d      	ldr	r5, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691e      	ldr	r6, [r3, #16]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7ff ffb6 	bl	8006a7c <makeFreeRtosPriority>
 8006b10:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b1a:	9202      	str	r2, [sp, #8]
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	9100      	str	r1, [sp, #0]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	4632      	mov	r2, r6
 8006b24:	4629      	mov	r1, r5
 8006b26:	4620      	mov	r0, r4
 8006b28:	f001 fc14 	bl	8008354 <xTaskCreateStatic>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e01c      	b.n	8006b6c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685c      	ldr	r4, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b3e:	b29e      	uxth	r6, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff ff98 	bl	8006a7c <makeFreeRtosPriority>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	f107 030c 	add.w	r3, r7, #12
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	9200      	str	r2, [sp, #0]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	4632      	mov	r2, r6
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f001 fc56 	bl	800840e <xTaskCreate>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d001      	beq.n	8006b6c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e000      	b.n	8006b6e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <osDelay+0x16>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	e000      	b.n	8006b8e <osDelay+0x18>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 fd8a 	bl	80086a8 <vTaskDelay>
  
  return osOK;
 8006b94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d013      	beq.n	8006bde <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <osTimerCreate+0x20>
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	e000      	b.n	8006bc2 <osTimerCreate+0x22>
 8006bc0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8006bca:	9201      	str	r2, [sp, #4]
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	460a      	mov	r2, r1
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	480b      	ldr	r0, [pc, #44]	; (8006c04 <osTimerCreate+0x64>)
 8006bd6:	f002 fe0e 	bl	80097f6 <xTimerCreateStatic>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	e00e      	b.n	8006bfc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d101      	bne.n	8006be8 <osTimerCreate+0x48>
 8006be4:	2201      	movs	r2, #1
 8006be6:	e000      	b.n	8006bea <osTimerCreate+0x4a>
 8006be8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	4803      	ldr	r0, [pc, #12]	; (8006c04 <osTimerCreate+0x64>)
 8006bf6:	f002 fddd 	bl	80097b4 <xTimerCreate>
 8006bfa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	0801a858 	.word	0x0801a858

08006c08 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <osTimerStart+0x20>
    ticks = 1;
 8006c24:	2301      	movs	r3, #1
 8006c26:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006c28:	f7ff ff40 	bl	8006aac <inHandlerMode>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01a      	beq.n	8006c68 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8006c32:	f107 030c 	add.w	r3, r7, #12
 8006c36:	2200      	movs	r2, #0
 8006c38:	9200      	str	r2, [sp, #0]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	2109      	movs	r1, #9
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f002 fe52 	bl	80098e8 <xTimerGenericCommand>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d002      	beq.n	8006c50 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8006c4a:	23ff      	movs	r3, #255	; 0xff
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	e018      	b.n	8006c82 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d015      	beq.n	8006c82 <osTimerStart+0x7a>
 8006c56:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <osTimerStart+0x84>)
 8006c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	e00c      	b.n	8006c82 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	2104      	movs	r1, #4
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f002 fe38 	bl	80098e8 <xTimerGenericCommand>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d001      	beq.n	8006c82 <osTimerStart+0x7a>
      result = osErrorOS;
 8006c7e:	23ff      	movs	r3, #255	; 0xff
 8006c80:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8006c82:	697b      	ldr	r3, [r7, #20]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	e000ed04 	.word	0xe000ed04

08006c90 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8006ca0:	f7ff ff04 	bl	8006aac <inHandlerMode>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d019      	beq.n	8006cde <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8006caa:	f107 0308 	add.w	r3, r7, #8
 8006cae:	2200      	movs	r2, #0
 8006cb0:	9200      	str	r2, [sp, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2108      	movs	r1, #8
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 fe16 	bl	80098e8 <xTimerGenericCommand>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d001      	beq.n	8006cc6 <osTimerStop+0x36>
      return osErrorOS;
 8006cc2:	23ff      	movs	r3, #255	; 0xff
 8006cc4:	e019      	b.n	8006cfa <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d015      	beq.n	8006cf8 <osTimerStop+0x68>
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <osTimerStop+0x74>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	e00c      	b.n	8006cf8 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2103      	movs	r1, #3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f002 fdfd 	bl	80098e8 <xTimerGenericCommand>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d001      	beq.n	8006cf8 <osTimerStop+0x68>
      result = osErrorOS;
 8006cf4:	23ff      	movs	r3, #255	; 0xff
 8006cf6:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d007      	beq.n	8006d28 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	2001      	movs	r0, #1
 8006d20:	f000 fc7b 	bl	800761a <xQueueCreateMutexStatic>
 8006d24:	4603      	mov	r3, r0
 8006d26:	e003      	b.n	8006d30 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006d28:	2001      	movs	r0, #1
 8006d2a:	f000 fc5e 	bl	80075ea <xQueueCreateMutex>
 8006d2e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <osMutexWait+0x18>
    return osErrorParameter;
 8006d4c:	2380      	movs	r3, #128	; 0x80
 8006d4e:	e03a      	b.n	8006dc6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5a:	d103      	bne.n	8006d64 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	e009      	b.n	8006d78 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d006      	beq.n	8006d78 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <osMutexWait+0x40>
      ticks = 1;
 8006d74:	2301      	movs	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006d78:	f7ff fe98 	bl	8006aac <inHandlerMode>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d017      	beq.n	8006db2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006d82:	f107 0308 	add.w	r3, r7, #8
 8006d86:	461a      	mov	r2, r3
 8006d88:	2100      	movs	r1, #0
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f8dc 	bl	8007f48 <xQueueReceiveFromISR>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d001      	beq.n	8006d9a <osMutexWait+0x62>
      return osErrorOS;
 8006d96:	23ff      	movs	r3, #255	; 0xff
 8006d98:	e015      	b.n	8006dc6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d011      	beq.n	8006dc4 <osMutexWait+0x8c>
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <osMutexWait+0x98>)
 8006da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	e008      	b.n	8006dc4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 ffbb 	bl	8007d30 <xQueueSemaphoreTake>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d001      	beq.n	8006dc4 <osMutexWait+0x8c>
    return osErrorOS;
 8006dc0:	23ff      	movs	r3, #255	; 0xff
 8006dc2:	e000      	b.n	8006dc6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	e000ed04 	.word	0xe000ed04

08006dd4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006de4:	f7ff fe62 	bl	8006aac <inHandlerMode>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d016      	beq.n	8006e1c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006dee:	f107 0308 	add.w	r3, r7, #8
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fe2e 	bl	8007a56 <xQueueGiveFromISR>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d001      	beq.n	8006e04 <osMutexRelease+0x30>
      return osErrorOS;
 8006e00:	23ff      	movs	r3, #255	; 0xff
 8006e02:	e017      	b.n	8006e34 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d013      	beq.n	8006e32 <osMutexRelease+0x5e>
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <osMutexRelease+0x68>)
 8006e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	e00a      	b.n	8006e32 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2100      	movs	r1, #0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fc7e 	bl	8007724 <xQueueGenericSend>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d001      	beq.n	8006e32 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006e2e:	23ff      	movs	r3, #255	; 0xff
 8006e30:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006e32:	68fb      	ldr	r3, [r7, #12]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	e000ed04 	.word	0xe000ed04

08006e40 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d016      	beq.n	8006e80 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d10a      	bne.n	8006e6e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2203      	movs	r2, #3
 8006e5e:	9200      	str	r2, [sp, #0]
 8006e60:	2200      	movs	r2, #0
 8006e62:	2100      	movs	r1, #0
 8006e64:	2001      	movs	r0, #1
 8006e66:	f000 fad5 	bl	8007414 <xQueueGenericCreateStatic>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	e023      	b.n	8006eb6 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8006e6e:	6838      	ldr	r0, [r7, #0]
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f000 fbea 	bl	8007650 <xQueueCreateCountingSemaphoreStatic>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	e01a      	b.n	8006eb6 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d110      	bne.n	8006ea8 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8006e86:	2203      	movs	r2, #3
 8006e88:	2100      	movs	r1, #0
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	f000 fb3a 	bl	8007504 <xQueueGenericCreate>
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <osSemaphoreCreate+0x64>
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fc40 	bl	8007724 <xQueueGenericSend>
      return sema;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	e006      	b.n	8006eb6 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	4611      	mov	r1, r2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fc05 	bl	80076be <xQueueCreateCountingSemaphore>
 8006eb4:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
	...

08006ec0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006ed4:	2380      	movs	r3, #128	; 0x80
 8006ed6:	e03a      	b.n	8006f4e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee2:	d103      	bne.n	8006eec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e009      	b.n	8006f00 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d006      	beq.n	8006f00 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <osSemaphoreWait+0x40>
      ticks = 1;
 8006efc:	2301      	movs	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006f00:	f7ff fdd4 	bl	8006aac <inHandlerMode>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d017      	beq.n	8006f3a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f0a:	f107 0308 	add.w	r3, r7, #8
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2100      	movs	r1, #0
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f818 	bl	8007f48 <xQueueReceiveFromISR>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d001      	beq.n	8006f22 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006f1e:	23ff      	movs	r3, #255	; 0xff
 8006f20:	e015      	b.n	8006f4e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d011      	beq.n	8006f4c <osSemaphoreWait+0x8c>
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <osSemaphoreWait+0x98>)
 8006f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	e008      	b.n	8006f4c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fef7 	bl	8007d30 <xQueueSemaphoreTake>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d001      	beq.n	8006f4c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006f48:	23ff      	movs	r3, #255	; 0xff
 8006f4a:	e000      	b.n	8006f4e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006f6c:	f7ff fd9e 	bl	8006aac <inHandlerMode>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d016      	beq.n	8006fa4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006f76:	f107 0308 	add.w	r3, r7, #8
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fd6a 	bl	8007a56 <xQueueGiveFromISR>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d001      	beq.n	8006f8c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006f88:	23ff      	movs	r3, #255	; 0xff
 8006f8a:	e017      	b.n	8006fbc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d013      	beq.n	8006fba <osSemaphoreRelease+0x5e>
 8006f92:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <osSemaphoreRelease+0x68>)
 8006f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	e00a      	b.n	8006fba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fbba 	bl	8007724 <xQueueGenericSend>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d001      	beq.n	8006fba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006fb6:	23ff      	movs	r3, #255	; 0xff
 8006fb8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006fba:	68fb      	ldr	r3, [r7, #12]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d011      	beq.n	8006ffe <osMessageCreate+0x36>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00d      	beq.n	8006ffe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6859      	ldr	r1, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2400      	movs	r4, #0
 8006ff4:	9400      	str	r4, [sp, #0]
 8006ff6:	f000 fa0d 	bl	8007414 <xQueueGenericCreateStatic>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e008      	b.n	8007010 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	4619      	mov	r1, r3
 800700a:	f000 fa7b 	bl	8007504 <xQueueGenericCreate>
 800700e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	bd90      	pop	{r4, r7, pc}

08007018 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007024:	2300      	movs	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <osMessagePut+0x1e>
    ticks = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007036:	f7ff fd39 	bl	8006aac <inHandlerMode>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d018      	beq.n	8007072 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007040:	f107 0210 	add.w	r2, r7, #16
 8007044:	f107 0108 	add.w	r1, r7, #8
 8007048:	2300      	movs	r3, #0
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 fc68 	bl	8007920 <xQueueGenericSendFromISR>
 8007050:	4603      	mov	r3, r0
 8007052:	2b01      	cmp	r3, #1
 8007054:	d001      	beq.n	800705a <osMessagePut+0x42>
      return osErrorOS;
 8007056:	23ff      	movs	r3, #255	; 0xff
 8007058:	e018      	b.n	800708c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d014      	beq.n	800708a <osMessagePut+0x72>
 8007060:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <osMessagePut+0x7c>)
 8007062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	e00b      	b.n	800708a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007072:	f107 0108 	add.w	r1, r7, #8
 8007076:	2300      	movs	r3, #0
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fb52 	bl	8007724 <xQueueGenericSend>
 8007080:	4603      	mov	r3, r0
 8007082:	2b01      	cmp	r3, #1
 8007084:	d001      	beq.n	800708a <osMessagePut+0x72>
      return osErrorOS;
 8007086:	23ff      	movs	r3, #255	; 0xff
 8007088:	e000      	b.n	800708c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	e000ed04 	.word	0xe000ed04

08007098 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007098:	b590      	push	{r4, r7, lr}
 800709a:	b08b      	sub	sp, #44	; 0x2c
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	617b      	str	r3, [r7, #20]
    return event;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	461c      	mov	r4, r3
 80070ba:	f107 0314 	add.w	r3, r7, #20
 80070be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070c6:	e054      	b.n	8007172 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d103      	bne.n	80070e0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80070d8:	f04f 33ff 	mov.w	r3, #4294967295
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
 80070de:	e009      	b.n	80070f4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d006      	beq.n	80070f4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <osMessageGet+0x5c>
      ticks = 1;
 80070f0:	2301      	movs	r3, #1
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80070f4:	f7ff fcda 	bl	8006aac <inHandlerMode>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01c      	beq.n	8007138 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80070fe:	f107 0220 	add.w	r2, r7, #32
 8007102:	f107 0314 	add.w	r3, r7, #20
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	68b8      	ldr	r0, [r7, #8]
 800710c:	f000 ff1c 	bl	8007f48 <xQueueReceiveFromISR>
 8007110:	4603      	mov	r3, r0
 8007112:	2b01      	cmp	r3, #1
 8007114:	d102      	bne.n	800711c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007116:	2310      	movs	r3, #16
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	e001      	b.n	8007120 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800711c:	2300      	movs	r3, #0
 800711e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d01d      	beq.n	8007162 <osMessageGet+0xca>
 8007126:	4b15      	ldr	r3, [pc, #84]	; (800717c <osMessageGet+0xe4>)
 8007128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	e014      	b.n	8007162 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007138:	f107 0314 	add.w	r3, r7, #20
 800713c:	3304      	adds	r3, #4
 800713e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007140:	4619      	mov	r1, r3
 8007142:	68b8      	ldr	r0, [r7, #8]
 8007144:	f000 fd14 	bl	8007b70 <xQueueReceive>
 8007148:	4603      	mov	r3, r0
 800714a:	2b01      	cmp	r3, #1
 800714c:	d102      	bne.n	8007154 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800714e:	2310      	movs	r3, #16
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	e006      	b.n	8007162 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <osMessageGet+0xc6>
 800715a:	2300      	movs	r3, #0
 800715c:	e000      	b.n	8007160 <osMessageGet+0xc8>
 800715e:	2340      	movs	r3, #64	; 0x40
 8007160:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	461c      	mov	r4, r3
 8007166:	f107 0314 	add.w	r3, r7, #20
 800716a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800716e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	372c      	adds	r7, #44	; 0x2c
 8007176:	46bd      	mov	sp, r7
 8007178:	bd90      	pop	{r4, r7, pc}
 800717a:	bf00      	nop
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 fac1 	bl	8008710 <vTaskSuspend>
  
  return osOK;
 800718e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80071a0:	f7ff fc84 	bl	8006aac <inHandlerMode>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00e      	beq.n	80071c8 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 fbd2 	bl	8008954 <xTaskResumeFromISR>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d10b      	bne.n	80071ce <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <osThreadResume+0x40>)
 80071b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	e002      	b.n	80071ce <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fb65 	bl	8008898 <vTaskResume>
  }
  return osOK;
 80071ce:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f103 0208 	add.w	r2, r3, #8
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f04f 32ff 	mov.w	r2, #4294967295
 80071f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f103 0208 	add.w	r2, r3, #8
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f103 0208 	add.w	r2, r3, #8
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	601a      	str	r2, [r3, #0]
}
 8007272:	bf00      	nop
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007294:	d103      	bne.n	800729e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	e00c      	b.n	80072b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3308      	adds	r3, #8
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	e002      	b.n	80072ac <vListInsert+0x2e>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d2f6      	bcs.n	80072a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6892      	ldr	r2, [r2, #8]
 8007306:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6852      	ldr	r2, [r2, #4]
 8007310:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	429a      	cmp	r2, r3
 800731a:	d103      	bne.n	8007324 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	1e5a      	subs	r2, r3, #1
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800736e:	f002 fed1 	bl	800a114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	68f9      	ldr	r1, [r7, #12]
 800737c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	441a      	add	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739e:	3b01      	subs	r3, #1
 80073a0:	68f9      	ldr	r1, [r7, #12]
 80073a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	441a      	add	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	22ff      	movs	r2, #255	; 0xff
 80073b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	22ff      	movs	r2, #255	; 0xff
 80073ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d114      	bne.n	80073ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01a      	beq.n	8007402 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3310      	adds	r3, #16
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 fdc5 	bl	8008f60 <xTaskRemoveFromEventList>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d012      	beq.n	8007402 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073dc:	4b0c      	ldr	r3, [pc, #48]	; (8007410 <xQueueGenericReset+0xcc>)
 80073de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	e009      	b.n	8007402 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3310      	adds	r3, #16
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fef2 	bl	80071dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3324      	adds	r3, #36	; 0x24
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff feed 	bl	80071dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007402:	f002 feb7 	bl	800a174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007406:	2301      	movs	r3, #1
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	; 0x38
 8007418:	af02      	add	r7, sp, #8
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <xQueueGenericCreateStatic+0x52>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <xQueueGenericCreateStatic+0x56>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <xQueueGenericCreateStatic+0x58>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	623b      	str	r3, [r7, #32]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d102      	bne.n	8007492 <xQueueGenericCreateStatic+0x7e>
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <xQueueGenericCreateStatic+0x82>
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <xQueueGenericCreateStatic+0x84>
 8007496:	2300      	movs	r3, #0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	61fb      	str	r3, [r7, #28]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074b2:	2348      	movs	r3, #72	; 0x48
 80074b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b48      	cmp	r3, #72	; 0x48
 80074ba:	d00a      	beq.n	80074d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	61bb      	str	r3, [r7, #24]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00d      	beq.n	80074fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80074ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68b9      	ldr	r1, [r7, #8]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f83f 	bl	8007578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3730      	adds	r7, #48	; 0x30
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08a      	sub	sp, #40	; 0x28
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	613b      	str	r3, [r7, #16]
}
 800752a:	bf00      	nop
 800752c:	e7fe      	b.n	800752c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	fb02 f303 	mul.w	r3, r2, r3
 8007536:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	3348      	adds	r3, #72	; 0x48
 800753c:	4618      	mov	r0, r3
 800753e:	f002 ff0b 	bl	800a358 <pvPortMalloc>
 8007542:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d011      	beq.n	800756e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	3348      	adds	r3, #72	; 0x48
 8007552:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800755c:	79fa      	ldrb	r2, [r7, #7]
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	4613      	mov	r3, r2
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f805 	bl	8007578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800756e:	69bb      	ldr	r3, [r7, #24]
	}
 8007570:	4618      	mov	r0, r3
 8007572:	3720      	adds	r7, #32
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d103      	bne.n	8007594 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	e002      	b.n	800759a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075a6:	2101      	movs	r1, #1
 80075a8:	69b8      	ldr	r0, [r7, #24]
 80075aa:	f7ff fecb 	bl	8007344 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00e      	beq.n	80075e2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80075d6:	2300      	movs	r3, #0
 80075d8:	2200      	movs	r2, #0
 80075da:	2100      	movs	r1, #0
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f8a1 	bl	8007724 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b086      	sub	sp, #24
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	4603      	mov	r3, r0
 80075f2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075f4:	2301      	movs	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	2300      	movs	r3, #0
 80075fa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	461a      	mov	r2, r3
 8007600:	6939      	ldr	r1, [r7, #16]
 8007602:	6978      	ldr	r0, [r7, #20]
 8007604:	f7ff ff7e 	bl	8007504 <xQueueGenericCreate>
 8007608:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff ffd3 	bl	80075b6 <prvInitialiseMutex>

		return xNewQueue;
 8007610:	68fb      	ldr	r3, [r7, #12]
	}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800761a:	b580      	push	{r7, lr}
 800761c:	b088      	sub	sp, #32
 800761e:	af02      	add	r7, sp, #8
 8007620:	4603      	mov	r3, r0
 8007622:	6039      	str	r1, [r7, #0]
 8007624:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007626:	2301      	movs	r3, #1
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800762e:	79fb      	ldrb	r3, [r7, #7]
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2200      	movs	r2, #0
 8007636:	6939      	ldr	r1, [r7, #16]
 8007638:	6978      	ldr	r0, [r7, #20]
 800763a:	f7ff feeb 	bl	8007414 <xQueueGenericCreateStatic>
 800763e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff ffb8 	bl	80075b6 <prvInitialiseMutex>

		return xNewQueue;
 8007646:	68fb      	ldr	r3, [r7, #12]
	}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	; 0x28
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	61bb      	str	r3, [r7, #24]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	429a      	cmp	r2, r3
 800767e:	d90a      	bls.n	8007696 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	617b      	str	r3, [r7, #20]
}
 8007692:	bf00      	nop
 8007694:	e7fe      	b.n	8007694 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007696:	2302      	movs	r3, #2
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	2100      	movs	r1, #0
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff feb7 	bl	8007414 <xQueueGenericCreateStatic>
 80076a6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80076b4:	69fb      	ldr	r3, [r7, #28]
	}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b086      	sub	sp, #24
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	613b      	str	r3, [r7, #16]
}
 80076e0:	bf00      	nop
 80076e2:	e7fe      	b.n	80076e2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d90a      	bls.n	8007702 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	60fb      	str	r3, [r7, #12]
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007702:	2202      	movs	r2, #2
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fefc 	bl	8007504 <xQueueGenericCreate>
 800770c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800771a:	697b      	ldr	r3, [r7, #20]
	}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08e      	sub	sp, #56	; 0x38
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007732:	2300      	movs	r3, #0
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10a      	bne.n	8007756 <xQueueGenericSend+0x32>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d103      	bne.n	8007764 <xQueueGenericSend+0x40>
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <xQueueGenericSend+0x44>
 8007764:	2301      	movs	r3, #1
 8007766:	e000      	b.n	800776a <xQueueGenericSend+0x46>
 8007768:	2300      	movs	r3, #0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <xQueueGenericSend+0x60>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d103      	bne.n	8007792 <xQueueGenericSend+0x6e>
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <xQueueGenericSend+0x72>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <xQueueGenericSend+0x74>
 8007796:	2300      	movs	r3, #0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	623b      	str	r3, [r7, #32]
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077b2:	f001 fd95 	bl	80092e0 <xTaskGetSchedulerState>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <xQueueGenericSend+0x9e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <xQueueGenericSend+0xa2>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <xQueueGenericSend+0xa4>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	61fb      	str	r3, [r7, #28]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077e2:	f002 fc97 	bl	800a114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d302      	bcc.n	80077f8 <xQueueGenericSend+0xd4>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d129      	bne.n	800784c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077fe:	f000 fc3b 	bl	8008078 <prvCopyDataToQueue>
 8007802:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d010      	beq.n	800782e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	3324      	adds	r3, #36	; 0x24
 8007810:	4618      	mov	r0, r3
 8007812:	f001 fba5 	bl	8008f60 <xTaskRemoveFromEventList>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d013      	beq.n	8007844 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800781c:	4b3f      	ldr	r3, [pc, #252]	; (800791c <xQueueGenericSend+0x1f8>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	e00a      	b.n	8007844 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007834:	4b39      	ldr	r3, [pc, #228]	; (800791c <xQueueGenericSend+0x1f8>)
 8007836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007844:	f002 fc96 	bl	800a174 <vPortExitCritical>
				return pdPASS;
 8007848:	2301      	movs	r3, #1
 800784a:	e063      	b.n	8007914 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007852:	f002 fc8f 	bl	800a174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007856:	2300      	movs	r3, #0
 8007858:	e05c      	b.n	8007914 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	2b00      	cmp	r3, #0
 800785e:	d106      	bne.n	800786e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007860:	f107 0314 	add.w	r3, r7, #20
 8007864:	4618      	mov	r0, r3
 8007866:	f001 fbdd 	bl	8009024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800786a:	2301      	movs	r3, #1
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800786e:	f002 fc81 	bl	800a174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007872:	f001 f951 	bl	8008b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007876:	f002 fc4d 	bl	800a114 <vPortEnterCritical>
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007880:	b25b      	sxtb	r3, r3
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007886:	d103      	bne.n	8007890 <xQueueGenericSend+0x16c>
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007896:	b25b      	sxtb	r3, r3
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789c:	d103      	bne.n	80078a6 <xQueueGenericSend+0x182>
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078a6:	f002 fc65 	bl	800a174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078aa:	1d3a      	adds	r2, r7, #4
 80078ac:	f107 0314 	add.w	r3, r7, #20
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f001 fbcc 	bl	8009050 <xTaskCheckForTimeOut>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d124      	bne.n	8007908 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078c0:	f000 fcd2 	bl	8008268 <prvIsQueueFull>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d018      	beq.n	80078fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	3310      	adds	r3, #16
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	4611      	mov	r1, r2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 faf4 	bl	8008ec0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078da:	f000 fc5d 	bl	8008198 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078de:	f001 f929 	bl	8008b34 <xTaskResumeAll>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f47f af7c 	bne.w	80077e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <xQueueGenericSend+0x1f8>)
 80078ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	e772      	b.n	80077e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078fe:	f000 fc4b 	bl	8008198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007902:	f001 f917 	bl	8008b34 <xTaskResumeAll>
 8007906:	e76c      	b.n	80077e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800790a:	f000 fc45 	bl	8008198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800790e:	f001 f911 	bl	8008b34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007912:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007914:	4618      	mov	r0, r3
 8007916:	3738      	adds	r7, #56	; 0x38
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b090      	sub	sp, #64	; 0x40
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10a      	bne.n	800794e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800794a:	bf00      	nop
 800794c:	e7fe      	b.n	800794c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d103      	bne.n	800795c <xQueueGenericSendFromISR+0x3c>
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <xQueueGenericSendFromISR+0x40>
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <xQueueGenericSendFromISR+0x42>
 8007960:	2300      	movs	r3, #0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10a      	bne.n	800797c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d103      	bne.n	800798a <xQueueGenericSendFromISR+0x6a>
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007986:	2b01      	cmp	r3, #1
 8007988:	d101      	bne.n	800798e <xQueueGenericSendFromISR+0x6e>
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <xQueueGenericSendFromISR+0x70>
 800798e:	2300      	movs	r3, #0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10a      	bne.n	80079aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	623b      	str	r3, [r7, #32]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079aa:	f002 fc95 	bl	800a2d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079ae:	f3ef 8211 	mrs	r2, BASEPRI
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	61fa      	str	r2, [r7, #28]
 80079c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d302      	bcc.n	80079dc <xQueueGenericSendFromISR+0xbc>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d12f      	bne.n	8007a3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079f2:	f000 fb41 	bl	8008078 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d112      	bne.n	8007a26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d016      	beq.n	8007a36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0a:	3324      	adds	r3, #36	; 0x24
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 faa7 	bl	8008f60 <xTaskRemoveFromEventList>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00e      	beq.n	8007a36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00b      	beq.n	8007a36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e007      	b.n	8007a36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	b25a      	sxtb	r2, r3
 8007a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a36:	2301      	movs	r3, #1
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007a3a:	e001      	b.n	8007a40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3740      	adds	r7, #64	; 0x40
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b08e      	sub	sp, #56	; 0x38
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10a      	bne.n	8007a80 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	623b      	str	r3, [r7, #32]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00a      	beq.n	8007a9e <xQueueGiveFromISR+0x48>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	61fb      	str	r3, [r7, #28]
}
 8007a9a:	bf00      	nop
 8007a9c:	e7fe      	b.n	8007a9c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <xQueueGiveFromISR+0x58>
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <xQueueGiveFromISR+0x5c>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e000      	b.n	8007ab4 <xQueueGiveFromISR+0x5e>
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <xQueueGiveFromISR+0x78>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	61bb      	str	r3, [r7, #24]
}
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ace:	f002 fc03 	bl	800a2d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007ad2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	617a      	str	r2, [r7, #20]
 8007ae8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007aea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d22b      	bcs.n	8007b56 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d112      	bne.n	8007b40 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d016      	beq.n	8007b50 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	3324      	adds	r3, #36	; 0x24
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 fa1a 	bl	8008f60 <xTaskRemoveFromEventList>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00e      	beq.n	8007b50 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00b      	beq.n	8007b50 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	e007      	b.n	8007b50 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b44:	3301      	adds	r3, #1
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	b25a      	sxtb	r2, r3
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b50:	2301      	movs	r3, #1
 8007b52:	637b      	str	r3, [r7, #52]	; 0x34
 8007b54:	e001      	b.n	8007b5a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f383 8811 	msr	BASEPRI, r3
}
 8007b64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3738      	adds	r7, #56	; 0x38
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08c      	sub	sp, #48	; 0x30
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <xQueueReceive+0x30>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	623b      	str	r3, [r7, #32]
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d103      	bne.n	8007bae <xQueueReceive+0x3e>
 8007ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <xQueueReceive+0x42>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <xQueueReceive+0x44>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <xQueueReceive+0x5e>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	61fb      	str	r3, [r7, #28]
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bce:	f001 fb87 	bl	80092e0 <xTaskGetSchedulerState>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <xQueueReceive+0x6e>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <xQueueReceive+0x72>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <xQueueReceive+0x74>
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <xQueueReceive+0x8e>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	61bb      	str	r3, [r7, #24]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bfe:	f002 fa89 	bl	800a114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d01f      	beq.n	8007c4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c0e:	68b9      	ldr	r1, [r7, #8]
 8007c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c12:	f000 fa9b 	bl	800814c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	1e5a      	subs	r2, r3, #1
 8007c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00f      	beq.n	8007c46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	3310      	adds	r3, #16
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f001 f998 	bl	8008f60 <xTaskRemoveFromEventList>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d007      	beq.n	8007c46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c36:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <xQueueReceive+0x1bc>)
 8007c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c46:	f002 fa95 	bl	800a174 <vPortExitCritical>
				return pdPASS;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e069      	b.n	8007d22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d103      	bne.n	8007c5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c54:	f002 fa8e 	bl	800a174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	e062      	b.n	8007d22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c62:	f107 0310 	add.w	r3, r7, #16
 8007c66:	4618      	mov	r0, r3
 8007c68:	f001 f9dc 	bl	8009024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c70:	f002 fa80 	bl	800a174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c74:	f000 ff50 	bl	8008b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c78:	f002 fa4c 	bl	800a114 <vPortEnterCritical>
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c82:	b25b      	sxtb	r3, r3
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d103      	bne.n	8007c92 <xQueueReceive+0x122>
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c98:	b25b      	sxtb	r3, r3
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d103      	bne.n	8007ca8 <xQueueReceive+0x138>
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ca8:	f002 fa64 	bl	800a174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cac:	1d3a      	adds	r2, r7, #4
 8007cae:	f107 0310 	add.w	r3, r7, #16
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f001 f9cb 	bl	8009050 <xTaskCheckForTimeOut>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d123      	bne.n	8007d08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc2:	f000 fabb 	bl	800823c <prvIsQueueEmpty>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d017      	beq.n	8007cfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	3324      	adds	r3, #36	; 0x24
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f001 f8f3 	bl	8008ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cdc:	f000 fa5c 	bl	8008198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ce0:	f000 ff28 	bl	8008b34 <xTaskResumeAll>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d189      	bne.n	8007bfe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007cea:	4b10      	ldr	r3, [pc, #64]	; (8007d2c <xQueueReceive+0x1bc>)
 8007cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	e780      	b.n	8007bfe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfe:	f000 fa4b 	bl	8008198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d02:	f000 ff17 	bl	8008b34 <xTaskResumeAll>
 8007d06:	e77a      	b.n	8007bfe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d0a:	f000 fa45 	bl	8008198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d0e:	f000 ff11 	bl	8008b34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d14:	f000 fa92 	bl	800823c <prvIsQueueEmpty>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f43f af6f 	beq.w	8007bfe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3730      	adds	r7, #48	; 0x30
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08e      	sub	sp, #56	; 0x38
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	623b      	str	r3, [r7, #32]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	61fb      	str	r3, [r7, #28]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d80:	f001 faae 	bl	80092e0 <xTaskGetSchedulerState>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <xQueueSemaphoreTake+0x60>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <xQueueSemaphoreTake+0x64>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <xQueueSemaphoreTake+0x66>
 8007d94:	2300      	movs	r3, #0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10a      	bne.n	8007db0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	61bb      	str	r3, [r7, #24]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007db0:	f002 f9b0 	bl	800a114 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d024      	beq.n	8007e0a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	1e5a      	subs	r2, r3, #1
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007dd0:	f001 fc2e 	bl	8009630 <pvTaskIncrementMutexHeldCount>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00f      	beq.n	8007e02 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	3310      	adds	r3, #16
 8007de6:	4618      	mov	r0, r3
 8007de8:	f001 f8ba 	bl	8008f60 <xTaskRemoveFromEventList>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007df2:	4b54      	ldr	r3, [pc, #336]	; (8007f44 <xQueueSemaphoreTake+0x214>)
 8007df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e02:	f002 f9b7 	bl	800a174 <vPortExitCritical>
				return pdPASS;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e097      	b.n	8007f3a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d111      	bne.n	8007e34 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	617b      	str	r3, [r7, #20]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e2c:	f002 f9a2 	bl	800a174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e30:	2300      	movs	r3, #0
 8007e32:	e082      	b.n	8007f3a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e3a:	f107 030c 	add.w	r3, r7, #12
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f001 f8f0 	bl	8009024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e44:	2301      	movs	r3, #1
 8007e46:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e48:	f002 f994 	bl	800a174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e4c:	f000 fe64 	bl	8008b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e50:	f002 f960 	bl	800a114 <vPortEnterCritical>
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e5a:	b25b      	sxtb	r3, r3
 8007e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e60:	d103      	bne.n	8007e6a <xQueueSemaphoreTake+0x13a>
 8007e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e70:	b25b      	sxtb	r3, r3
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d103      	bne.n	8007e80 <xQueueSemaphoreTake+0x150>
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e80:	f002 f978 	bl	800a174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e84:	463a      	mov	r2, r7
 8007e86:	f107 030c 	add.w	r3, r7, #12
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f001 f8df 	bl	8009050 <xTaskCheckForTimeOut>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d132      	bne.n	8007efe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e9a:	f000 f9cf 	bl	800823c <prvIsQueueEmpty>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d026      	beq.n	8007ef2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d109      	bne.n	8007ec0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007eac:	f002 f932 	bl	800a114 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 fa31 	bl	800931c <xTaskPriorityInherit>
 8007eba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007ebc:	f002 f95a 	bl	800a174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	3324      	adds	r3, #36	; 0x24
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 fff9 	bl	8008ec0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ece:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ed0:	f000 f962 	bl	8008198 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ed4:	f000 fe2e 	bl	8008b34 <xTaskResumeAll>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f47f af68 	bne.w	8007db0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007ee0:	4b18      	ldr	r3, [pc, #96]	; (8007f44 <xQueueSemaphoreTake+0x214>)
 8007ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	e75e      	b.n	8007db0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ef4:	f000 f950 	bl	8008198 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ef8:	f000 fe1c 	bl	8008b34 <xTaskResumeAll>
 8007efc:	e758      	b.n	8007db0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f00:	f000 f94a 	bl	8008198 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f04:	f000 fe16 	bl	8008b34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f0a:	f000 f997 	bl	800823c <prvIsQueueEmpty>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f43f af4d 	beq.w	8007db0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00d      	beq.n	8007f38 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007f1c:	f002 f8fa 	bl	800a114 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f22:	f000 f891 	bl	8008048 <prvGetDisinheritPriorityAfterTimeout>
 8007f26:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 faf0 	bl	8009514 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f34:	f002 f91e 	bl	800a174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3738      	adds	r7, #56	; 0x38
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08e      	sub	sp, #56	; 0x38
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	623b      	str	r3, [r7, #32]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d103      	bne.n	8007f82 <xQueueReceiveFromISR+0x3a>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <xQueueReceiveFromISR+0x3e>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <xQueueReceiveFromISR+0x40>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10a      	bne.n	8007fa2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	61fb      	str	r3, [r7, #28]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fa2:	f002 f999 	bl	800a2d8 <vPortValidateInterruptPriority>
	__asm volatile
 8007fa6:	f3ef 8211 	mrs	r2, BASEPRI
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	61ba      	str	r2, [r7, #24]
 8007fbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007fbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d02f      	beq.n	800802e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fdc:	f000 f8b6 	bl	800814c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	1e5a      	subs	r2, r3, #1
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007fe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff0:	d112      	bne.n	8008018 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d016      	beq.n	8008028 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	3310      	adds	r3, #16
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ffae 	bl	8008f60 <xTaskRemoveFromEventList>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00b      	beq.n	8008028 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	e007      	b.n	8008028 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800801c:	3301      	adds	r3, #1
 800801e:	b2db      	uxtb	r3, r3
 8008020:	b25a      	sxtb	r2, r3
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008028:	2301      	movs	r3, #1
 800802a:	637b      	str	r3, [r7, #52]	; 0x34
 800802c:	e001      	b.n	8008032 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800802e:	2300      	movs	r3, #0
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f383 8811 	msr	BASEPRI, r3
}
 800803c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800803e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008040:	4618      	mov	r0, r3
 8008042:	3738      	adds	r7, #56	; 0x38
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	d006      	beq.n	8008066 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f1c3 0307 	rsb	r3, r3, #7
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	e001      	b.n	800806a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800806a:	68fb      	ldr	r3, [r7, #12]
	}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10d      	bne.n	80080b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d14d      	bne.n	800813a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f001 f9b0 	bl	8009408 <xTaskPriorityDisinherit>
 80080a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	609a      	str	r2, [r3, #8]
 80080b0:	e043      	b.n	800813a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d119      	bne.n	80080ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6858      	ldr	r0, [r3, #4]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	461a      	mov	r2, r3
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	f011 fad3 	bl	801966e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	441a      	add	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d32b      	bcc.n	800813a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	605a      	str	r2, [r3, #4]
 80080ea:	e026      	b.n	800813a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68d8      	ldr	r0, [r3, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f4:	461a      	mov	r2, r3
 80080f6:	68b9      	ldr	r1, [r7, #8]
 80080f8:	f011 fab9 	bl	801966e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	425b      	negs	r3, r3
 8008106:	441a      	add	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d207      	bcs.n	8008128 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008120:	425b      	negs	r3, r3
 8008122:	441a      	add	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d105      	bne.n	800813a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	3b01      	subs	r3, #1
 8008138:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008142:	697b      	ldr	r3, [r7, #20]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d018      	beq.n	8008190 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	441a      	add	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68da      	ldr	r2, [r3, #12]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	429a      	cmp	r2, r3
 8008176:	d303      	bcc.n	8008180 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68d9      	ldr	r1, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008188:	461a      	mov	r2, r3
 800818a:	6838      	ldr	r0, [r7, #0]
 800818c:	f011 fa6f 	bl	801966e <memcpy>
	}
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081a0:	f001 ffb8 	bl	800a114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081ac:	e011      	b.n	80081d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d012      	beq.n	80081dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3324      	adds	r3, #36	; 0x24
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fed0 	bl	8008f60 <xTaskRemoveFromEventList>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081c6:	f000 ffa5 	bl	8009114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dce9      	bgt.n	80081ae <prvUnlockQueue+0x16>
 80081da:	e000      	b.n	80081de <prvUnlockQueue+0x46>
					break;
 80081dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	22ff      	movs	r2, #255	; 0xff
 80081e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081e6:	f001 ffc5 	bl	800a174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081ea:	f001 ff93 	bl	800a114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081f6:	e011      	b.n	800821c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d012      	beq.n	8008226 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3310      	adds	r3, #16
 8008204:	4618      	mov	r0, r3
 8008206:	f000 feab 	bl	8008f60 <xTaskRemoveFromEventList>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008210:	f000 ff80 	bl	8009114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	3b01      	subs	r3, #1
 8008218:	b2db      	uxtb	r3, r3
 800821a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800821c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008220:	2b00      	cmp	r3, #0
 8008222:	dce9      	bgt.n	80081f8 <prvUnlockQueue+0x60>
 8008224:	e000      	b.n	8008228 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008226:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	22ff      	movs	r2, #255	; 0xff
 800822c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008230:	f001 ffa0 	bl	800a174 <vPortExitCritical>
}
 8008234:	bf00      	nop
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008244:	f001 ff66 	bl	800a114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	2b00      	cmp	r3, #0
 800824e:	d102      	bne.n	8008256 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008250:	2301      	movs	r3, #1
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e001      	b.n	800825a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800825a:	f001 ff8b 	bl	800a174 <vPortExitCritical>

	return xReturn;
 800825e:	68fb      	ldr	r3, [r7, #12]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008270:	f001 ff50 	bl	800a114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827c:	429a      	cmp	r2, r3
 800827e:	d102      	bne.n	8008286 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008280:	2301      	movs	r3, #1
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e001      	b.n	800828a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800828a:	f001 ff73 	bl	800a174 <vPortExitCritical>

	return xReturn;
 800828e:	68fb      	ldr	r3, [r7, #12]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	e014      	b.n	80082d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082a8:	4a0f      	ldr	r2, [pc, #60]	; (80082e8 <vQueueAddToRegistry+0x50>)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10b      	bne.n	80082cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082b4:	490c      	ldr	r1, [pc, #48]	; (80082e8 <vQueueAddToRegistry+0x50>)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082be:	4a0a      	ldr	r2, [pc, #40]	; (80082e8 <vQueueAddToRegistry+0x50>)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	4413      	add	r3, r2
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082ca:	e006      	b.n	80082da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3301      	adds	r3, #1
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2b07      	cmp	r3, #7
 80082d6:	d9e7      	bls.n	80082a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20009d24 	.word	0x20009d24

080082ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082fc:	f001 ff0a 	bl	800a114 <vPortEnterCritical>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008306:	b25b      	sxtb	r3, r3
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d103      	bne.n	8008316 <vQueueWaitForMessageRestricted+0x2a>
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800831c:	b25b      	sxtb	r3, r3
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d103      	bne.n	800832c <vQueueWaitForMessageRestricted+0x40>
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800832c:	f001 ff22 	bl	800a174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	2b00      	cmp	r3, #0
 8008336:	d106      	bne.n	8008346 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	3324      	adds	r3, #36	; 0x24
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	68b9      	ldr	r1, [r7, #8]
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fde1 	bl	8008f08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008346:	6978      	ldr	r0, [r7, #20]
 8008348:	f7ff ff26 	bl	8008198 <prvUnlockQueue>
	}
 800834c:	bf00      	nop
 800834e:	3718      	adds	r7, #24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08e      	sub	sp, #56	; 0x38
 8008358:	af04      	add	r7, sp, #16
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	623b      	str	r3, [r7, #32]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xTaskCreateStatic+0x46>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	61fb      	str	r3, [r7, #28]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800839a:	23b4      	movs	r3, #180	; 0xb4
 800839c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	2bb4      	cmp	r3, #180	; 0xb4
 80083a2:	d00a      	beq.n	80083ba <xTaskCreateStatic+0x66>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	61bb      	str	r3, [r7, #24]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01e      	beq.n	8008400 <xTaskCreateStatic+0xac>
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01b      	beq.n	8008400 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	2202      	movs	r2, #2
 80083d6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083da:	2300      	movs	r3, #0
 80083dc:	9303      	str	r3, [sp, #12]
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	f107 0314 	add.w	r3, r7, #20
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f850 	bl	8008498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083fa:	f000 f8eb 	bl	80085d4 <prvAddNewTaskToReadyList>
 80083fe:	e001      	b.n	8008404 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008400:	2300      	movs	r3, #0
 8008402:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008404:	697b      	ldr	r3, [r7, #20]
	}
 8008406:	4618      	mov	r0, r3
 8008408:	3728      	adds	r7, #40	; 0x28
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800840e:	b580      	push	{r7, lr}
 8008410:	b08c      	sub	sp, #48	; 0x30
 8008412:	af04      	add	r7, sp, #16
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	603b      	str	r3, [r7, #0]
 800841a:	4613      	mov	r3, r2
 800841c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4618      	mov	r0, r3
 8008424:	f001 ff98 	bl	800a358 <pvPortMalloc>
 8008428:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00e      	beq.n	800844e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008430:	20b4      	movs	r0, #180	; 0xb4
 8008432:	f001 ff91 	bl	800a358 <pvPortMalloc>
 8008436:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
 8008444:	e005      	b.n	8008452 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008446:	6978      	ldr	r0, [r7, #20]
 8008448:	f002 f852 	bl	800a4f0 <vPortFree>
 800844c:	e001      	b.n	8008452 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d017      	beq.n	8008488 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	2300      	movs	r3, #0
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 f80e 	bl	8008498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800847c:	69f8      	ldr	r0, [r7, #28]
 800847e:	f000 f8a9 	bl	80085d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008482:	2301      	movs	r3, #1
 8008484:	61bb      	str	r3, [r7, #24]
 8008486:	e002      	b.n	800848e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008488:	f04f 33ff 	mov.w	r3, #4294967295
 800848c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800848e:	69bb      	ldr	r3, [r7, #24]
	}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084b0:	3b01      	subs	r3, #1
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	617b      	str	r3, [r7, #20]
}
 80084dc:	bf00      	nop
 80084de:	e7fe      	b.n	80084de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01f      	beq.n	8008526 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084e6:	2300      	movs	r3, #0
 80084e8:	61fb      	str	r3, [r7, #28]
 80084ea:	e012      	b.n	8008512 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	4413      	add	r3, r2
 80084f2:	7819      	ldrb	r1, [r3, #0]
 80084f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	4413      	add	r3, r2
 80084fa:	3334      	adds	r3, #52	; 0x34
 80084fc:	460a      	mov	r2, r1
 80084fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d006      	beq.n	800851a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	3301      	adds	r3, #1
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	2b0f      	cmp	r3, #15
 8008516:	d9e9      	bls.n	80084ec <prvInitialiseNewTask+0x54>
 8008518:	e000      	b.n	800851c <prvInitialiseNewTask+0x84>
			{
				break;
 800851a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008524:	e003      	b.n	800852e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	2b06      	cmp	r3, #6
 8008532:	d901      	bls.n	8008538 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008534:	2306      	movs	r3, #6
 8008536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800853c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008542:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	2200      	movs	r2, #0
 8008548:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fe64 	bl	800721c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	3318      	adds	r3, #24
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fe5f 	bl	800721c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	f1c3 0207 	rsb	r2, r3, #7
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	2200      	movs	r2, #0
 8008580:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	334c      	adds	r3, #76	; 0x4c
 8008588:	2260      	movs	r2, #96	; 0x60
 800858a:	2100      	movs	r1, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f011 f87c 	bl	801968a <memset>
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	4a0c      	ldr	r2, [pc, #48]	; (80085c8 <prvInitialiseNewTask+0x130>)
 8008596:	651a      	str	r2, [r3, #80]	; 0x50
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	4a0c      	ldr	r2, [pc, #48]	; (80085cc <prvInitialiseNewTask+0x134>)
 800859c:	655a      	str	r2, [r3, #84]	; 0x54
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	4a0b      	ldr	r2, [pc, #44]	; (80085d0 <prvInitialiseNewTask+0x138>)
 80085a2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	68f9      	ldr	r1, [r7, #12]
 80085a8:	69b8      	ldr	r0, [r7, #24]
 80085aa:	f001 fc87 	bl	8009ebc <pxPortInitialiseStack>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085c0:	bf00      	nop
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	0801ad18 	.word	0x0801ad18
 80085cc:	0801ad38 	.word	0x0801ad38
 80085d0:	0801acf8 	.word	0x0801acf8

080085d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085dc:	f001 fd9a 	bl	800a114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085e0:	4b2a      	ldr	r3, [pc, #168]	; (800868c <prvAddNewTaskToReadyList+0xb8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3301      	adds	r3, #1
 80085e6:	4a29      	ldr	r2, [pc, #164]	; (800868c <prvAddNewTaskToReadyList+0xb8>)
 80085e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085ea:	4b29      	ldr	r3, [pc, #164]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085f2:	4a27      	ldr	r2, [pc, #156]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085f8:	4b24      	ldr	r3, [pc, #144]	; (800868c <prvAddNewTaskToReadyList+0xb8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d110      	bne.n	8008622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008600:	f000 fdac 	bl	800915c <prvInitialiseTaskLists>
 8008604:	e00d      	b.n	8008622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008606:	4b23      	ldr	r3, [pc, #140]	; (8008694 <prvAddNewTaskToReadyList+0xc0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	429a      	cmp	r2, r3
 800861a:	d802      	bhi.n	8008622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800861c:	4a1c      	ldr	r2, [pc, #112]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008622:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <prvAddNewTaskToReadyList+0xc4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	4a1b      	ldr	r2, [pc, #108]	; (8008698 <prvAddNewTaskToReadyList+0xc4>)
 800862a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	2201      	movs	r2, #1
 8008632:	409a      	lsls	r2, r3
 8008634:	4b19      	ldr	r3, [pc, #100]	; (800869c <prvAddNewTaskToReadyList+0xc8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4313      	orrs	r3, r2
 800863a:	4a18      	ldr	r2, [pc, #96]	; (800869c <prvAddNewTaskToReadyList+0xc8>)
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <prvAddNewTaskToReadyList+0xcc>)
 800864c:	441a      	add	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f7fe fdee 	bl	8007236 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800865a:	f001 fd8b 	bl	800a174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800865e:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <prvAddNewTaskToReadyList+0xc0>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00e      	beq.n	8008684 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008666:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	429a      	cmp	r2, r3
 8008672:	d207      	bcs.n	8008684 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008674:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <prvAddNewTaskToReadyList+0xd0>)
 8008676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000964 	.word	0x20000964
 8008690:	20000864 	.word	0x20000864
 8008694:	20000970 	.word	0x20000970
 8008698:	20000980 	.word	0x20000980
 800869c:	2000096c 	.word	0x2000096c
 80086a0:	20000868 	.word	0x20000868
 80086a4:	e000ed04 	.word	0xe000ed04

080086a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d017      	beq.n	80086ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086ba:	4b13      	ldr	r3, [pc, #76]	; (8008708 <vTaskDelay+0x60>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <vTaskDelay+0x30>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	60bb      	str	r3, [r7, #8]
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80086d8:	f000 fa1e 	bl	8008b18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086dc:	2100      	movs	r1, #0
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 ffba 	bl	8009658 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086e4:	f000 fa26 	bl	8008b34 <xTaskResumeAll>
 80086e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d107      	bne.n	8008700 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <vTaskDelay+0x64>)
 80086f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008700:	bf00      	nop
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	2000098c 	.word	0x2000098c
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008718:	f001 fcfc 	bl	800a114 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d102      	bne.n	8008728 <vTaskSuspend+0x18>
 8008722:	4b3c      	ldr	r3, [pc, #240]	; (8008814 <vTaskSuspend+0x104>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	e000      	b.n	800872a <vTaskSuspend+0x1a>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3304      	adds	r3, #4
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe fddd 	bl	80072f0 <uxListRemove>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d115      	bne.n	8008768 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008740:	4935      	ldr	r1, [pc, #212]	; (8008818 <vTaskSuspend+0x108>)
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <vTaskSuspend+0x58>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008756:	2201      	movs	r2, #1
 8008758:	fa02 f303 	lsl.w	r3, r2, r3
 800875c:	43da      	mvns	r2, r3
 800875e:	4b2f      	ldr	r3, [pc, #188]	; (800881c <vTaskSuspend+0x10c>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4013      	ands	r3, r2
 8008764:	4a2d      	ldr	r2, [pc, #180]	; (800881c <vTaskSuspend+0x10c>)
 8008766:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3318      	adds	r3, #24
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fdbb 	bl	80072f0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3304      	adds	r3, #4
 800877e:	4619      	mov	r1, r3
 8008780:	4827      	ldr	r0, [pc, #156]	; (8008820 <vTaskSuspend+0x110>)
 8008782:	f7fe fd58 	bl	8007236 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b01      	cmp	r3, #1
 8008790:	d103      	bne.n	800879a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800879a:	f001 fceb 	bl	800a174 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800879e:	4b21      	ldr	r3, [pc, #132]	; (8008824 <vTaskSuspend+0x114>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80087a6:	f001 fcb5 	bl	800a114 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80087aa:	f000 fd79 	bl	80092a0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80087ae:	f001 fce1 	bl	800a174 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80087b2:	4b18      	ldr	r3, [pc, #96]	; (8008814 <vTaskSuspend+0x104>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d127      	bne.n	800880c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80087bc:	4b19      	ldr	r3, [pc, #100]	; (8008824 <vTaskSuspend+0x114>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d017      	beq.n	80087f4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80087c4:	4b18      	ldr	r3, [pc, #96]	; (8008828 <vTaskSuspend+0x118>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <vTaskSuspend+0xd2>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	60bb      	str	r3, [r7, #8]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80087e2:	4b12      	ldr	r3, [pc, #72]	; (800882c <vTaskSuspend+0x11c>)
 80087e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087f2:	e00b      	b.n	800880c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80087f4:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <vTaskSuspend+0x110>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	4b0d      	ldr	r3, [pc, #52]	; (8008830 <vTaskSuspend+0x120>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d103      	bne.n	8008808 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8008800:	4b04      	ldr	r3, [pc, #16]	; (8008814 <vTaskSuspend+0x104>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
	}
 8008806:	e001      	b.n	800880c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8008808:	f000 faf8 	bl	8008dfc <vTaskSwitchContext>
	}
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20000864 	.word	0x20000864
 8008818:	20000868 	.word	0x20000868
 800881c:	2000096c 	.word	0x2000096c
 8008820:	20000950 	.word	0x20000950
 8008824:	20000970 	.word	0x20000970
 8008828:	2000098c 	.word	0x2000098c
 800882c:	e000ed04 	.word	0xe000ed04
 8008830:	20000964 	.word	0x20000964

08008834 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008834:	b480      	push	{r7}
 8008836:	b087      	sub	sp, #28
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800883c:	2300      	movs	r3, #0
 800883e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d10a      	bne.n	8008860 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	60fb      	str	r3, [r7, #12]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	4a0a      	ldr	r2, [pc, #40]	; (8008890 <prvTaskIsTaskSuspended+0x5c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d10a      	bne.n	8008880 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	4a09      	ldr	r2, [pc, #36]	; (8008894 <prvTaskIsTaskSuspended+0x60>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d005      	beq.n	8008880 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800887c:	2301      	movs	r3, #1
 800887e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008880:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008882:	4618      	mov	r0, r3
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	20000950 	.word	0x20000950
 8008894:	20000924 	.word	0x20000924

08008898 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <vTaskResume+0x28>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	60bb      	str	r3, [r7, #8]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80088c0:	4b20      	ldr	r3, [pc, #128]	; (8008944 <vTaskResume+0xac>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d037      	beq.n	800893a <vTaskResume+0xa2>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d034      	beq.n	800893a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80088d0:	f001 fc20 	bl	800a114 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7ff ffad 	bl	8008834 <prvTaskIsTaskSuspended>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d02a      	beq.n	8008936 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fd03 	bl	80072f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	2201      	movs	r2, #1
 80088f0:	409a      	lsls	r2, r3
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <vTaskResume+0xb0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	4a13      	ldr	r2, [pc, #76]	; (8008948 <vTaskResume+0xb0>)
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4a10      	ldr	r2, [pc, #64]	; (800894c <vTaskResume+0xb4>)
 800890a:	441a      	add	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3304      	adds	r3, #4
 8008910:	4619      	mov	r1, r3
 8008912:	4610      	mov	r0, r2
 8008914:	f7fe fc8f 	bl	8007236 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	4b09      	ldr	r3, [pc, #36]	; (8008944 <vTaskResume+0xac>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	429a      	cmp	r2, r3
 8008924:	d307      	bcc.n	8008936 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <vTaskResume+0xb8>)
 8008928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008936:	f001 fc1d 	bl	800a174 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000864 	.word	0x20000864
 8008948:	2000096c 	.word	0x2000096c
 800894c:	20000868 	.word	0x20000868
 8008950:	e000ed04 	.word	0xe000ed04

08008954 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8008954:	b580      	push	{r7, lr}
 8008956:	b08a      	sub	sp, #40	; 0x28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800895c:	2300      	movs	r3, #0
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	61bb      	str	r3, [r7, #24]
}
 800897c:	bf00      	nop
 800897e:	e7fe      	b.n	800897e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008980:	f001 fcaa 	bl	800a2d8 <vPortValidateInterruptPriority>
	__asm volatile
 8008984:	f3ef 8211 	mrs	r2, BASEPRI
 8008988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	617a      	str	r2, [r7, #20]
 800899a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800899c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800899e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80089a0:	6a38      	ldr	r0, [r7, #32]
 80089a2:	f7ff ff47 	bl	8008834 <prvTaskIsTaskSuspended>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d02f      	beq.n	8008a0c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089ac:	4b1d      	ldr	r3, [pc, #116]	; (8008a24 <xTaskResumeFromISR+0xd0>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d125      	bne.n	8008a00 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <xTaskResumeFromISR+0xd4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	429a      	cmp	r2, r3
 80089c0:	d301      	bcc.n	80089c6 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80089c2:	2301      	movs	r3, #1
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	3304      	adds	r3, #4
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe fc90 	bl	80072f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	2201      	movs	r2, #1
 80089d6:	409a      	lsls	r2, r3
 80089d8:	4b14      	ldr	r3, [pc, #80]	; (8008a2c <xTaskResumeFromISR+0xd8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4313      	orrs	r3, r2
 80089de:	4a13      	ldr	r2, [pc, #76]	; (8008a2c <xTaskResumeFromISR+0xd8>)
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4a10      	ldr	r2, [pc, #64]	; (8008a30 <xTaskResumeFromISR+0xdc>)
 80089f0:	441a      	add	r2, r3
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4619      	mov	r1, r3
 80089f8:	4610      	mov	r0, r2
 80089fa:	f7fe fc1c 	bl	8007236 <vListInsertEnd>
 80089fe:	e005      	b.n	8008a0c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	3318      	adds	r3, #24
 8008a04:	4619      	mov	r1, r3
 8008a06:	480b      	ldr	r0, [pc, #44]	; (8008a34 <xTaskResumeFromISR+0xe0>)
 8008a08:	f7fe fc15 	bl	8007236 <vListInsertEnd>
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f383 8811 	msr	BASEPRI, r3
}
 8008a16:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3728      	adds	r7, #40	; 0x28
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	2000098c 	.word	0x2000098c
 8008a28:	20000864 	.word	0x20000864
 8008a2c:	2000096c 	.word	0x2000096c
 8008a30:	20000868 	.word	0x20000868
 8008a34:	20000924 	.word	0x20000924

08008a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	; 0x28
 8008a3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a46:	463a      	mov	r2, r7
 8008a48:	1d39      	adds	r1, r7, #4
 8008a4a:	f107 0308 	add.w	r3, r7, #8
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f7 fd92 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	9202      	str	r2, [sp, #8]
 8008a5c:	9301      	str	r3, [sp, #4]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	2300      	movs	r3, #0
 8008a64:	460a      	mov	r2, r1
 8008a66:	4924      	ldr	r1, [pc, #144]	; (8008af8 <vTaskStartScheduler+0xc0>)
 8008a68:	4824      	ldr	r0, [pc, #144]	; (8008afc <vTaskStartScheduler+0xc4>)
 8008a6a:	f7ff fc73 	bl	8008354 <xTaskCreateStatic>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	4a23      	ldr	r2, [pc, #140]	; (8008b00 <vTaskStartScheduler+0xc8>)
 8008a72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a74:	4b22      	ldr	r3, [pc, #136]	; (8008b00 <vTaskStartScheduler+0xc8>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	e001      	b.n	8008a86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d102      	bne.n	8008a92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a8c:	f000 fe4a 	bl	8009724 <xTimerCreateTimerTask>
 8008a90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d11b      	bne.n	8008ad0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	613b      	str	r3, [r7, #16]
}
 8008aaa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008aac:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <vTaskStartScheduler+0xcc>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	334c      	adds	r3, #76	; 0x4c
 8008ab2:	4a15      	ldr	r2, [pc, #84]	; (8008b08 <vTaskStartScheduler+0xd0>)
 8008ab4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ab6:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <vTaskStartScheduler+0xd4>)
 8008ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8008abc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008abe:	4b14      	ldr	r3, [pc, #80]	; (8008b10 <vTaskStartScheduler+0xd8>)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ac4:	4b13      	ldr	r3, [pc, #76]	; (8008b14 <vTaskStartScheduler+0xdc>)
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008aca:	f001 fa81 	bl	8009fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ace:	e00e      	b.n	8008aee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad6:	d10a      	bne.n	8008aee <vTaskStartScheduler+0xb6>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	60fb      	str	r3, [r7, #12]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <vTaskStartScheduler+0xb4>
}
 8008aee:	bf00      	nop
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	0801a85c 	.word	0x0801a85c
 8008afc:	0800912d 	.word	0x0800912d
 8008b00:	20000988 	.word	0x20000988
 8008b04:	20000864 	.word	0x20000864
 8008b08:	20000070 	.word	0x20000070
 8008b0c:	20000984 	.word	0x20000984
 8008b10:	20000970 	.word	0x20000970
 8008b14:	20000968 	.word	0x20000968

08008b18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b18:	b480      	push	{r7}
 8008b1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b1c:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <vTaskSuspendAll+0x18>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3301      	adds	r3, #1
 8008b22:	4a03      	ldr	r2, [pc, #12]	; (8008b30 <vTaskSuspendAll+0x18>)
 8008b24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b26:	bf00      	nop
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	2000098c 	.word	0x2000098c

08008b34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b42:	4b41      	ldr	r3, [pc, #260]	; (8008c48 <xTaskResumeAll+0x114>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10a      	bne.n	8008b60 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	603b      	str	r3, [r7, #0]
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b60:	f001 fad8 	bl	800a114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b64:	4b38      	ldr	r3, [pc, #224]	; (8008c48 <xTaskResumeAll+0x114>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	4a37      	ldr	r2, [pc, #220]	; (8008c48 <xTaskResumeAll+0x114>)
 8008b6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b6e:	4b36      	ldr	r3, [pc, #216]	; (8008c48 <xTaskResumeAll+0x114>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d161      	bne.n	8008c3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b76:	4b35      	ldr	r3, [pc, #212]	; (8008c4c <xTaskResumeAll+0x118>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d05d      	beq.n	8008c3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b7e:	e02e      	b.n	8008bde <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b80:	4b33      	ldr	r3, [pc, #204]	; (8008c50 <xTaskResumeAll+0x11c>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3318      	adds	r3, #24
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fe fbaf 	bl	80072f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3304      	adds	r3, #4
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fe fbaa 	bl	80072f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	409a      	lsls	r2, r3
 8008ba4:	4b2b      	ldr	r3, [pc, #172]	; (8008c54 <xTaskResumeAll+0x120>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	4a2a      	ldr	r2, [pc, #168]	; (8008c54 <xTaskResumeAll+0x120>)
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4a27      	ldr	r2, [pc, #156]	; (8008c58 <xTaskResumeAll+0x124>)
 8008bbc:	441a      	add	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	f7fe fb36 	bl	8007236 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bce:	4b23      	ldr	r3, [pc, #140]	; (8008c5c <xTaskResumeAll+0x128>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d302      	bcc.n	8008bde <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008bd8:	4b21      	ldr	r3, [pc, #132]	; (8008c60 <xTaskResumeAll+0x12c>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bde:	4b1c      	ldr	r3, [pc, #112]	; (8008c50 <xTaskResumeAll+0x11c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1cc      	bne.n	8008b80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bec:	f000 fb58 	bl	80092a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bf0:	4b1c      	ldr	r3, [pc, #112]	; (8008c64 <xTaskResumeAll+0x130>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d010      	beq.n	8008c1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bfc:	f000 f846 	bl	8008c8c <xTaskIncrementTick>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008c06:	4b16      	ldr	r3, [pc, #88]	; (8008c60 <xTaskResumeAll+0x12c>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f1      	bne.n	8008bfc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008c18:	4b12      	ldr	r3, [pc, #72]	; (8008c64 <xTaskResumeAll+0x130>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c1e:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <xTaskResumeAll+0x12c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d009      	beq.n	8008c3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c26:	2301      	movs	r3, #1
 8008c28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c2a:	4b0f      	ldr	r3, [pc, #60]	; (8008c68 <xTaskResumeAll+0x134>)
 8008c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c30:	601a      	str	r2, [r3, #0]
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c3a:	f001 fa9b 	bl	800a174 <vPortExitCritical>

	return xAlreadyYielded;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	2000098c 	.word	0x2000098c
 8008c4c:	20000964 	.word	0x20000964
 8008c50:	20000924 	.word	0x20000924
 8008c54:	2000096c 	.word	0x2000096c
 8008c58:	20000868 	.word	0x20000868
 8008c5c:	20000864 	.word	0x20000864
 8008c60:	20000978 	.word	0x20000978
 8008c64:	20000974 	.word	0x20000974
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c72:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <xTaskGetTickCount+0x1c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c78:	687b      	ldr	r3, [r7, #4]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	20000968 	.word	0x20000968

08008c8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c96:	4b4e      	ldr	r3, [pc, #312]	; (8008dd0 <xTaskIncrementTick+0x144>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f040 808e 	bne.w	8008dbc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ca0:	4b4c      	ldr	r3, [pc, #304]	; (8008dd4 <xTaskIncrementTick+0x148>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ca8:	4a4a      	ldr	r2, [pc, #296]	; (8008dd4 <xTaskIncrementTick+0x148>)
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d120      	bne.n	8008cf6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cb4:	4b48      	ldr	r3, [pc, #288]	; (8008dd8 <xTaskIncrementTick+0x14c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	603b      	str	r3, [r7, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <xTaskIncrementTick+0x46>
 8008cd4:	4b40      	ldr	r3, [pc, #256]	; (8008dd8 <xTaskIncrementTick+0x14c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	4b40      	ldr	r3, [pc, #256]	; (8008ddc <xTaskIncrementTick+0x150>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a3e      	ldr	r2, [pc, #248]	; (8008dd8 <xTaskIncrementTick+0x14c>)
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	4a3e      	ldr	r2, [pc, #248]	; (8008ddc <xTaskIncrementTick+0x150>)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	4b3d      	ldr	r3, [pc, #244]	; (8008de0 <xTaskIncrementTick+0x154>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3301      	adds	r3, #1
 8008cee:	4a3c      	ldr	r2, [pc, #240]	; (8008de0 <xTaskIncrementTick+0x154>)
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	f000 fad5 	bl	80092a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cf6:	4b3b      	ldr	r3, [pc, #236]	; (8008de4 <xTaskIncrementTick+0x158>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d348      	bcc.n	8008d92 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d00:	4b35      	ldr	r3, [pc, #212]	; (8008dd8 <xTaskIncrementTick+0x14c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d104      	bne.n	8008d14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d0a:	4b36      	ldr	r3, [pc, #216]	; (8008de4 <xTaskIncrementTick+0x158>)
 8008d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d10:	601a      	str	r2, [r3, #0]
					break;
 8008d12:	e03e      	b.n	8008d92 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d14:	4b30      	ldr	r3, [pc, #192]	; (8008dd8 <xTaskIncrementTick+0x14c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d203      	bcs.n	8008d34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d2c:	4a2d      	ldr	r2, [pc, #180]	; (8008de4 <xTaskIncrementTick+0x158>)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d32:	e02e      	b.n	8008d92 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fe fad9 	bl	80072f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d004      	beq.n	8008d50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	3318      	adds	r3, #24
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fad0 	bl	80072f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	2201      	movs	r2, #1
 8008d56:	409a      	lsls	r2, r3
 8008d58:	4b23      	ldr	r3, [pc, #140]	; (8008de8 <xTaskIncrementTick+0x15c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	4a22      	ldr	r2, [pc, #136]	; (8008de8 <xTaskIncrementTick+0x15c>)
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <xTaskIncrementTick+0x160>)
 8008d70:	441a      	add	r2, r3
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	3304      	adds	r3, #4
 8008d76:	4619      	mov	r1, r3
 8008d78:	4610      	mov	r0, r2
 8008d7a:	f7fe fa5c 	bl	8007236 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d82:	4b1b      	ldr	r3, [pc, #108]	; (8008df0 <xTaskIncrementTick+0x164>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d3b9      	bcc.n	8008d00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d90:	e7b6      	b.n	8008d00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d92:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <xTaskIncrementTick+0x164>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d98:	4914      	ldr	r1, [pc, #80]	; (8008dec <xTaskIncrementTick+0x160>)
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	440b      	add	r3, r1
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d901      	bls.n	8008dae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008daa:	2301      	movs	r3, #1
 8008dac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008dae:	4b11      	ldr	r3, [pc, #68]	; (8008df4 <xTaskIncrementTick+0x168>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d007      	beq.n	8008dc6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008db6:	2301      	movs	r3, #1
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	e004      	b.n	8008dc6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008dbc:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <xTaskIncrementTick+0x16c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	4a0d      	ldr	r2, [pc, #52]	; (8008df8 <xTaskIncrementTick+0x16c>)
 8008dc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008dc6:	697b      	ldr	r3, [r7, #20]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	2000098c 	.word	0x2000098c
 8008dd4:	20000968 	.word	0x20000968
 8008dd8:	2000091c 	.word	0x2000091c
 8008ddc:	20000920 	.word	0x20000920
 8008de0:	2000097c 	.word	0x2000097c
 8008de4:	20000984 	.word	0x20000984
 8008de8:	2000096c 	.word	0x2000096c
 8008dec:	20000868 	.word	0x20000868
 8008df0:	20000864 	.word	0x20000864
 8008df4:	20000978 	.word	0x20000978
 8008df8:	20000974 	.word	0x20000974

08008dfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e02:	4b29      	ldr	r3, [pc, #164]	; (8008ea8 <vTaskSwitchContext+0xac>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e0a:	4b28      	ldr	r3, [pc, #160]	; (8008eac <vTaskSwitchContext+0xb0>)
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e10:	e044      	b.n	8008e9c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008e12:	4b26      	ldr	r3, [pc, #152]	; (8008eac <vTaskSwitchContext+0xb0>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e18:	4b25      	ldr	r3, [pc, #148]	; (8008eb0 <vTaskSwitchContext+0xb4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	fab3 f383 	clz	r3, r3
 8008e24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e26:	7afb      	ldrb	r3, [r7, #11]
 8008e28:	f1c3 031f 	rsb	r3, r3, #31
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	4921      	ldr	r1, [pc, #132]	; (8008eb4 <vTaskSwitchContext+0xb8>)
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	4613      	mov	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10a      	bne.n	8008e58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	607b      	str	r3, [r7, #4]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <vTaskSwitchContext+0x5a>
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4a14      	ldr	r2, [pc, #80]	; (8008eb4 <vTaskSwitchContext+0xb8>)
 8008e64:	4413      	add	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	605a      	str	r2, [r3, #4]
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	3308      	adds	r3, #8
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d104      	bne.n	8008e88 <vTaskSwitchContext+0x8c>
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	4a0a      	ldr	r2, [pc, #40]	; (8008eb8 <vTaskSwitchContext+0xbc>)
 8008e90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e92:	4b09      	ldr	r3, [pc, #36]	; (8008eb8 <vTaskSwitchContext+0xbc>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	334c      	adds	r3, #76	; 0x4c
 8008e98:	4a08      	ldr	r2, [pc, #32]	; (8008ebc <vTaskSwitchContext+0xc0>)
 8008e9a:	6013      	str	r3, [r2, #0]
}
 8008e9c:	bf00      	nop
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	2000098c 	.word	0x2000098c
 8008eac:	20000978 	.word	0x20000978
 8008eb0:	2000096c 	.word	0x2000096c
 8008eb4:	20000868 	.word	0x20000868
 8008eb8:	20000864 	.word	0x20000864
 8008ebc:	20000070 	.word	0x20000070

08008ec0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60fb      	str	r3, [r7, #12]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <vTaskPlaceOnEventList+0x44>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3318      	adds	r3, #24
 8008eec:	4619      	mov	r1, r3
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7fe f9c5 	bl	800727e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	6838      	ldr	r0, [r7, #0]
 8008ef8:	f000 fbae 	bl	8009658 <prvAddCurrentTaskToDelayedList>
}
 8008efc:	bf00      	nop
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	20000864 	.word	0x20000864

08008f08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10a      	bne.n	8008f30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	617b      	str	r3, [r7, #20]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <vTaskPlaceOnEventListRestricted+0x54>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3318      	adds	r3, #24
 8008f36:	4619      	mov	r1, r3
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7fe f97c 	bl	8007236 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d002      	beq.n	8008f4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f4a:	6879      	ldr	r1, [r7, #4]
 8008f4c:	68b8      	ldr	r0, [r7, #8]
 8008f4e:	f000 fb83 	bl	8009658 <prvAddCurrentTaskToDelayedList>
	}
 8008f52:	bf00      	nop
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000864 	.word	0x20000864

08008f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	60fb      	str	r3, [r7, #12]
}
 8008f88:	bf00      	nop
 8008f8a:	e7fe      	b.n	8008f8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	3318      	adds	r3, #24
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe f9ad 	bl	80072f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f96:	4b1d      	ldr	r3, [pc, #116]	; (800900c <xTaskRemoveFromEventList+0xac>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d11c      	bne.n	8008fd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe f9a4 	bl	80072f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fac:	2201      	movs	r2, #1
 8008fae:	409a      	lsls	r2, r3
 8008fb0:	4b17      	ldr	r3, [pc, #92]	; (8009010 <xTaskRemoveFromEventList+0xb0>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	4a16      	ldr	r2, [pc, #88]	; (8009010 <xTaskRemoveFromEventList+0xb0>)
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4a13      	ldr	r2, [pc, #76]	; (8009014 <xTaskRemoveFromEventList+0xb4>)
 8008fc8:	441a      	add	r2, r3
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7fe f930 	bl	8007236 <vListInsertEnd>
 8008fd6:	e005      	b.n	8008fe4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	3318      	adds	r3, #24
 8008fdc:	4619      	mov	r1, r3
 8008fde:	480e      	ldr	r0, [pc, #56]	; (8009018 <xTaskRemoveFromEventList+0xb8>)
 8008fe0:	f7fe f929 	bl	8007236 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <xTaskRemoveFromEventList+0xbc>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d905      	bls.n	8008ffe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ff6:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <xTaskRemoveFromEventList+0xc0>)
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	e001      	b.n	8009002 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008ffe:	2300      	movs	r3, #0
 8009000:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009002:	697b      	ldr	r3, [r7, #20]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	2000098c 	.word	0x2000098c
 8009010:	2000096c 	.word	0x2000096c
 8009014:	20000868 	.word	0x20000868
 8009018:	20000924 	.word	0x20000924
 800901c:	20000864 	.word	0x20000864
 8009020:	20000978 	.word	0x20000978

08009024 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800902c:	4b06      	ldr	r3, [pc, #24]	; (8009048 <vTaskInternalSetTimeOutState+0x24>)
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009034:	4b05      	ldr	r3, [pc, #20]	; (800904c <vTaskInternalSetTimeOutState+0x28>)
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	605a      	str	r2, [r3, #4]
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	2000097c 	.word	0x2000097c
 800904c:	20000968 	.word	0x20000968

08009050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10a      	bne.n	8009076 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	613b      	str	r3, [r7, #16]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10a      	bne.n	8009092 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800907c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009080:	f383 8811 	msr	BASEPRI, r3
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	60fb      	str	r3, [r7, #12]
}
 800908e:	bf00      	nop
 8009090:	e7fe      	b.n	8009090 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009092:	f001 f83f 	bl	800a114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009096:	4b1d      	ldr	r3, [pc, #116]	; (800910c <xTaskCheckForTimeOut+0xbc>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	69ba      	ldr	r2, [r7, #24]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ae:	d102      	bne.n	80090b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090b0:	2300      	movs	r3, #0
 80090b2:	61fb      	str	r3, [r7, #28]
 80090b4:	e023      	b.n	80090fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	4b15      	ldr	r3, [pc, #84]	; (8009110 <xTaskCheckForTimeOut+0xc0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d007      	beq.n	80090d2 <xTaskCheckForTimeOut+0x82>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d302      	bcc.n	80090d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090cc:	2301      	movs	r3, #1
 80090ce:	61fb      	str	r3, [r7, #28]
 80090d0:	e015      	b.n	80090fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d20b      	bcs.n	80090f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	1ad2      	subs	r2, r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff ff9b 	bl	8009024 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090ee:	2300      	movs	r3, #0
 80090f0:	61fb      	str	r3, [r7, #28]
 80090f2:	e004      	b.n	80090fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090fa:	2301      	movs	r3, #1
 80090fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090fe:	f001 f839 	bl	800a174 <vPortExitCritical>

	return xReturn;
 8009102:	69fb      	ldr	r3, [r7, #28]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3720      	adds	r7, #32
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20000968 	.word	0x20000968
 8009110:	2000097c 	.word	0x2000097c

08009114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009114:	b480      	push	{r7}
 8009116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009118:	4b03      	ldr	r3, [pc, #12]	; (8009128 <vTaskMissedYield+0x14>)
 800911a:	2201      	movs	r2, #1
 800911c:	601a      	str	r2, [r3, #0]
}
 800911e:	bf00      	nop
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	20000978 	.word	0x20000978

0800912c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009134:	f000 f852 	bl	80091dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009138:	4b06      	ldr	r3, [pc, #24]	; (8009154 <prvIdleTask+0x28>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d9f9      	bls.n	8009134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009140:	4b05      	ldr	r3, [pc, #20]	; (8009158 <prvIdleTask+0x2c>)
 8009142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009150:	e7f0      	b.n	8009134 <prvIdleTask+0x8>
 8009152:	bf00      	nop
 8009154:	20000868 	.word	0x20000868
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009162:	2300      	movs	r3, #0
 8009164:	607b      	str	r3, [r7, #4]
 8009166:	e00c      	b.n	8009182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	4613      	mov	r3, r2
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4a12      	ldr	r2, [pc, #72]	; (80091bc <prvInitialiseTaskLists+0x60>)
 8009174:	4413      	add	r3, r2
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe f830 	bl	80071dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3301      	adds	r3, #1
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b06      	cmp	r3, #6
 8009186:	d9ef      	bls.n	8009168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009188:	480d      	ldr	r0, [pc, #52]	; (80091c0 <prvInitialiseTaskLists+0x64>)
 800918a:	f7fe f827 	bl	80071dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800918e:	480d      	ldr	r0, [pc, #52]	; (80091c4 <prvInitialiseTaskLists+0x68>)
 8009190:	f7fe f824 	bl	80071dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009194:	480c      	ldr	r0, [pc, #48]	; (80091c8 <prvInitialiseTaskLists+0x6c>)
 8009196:	f7fe f821 	bl	80071dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800919a:	480c      	ldr	r0, [pc, #48]	; (80091cc <prvInitialiseTaskLists+0x70>)
 800919c:	f7fe f81e 	bl	80071dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091a0:	480b      	ldr	r0, [pc, #44]	; (80091d0 <prvInitialiseTaskLists+0x74>)
 80091a2:	f7fe f81b 	bl	80071dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <prvInitialiseTaskLists+0x78>)
 80091a8:	4a05      	ldr	r2, [pc, #20]	; (80091c0 <prvInitialiseTaskLists+0x64>)
 80091aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <prvInitialiseTaskLists+0x7c>)
 80091ae:	4a05      	ldr	r2, [pc, #20]	; (80091c4 <prvInitialiseTaskLists+0x68>)
 80091b0:	601a      	str	r2, [r3, #0]
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000868 	.word	0x20000868
 80091c0:	200008f4 	.word	0x200008f4
 80091c4:	20000908 	.word	0x20000908
 80091c8:	20000924 	.word	0x20000924
 80091cc:	20000938 	.word	0x20000938
 80091d0:	20000950 	.word	0x20000950
 80091d4:	2000091c 	.word	0x2000091c
 80091d8:	20000920 	.word	0x20000920

080091dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091e2:	e019      	b.n	8009218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091e4:	f000 ff96 	bl	800a114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e8:	4b10      	ldr	r3, [pc, #64]	; (800922c <prvCheckTasksWaitingTermination+0x50>)
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fe f87b 	bl	80072f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091fa:	4b0d      	ldr	r3, [pc, #52]	; (8009230 <prvCheckTasksWaitingTermination+0x54>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3b01      	subs	r3, #1
 8009200:	4a0b      	ldr	r2, [pc, #44]	; (8009230 <prvCheckTasksWaitingTermination+0x54>)
 8009202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009204:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <prvCheckTasksWaitingTermination+0x58>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3b01      	subs	r3, #1
 800920a:	4a0a      	ldr	r2, [pc, #40]	; (8009234 <prvCheckTasksWaitingTermination+0x58>)
 800920c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800920e:	f000 ffb1 	bl	800a174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f810 	bl	8009238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009218:	4b06      	ldr	r3, [pc, #24]	; (8009234 <prvCheckTasksWaitingTermination+0x58>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e1      	bne.n	80091e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009220:	bf00      	nop
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000938 	.word	0x20000938
 8009230:	20000964 	.word	0x20000964
 8009234:	2000094c 	.word	0x2000094c

08009238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	334c      	adds	r3, #76	; 0x4c
 8009244:	4618      	mov	r0, r3
 8009246:	f010 fb07 	bl	8019858 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009250:	2b00      	cmp	r3, #0
 8009252:	d108      	bne.n	8009266 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009258:	4618      	mov	r0, r3
 800925a:	f001 f949 	bl	800a4f0 <vPortFree>
				vPortFree( pxTCB );
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f001 f946 	bl	800a4f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009264:	e018      	b.n	8009298 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800926c:	2b01      	cmp	r3, #1
 800926e:	d103      	bne.n	8009278 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 f93d 	bl	800a4f0 <vPortFree>
	}
 8009276:	e00f      	b.n	8009298 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800927e:	2b02      	cmp	r3, #2
 8009280:	d00a      	beq.n	8009298 <prvDeleteTCB+0x60>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	60fb      	str	r3, [r7, #12]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <prvDeleteTCB+0x5e>
	}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <prvResetNextTaskUnblockTime+0x38>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d104      	bne.n	80092ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092b0:	4b0a      	ldr	r3, [pc, #40]	; (80092dc <prvResetNextTaskUnblockTime+0x3c>)
 80092b2:	f04f 32ff 	mov.w	r2, #4294967295
 80092b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092b8:	e008      	b.n	80092cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ba:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <prvResetNextTaskUnblockTime+0x38>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4a04      	ldr	r2, [pc, #16]	; (80092dc <prvResetNextTaskUnblockTime+0x3c>)
 80092ca:	6013      	str	r3, [r2, #0]
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	2000091c 	.word	0x2000091c
 80092dc:	20000984 	.word	0x20000984

080092e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092e6:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <xTaskGetSchedulerState+0x34>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d102      	bne.n	80092f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092ee:	2301      	movs	r3, #1
 80092f0:	607b      	str	r3, [r7, #4]
 80092f2:	e008      	b.n	8009306 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092f4:	4b08      	ldr	r3, [pc, #32]	; (8009318 <xTaskGetSchedulerState+0x38>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092fc:	2302      	movs	r3, #2
 80092fe:	607b      	str	r3, [r7, #4]
 8009300:	e001      	b.n	8009306 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009302:	2300      	movs	r3, #0
 8009304:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009306:	687b      	ldr	r3, [r7, #4]
	}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	20000970 	.word	0x20000970
 8009318:	2000098c 	.word	0x2000098c

0800931c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d05e      	beq.n	80093f0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009336:	4b31      	ldr	r3, [pc, #196]	; (80093fc <xTaskPriorityInherit+0xe0>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	429a      	cmp	r2, r3
 800933e:	d24e      	bcs.n	80093de <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	db06      	blt.n	8009356 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009348:	4b2c      	ldr	r3, [pc, #176]	; (80093fc <xTaskPriorityInherit+0xe0>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	f1c3 0207 	rsb	r2, r3, #7
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6959      	ldr	r1, [r3, #20]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4a26      	ldr	r2, [pc, #152]	; (8009400 <xTaskPriorityInherit+0xe4>)
 8009368:	4413      	add	r3, r2
 800936a:	4299      	cmp	r1, r3
 800936c:	d12f      	bne.n	80093ce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	3304      	adds	r3, #4
 8009372:	4618      	mov	r0, r3
 8009374:	f7fd ffbc 	bl	80072f0 <uxListRemove>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009382:	2201      	movs	r2, #1
 8009384:	fa02 f303 	lsl.w	r3, r2, r3
 8009388:	43da      	mvns	r2, r3
 800938a:	4b1e      	ldr	r3, [pc, #120]	; (8009404 <xTaskPriorityInherit+0xe8>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4013      	ands	r3, r2
 8009390:	4a1c      	ldr	r2, [pc, #112]	; (8009404 <xTaskPriorityInherit+0xe8>)
 8009392:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009394:	4b19      	ldr	r3, [pc, #100]	; (80093fc <xTaskPriorityInherit+0xe0>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a2:	2201      	movs	r2, #1
 80093a4:	409a      	lsls	r2, r3
 80093a6:	4b17      	ldr	r3, [pc, #92]	; (8009404 <xTaskPriorityInherit+0xe8>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	4a15      	ldr	r2, [pc, #84]	; (8009404 <xTaskPriorityInherit+0xe8>)
 80093ae:	6013      	str	r3, [r2, #0]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b4:	4613      	mov	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4413      	add	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4a10      	ldr	r2, [pc, #64]	; (8009400 <xTaskPriorityInherit+0xe4>)
 80093be:	441a      	add	r2, r3
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	3304      	adds	r3, #4
 80093c4:	4619      	mov	r1, r3
 80093c6:	4610      	mov	r0, r2
 80093c8:	f7fd ff35 	bl	8007236 <vListInsertEnd>
 80093cc:	e004      	b.n	80093d8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093ce:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <xTaskPriorityInherit+0xe0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80093d8:	2301      	movs	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	e008      	b.n	80093f0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093e2:	4b06      	ldr	r3, [pc, #24]	; (80093fc <xTaskPriorityInherit+0xe0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d201      	bcs.n	80093f0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80093ec:	2301      	movs	r3, #1
 80093ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093f0:	68fb      	ldr	r3, [r7, #12]
	}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20000864 	.word	0x20000864
 8009400:	20000868 	.word	0x20000868
 8009404:	2000096c 	.word	0x2000096c

08009408 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d06e      	beq.n	80094fc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800941e:	4b3a      	ldr	r3, [pc, #232]	; (8009508 <xTaskPriorityDisinherit+0x100>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	429a      	cmp	r2, r3
 8009426:	d00a      	beq.n	800943e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	60fb      	str	r3, [r7, #12]
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10a      	bne.n	800945c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	60bb      	str	r3, [r7, #8]
}
 8009458:	bf00      	nop
 800945a:	e7fe      	b.n	800945a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009460:	1e5a      	subs	r2, r3, #1
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946e:	429a      	cmp	r2, r3
 8009470:	d044      	beq.n	80094fc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009476:	2b00      	cmp	r3, #0
 8009478:	d140      	bne.n	80094fc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	3304      	adds	r3, #4
 800947e:	4618      	mov	r0, r3
 8009480:	f7fd ff36 	bl	80072f0 <uxListRemove>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d115      	bne.n	80094b6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948e:	491f      	ldr	r1, [pc, #124]	; (800950c <xTaskPriorityDisinherit+0x104>)
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	440b      	add	r3, r1
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xTaskPriorityDisinherit+0xae>
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	2201      	movs	r2, #1
 80094a6:	fa02 f303 	lsl.w	r3, r2, r3
 80094aa:	43da      	mvns	r2, r3
 80094ac:	4b18      	ldr	r3, [pc, #96]	; (8009510 <xTaskPriorityDisinherit+0x108>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4013      	ands	r3, r2
 80094b2:	4a17      	ldr	r2, [pc, #92]	; (8009510 <xTaskPriorityDisinherit+0x108>)
 80094b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	f1c3 0207 	rsb	r2, r3, #7
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ce:	2201      	movs	r2, #1
 80094d0:	409a      	lsls	r2, r3
 80094d2:	4b0f      	ldr	r3, [pc, #60]	; (8009510 <xTaskPriorityDisinherit+0x108>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	4a0d      	ldr	r2, [pc, #52]	; (8009510 <xTaskPriorityDisinherit+0x108>)
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e0:	4613      	mov	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4a08      	ldr	r2, [pc, #32]	; (800950c <xTaskPriorityDisinherit+0x104>)
 80094ea:	441a      	add	r2, r3
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f7fd fe9f 	bl	8007236 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094f8:	2301      	movs	r3, #1
 80094fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094fc:	697b      	ldr	r3, [r7, #20]
	}
 80094fe:	4618      	mov	r0, r3
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20000864 	.word	0x20000864
 800950c:	20000868 	.word	0x20000868
 8009510:	2000096c 	.word	0x2000096c

08009514 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009522:	2301      	movs	r3, #1
 8009524:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d077      	beq.n	800961c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	60fb      	str	r3, [r7, #12]
}
 8009546:	bf00      	nop
 8009548:	e7fe      	b.n	8009548 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	429a      	cmp	r2, r3
 8009552:	d902      	bls.n	800955a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	e002      	b.n	8009560 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	69fa      	ldr	r2, [r7, #28]
 8009566:	429a      	cmp	r2, r3
 8009568:	d058      	beq.n	800961c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	429a      	cmp	r2, r3
 8009572:	d153      	bne.n	800961c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009574:	4b2b      	ldr	r3, [pc, #172]	; (8009624 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	429a      	cmp	r2, r3
 800957c:	d10a      	bne.n	8009594 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	60bb      	str	r3, [r7, #8]
}
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	69fa      	ldr	r2, [r7, #28]
 800959e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	db04      	blt.n	80095b2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	f1c3 0207 	rsb	r2, r3, #7
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	6959      	ldr	r1, [r3, #20]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	4613      	mov	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4a19      	ldr	r2, [pc, #100]	; (8009628 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80095c2:	4413      	add	r3, r2
 80095c4:	4299      	cmp	r1, r3
 80095c6:	d129      	bne.n	800961c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	3304      	adds	r3, #4
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fd fe8f 	bl	80072f0 <uxListRemove>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10a      	bne.n	80095ee <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	2201      	movs	r2, #1
 80095de:	fa02 f303 	lsl.w	r3, r2, r3
 80095e2:	43da      	mvns	r2, r3
 80095e4:	4b11      	ldr	r3, [pc, #68]	; (800962c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4013      	ands	r3, r2
 80095ea:	4a10      	ldr	r2, [pc, #64]	; (800962c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80095ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f2:	2201      	movs	r2, #1
 80095f4:	409a      	lsls	r2, r3
 80095f6:	4b0d      	ldr	r3, [pc, #52]	; (800962c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	4a0b      	ldr	r2, [pc, #44]	; (800962c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4a06      	ldr	r2, [pc, #24]	; (8009628 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800960e:	441a      	add	r2, r3
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	3304      	adds	r3, #4
 8009614:	4619      	mov	r1, r3
 8009616:	4610      	mov	r0, r2
 8009618:	f7fd fe0d 	bl	8007236 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800961c:	bf00      	nop
 800961e:	3720      	adds	r7, #32
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20000864 	.word	0x20000864
 8009628:	20000868 	.word	0x20000868
 800962c:	2000096c 	.word	0x2000096c

08009630 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009634:	4b07      	ldr	r3, [pc, #28]	; (8009654 <pvTaskIncrementMutexHeldCount+0x24>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <pvTaskIncrementMutexHeldCount+0x24>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009642:	3201      	adds	r2, #1
 8009644:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009646:	4b03      	ldr	r3, [pc, #12]	; (8009654 <pvTaskIncrementMutexHeldCount+0x24>)
 8009648:	681b      	ldr	r3, [r3, #0]
	}
 800964a:	4618      	mov	r0, r3
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	20000864 	.word	0x20000864

08009658 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009662:	4b29      	ldr	r3, [pc, #164]	; (8009708 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009668:	4b28      	ldr	r3, [pc, #160]	; (800970c <prvAddCurrentTaskToDelayedList+0xb4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3304      	adds	r3, #4
 800966e:	4618      	mov	r0, r3
 8009670:	f7fd fe3e 	bl	80072f0 <uxListRemove>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10b      	bne.n	8009692 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800967a:	4b24      	ldr	r3, [pc, #144]	; (800970c <prvAddCurrentTaskToDelayedList+0xb4>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009680:	2201      	movs	r2, #1
 8009682:	fa02 f303 	lsl.w	r3, r2, r3
 8009686:	43da      	mvns	r2, r3
 8009688:	4b21      	ldr	r3, [pc, #132]	; (8009710 <prvAddCurrentTaskToDelayedList+0xb8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4013      	ands	r3, r2
 800968e:	4a20      	ldr	r2, [pc, #128]	; (8009710 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009690:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009698:	d10a      	bne.n	80096b0 <prvAddCurrentTaskToDelayedList+0x58>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d007      	beq.n	80096b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096a0:	4b1a      	ldr	r3, [pc, #104]	; (800970c <prvAddCurrentTaskToDelayedList+0xb4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3304      	adds	r3, #4
 80096a6:	4619      	mov	r1, r3
 80096a8:	481a      	ldr	r0, [pc, #104]	; (8009714 <prvAddCurrentTaskToDelayedList+0xbc>)
 80096aa:	f7fd fdc4 	bl	8007236 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096ae:	e026      	b.n	80096fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4413      	add	r3, r2
 80096b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096b8:	4b14      	ldr	r3, [pc, #80]	; (800970c <prvAddCurrentTaskToDelayedList+0xb4>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d209      	bcs.n	80096dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096c8:	4b13      	ldr	r3, [pc, #76]	; (8009718 <prvAddCurrentTaskToDelayedList+0xc0>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	4b0f      	ldr	r3, [pc, #60]	; (800970c <prvAddCurrentTaskToDelayedList+0xb4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3304      	adds	r3, #4
 80096d2:	4619      	mov	r1, r3
 80096d4:	4610      	mov	r0, r2
 80096d6:	f7fd fdd2 	bl	800727e <vListInsert>
}
 80096da:	e010      	b.n	80096fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096dc:	4b0f      	ldr	r3, [pc, #60]	; (800971c <prvAddCurrentTaskToDelayedList+0xc4>)
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	4b0a      	ldr	r3, [pc, #40]	; (800970c <prvAddCurrentTaskToDelayedList+0xb4>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f7fd fdc8 	bl	800727e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096ee:	4b0c      	ldr	r3, [pc, #48]	; (8009720 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d202      	bcs.n	80096fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096f8:	4a09      	ldr	r2, [pc, #36]	; (8009720 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6013      	str	r3, [r2, #0]
}
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000968 	.word	0x20000968
 800970c:	20000864 	.word	0x20000864
 8009710:	2000096c 	.word	0x2000096c
 8009714:	20000950 	.word	0x20000950
 8009718:	20000920 	.word	0x20000920
 800971c:	2000091c 	.word	0x2000091c
 8009720:	20000984 	.word	0x20000984

08009724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08a      	sub	sp, #40	; 0x28
 8009728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800972e:	f000 fb85 	bl	8009e3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009732:	4b1c      	ldr	r3, [pc, #112]	; (80097a4 <xTimerCreateTimerTask+0x80>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d021      	beq.n	800977e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009742:	1d3a      	adds	r2, r7, #4
 8009744:	f107 0108 	add.w	r1, r7, #8
 8009748:	f107 030c 	add.w	r3, r7, #12
 800974c:	4618      	mov	r0, r3
 800974e:	f7f6 ff2d 	bl	80005ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009752:	6879      	ldr	r1, [r7, #4]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	9202      	str	r2, [sp, #8]
 800975a:	9301      	str	r3, [sp, #4]
 800975c:	2305      	movs	r3, #5
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	2300      	movs	r3, #0
 8009762:	460a      	mov	r2, r1
 8009764:	4910      	ldr	r1, [pc, #64]	; (80097a8 <xTimerCreateTimerTask+0x84>)
 8009766:	4811      	ldr	r0, [pc, #68]	; (80097ac <xTimerCreateTimerTask+0x88>)
 8009768:	f7fe fdf4 	bl	8008354 <xTaskCreateStatic>
 800976c:	4603      	mov	r3, r0
 800976e:	4a10      	ldr	r2, [pc, #64]	; (80097b0 <xTimerCreateTimerTask+0x8c>)
 8009770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009772:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <xTimerCreateTimerTask+0x8c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d001      	beq.n	800977e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800977a:	2301      	movs	r3, #1
 800977c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	613b      	str	r3, [r7, #16]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800979a:	697b      	ldr	r3, [r7, #20]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	200009c0 	.word	0x200009c0
 80097a8:	0801a864 	.word	0x0801a864
 80097ac:	08009a1d 	.word	0x08009a1d
 80097b0:	200009c4 	.word	0x200009c4

080097b4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af02      	add	r7, sp, #8
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80097c2:	2028      	movs	r0, #40	; 0x28
 80097c4:	f000 fdc8 	bl	800a358 <pvPortMalloc>
 80097c8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00d      	beq.n	80097ec <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	9301      	str	r3, [sp, #4]
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f843 	bl	8009872 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80097ec:	697b      	ldr	r3, [r7, #20]
	}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3718      	adds	r7, #24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b08a      	sub	sp, #40	; 0x28
 80097fa:	af02      	add	r7, sp, #8
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	607a      	str	r2, [r7, #4]
 8009802:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009804:	2328      	movs	r3, #40	; 0x28
 8009806:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	2b28      	cmp	r3, #40	; 0x28
 800980c:	d00a      	beq.n	8009824 <xTimerCreateStatic+0x2e>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	61bb      	str	r3, [r7, #24]
}
 8009820:	bf00      	nop
 8009822:	e7fe      	b.n	8009822 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009824:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10a      	bne.n	8009842 <xTimerCreateStatic+0x4c>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	617b      	str	r3, [r7, #20]
}
 800983e:	bf00      	nop
 8009840:	e7fe      	b.n	8009840 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009844:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00d      	beq.n	8009868 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f805 	bl	8009872 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009868:	69fb      	ldr	r3, [r7, #28]
	}
 800986a:	4618      	mov	r0, r3
 800986c:	3720      	adds	r7, #32
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b086      	sub	sp, #24
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	607a      	str	r2, [r7, #4]
 800987e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10a      	bne.n	800989c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	617b      	str	r3, [r7, #20]
}
 8009898:	bf00      	nop
 800989a:	e7fe      	b.n	800989a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d01e      	beq.n	80098e0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80098a2:	f000 facb 	bl	8009e3c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	6a3a      	ldr	r2, [r7, #32]
 80098bc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	3304      	adds	r3, #4
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fd fcaa 	bl	800721c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d008      	beq.n	80098e0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098d4:	f043 0304 	orr.w	r3, r3, #4
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80098e0:	bf00      	nop
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08a      	sub	sp, #40	; 0x28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	623b      	str	r3, [r7, #32]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009916:	4b1a      	ldr	r3, [pc, #104]	; (8009980 <xTimerGenericCommand+0x98>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d02a      	beq.n	8009974 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2b05      	cmp	r3, #5
 800992e:	dc18      	bgt.n	8009962 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009930:	f7ff fcd6 	bl	80092e0 <xTaskGetSchedulerState>
 8009934:	4603      	mov	r3, r0
 8009936:	2b02      	cmp	r3, #2
 8009938:	d109      	bne.n	800994e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800993a:	4b11      	ldr	r3, [pc, #68]	; (8009980 <xTimerGenericCommand+0x98>)
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	f107 0114 	add.w	r1, r7, #20
 8009942:	2300      	movs	r3, #0
 8009944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009946:	f7fd feed 	bl	8007724 <xQueueGenericSend>
 800994a:	6278      	str	r0, [r7, #36]	; 0x24
 800994c:	e012      	b.n	8009974 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800994e:	4b0c      	ldr	r3, [pc, #48]	; (8009980 <xTimerGenericCommand+0x98>)
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	f107 0114 	add.w	r1, r7, #20
 8009956:	2300      	movs	r3, #0
 8009958:	2200      	movs	r2, #0
 800995a:	f7fd fee3 	bl	8007724 <xQueueGenericSend>
 800995e:	6278      	str	r0, [r7, #36]	; 0x24
 8009960:	e008      	b.n	8009974 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009962:	4b07      	ldr	r3, [pc, #28]	; (8009980 <xTimerGenericCommand+0x98>)
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	f107 0114 	add.w	r1, r7, #20
 800996a:	2300      	movs	r3, #0
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	f7fd ffd7 	bl	8007920 <xQueueGenericSendFromISR>
 8009972:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009976:	4618      	mov	r0, r3
 8009978:	3728      	adds	r7, #40	; 0x28
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	200009c0 	.word	0x200009c0

08009984 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af02      	add	r7, sp, #8
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800998e:	4b22      	ldr	r3, [pc, #136]	; (8009a18 <prvProcessExpiredTimer+0x94>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	3304      	adds	r3, #4
 800999c:	4618      	mov	r0, r3
 800999e:	f7fd fca7 	bl	80072f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099a8:	f003 0304 	and.w	r3, r3, #4
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d022      	beq.n	80099f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	699a      	ldr	r2, [r3, #24]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	18d1      	adds	r1, r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	6978      	ldr	r0, [r7, #20]
 80099be:	f000 f8d1 	bl	8009b64 <prvInsertTimerInActiveList>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d01f      	beq.n	8009a08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099c8:	2300      	movs	r3, #0
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	2300      	movs	r3, #0
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	2100      	movs	r1, #0
 80099d2:	6978      	ldr	r0, [r7, #20]
 80099d4:	f7ff ff88 	bl	80098e8 <xTimerGenericCommand>
 80099d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d113      	bne.n	8009a08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099fc:	f023 0301 	bic.w	r3, r3, #1
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	6978      	ldr	r0, [r7, #20]
 8009a0e:	4798      	blx	r3
}
 8009a10:	bf00      	nop
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	200009b8 	.word	0x200009b8

08009a1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 f857 	bl	8009adc <prvGetNextExpireTime>
 8009a2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	4619      	mov	r1, r3
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 f803 	bl	8009a40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a3a:	f000 f8d5 	bl	8009be8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a3e:	e7f1      	b.n	8009a24 <prvTimerTask+0x8>

08009a40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a4a:	f7ff f865 	bl	8008b18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a4e:	f107 0308 	add.w	r3, r7, #8
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 f866 	bl	8009b24 <prvSampleTimeNow>
 8009a58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d130      	bne.n	8009ac2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10a      	bne.n	8009a7c <prvProcessTimerOrBlockTask+0x3c>
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d806      	bhi.n	8009a7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a6e:	f7ff f861 	bl	8008b34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a72:	68f9      	ldr	r1, [r7, #12]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7ff ff85 	bl	8009984 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a7a:	e024      	b.n	8009ac6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d008      	beq.n	8009a94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a82:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <prvProcessTimerOrBlockTask+0x90>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <prvProcessTimerOrBlockTask+0x50>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e000      	b.n	8009a92 <prvProcessTimerOrBlockTask+0x52>
 8009a90:	2300      	movs	r3, #0
 8009a92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a94:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <prvProcessTimerOrBlockTask+0x94>)
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	f7fe fc23 	bl	80082ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009aa6:	f7ff f845 	bl	8008b34 <xTaskResumeAll>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ab0:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <prvProcessTimerOrBlockTask+0x98>)
 8009ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	f3bf 8f6f 	isb	sy
}
 8009ac0:	e001      	b.n	8009ac6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ac2:	f7ff f837 	bl	8008b34 <xTaskResumeAll>
}
 8009ac6:	bf00      	nop
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	200009bc 	.word	0x200009bc
 8009ad4:	200009c0 	.word	0x200009c0
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ae4:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <prvGetNextExpireTime+0x44>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <prvGetNextExpireTime+0x16>
 8009aee:	2201      	movs	r2, #1
 8009af0:	e000      	b.n	8009af4 <prvGetNextExpireTime+0x18>
 8009af2:	2200      	movs	r2, #0
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d105      	bne.n	8009b0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b00:	4b07      	ldr	r3, [pc, #28]	; (8009b20 <prvGetNextExpireTime+0x44>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	60fb      	str	r3, [r7, #12]
 8009b0a:	e001      	b.n	8009b10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b10:	68fb      	ldr	r3, [r7, #12]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	200009b8 	.word	0x200009b8

08009b24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b2c:	f7ff f89e 	bl	8008c6c <xTaskGetTickCount>
 8009b30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b32:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <prvSampleTimeNow+0x3c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d205      	bcs.n	8009b48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b3c:	f000 f91a 	bl	8009d74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	e002      	b.n	8009b4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b4e:	4a04      	ldr	r2, [pc, #16]	; (8009b60 <prvSampleTimeNow+0x3c>)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b54:	68fb      	ldr	r3, [r7, #12]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	200009c8 	.word	0x200009c8

08009b64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d812      	bhi.n	8009bb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d302      	bcc.n	8009b9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	e01b      	b.n	8009bd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b9e:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <prvInsertTimerInActiveList+0x7c>)
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f7fd fb68 	bl	800727e <vListInsert>
 8009bae:	e012      	b.n	8009bd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d206      	bcs.n	8009bc6 <prvInsertTimerInActiveList+0x62>
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d302      	bcc.n	8009bc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	e007      	b.n	8009bd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bc6:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <prvInsertTimerInActiveList+0x80>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3304      	adds	r3, #4
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f7fd fb54 	bl	800727e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bd6:	697b      	ldr	r3, [r7, #20]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200009bc 	.word	0x200009bc
 8009be4:	200009b8 	.word	0x200009b8

08009be8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08c      	sub	sp, #48	; 0x30
 8009bec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bee:	e0ae      	b.n	8009d4e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f2c0 80aa 	blt.w	8009d4c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	3304      	adds	r3, #4
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fd fb71 	bl	80072f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c0e:	1d3b      	adds	r3, r7, #4
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff ff87 	bl	8009b24 <prvSampleTimeNow>
 8009c16:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2b09      	cmp	r3, #9
 8009c1c:	f200 8097 	bhi.w	8009d4e <prvProcessReceivedCommands+0x166>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <prvProcessReceivedCommands+0x40>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009c51 	.word	0x08009c51
 8009c2c:	08009c51 	.word	0x08009c51
 8009c30:	08009c51 	.word	0x08009c51
 8009c34:	08009cc5 	.word	0x08009cc5
 8009c38:	08009cd9 	.word	0x08009cd9
 8009c3c:	08009d23 	.word	0x08009d23
 8009c40:	08009c51 	.word	0x08009c51
 8009c44:	08009c51 	.word	0x08009c51
 8009c48:	08009cc5 	.word	0x08009cc5
 8009c4c:	08009cd9 	.word	0x08009cd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c56:	f043 0301 	orr.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	18d1      	adds	r1, r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6a3a      	ldr	r2, [r7, #32]
 8009c6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c70:	f7ff ff78 	bl	8009b64 <prvInsertTimerInActiveList>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d069      	beq.n	8009d4e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c88:	f003 0304 	and.w	r3, r3, #4
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d05e      	beq.n	8009d4e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	441a      	add	r2, r3
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ca2:	f7ff fe21 	bl	80098e8 <xTimerGenericCommand>
 8009ca6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d14f      	bne.n	8009d4e <prvProcessReceivedCommands+0x166>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	61bb      	str	r3, [r7, #24]
}
 8009cc0:	bf00      	nop
 8009cc2:	e7fe      	b.n	8009cc2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009cd6:	e03a      	b.n	8009d4e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009cde:	f043 0301 	orr.w	r3, r3, #1
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	617b      	str	r3, [r7, #20]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	699a      	ldr	r2, [r3, #24]
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	18d1      	adds	r1, r2, r3
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	6a3a      	ldr	r2, [r7, #32]
 8009d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d1c:	f7ff ff22 	bl	8009b64 <prvInsertTimerInActiveList>
					break;
 8009d20:	e015      	b.n	8009d4e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d103      	bne.n	8009d38 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8009d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d32:	f000 fbdd 	bl	800a4f0 <vPortFree>
 8009d36:	e00a      	b.n	8009d4e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d3e:	f023 0301 	bic.w	r3, r3, #1
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d4a:	e000      	b.n	8009d4e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009d4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d4e:	4b08      	ldr	r3, [pc, #32]	; (8009d70 <prvProcessReceivedCommands+0x188>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f107 0108 	add.w	r1, r7, #8
 8009d56:	2200      	movs	r2, #0
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fd ff09 	bl	8007b70 <xQueueReceive>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f47f af45 	bne.w	8009bf0 <prvProcessReceivedCommands+0x8>
	}
}
 8009d66:	bf00      	nop
 8009d68:	bf00      	nop
 8009d6a:	3728      	adds	r7, #40	; 0x28
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	200009c0 	.word	0x200009c0

08009d74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d7a:	e048      	b.n	8009e0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d7c:	4b2d      	ldr	r3, [pc, #180]	; (8009e34 <prvSwitchTimerLists+0xc0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d86:	4b2b      	ldr	r3, [pc, #172]	; (8009e34 <prvSwitchTimerLists+0xc0>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3304      	adds	r3, #4
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fd faab 	bl	80072f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009da8:	f003 0304 	and.w	r3, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d02e      	beq.n	8009e0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4413      	add	r3, r2
 8009db8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d90e      	bls.n	8009de0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dce:	4b19      	ldr	r3, [pc, #100]	; (8009e34 <prvSwitchTimerLists+0xc0>)
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4610      	mov	r0, r2
 8009dda:	f7fd fa50 	bl	800727e <vListInsert>
 8009dde:	e016      	b.n	8009e0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009de0:	2300      	movs	r3, #0
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	2100      	movs	r1, #0
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7ff fd7c 	bl	80098e8 <xTimerGenericCommand>
 8009df0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	603b      	str	r3, [r7, #0]
}
 8009e0a:	bf00      	nop
 8009e0c:	e7fe      	b.n	8009e0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e0e:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <prvSwitchTimerLists+0xc0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1b1      	bne.n	8009d7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e18:	4b06      	ldr	r3, [pc, #24]	; (8009e34 <prvSwitchTimerLists+0xc0>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e1e:	4b06      	ldr	r3, [pc, #24]	; (8009e38 <prvSwitchTimerLists+0xc4>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a04      	ldr	r2, [pc, #16]	; (8009e34 <prvSwitchTimerLists+0xc0>)
 8009e24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e26:	4a04      	ldr	r2, [pc, #16]	; (8009e38 <prvSwitchTimerLists+0xc4>)
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	6013      	str	r3, [r2, #0]
}
 8009e2c:	bf00      	nop
 8009e2e:	3718      	adds	r7, #24
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	200009b8 	.word	0x200009b8
 8009e38:	200009bc 	.word	0x200009bc

08009e3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e42:	f000 f967 	bl	800a114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e46:	4b15      	ldr	r3, [pc, #84]	; (8009e9c <prvCheckForValidListAndQueue+0x60>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d120      	bne.n	8009e90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e4e:	4814      	ldr	r0, [pc, #80]	; (8009ea0 <prvCheckForValidListAndQueue+0x64>)
 8009e50:	f7fd f9c4 	bl	80071dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e54:	4813      	ldr	r0, [pc, #76]	; (8009ea4 <prvCheckForValidListAndQueue+0x68>)
 8009e56:	f7fd f9c1 	bl	80071dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e5a:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <prvCheckForValidListAndQueue+0x6c>)
 8009e5c:	4a10      	ldr	r2, [pc, #64]	; (8009ea0 <prvCheckForValidListAndQueue+0x64>)
 8009e5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e60:	4b12      	ldr	r3, [pc, #72]	; (8009eac <prvCheckForValidListAndQueue+0x70>)
 8009e62:	4a10      	ldr	r2, [pc, #64]	; (8009ea4 <prvCheckForValidListAndQueue+0x68>)
 8009e64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e66:	2300      	movs	r3, #0
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	4b11      	ldr	r3, [pc, #68]	; (8009eb0 <prvCheckForValidListAndQueue+0x74>)
 8009e6c:	4a11      	ldr	r2, [pc, #68]	; (8009eb4 <prvCheckForValidListAndQueue+0x78>)
 8009e6e:	210c      	movs	r1, #12
 8009e70:	200a      	movs	r0, #10
 8009e72:	f7fd facf 	bl	8007414 <xQueueGenericCreateStatic>
 8009e76:	4603      	mov	r3, r0
 8009e78:	4a08      	ldr	r2, [pc, #32]	; (8009e9c <prvCheckForValidListAndQueue+0x60>)
 8009e7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e7c:	4b07      	ldr	r3, [pc, #28]	; (8009e9c <prvCheckForValidListAndQueue+0x60>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d005      	beq.n	8009e90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e84:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <prvCheckForValidListAndQueue+0x60>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	490b      	ldr	r1, [pc, #44]	; (8009eb8 <prvCheckForValidListAndQueue+0x7c>)
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fa04 	bl	8008298 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e90:	f000 f970 	bl	800a174 <vPortExitCritical>
}
 8009e94:	bf00      	nop
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200009c0 	.word	0x200009c0
 8009ea0:	20000990 	.word	0x20000990
 8009ea4:	200009a4 	.word	0x200009a4
 8009ea8:	200009b8 	.word	0x200009b8
 8009eac:	200009bc 	.word	0x200009bc
 8009eb0:	20000a44 	.word	0x20000a44
 8009eb4:	200009cc 	.word	0x200009cc
 8009eb8:	0801a86c 	.word	0x0801a86c

08009ebc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	3b04      	subs	r3, #4
 8009ecc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3b04      	subs	r3, #4
 8009eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	f023 0201 	bic.w	r2, r3, #1
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	3b04      	subs	r3, #4
 8009eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009eec:	4a0c      	ldr	r2, [pc, #48]	; (8009f20 <pxPortInitialiseStack+0x64>)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3b14      	subs	r3, #20
 8009ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3b04      	subs	r3, #4
 8009f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f06f 0202 	mvn.w	r2, #2
 8009f0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3b20      	subs	r3, #32
 8009f10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f12:	68fb      	ldr	r3, [r7, #12]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	08009f25 	.word	0x08009f25

08009f24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f2e:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <prvTaskExitError+0x54>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f36:	d00a      	beq.n	8009f4e <prvTaskExitError+0x2a>
	__asm volatile
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	60fb      	str	r3, [r7, #12]
}
 8009f4a:	bf00      	nop
 8009f4c:	e7fe      	b.n	8009f4c <prvTaskExitError+0x28>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	60bb      	str	r3, [r7, #8]
}
 8009f60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f62:	bf00      	nop
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0fc      	beq.n	8009f64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	2000000c 	.word	0x2000000c
 8009f7c:	00000000 	.word	0x00000000

08009f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f80:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <pxCurrentTCBConst2>)
 8009f82:	6819      	ldr	r1, [r3, #0]
 8009f84:	6808      	ldr	r0, [r1, #0]
 8009f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8a:	f380 8809 	msr	PSP, r0
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f04f 0000 	mov.w	r0, #0
 8009f96:	f380 8811 	msr	BASEPRI, r0
 8009f9a:	4770      	bx	lr
 8009f9c:	f3af 8000 	nop.w

08009fa0 <pxCurrentTCBConst2>:
 8009fa0:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop

08009fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fa8:	4808      	ldr	r0, [pc, #32]	; (8009fcc <prvPortStartFirstTask+0x24>)
 8009faa:	6800      	ldr	r0, [r0, #0]
 8009fac:	6800      	ldr	r0, [r0, #0]
 8009fae:	f380 8808 	msr	MSP, r0
 8009fb2:	f04f 0000 	mov.w	r0, #0
 8009fb6:	f380 8814 	msr	CONTROL, r0
 8009fba:	b662      	cpsie	i
 8009fbc:	b661      	cpsie	f
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	df00      	svc	0
 8009fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fca:	bf00      	nop
 8009fcc:	e000ed08 	.word	0xe000ed08

08009fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fd6:	4b46      	ldr	r3, [pc, #280]	; (800a0f0 <xPortStartScheduler+0x120>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a46      	ldr	r2, [pc, #280]	; (800a0f4 <xPortStartScheduler+0x124>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d10a      	bne.n	8009ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	613b      	str	r3, [r7, #16]
}
 8009ff2:	bf00      	nop
 8009ff4:	e7fe      	b.n	8009ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ff6:	4b3e      	ldr	r3, [pc, #248]	; (800a0f0 <xPortStartScheduler+0x120>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a3f      	ldr	r2, [pc, #252]	; (800a0f8 <xPortStartScheduler+0x128>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d10a      	bne.n	800a016 <xPortStartScheduler+0x46>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	60fb      	str	r3, [r7, #12]
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a016:	4b39      	ldr	r3, [pc, #228]	; (800a0fc <xPortStartScheduler+0x12c>)
 800a018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	22ff      	movs	r2, #255	; 0xff
 800a026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	4b31      	ldr	r3, [pc, #196]	; (800a100 <xPortStartScheduler+0x130>)
 800a03c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a03e:	4b31      	ldr	r3, [pc, #196]	; (800a104 <xPortStartScheduler+0x134>)
 800a040:	2207      	movs	r2, #7
 800a042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a044:	e009      	b.n	800a05a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a046:	4b2f      	ldr	r3, [pc, #188]	; (800a104 <xPortStartScheduler+0x134>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	4a2d      	ldr	r2, [pc, #180]	; (800a104 <xPortStartScheduler+0x134>)
 800a04e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a050:	78fb      	ldrb	r3, [r7, #3]
 800a052:	b2db      	uxtb	r3, r3
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	b2db      	uxtb	r3, r3
 800a058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a05a:	78fb      	ldrb	r3, [r7, #3]
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a062:	2b80      	cmp	r3, #128	; 0x80
 800a064:	d0ef      	beq.n	800a046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a066:	4b27      	ldr	r3, [pc, #156]	; (800a104 <xPortStartScheduler+0x134>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f1c3 0307 	rsb	r3, r3, #7
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d00a      	beq.n	800a088 <xPortStartScheduler+0xb8>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	60bb      	str	r3, [r7, #8]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a088:	4b1e      	ldr	r3, [pc, #120]	; (800a104 <xPortStartScheduler+0x134>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	021b      	lsls	r3, r3, #8
 800a08e:	4a1d      	ldr	r2, [pc, #116]	; (800a104 <xPortStartScheduler+0x134>)
 800a090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a092:	4b1c      	ldr	r3, [pc, #112]	; (800a104 <xPortStartScheduler+0x134>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a09a:	4a1a      	ldr	r2, [pc, #104]	; (800a104 <xPortStartScheduler+0x134>)
 800a09c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0a6:	4b18      	ldr	r3, [pc, #96]	; (800a108 <xPortStartScheduler+0x138>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a17      	ldr	r2, [pc, #92]	; (800a108 <xPortStartScheduler+0x138>)
 800a0ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0b2:	4b15      	ldr	r3, [pc, #84]	; (800a108 <xPortStartScheduler+0x138>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a14      	ldr	r2, [pc, #80]	; (800a108 <xPortStartScheduler+0x138>)
 800a0b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a0bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0be:	f000 f8dd 	bl	800a27c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0c2:	4b12      	ldr	r3, [pc, #72]	; (800a10c <xPortStartScheduler+0x13c>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0c8:	f000 f8fc 	bl	800a2c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0cc:	4b10      	ldr	r3, [pc, #64]	; (800a110 <xPortStartScheduler+0x140>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a0f      	ldr	r2, [pc, #60]	; (800a110 <xPortStartScheduler+0x140>)
 800a0d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a0d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0d8:	f7ff ff66 	bl	8009fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a0dc:	f7fe fe8e 	bl	8008dfc <vTaskSwitchContext>
	prvTaskExitError();
 800a0e0:	f7ff ff20 	bl	8009f24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	e000ed00 	.word	0xe000ed00
 800a0f4:	410fc271 	.word	0x410fc271
 800a0f8:	410fc270 	.word	0x410fc270
 800a0fc:	e000e400 	.word	0xe000e400
 800a100:	20000a8c 	.word	0x20000a8c
 800a104:	20000a90 	.word	0x20000a90
 800a108:	e000ed20 	.word	0xe000ed20
 800a10c:	2000000c 	.word	0x2000000c
 800a110:	e000ef34 	.word	0xe000ef34

0800a114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	607b      	str	r3, [r7, #4]
}
 800a12c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a12e:	4b0f      	ldr	r3, [pc, #60]	; (800a16c <vPortEnterCritical+0x58>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	3301      	adds	r3, #1
 800a134:	4a0d      	ldr	r2, [pc, #52]	; (800a16c <vPortEnterCritical+0x58>)
 800a136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a138:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <vPortEnterCritical+0x58>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d10f      	bne.n	800a160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a140:	4b0b      	ldr	r3, [pc, #44]	; (800a170 <vPortEnterCritical+0x5c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <vPortEnterCritical+0x4c>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	603b      	str	r3, [r7, #0]
}
 800a15c:	bf00      	nop
 800a15e:	e7fe      	b.n	800a15e <vPortEnterCritical+0x4a>
	}
}
 800a160:	bf00      	nop
 800a162:	370c      	adds	r7, #12
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	2000000c 	.word	0x2000000c
 800a170:	e000ed04 	.word	0xe000ed04

0800a174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a17a:	4b12      	ldr	r3, [pc, #72]	; (800a1c4 <vPortExitCritical+0x50>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10a      	bne.n	800a198 <vPortExitCritical+0x24>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	607b      	str	r3, [r7, #4]
}
 800a194:	bf00      	nop
 800a196:	e7fe      	b.n	800a196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a198:	4b0a      	ldr	r3, [pc, #40]	; (800a1c4 <vPortExitCritical+0x50>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	4a09      	ldr	r2, [pc, #36]	; (800a1c4 <vPortExitCritical+0x50>)
 800a1a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1a2:	4b08      	ldr	r3, [pc, #32]	; (800a1c4 <vPortExitCritical+0x50>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d105      	bne.n	800a1b6 <vPortExitCritical+0x42>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	f383 8811 	msr	BASEPRI, r3
}
 800a1b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	2000000c 	.word	0x2000000c
	...

0800a1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1d0:	f3ef 8009 	mrs	r0, PSP
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	4b15      	ldr	r3, [pc, #84]	; (800a230 <pxCurrentTCBConst>)
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	f01e 0f10 	tst.w	lr, #16
 800a1e0:	bf08      	it	eq
 800a1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ea:	6010      	str	r0, [r2, #0]
 800a1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a1f4:	f380 8811 	msr	BASEPRI, r0
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f7fe fdfc 	bl	8008dfc <vTaskSwitchContext>
 800a204:	f04f 0000 	mov.w	r0, #0
 800a208:	f380 8811 	msr	BASEPRI, r0
 800a20c:	bc09      	pop	{r0, r3}
 800a20e:	6819      	ldr	r1, [r3, #0]
 800a210:	6808      	ldr	r0, [r1, #0]
 800a212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a216:	f01e 0f10 	tst.w	lr, #16
 800a21a:	bf08      	it	eq
 800a21c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a220:	f380 8809 	msr	PSP, r0
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w

0800a230 <pxCurrentTCBConst>:
 800a230:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a234:	bf00      	nop
 800a236:	bf00      	nop

0800a238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	607b      	str	r3, [r7, #4]
}
 800a250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a252:	f7fe fd1b 	bl	8008c8c <xTaskIncrementTick>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a25c:	4b06      	ldr	r3, [pc, #24]	; (800a278 <SysTick_Handler+0x40>)
 800a25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	2300      	movs	r3, #0
 800a266:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	f383 8811 	msr	BASEPRI, r3
}
 800a26e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a270:	bf00      	nop
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	e000ed04 	.word	0xe000ed04

0800a27c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a27c:	b480      	push	{r7}
 800a27e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a280:	4b0b      	ldr	r3, [pc, #44]	; (800a2b0 <vPortSetupTimerInterrupt+0x34>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a286:	4b0b      	ldr	r3, [pc, #44]	; (800a2b4 <vPortSetupTimerInterrupt+0x38>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <vPortSetupTimerInterrupt+0x3c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a0a      	ldr	r2, [pc, #40]	; (800a2bc <vPortSetupTimerInterrupt+0x40>)
 800a292:	fba2 2303 	umull	r2, r3, r2, r3
 800a296:	099b      	lsrs	r3, r3, #6
 800a298:	4a09      	ldr	r2, [pc, #36]	; (800a2c0 <vPortSetupTimerInterrupt+0x44>)
 800a29a:	3b01      	subs	r3, #1
 800a29c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a29e:	4b04      	ldr	r3, [pc, #16]	; (800a2b0 <vPortSetupTimerInterrupt+0x34>)
 800a2a0:	2207      	movs	r2, #7
 800a2a2:	601a      	str	r2, [r3, #0]
}
 800a2a4:	bf00      	nop
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	e000e010 	.word	0xe000e010
 800a2b4:	e000e018 	.word	0xe000e018
 800a2b8:	20000000 	.word	0x20000000
 800a2bc:	10624dd3 	.word	0x10624dd3
 800a2c0:	e000e014 	.word	0xe000e014

0800a2c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a2d4 <vPortEnableVFP+0x10>
 800a2c8:	6801      	ldr	r1, [r0, #0]
 800a2ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a2ce:	6001      	str	r1, [r0, #0]
 800a2d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2d2:	bf00      	nop
 800a2d4:	e000ed88 	.word	0xe000ed88

0800a2d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2de:	f3ef 8305 	mrs	r3, IPSR
 800a2e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b0f      	cmp	r3, #15
 800a2e8:	d914      	bls.n	800a314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a2ea:	4a17      	ldr	r2, [pc, #92]	; (800a348 <vPortValidateInterruptPriority+0x70>)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2f4:	4b15      	ldr	r3, [pc, #84]	; (800a34c <vPortValidateInterruptPriority+0x74>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	7afa      	ldrb	r2, [r7, #11]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d20a      	bcs.n	800a314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	607b      	str	r3, [r7, #4]
}
 800a310:	bf00      	nop
 800a312:	e7fe      	b.n	800a312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a314:	4b0e      	ldr	r3, [pc, #56]	; (800a350 <vPortValidateInterruptPriority+0x78>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a31c:	4b0d      	ldr	r3, [pc, #52]	; (800a354 <vPortValidateInterruptPriority+0x7c>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d90a      	bls.n	800a33a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	603b      	str	r3, [r7, #0]
}
 800a336:	bf00      	nop
 800a338:	e7fe      	b.n	800a338 <vPortValidateInterruptPriority+0x60>
	}
 800a33a:	bf00      	nop
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	e000e3f0 	.word	0xe000e3f0
 800a34c:	20000a8c 	.word	0x20000a8c
 800a350:	e000ed0c 	.word	0xe000ed0c
 800a354:	20000a90 	.word	0x20000a90

0800a358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08a      	sub	sp, #40	; 0x28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a360:	2300      	movs	r3, #0
 800a362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a364:	f7fe fbd8 	bl	8008b18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a368:	4b5b      	ldr	r3, [pc, #364]	; (800a4d8 <pvPortMalloc+0x180>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d101      	bne.n	800a374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a370:	f000 f920 	bl	800a5b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a374:	4b59      	ldr	r3, [pc, #356]	; (800a4dc <pvPortMalloc+0x184>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4013      	ands	r3, r2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f040 8093 	bne.w	800a4a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d01d      	beq.n	800a3c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a388:	2208      	movs	r2, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b00      	cmp	r3, #0
 800a398:	d014      	beq.n	800a3c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f023 0307 	bic.w	r3, r3, #7
 800a3a0:	3308      	adds	r3, #8
 800a3a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <pvPortMalloc+0x6c>
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	617b      	str	r3, [r7, #20]
}
 800a3c0:	bf00      	nop
 800a3c2:	e7fe      	b.n	800a3c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d06e      	beq.n	800a4a8 <pvPortMalloc+0x150>
 800a3ca:	4b45      	ldr	r3, [pc, #276]	; (800a4e0 <pvPortMalloc+0x188>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d869      	bhi.n	800a4a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3d4:	4b43      	ldr	r3, [pc, #268]	; (800a4e4 <pvPortMalloc+0x18c>)
 800a3d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3d8:	4b42      	ldr	r3, [pc, #264]	; (800a4e4 <pvPortMalloc+0x18c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3de:	e004      	b.n	800a3ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d903      	bls.n	800a3fc <pvPortMalloc+0xa4>
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1f1      	bne.n	800a3e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3fc:	4b36      	ldr	r3, [pc, #216]	; (800a4d8 <pvPortMalloc+0x180>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a402:	429a      	cmp	r2, r3
 800a404:	d050      	beq.n	800a4a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2208      	movs	r2, #8
 800a40c:	4413      	add	r3, r2
 800a40e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	1ad2      	subs	r2, r2, r3
 800a420:	2308      	movs	r3, #8
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	429a      	cmp	r2, r3
 800a426:	d91f      	bls.n	800a468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00a      	beq.n	800a450 <pvPortMalloc+0xf8>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	613b      	str	r3, [r7, #16]
}
 800a44c:	bf00      	nop
 800a44e:	e7fe      	b.n	800a44e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	1ad2      	subs	r2, r2, r3
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a462:	69b8      	ldr	r0, [r7, #24]
 800a464:	f000 f908 	bl	800a678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a468:	4b1d      	ldr	r3, [pc, #116]	; (800a4e0 <pvPortMalloc+0x188>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	4a1b      	ldr	r2, [pc, #108]	; (800a4e0 <pvPortMalloc+0x188>)
 800a474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a476:	4b1a      	ldr	r3, [pc, #104]	; (800a4e0 <pvPortMalloc+0x188>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	4b1b      	ldr	r3, [pc, #108]	; (800a4e8 <pvPortMalloc+0x190>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d203      	bcs.n	800a48a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a482:	4b17      	ldr	r3, [pc, #92]	; (800a4e0 <pvPortMalloc+0x188>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a18      	ldr	r2, [pc, #96]	; (800a4e8 <pvPortMalloc+0x190>)
 800a488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <pvPortMalloc+0x184>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	431a      	orrs	r2, r3
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a49e:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <pvPortMalloc+0x194>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	4a11      	ldr	r2, [pc, #68]	; (800a4ec <pvPortMalloc+0x194>)
 800a4a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4a8:	f7fe fb44 	bl	8008b34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	f003 0307 	and.w	r3, r3, #7
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00a      	beq.n	800a4cc <pvPortMalloc+0x174>
	__asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	60fb      	str	r3, [r7, #12]
}
 800a4c8:	bf00      	nop
 800a4ca:	e7fe      	b.n	800a4ca <pvPortMalloc+0x172>
	return pvReturn;
 800a4cc:	69fb      	ldr	r3, [r7, #28]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3728      	adds	r7, #40	; 0x28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20007fcc 	.word	0x20007fcc
 800a4dc:	20007fe0 	.word	0x20007fe0
 800a4e0:	20007fd0 	.word	0x20007fd0
 800a4e4:	20007fc4 	.word	0x20007fc4
 800a4e8:	20007fd4 	.word	0x20007fd4
 800a4ec:	20007fd8 	.word	0x20007fd8

0800a4f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d04d      	beq.n	800a59e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a502:	2308      	movs	r3, #8
 800a504:	425b      	negs	r3, r3
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	4413      	add	r3, r2
 800a50a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	4b24      	ldr	r3, [pc, #144]	; (800a5a8 <vPortFree+0xb8>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4013      	ands	r3, r2
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <vPortFree+0x44>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	60fb      	str	r3, [r7, #12]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <vPortFree+0x62>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	60bb      	str	r3, [r7, #8]
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	4b14      	ldr	r3, [pc, #80]	; (800a5a8 <vPortFree+0xb8>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4013      	ands	r3, r2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d01e      	beq.n	800a59e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d11a      	bne.n	800a59e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	4b0e      	ldr	r3, [pc, #56]	; (800a5a8 <vPortFree+0xb8>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	43db      	mvns	r3, r3
 800a572:	401a      	ands	r2, r3
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a578:	f7fe face 	bl	8008b18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <vPortFree+0xbc>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4413      	add	r3, r2
 800a586:	4a09      	ldr	r2, [pc, #36]	; (800a5ac <vPortFree+0xbc>)
 800a588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a58a:	6938      	ldr	r0, [r7, #16]
 800a58c:	f000 f874 	bl	800a678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a590:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <vPortFree+0xc0>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3301      	adds	r3, #1
 800a596:	4a06      	ldr	r2, [pc, #24]	; (800a5b0 <vPortFree+0xc0>)
 800a598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a59a:	f7fe facb 	bl	8008b34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a59e:	bf00      	nop
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20007fe0 	.word	0x20007fe0
 800a5ac:	20007fd0 	.word	0x20007fd0
 800a5b0:	20007fdc 	.word	0x20007fdc

0800a5b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5ba:	f247 5330 	movw	r3, #30000	; 0x7530
 800a5be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5c0:	4b27      	ldr	r3, [pc, #156]	; (800a660 <prvHeapInit+0xac>)
 800a5c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f003 0307 	and.w	r3, r3, #7
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00c      	beq.n	800a5e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3307      	adds	r3, #7
 800a5d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f023 0307 	bic.w	r3, r3, #7
 800a5da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	4a1f      	ldr	r2, [pc, #124]	; (800a660 <prvHeapInit+0xac>)
 800a5e4:	4413      	add	r3, r2
 800a5e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5ec:	4a1d      	ldr	r2, [pc, #116]	; (800a664 <prvHeapInit+0xb0>)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5f2:	4b1c      	ldr	r3, [pc, #112]	; (800a664 <prvHeapInit+0xb0>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a600:	2208      	movs	r2, #8
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	1a9b      	subs	r3, r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f023 0307 	bic.w	r3, r3, #7
 800a60e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4a15      	ldr	r2, [pc, #84]	; (800a668 <prvHeapInit+0xb4>)
 800a614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a616:	4b14      	ldr	r3, [pc, #80]	; (800a668 <prvHeapInit+0xb4>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2200      	movs	r2, #0
 800a61c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a61e:	4b12      	ldr	r3, [pc, #72]	; (800a668 <prvHeapInit+0xb4>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	1ad2      	subs	r2, r2, r3
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a634:	4b0c      	ldr	r3, [pc, #48]	; (800a668 <prvHeapInit+0xb4>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <prvHeapInit+0xb8>)
 800a642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	4a09      	ldr	r2, [pc, #36]	; (800a670 <prvHeapInit+0xbc>)
 800a64a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a64c:	4b09      	ldr	r3, [pc, #36]	; (800a674 <prvHeapInit+0xc0>)
 800a64e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a652:	601a      	str	r2, [r3, #0]
}
 800a654:	bf00      	nop
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	20000a94 	.word	0x20000a94
 800a664:	20007fc4 	.word	0x20007fc4
 800a668:	20007fcc 	.word	0x20007fcc
 800a66c:	20007fd4 	.word	0x20007fd4
 800a670:	20007fd0 	.word	0x20007fd0
 800a674:	20007fe0 	.word	0x20007fe0

0800a678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a680:	4b28      	ldr	r3, [pc, #160]	; (800a724 <prvInsertBlockIntoFreeList+0xac>)
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e002      	b.n	800a68c <prvInsertBlockIntoFreeList+0x14>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	429a      	cmp	r2, r3
 800a694:	d8f7      	bhi.n	800a686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d108      	bne.n	800a6ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	441a      	add	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d118      	bne.n	800a700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	4b15      	ldr	r3, [pc, #84]	; (800a728 <prvInsertBlockIntoFreeList+0xb0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d00d      	beq.n	800a6f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685a      	ldr	r2, [r3, #4]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	441a      	add	r2, r3
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	e008      	b.n	800a708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6f6:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <prvInsertBlockIntoFreeList+0xb0>)
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	e003      	b.n	800a708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d002      	beq.n	800a716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a716:	bf00      	nop
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20007fc4 	.word	0x20007fc4
 800a728:	20007fcc 	.word	0x20007fcc

0800a72c <ThreadArmingTask>:
extern control_register_struct control_registers;
extern status_register_struct status_registers;
extern volatile uint8_t security_control_temp;

void ThreadArmingTask(void const * argument)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
	uint16_t arming_time_counter = 0; // счетчик времени процесса постановки на охрану
 800a734:	2300      	movs	r3, #0
 800a736:	83fb      	strh	r3, [r7, #30]
	uint8_t control_loop_arming = 0; // переменная для сравнения с перечнем контролируемых шлейфов
 800a738:	2300      	movs	r3, #0
 800a73a:	737b      	strb	r3, [r7, #13]

	uint8_t button_state_arm1=0; // переменные состояния шлейфов при процессе постановки на охрану, если переменная примет значение 10, значит шлейф замкнут
 800a73c:	2300      	movs	r3, #0
 800a73e:	777b      	strb	r3, [r7, #29]
	uint8_t button_state_arm2=0;
 800a740:	2300      	movs	r3, #0
 800a742:	773b      	strb	r3, [r7, #28]
	uint8_t button_state_arm3=0;
 800a744:	2300      	movs	r3, #0
 800a746:	76fb      	strb	r3, [r7, #27]
	uint8_t button_state_arm4=0;
 800a748:	2300      	movs	r3, #0
 800a74a:	76bb      	strb	r3, [r7, #26]
	uint8_t button_state_arm5=0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	767b      	strb	r3, [r7, #25]
	uint8_t button_state_arm6=0;
 800a750:	2300      	movs	r3, #0
 800a752:	763b      	strb	r3, [r7, #24]
	uint8_t button_state_arm7=0;
 800a754:	2300      	movs	r3, #0
 800a756:	75fb      	strb	r3, [r7, #23]
	uint8_t button_state_arm8=0;
 800a758:	2300      	movs	r3, #0
 800a75a:	75bb      	strb	r3, [r7, #22]

	uint8_t state_arm1 = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	757b      	strb	r3, [r7, #21]
	uint8_t state_arm2 = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	753b      	strb	r3, [r7, #20]
	uint8_t state_arm3 = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	74fb      	strb	r3, [r7, #19]
	uint8_t state_arm4 = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	74bb      	strb	r3, [r7, #18]
	uint8_t state_arm5 = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	747b      	strb	r3, [r7, #17]
	uint8_t state_arm6 = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	743b      	strb	r3, [r7, #16]
	uint8_t state_arm7 = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	73fb      	strb	r3, [r7, #15]
	uint8_t state_arm8 = 0;
 800a778:	2300      	movs	r3, #0
 800a77a:	73bb      	strb	r3, [r7, #14]


	for(;;)
	{

		if( status_registers.security_status_reg == ARMING_PROCESS ) // если запущен процесс потановки на охрану
 800a77c:	4bae      	ldr	r3, [pc, #696]	; (800aa38 <ThreadArmingTask+0x30c>)
 800a77e:	885b      	ldrh	r3, [r3, #2]
 800a780:	2b06      	cmp	r3, #6
 800a782:	f040 828f 	bne.w	800aca4 <ThreadArmingTask+0x578>
		{
			//----Контроль шлейфа №1--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x01) != 0x00 ) )
 800a786:	2104      	movs	r1, #4
 800a788:	48ac      	ldr	r0, [pc, #688]	; (800aa3c <ThreadArmingTask+0x310>)
 800a78a:	f7f8 fd57 	bl	800323c <HAL_GPIO_ReadPin>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b01      	cmp	r3, #1
 800a792:	d112      	bne.n	800a7ba <ThreadArmingTask+0x8e>
 800a794:	4baa      	ldr	r3, [pc, #680]	; (800aa40 <ThreadArmingTask+0x314>)
 800a796:	885b      	ldrh	r3, [r3, #2]
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00c      	beq.n	800a7ba <ThreadArmingTask+0x8e>
			{
				if(button_state_arm1<10){button_state_arm1++;}
 800a7a0:	7f7b      	ldrb	r3, [r7, #29]
 800a7a2:	2b09      	cmp	r3, #9
 800a7a4:	d803      	bhi.n	800a7ae <ThreadArmingTask+0x82>
 800a7a6:	7f7b      	ldrb	r3, [r7, #29]
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	777b      	strb	r3, [r7, #29]
 800a7ac:	e01a      	b.n	800a7e4 <ThreadArmingTask+0xb8>
				else if(button_state_arm1>=10){state_arm1=1;}
 800a7ae:	7f7b      	ldrb	r3, [r7, #29]
 800a7b0:	2b09      	cmp	r3, #9
 800a7b2:	d917      	bls.n	800a7e4 <ThreadArmingTask+0xb8>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	757b      	strb	r3, [r7, #21]
				if(button_state_arm1<10){button_state_arm1++;}
 800a7b8:	e014      	b.n	800a7e4 <ThreadArmingTask+0xb8>

			}
			else if( (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x01) != 0x00 ) )
 800a7ba:	2104      	movs	r1, #4
 800a7bc:	489f      	ldr	r0, [pc, #636]	; (800aa3c <ThreadArmingTask+0x310>)
 800a7be:	f7f8 fd3d 	bl	800323c <HAL_GPIO_ReadPin>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10e      	bne.n	800a7e6 <ThreadArmingTask+0xba>
 800a7c8:	4b9d      	ldr	r3, [pc, #628]	; (800aa40 <ThreadArmingTask+0x314>)
 800a7ca:	885b      	ldrh	r3, [r3, #2]
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d008      	beq.n	800a7e6 <ThreadArmingTask+0xba>
			{
				if(button_state_arm1>0){button_state_arm1=0; state_arm1=0;}
 800a7d4:	7f7b      	ldrb	r3, [r7, #29]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d005      	beq.n	800a7e6 <ThreadArmingTask+0xba>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	777b      	strb	r3, [r7, #29]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	757b      	strb	r3, [r7, #21]
 800a7e2:	e000      	b.n	800a7e6 <ThreadArmingTask+0xba>
				if(button_state_arm1<10){button_state_arm1++;}
 800a7e4:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №2--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x02) != 0x00 ) )
 800a7e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a7ea:	4896      	ldr	r0, [pc, #600]	; (800aa44 <ThreadArmingTask+0x318>)
 800a7ec:	f7f8 fd26 	bl	800323c <HAL_GPIO_ReadPin>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d112      	bne.n	800a81c <ThreadArmingTask+0xf0>
 800a7f6:	4b92      	ldr	r3, [pc, #584]	; (800aa40 <ThreadArmingTask+0x314>)
 800a7f8:	885b      	ldrh	r3, [r3, #2]
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00c      	beq.n	800a81c <ThreadArmingTask+0xf0>
			{
				if(button_state_arm2<10){button_state_arm2++;}
 800a802:	7f3b      	ldrb	r3, [r7, #28]
 800a804:	2b09      	cmp	r3, #9
 800a806:	d803      	bhi.n	800a810 <ThreadArmingTask+0xe4>
 800a808:	7f3b      	ldrb	r3, [r7, #28]
 800a80a:	3301      	adds	r3, #1
 800a80c:	773b      	strb	r3, [r7, #28]
 800a80e:	e01b      	b.n	800a848 <ThreadArmingTask+0x11c>
				else if(button_state_arm2>=10){state_arm2=1;}
 800a810:	7f3b      	ldrb	r3, [r7, #28]
 800a812:	2b09      	cmp	r3, #9
 800a814:	d918      	bls.n	800a848 <ThreadArmingTask+0x11c>
 800a816:	2301      	movs	r3, #1
 800a818:	753b      	strb	r3, [r7, #20]
				if(button_state_arm2<10){button_state_arm2++;}
 800a81a:	e015      	b.n	800a848 <ThreadArmingTask+0x11c>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x02) != 0x00 ) )
 800a81c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a820:	4888      	ldr	r0, [pc, #544]	; (800aa44 <ThreadArmingTask+0x318>)
 800a822:	f7f8 fd0b 	bl	800323c <HAL_GPIO_ReadPin>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10e      	bne.n	800a84a <ThreadArmingTask+0x11e>
 800a82c:	4b84      	ldr	r3, [pc, #528]	; (800aa40 <ThreadArmingTask+0x314>)
 800a82e:	885b      	ldrh	r3, [r3, #2]
 800a830:	f003 0302 	and.w	r3, r3, #2
 800a834:	2b00      	cmp	r3, #0
 800a836:	d008      	beq.n	800a84a <ThreadArmingTask+0x11e>
			{
				if(button_state_arm2>0){button_state_arm2=0; state_arm2=0;}
 800a838:	7f3b      	ldrb	r3, [r7, #28]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d005      	beq.n	800a84a <ThreadArmingTask+0x11e>
 800a83e:	2300      	movs	r3, #0
 800a840:	773b      	strb	r3, [r7, #28]
 800a842:	2300      	movs	r3, #0
 800a844:	753b      	strb	r3, [r7, #20]
 800a846:	e000      	b.n	800a84a <ThreadArmingTask+0x11e>
				if(button_state_arm2<10){button_state_arm2++;}
 800a848:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №3--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x04) != 0x00 ) )
 800a84a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a84e:	487d      	ldr	r0, [pc, #500]	; (800aa44 <ThreadArmingTask+0x318>)
 800a850:	f7f8 fcf4 	bl	800323c <HAL_GPIO_ReadPin>
 800a854:	4603      	mov	r3, r0
 800a856:	2b01      	cmp	r3, #1
 800a858:	d112      	bne.n	800a880 <ThreadArmingTask+0x154>
 800a85a:	4b79      	ldr	r3, [pc, #484]	; (800aa40 <ThreadArmingTask+0x314>)
 800a85c:	885b      	ldrh	r3, [r3, #2]
 800a85e:	f003 0304 	and.w	r3, r3, #4
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00c      	beq.n	800a880 <ThreadArmingTask+0x154>
			{
				if(button_state_arm3<10){button_state_arm3++;}
 800a866:	7efb      	ldrb	r3, [r7, #27]
 800a868:	2b09      	cmp	r3, #9
 800a86a:	d803      	bhi.n	800a874 <ThreadArmingTask+0x148>
 800a86c:	7efb      	ldrb	r3, [r7, #27]
 800a86e:	3301      	adds	r3, #1
 800a870:	76fb      	strb	r3, [r7, #27]
 800a872:	e01b      	b.n	800a8ac <ThreadArmingTask+0x180>
				else if(button_state_arm3>=10){state_arm3=1;}
 800a874:	7efb      	ldrb	r3, [r7, #27]
 800a876:	2b09      	cmp	r3, #9
 800a878:	d918      	bls.n	800a8ac <ThreadArmingTask+0x180>
 800a87a:	2301      	movs	r3, #1
 800a87c:	74fb      	strb	r3, [r7, #19]
				if(button_state_arm3<10){button_state_arm3++;}
 800a87e:	e015      	b.n	800a8ac <ThreadArmingTask+0x180>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x04) != 0x00 ) )
 800a880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a884:	486f      	ldr	r0, [pc, #444]	; (800aa44 <ThreadArmingTask+0x318>)
 800a886:	f7f8 fcd9 	bl	800323c <HAL_GPIO_ReadPin>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10e      	bne.n	800a8ae <ThreadArmingTask+0x182>
 800a890:	4b6b      	ldr	r3, [pc, #428]	; (800aa40 <ThreadArmingTask+0x314>)
 800a892:	885b      	ldrh	r3, [r3, #2]
 800a894:	f003 0304 	and.w	r3, r3, #4
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d008      	beq.n	800a8ae <ThreadArmingTask+0x182>
			{
				if(button_state_arm3>0){button_state_arm3=0; state_arm3=0;}
 800a89c:	7efb      	ldrb	r3, [r7, #27]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d005      	beq.n	800a8ae <ThreadArmingTask+0x182>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	76fb      	strb	r3, [r7, #27]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	74fb      	strb	r3, [r7, #19]
 800a8aa:	e000      	b.n	800a8ae <ThreadArmingTask+0x182>
				if(button_state_arm3<10){button_state_arm3++;}
 800a8ac:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №4--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x08) != 0x00 ) )
 800a8ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a8b2:	4864      	ldr	r0, [pc, #400]	; (800aa44 <ThreadArmingTask+0x318>)
 800a8b4:	f7f8 fcc2 	bl	800323c <HAL_GPIO_ReadPin>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d112      	bne.n	800a8e4 <ThreadArmingTask+0x1b8>
 800a8be:	4b60      	ldr	r3, [pc, #384]	; (800aa40 <ThreadArmingTask+0x314>)
 800a8c0:	885b      	ldrh	r3, [r3, #2]
 800a8c2:	f003 0308 	and.w	r3, r3, #8
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00c      	beq.n	800a8e4 <ThreadArmingTask+0x1b8>
			{
				if(button_state_arm4<10){button_state_arm4++;}
 800a8ca:	7ebb      	ldrb	r3, [r7, #26]
 800a8cc:	2b09      	cmp	r3, #9
 800a8ce:	d803      	bhi.n	800a8d8 <ThreadArmingTask+0x1ac>
 800a8d0:	7ebb      	ldrb	r3, [r7, #26]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	76bb      	strb	r3, [r7, #26]
 800a8d6:	e01b      	b.n	800a910 <ThreadArmingTask+0x1e4>
				else if(button_state_arm4>=10){state_arm4=1;}
 800a8d8:	7ebb      	ldrb	r3, [r7, #26]
 800a8da:	2b09      	cmp	r3, #9
 800a8dc:	d918      	bls.n	800a910 <ThreadArmingTask+0x1e4>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	74bb      	strb	r3, [r7, #18]
				if(button_state_arm4<10){button_state_arm4++;}
 800a8e2:	e015      	b.n	800a910 <ThreadArmingTask+0x1e4>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x08) != 0x00 ) )
 800a8e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a8e8:	4856      	ldr	r0, [pc, #344]	; (800aa44 <ThreadArmingTask+0x318>)
 800a8ea:	f7f8 fca7 	bl	800323c <HAL_GPIO_ReadPin>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10e      	bne.n	800a912 <ThreadArmingTask+0x1e6>
 800a8f4:	4b52      	ldr	r3, [pc, #328]	; (800aa40 <ThreadArmingTask+0x314>)
 800a8f6:	885b      	ldrh	r3, [r3, #2]
 800a8f8:	f003 0308 	and.w	r3, r3, #8
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d008      	beq.n	800a912 <ThreadArmingTask+0x1e6>
			{
				if(button_state_arm4>0){button_state_arm4=0; state_arm4=0;}
 800a900:	7ebb      	ldrb	r3, [r7, #26]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <ThreadArmingTask+0x1e6>
 800a906:	2300      	movs	r3, #0
 800a908:	76bb      	strb	r3, [r7, #26]
 800a90a:	2300      	movs	r3, #0
 800a90c:	74bb      	strb	r3, [r7, #18]
 800a90e:	e000      	b.n	800a912 <ThreadArmingTask+0x1e6>
				if(button_state_arm4<10){button_state_arm4++;}
 800a910:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №5--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x10) != 0x00 ) )
 800a912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a916:	484b      	ldr	r0, [pc, #300]	; (800aa44 <ThreadArmingTask+0x318>)
 800a918:	f7f8 fc90 	bl	800323c <HAL_GPIO_ReadPin>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d112      	bne.n	800a948 <ThreadArmingTask+0x21c>
 800a922:	4b47      	ldr	r3, [pc, #284]	; (800aa40 <ThreadArmingTask+0x314>)
 800a924:	885b      	ldrh	r3, [r3, #2]
 800a926:	f003 0310 	and.w	r3, r3, #16
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00c      	beq.n	800a948 <ThreadArmingTask+0x21c>
			{
				if(button_state_arm5<10){button_state_arm5++;}
 800a92e:	7e7b      	ldrb	r3, [r7, #25]
 800a930:	2b09      	cmp	r3, #9
 800a932:	d803      	bhi.n	800a93c <ThreadArmingTask+0x210>
 800a934:	7e7b      	ldrb	r3, [r7, #25]
 800a936:	3301      	adds	r3, #1
 800a938:	767b      	strb	r3, [r7, #25]
 800a93a:	e01b      	b.n	800a974 <ThreadArmingTask+0x248>
				else if(button_state_arm5>=10){state_arm5=1;}
 800a93c:	7e7b      	ldrb	r3, [r7, #25]
 800a93e:	2b09      	cmp	r3, #9
 800a940:	d918      	bls.n	800a974 <ThreadArmingTask+0x248>
 800a942:	2301      	movs	r3, #1
 800a944:	747b      	strb	r3, [r7, #17]
				if(button_state_arm5<10){button_state_arm5++;}
 800a946:	e015      	b.n	800a974 <ThreadArmingTask+0x248>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x10) != 0x00 ) )
 800a948:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a94c:	483d      	ldr	r0, [pc, #244]	; (800aa44 <ThreadArmingTask+0x318>)
 800a94e:	f7f8 fc75 	bl	800323c <HAL_GPIO_ReadPin>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10e      	bne.n	800a976 <ThreadArmingTask+0x24a>
 800a958:	4b39      	ldr	r3, [pc, #228]	; (800aa40 <ThreadArmingTask+0x314>)
 800a95a:	885b      	ldrh	r3, [r3, #2]
 800a95c:	f003 0310 	and.w	r3, r3, #16
 800a960:	2b00      	cmp	r3, #0
 800a962:	d008      	beq.n	800a976 <ThreadArmingTask+0x24a>
			{
				if(button_state_arm5>0){button_state_arm5=0; state_arm5=0;}
 800a964:	7e7b      	ldrb	r3, [r7, #25]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d005      	beq.n	800a976 <ThreadArmingTask+0x24a>
 800a96a:	2300      	movs	r3, #0
 800a96c:	767b      	strb	r3, [r7, #25]
 800a96e:	2300      	movs	r3, #0
 800a970:	747b      	strb	r3, [r7, #17]
 800a972:	e000      	b.n	800a976 <ThreadArmingTask+0x24a>
				if(button_state_arm5<10){button_state_arm5++;}
 800a974:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №6--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x20) != 0x00 ) )
 800a976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a97a:	4832      	ldr	r0, [pc, #200]	; (800aa44 <ThreadArmingTask+0x318>)
 800a97c:	f7f8 fc5e 	bl	800323c <HAL_GPIO_ReadPin>
 800a980:	4603      	mov	r3, r0
 800a982:	2b01      	cmp	r3, #1
 800a984:	d112      	bne.n	800a9ac <ThreadArmingTask+0x280>
 800a986:	4b2e      	ldr	r3, [pc, #184]	; (800aa40 <ThreadArmingTask+0x314>)
 800a988:	885b      	ldrh	r3, [r3, #2]
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00c      	beq.n	800a9ac <ThreadArmingTask+0x280>
			{
				if(button_state_arm6<10){button_state_arm6++;}
 800a992:	7e3b      	ldrb	r3, [r7, #24]
 800a994:	2b09      	cmp	r3, #9
 800a996:	d803      	bhi.n	800a9a0 <ThreadArmingTask+0x274>
 800a998:	7e3b      	ldrb	r3, [r7, #24]
 800a99a:	3301      	adds	r3, #1
 800a99c:	763b      	strb	r3, [r7, #24]
 800a99e:	e01b      	b.n	800a9d8 <ThreadArmingTask+0x2ac>
				else if(button_state_arm6>=10){state_arm6=1;}
 800a9a0:	7e3b      	ldrb	r3, [r7, #24]
 800a9a2:	2b09      	cmp	r3, #9
 800a9a4:	d918      	bls.n	800a9d8 <ThreadArmingTask+0x2ac>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	743b      	strb	r3, [r7, #16]
				if(button_state_arm6<10){button_state_arm6++;}
 800a9aa:	e015      	b.n	800a9d8 <ThreadArmingTask+0x2ac>
			}
			else if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x20) != 0x00 ) )
 800a9ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a9b0:	4824      	ldr	r0, [pc, #144]	; (800aa44 <ThreadArmingTask+0x318>)
 800a9b2:	f7f8 fc43 	bl	800323c <HAL_GPIO_ReadPin>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10e      	bne.n	800a9da <ThreadArmingTask+0x2ae>
 800a9bc:	4b20      	ldr	r3, [pc, #128]	; (800aa40 <ThreadArmingTask+0x314>)
 800a9be:	885b      	ldrh	r3, [r3, #2]
 800a9c0:	f003 0320 	and.w	r3, r3, #32
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d008      	beq.n	800a9da <ThreadArmingTask+0x2ae>
			{
				if(button_state_arm6>0){button_state_arm6=0; state_arm6=0;}
 800a9c8:	7e3b      	ldrb	r3, [r7, #24]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d005      	beq.n	800a9da <ThreadArmingTask+0x2ae>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	763b      	strb	r3, [r7, #24]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	743b      	strb	r3, [r7, #16]
 800a9d6:	e000      	b.n	800a9da <ThreadArmingTask+0x2ae>
				if(button_state_arm6<10){button_state_arm6++;}
 800a9d8:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №7--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x40) != 0x00 ) )
 800a9da:	2101      	movs	r1, #1
 800a9dc:	481a      	ldr	r0, [pc, #104]	; (800aa48 <ThreadArmingTask+0x31c>)
 800a9de:	f7f8 fc2d 	bl	800323c <HAL_GPIO_ReadPin>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d112      	bne.n	800aa0e <ThreadArmingTask+0x2e2>
 800a9e8:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <ThreadArmingTask+0x314>)
 800a9ea:	885b      	ldrh	r3, [r3, #2]
 800a9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00c      	beq.n	800aa0e <ThreadArmingTask+0x2e2>
			{
				if(button_state_arm7<10){button_state_arm7++;}
 800a9f4:	7dfb      	ldrb	r3, [r7, #23]
 800a9f6:	2b09      	cmp	r3, #9
 800a9f8:	d803      	bhi.n	800aa02 <ThreadArmingTask+0x2d6>
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	75fb      	strb	r3, [r7, #23]
 800aa00:	e024      	b.n	800aa4c <ThreadArmingTask+0x320>
				else if(button_state_arm7>=10){state_arm7=1;}
 800aa02:	7dfb      	ldrb	r3, [r7, #23]
 800aa04:	2b09      	cmp	r3, #9
 800aa06:	d921      	bls.n	800aa4c <ThreadArmingTask+0x320>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	73fb      	strb	r3, [r7, #15]
				if(button_state_arm7<10){button_state_arm7++;}
 800aa0c:	e01e      	b.n	800aa4c <ThreadArmingTask+0x320>
			}
			else if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x40) != 0x00 ) )
 800aa0e:	2101      	movs	r1, #1
 800aa10:	480d      	ldr	r0, [pc, #52]	; (800aa48 <ThreadArmingTask+0x31c>)
 800aa12:	f7f8 fc13 	bl	800323c <HAL_GPIO_ReadPin>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d118      	bne.n	800aa4e <ThreadArmingTask+0x322>
 800aa1c:	4b08      	ldr	r3, [pc, #32]	; (800aa40 <ThreadArmingTask+0x314>)
 800aa1e:	885b      	ldrh	r3, [r3, #2]
 800aa20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d012      	beq.n	800aa4e <ThreadArmingTask+0x322>
			{
				if(button_state_arm7>0){button_state_arm7=0; state_arm7=0;}
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00f      	beq.n	800aa4e <ThreadArmingTask+0x322>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	75fb      	strb	r3, [r7, #23]
 800aa32:	2300      	movs	r3, #0
 800aa34:	73fb      	strb	r3, [r7, #15]
 800aa36:	e00a      	b.n	800aa4e <ThreadArmingTask+0x322>
 800aa38:	2000a10c 	.word	0x2000a10c
 800aa3c:	40020400 	.word	0x40020400
 800aa40:	2000a1cc 	.word	0x2000a1cc
 800aa44:	40021400 	.word	0x40021400
 800aa48:	40021800 	.word	0x40021800
				if(button_state_arm7<10){button_state_arm7++;}
 800aa4c:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №8--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x80) != 0x00 ) )
 800aa4e:	2102      	movs	r1, #2
 800aa50:	4896      	ldr	r0, [pc, #600]	; (800acac <ThreadArmingTask+0x580>)
 800aa52:	f7f8 fbf3 	bl	800323c <HAL_GPIO_ReadPin>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d112      	bne.n	800aa82 <ThreadArmingTask+0x356>
 800aa5c:	4b94      	ldr	r3, [pc, #592]	; (800acb0 <ThreadArmingTask+0x584>)
 800aa5e:	885b      	ldrh	r3, [r3, #2]
 800aa60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00c      	beq.n	800aa82 <ThreadArmingTask+0x356>
			{
				if(button_state_arm8<10){button_state_arm8++;}
 800aa68:	7dbb      	ldrb	r3, [r7, #22]
 800aa6a:	2b09      	cmp	r3, #9
 800aa6c:	d803      	bhi.n	800aa76 <ThreadArmingTask+0x34a>
 800aa6e:	7dbb      	ldrb	r3, [r7, #22]
 800aa70:	3301      	adds	r3, #1
 800aa72:	75bb      	strb	r3, [r7, #22]
 800aa74:	e01a      	b.n	800aaac <ThreadArmingTask+0x380>
				else if(button_state_arm8>=10){state_arm8=1;}
 800aa76:	7dbb      	ldrb	r3, [r7, #22]
 800aa78:	2b09      	cmp	r3, #9
 800aa7a:	d917      	bls.n	800aaac <ThreadArmingTask+0x380>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	73bb      	strb	r3, [r7, #14]
				if(button_state_arm8<10){button_state_arm8++;}
 800aa80:	e014      	b.n	800aaac <ThreadArmingTask+0x380>
			}
			else if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x80) != 0x00 ) )
 800aa82:	2102      	movs	r1, #2
 800aa84:	4889      	ldr	r0, [pc, #548]	; (800acac <ThreadArmingTask+0x580>)
 800aa86:	f7f8 fbd9 	bl	800323c <HAL_GPIO_ReadPin>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10e      	bne.n	800aaae <ThreadArmingTask+0x382>
 800aa90:	4b87      	ldr	r3, [pc, #540]	; (800acb0 <ThreadArmingTask+0x584>)
 800aa92:	885b      	ldrh	r3, [r3, #2]
 800aa94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d008      	beq.n	800aaae <ThreadArmingTask+0x382>
			{
				if(button_state_arm8>0){button_state_arm8=0; state_arm8=0;}
 800aa9c:	7dbb      	ldrb	r3, [r7, #22]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d005      	beq.n	800aaae <ThreadArmingTask+0x382>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	75bb      	strb	r3, [r7, #22]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	73bb      	strb	r3, [r7, #14]
 800aaaa:	e000      	b.n	800aaae <ThreadArmingTask+0x382>
				if(button_state_arm8<10){button_state_arm8++;}
 800aaac:	bf00      	nop
			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			arming_time_counter++;
 800aaae:	8bfb      	ldrh	r3, [r7, #30]
 800aab0:	3301      	adds	r3, #1
 800aab2:	83fb      	strh	r3, [r7, #30]
			if( arming_time_counter > control_registers.arming_timeleft_reg)
 800aab4:	4b7e      	ldr	r3, [pc, #504]	; (800acb0 <ThreadArmingTask+0x584>)
 800aab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aaba:	8bfa      	ldrh	r2, [r7, #30]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	f240 80f1 	bls.w	800aca4 <ThreadArmingTask+0x578>
			{
				arming_time_counter = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	83fb      	strh	r3, [r7, #30]
				control_loop_arming = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	737b      	strb	r3, [r7, #13]
				control_loop_arming = state_arm1|(state_arm2<<1)|(state_arm3<<2)|(state_arm4<<3)|(state_arm5<<4)|(state_arm6<<5)|(state_arm7<<6)|(state_arm8<<7);
 800aaca:	7d3b      	ldrb	r3, [r7, #20]
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	b25a      	sxtb	r2, r3
 800aad0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	b25a      	sxtb	r2, r3
 800aad8:	7cfb      	ldrb	r3, [r7, #19]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	b25b      	sxtb	r3, r3
 800aade:	4313      	orrs	r3, r2
 800aae0:	b25a      	sxtb	r2, r3
 800aae2:	7cbb      	ldrb	r3, [r7, #18]
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	b25b      	sxtb	r3, r3
 800aae8:	4313      	orrs	r3, r2
 800aaea:	b25a      	sxtb	r2, r3
 800aaec:	7c7b      	ldrb	r3, [r7, #17]
 800aaee:	011b      	lsls	r3, r3, #4
 800aaf0:	b25b      	sxtb	r3, r3
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	b25a      	sxtb	r2, r3
 800aaf6:	7c3b      	ldrb	r3, [r7, #16]
 800aaf8:	015b      	lsls	r3, r3, #5
 800aafa:	b25b      	sxtb	r3, r3
 800aafc:	4313      	orrs	r3, r2
 800aafe:	b25a      	sxtb	r2, r3
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
 800ab02:	019b      	lsls	r3, r3, #6
 800ab04:	b25b      	sxtb	r3, r3
 800ab06:	4313      	orrs	r3, r2
 800ab08:	b25a      	sxtb	r2, r3
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	01db      	lsls	r3, r3, #7
 800ab0e:	b25b      	sxtb	r3, r3
 800ab10:	4313      	orrs	r3, r2
 800ab12:	b25b      	sxtb	r3, r3
 800ab14:	737b      	strb	r3, [r7, #13]
				if( control_loop_arming == control_registers.control_loop_reg)
 800ab16:	7b7b      	ldrb	r3, [r7, #13]
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	4b65      	ldr	r3, [pc, #404]	; (800acb0 <ThreadArmingTask+0x584>)
 800ab1c:	885b      	ldrh	r3, [r3, #2]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d160      	bne.n	800abe4 <ThreadArmingTask+0x4b8>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ab22:	4b64      	ldr	r3, [pc, #400]	; (800acb4 <ThreadArmingTask+0x588>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f04f 31ff 	mov.w	r1, #4294967295
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fc f904 	bl	8006d38 <osMutexWait>
					fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 800ab30:	2100      	movs	r1, #0
 800ab32:	f242 1020 	movw	r0, #8480	; 0x2120
 800ab36:	f00a fe93 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	f242 1021 	movw	r0, #8481	; 0x2121
 800ab40:	f00a fe8e 	bl	8015860 <fm25v02_write>
					control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT;
 800ab44:	4b5a      	ldr	r3, [pc, #360]	; (800acb0 <ThreadArmingTask+0x584>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	801a      	strh	r2, [r3, #0]
					fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	f242 0002 	movw	r0, #8194	; 0x2002
 800ab50:	f00a fe86 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*SECURITY_STATUS_REG+1, security_control_temp);
 800ab54:	4b58      	ldr	r3, [pc, #352]	; (800acb8 <ThreadArmingTask+0x58c>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	f242 0003 	movw	r0, #8195	; 0x2003
 800ab60:	f00a fe7e 	bl	8015860 <fm25v02_write>
					status_registers.security_status_reg = security_control_temp;
 800ab64:	4b54      	ldr	r3, [pc, #336]	; (800acb8 <ThreadArmingTask+0x58c>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	4b53      	ldr	r3, [pc, #332]	; (800acbc <ThreadArmingTask+0x590>)
 800ab6e:	805a      	strh	r2, [r3, #2]
					osMutexRelease(Fm25v02MutexHandle);
 800ab70:	4b50      	ldr	r3, [pc, #320]	; (800acb4 <ThreadArmingTask+0x588>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fc f92d 	bl	8006dd4 <osMutexRelease>

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ab7a:	4b4e      	ldr	r3, [pc, #312]	; (800acb4 <ThreadArmingTask+0x588>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f04f 31ff 	mov.w	r1, #4294967295
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fc f8d8 	bl	8006d38 <osMutexWait>
					fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800ab88:	2100      	movs	r1, #0
 800ab8a:	f242 106e 	movw	r0, #8558	; 0x216e
 800ab8e:	f00a fe67 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800ab92:	2101      	movs	r1, #1
 800ab94:	f242 106f 	movw	r0, #8559	; 0x216f
 800ab98:	f00a fe62 	bl	8015860 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800ab9c:	4b45      	ldr	r3, [pc, #276]	; (800acb4 <ThreadArmingTask+0x588>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fc f917 	bl	8006dd4 <osMutexRelease>

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aba6:	4b43      	ldr	r3, [pc, #268]	; (800acb4 <ThreadArmingTask+0x588>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f04f 31ff 	mov.w	r1, #4294967295
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fc f8c2 	bl	8006d38 <osMutexWait>
					fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800abb4:	2100      	movs	r1, #0
 800abb6:	f242 0020 	movw	r0, #8224	; 0x2020
 800abba:	f00a fe51 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*SYSTEM_STATUS_REG+1, TURN_ON_STATE_ALARM);
 800abbe:	2106      	movs	r1, #6
 800abc0:	f242 0021 	movw	r0, #8225	; 0x2021
 800abc4:	f00a fe4c 	bl	8015860 <fm25v02_write>
					status_registers.system_status_reg = TURN_ON_STATE_ALARM;
 800abc8:	4b3c      	ldr	r3, [pc, #240]	; (800acbc <ThreadArmingTask+0x590>)
 800abca:	2206      	movs	r2, #6
 800abcc:	841a      	strh	r2, [r3, #32]
					osMutexRelease(Fm25v02MutexHandle);
 800abce:	4b39      	ldr	r3, [pc, #228]	; (800acb4 <ThreadArmingTask+0x588>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fc f8fe 	bl	8006dd4 <osMutexRelease>

					osThreadResume(EventWriteTaskHandle);
 800abd8:	4b39      	ldr	r3, [pc, #228]	; (800acc0 <ThreadArmingTask+0x594>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fc fadb 	bl	8007198 <osThreadResume>
 800abe2:	e05f      	b.n	800aca4 <ThreadArmingTask+0x578>
				}
				else if( control_loop_arming != control_registers.control_loop_reg)
 800abe4:	7b7b      	ldrb	r3, [r7, #13]
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	4b31      	ldr	r3, [pc, #196]	; (800acb0 <ThreadArmingTask+0x584>)
 800abea:	885b      	ldrh	r3, [r3, #2]
 800abec:	429a      	cmp	r2, r3
 800abee:	d059      	beq.n	800aca4 <ThreadArmingTask+0x578>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800abf0:	4b30      	ldr	r3, [pc, #192]	; (800acb4 <ThreadArmingTask+0x588>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f04f 31ff 	mov.w	r1, #4294967295
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fc f89d 	bl	8006d38 <osMutexWait>
					fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 800abfe:	2100      	movs	r1, #0
 800ac00:	f242 1020 	movw	r0, #8480	; 0x2120
 800ac04:	f00a fe2c 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 800ac08:	2100      	movs	r1, #0
 800ac0a:	f242 1021 	movw	r0, #8481	; 0x2121
 800ac0e:	f00a fe27 	bl	8015860 <fm25v02_write>
					control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT;
 800ac12:	4b27      	ldr	r3, [pc, #156]	; (800acb0 <ThreadArmingTask+0x584>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	801a      	strh	r2, [r3, #0]
					fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800ac18:	2100      	movs	r1, #0
 800ac1a:	f242 0002 	movw	r0, #8194	; 0x2002
 800ac1e:	f00a fe1f 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*SECURITY_STATUS_REG+1, ARMING_ERROR);
 800ac22:	2107      	movs	r1, #7
 800ac24:	f242 0003 	movw	r0, #8195	; 0x2003
 800ac28:	f00a fe1a 	bl	8015860 <fm25v02_write>
					status_registers.security_status_reg = ARMING_ERROR;
 800ac2c:	4b23      	ldr	r3, [pc, #140]	; (800acbc <ThreadArmingTask+0x590>)
 800ac2e:	2207      	movs	r2, #7
 800ac30:	805a      	strh	r2, [r3, #2]
					osMutexRelease(Fm25v02MutexHandle);
 800ac32:	4b20      	ldr	r3, [pc, #128]	; (800acb4 <ThreadArmingTask+0x588>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fc f8cc 	bl	8006dd4 <osMutexRelease>

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ac3c:	4b1d      	ldr	r3, [pc, #116]	; (800acb4 <ThreadArmingTask+0x588>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f04f 31ff 	mov.w	r1, #4294967295
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fc f877 	bl	8006d38 <osMutexWait>
					fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	f242 106e 	movw	r0, #8558	; 0x216e
 800ac50:	f00a fe06 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800ac54:	2101      	movs	r1, #1
 800ac56:	f242 106f 	movw	r0, #8559	; 0x216f
 800ac5a:	f00a fe01 	bl	8015860 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800ac5e:	4b15      	ldr	r3, [pc, #84]	; (800acb4 <ThreadArmingTask+0x588>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fc f8b6 	bl	8006dd4 <osMutexRelease>

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ac68:	4b12      	ldr	r3, [pc, #72]	; (800acb4 <ThreadArmingTask+0x588>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f04f 31ff 	mov.w	r1, #4294967295
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7fc f861 	bl	8006d38 <osMutexWait>
					fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800ac76:	2100      	movs	r1, #0
 800ac78:	f242 0020 	movw	r0, #8224	; 0x2020
 800ac7c:	f00a fdf0 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*SYSTEM_STATUS_REG+1, TURN_ON_ALARM_ERROR);
 800ac80:	2108      	movs	r1, #8
 800ac82:	f242 0021 	movw	r0, #8225	; 0x2021
 800ac86:	f00a fdeb 	bl	8015860 <fm25v02_write>
					status_registers.system_status_reg = TURN_ON_ALARM_ERROR;
 800ac8a:	4b0c      	ldr	r3, [pc, #48]	; (800acbc <ThreadArmingTask+0x590>)
 800ac8c:	2208      	movs	r2, #8
 800ac8e:	841a      	strh	r2, [r3, #32]
					osMutexRelease(Fm25v02MutexHandle);
 800ac90:	4b08      	ldr	r3, [pc, #32]	; (800acb4 <ThreadArmingTask+0x588>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fc f89d 	bl	8006dd4 <osMutexRelease>

					osThreadResume(EventWriteTaskHandle);
 800ac9a:	4b09      	ldr	r3, [pc, #36]	; (800acc0 <ThreadArmingTask+0x594>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fc fa7a 	bl	8007198 <osThreadResume>
				}
			}
		}


		osDelay(10); // вызываем процесс один раз в 10 мс
 800aca4:	200a      	movs	r0, #10
 800aca6:	f7fb ff66 	bl	8006b76 <osDelay>
		if( status_registers.security_status_reg == ARMING_PROCESS ) // если запущен процесс потановки на охрану
 800acaa:	e567      	b.n	800a77c <ThreadArmingTask+0x50>
 800acac:	40021800 	.word	0x40021800
 800acb0:	2000a1cc 	.word	0x2000a1cc
 800acb4:	20009a6c 	.word	0x20009a6c
 800acb8:	20007fed 	.word	0x20007fed
 800acbc:	2000a10c 	.word	0x2000a10c
 800acc0:	2000969c 	.word	0x2000969c

0800acc4 <ThreadCallRingCenterTask>:
extern osMutexId UartMutexHandle;
extern control_register_struct control_registers;


void ThreadCallRingCenterTask(void const * argument)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]



	for(;;)
	{
		osThreadSuspend(CallRingCenterTaskHandle); // переходим в спящий режим и ждем
 800accc:	4b0e      	ldr	r3, [pc, #56]	; (800ad08 <ThreadCallRingCenterTask+0x44>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fc fa55 	bl	8007180 <osThreadSuspend>

		while(control_registers.gprs_call_reg != CALL_ON) // пока регистр флага дозвона в центр не включен, ничего не делаем
 800acd6:	bf00      	nop
 800acd8:	4b0c      	ldr	r3, [pc, #48]	; (800ad0c <ThreadCallRingCenterTask+0x48>)
 800acda:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d1fa      	bne.n	800acd8 <ThreadCallRingCenterTask+0x14>
		{

		}

			osMutexWait(UartMutexHandle, osWaitForever);
 800ace2:	4b0b      	ldr	r3, [pc, #44]	; (800ad10 <ThreadCallRingCenterTask+0x4c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f04f 31ff 	mov.w	r1, #4294967295
 800acea:	4618      	mov	r0, r3
 800acec:	f7fc f824 	bl	8006d38 <osMutexWait>
			request_to_server(); // делаем запрос на сервер
 800acf0:	f00c fb28 	bl	8017344 <request_to_server>
			//while(request_to_server() != AT_OK){}; // делаем запрос на сервер
			osMutexRelease(UartMutexHandle);
 800acf4:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <ThreadCallRingCenterTask+0x4c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7fc f86b 	bl	8006dd4 <osMutexRelease>

		osDelay(5000); // ждем, если флаг не сброшен запрос повторяется
 800acfe:	f241 3088 	movw	r0, #5000	; 0x1388
 800ad02:	f7fb ff38 	bl	8006b76 <osDelay>
		osThreadSuspend(CallRingCenterTaskHandle); // переходим в спящий режим и ждем
 800ad06:	e7e1      	b.n	800accc <ThreadCallRingCenterTask+0x8>
 800ad08:	2000827c 	.word	0x2000827c
 800ad0c:	2000a1cc 	.word	0x2000a1cc
 800ad10:	200096a0 	.word	0x200096a0

0800ad14 <ThreadDisplayTask>:
#include "da04_11gwa.h"



void ThreadDisplayTask(void const * argument)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]


	for(;;)
	{

		dig1_set_0();
 800ad1c:	f00a fa96 	bl	801524c <dig1_set_0>
		dig2_set_0();
 800ad20:	f00a fb48 	bl	80153b4 <dig2_set_0>
		dig3_set_0();
 800ad24:	f00a fbfa 	bl	801551c <dig3_set_0>
		dig4_set_0();
 800ad28:	f00a fcac 	bl	8015684 <dig4_set_0>
		HAL_Delay(1000);
 800ad2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad30:	f7f6 ffe8 	bl	8001d04 <HAL_Delay>
		dig1_set_1();
 800ad34:	f00a fa9c 	bl	8015270 <dig1_set_1>
		dig2_set_1();
 800ad38:	f00a fb4e 	bl	80153d8 <dig2_set_1>
		dig3_set_1();
 800ad3c:	f00a fc00 	bl	8015540 <dig3_set_1>
		dig4_set_1();
 800ad40:	f00a fcb2 	bl	80156a8 <dig4_set_1>
		HAL_Delay(1000);
 800ad44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad48:	f7f6 ffdc 	bl	8001d04 <HAL_Delay>
		dig1_set_2();
 800ad4c:	f00a faa2 	bl	8015294 <dig1_set_2>
		dig2_set_2();
 800ad50:	f00a fb54 	bl	80153fc <dig2_set_2>
		dig3_set_2();
 800ad54:	f00a fc06 	bl	8015564 <dig3_set_2>
		dig4_set_2();
 800ad58:	f00a fcb8 	bl	80156cc <dig4_set_2>
		HAL_Delay(1000);
 800ad5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad60:	f7f6 ffd0 	bl	8001d04 <HAL_Delay>
		dig1_set_3();
 800ad64:	f00a faa8 	bl	80152b8 <dig1_set_3>
		dig2_set_3();
 800ad68:	f00a fb5a 	bl	8015420 <dig2_set_3>
		dig3_set_3();
 800ad6c:	f00a fc0c 	bl	8015588 <dig3_set_3>
		dig4_set_3();
 800ad70:	f00a fcbe 	bl	80156f0 <dig4_set_3>
		HAL_Delay(1000);
 800ad74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad78:	f7f6 ffc4 	bl	8001d04 <HAL_Delay>
		dig1_set_4();
 800ad7c:	f00a faae 	bl	80152dc <dig1_set_4>
		dig2_set_4();
 800ad80:	f00a fb60 	bl	8015444 <dig2_set_4>
		dig3_set_4();
 800ad84:	f00a fc12 	bl	80155ac <dig3_set_4>
		dig4_set_4();
 800ad88:	f00a fcc4 	bl	8015714 <dig4_set_4>
		HAL_Delay(1000);
 800ad8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ad90:	f7f6 ffb8 	bl	8001d04 <HAL_Delay>
		dig1_set_5();
 800ad94:	f00a fab4 	bl	8015300 <dig1_set_5>
		dig2_set_5();
 800ad98:	f00a fb66 	bl	8015468 <dig2_set_5>
		dig3_set_5();
 800ad9c:	f00a fc18 	bl	80155d0 <dig3_set_5>
		dig4_set_5();
 800ada0:	f00a fcca 	bl	8015738 <dig4_set_5>
		HAL_Delay(1000);
 800ada4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ada8:	f7f6 ffac 	bl	8001d04 <HAL_Delay>
		dig1_set_6();
 800adac:	f00a faba 	bl	8015324 <dig1_set_6>
		dig2_set_6();
 800adb0:	f00a fb6c 	bl	801548c <dig2_set_6>
		dig3_set_6();
 800adb4:	f00a fc1e 	bl	80155f4 <dig3_set_6>
		dig4_set_6();
 800adb8:	f00a fcd0 	bl	801575c <dig4_set_6>
		HAL_Delay(1000);
 800adbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800adc0:	f7f6 ffa0 	bl	8001d04 <HAL_Delay>
		dig1_set_7();
 800adc4:	f00a fac0 	bl	8015348 <dig1_set_7>
		dig2_set_7();
 800adc8:	f00a fb72 	bl	80154b0 <dig2_set_7>
		dig3_set_7();
 800adcc:	f00a fc24 	bl	8015618 <dig3_set_7>
		dig4_set_7();
 800add0:	f00a fcd6 	bl	8015780 <dig4_set_7>
		HAL_Delay(1000);
 800add4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800add8:	f7f6 ff94 	bl	8001d04 <HAL_Delay>
		dig1_set_8();
 800addc:	f00a fac6 	bl	801536c <dig1_set_8>
		dig2_set_8();
 800ade0:	f00a fb78 	bl	80154d4 <dig2_set_8>
		dig3_set_8();
 800ade4:	f00a fc2a 	bl	801563c <dig3_set_8>
		dig4_set_8();
 800ade8:	f00a fcdc 	bl	80157a4 <dig4_set_8>
		HAL_Delay(1000);
 800adec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800adf0:	f7f6 ff88 	bl	8001d04 <HAL_Delay>
		dig1_set_9();
 800adf4:	f00a facc 	bl	8015390 <dig1_set_9>
		dig2_set_9();
 800adf8:	f00a fb7e 	bl	80154f8 <dig2_set_9>
		dig3_set_9();
 800adfc:	f00a fc30 	bl	8015660 <dig3_set_9>
		dig4_set_9();
 800ae00:	f00a fce2 	bl	80157c8 <dig4_set_9>
		HAL_Delay(1000);
 800ae04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ae08:	f7f6 ff7c 	bl	8001d04 <HAL_Delay>

		osDelay(100); // ждем 100 милисекунд
 800ae0c:	2064      	movs	r0, #100	; 0x64
 800ae0e:	f7fb feb2 	bl	8006b76 <osDelay>
	{
 800ae12:	e783      	b.n	800ad1c <ThreadDisplayTask+0x8>

0800ae14 <ThreadEventWriteTask>:
volatile uint16_t address_event_temp; // переменная для записи адреса последнего записанного события
volatile uint8_t read_temp; // временная переменная для чтения из памяти


void ThreadEventWriteTask(void const * argument)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
	//uint8_t temp_data[30]; // буфер для записи событий
	//uint16_t address_event_temp; // переменная для записи адреса последнего записанного события
	//uint8_t read_temp; // временная переменная для чтения из памяти

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // выставляем адрес начала записи событий по умолчанию
 800ae1c:	4ba0      	ldr	r3, [pc, #640]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f04f 31ff 	mov.w	r1, #4294967295
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fb ff87 	bl	8006d38 <osMutexWait>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_H_REG, 0x00);
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	f242 0018 	movw	r0, #8216	; 0x2018
 800ae30:	f00a fd16 	bl	8015860 <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_H_REG+1, 0x20);
 800ae34:	2120      	movs	r1, #32
 800ae36:	f242 0019 	movw	r0, #8217	; 0x2019
 800ae3a:	f00a fd11 	bl	8015860 <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_L_REG, 0x00);
 800ae3e:	2100      	movs	r1, #0
 800ae40:	f242 001a 	movw	r0, #8218	; 0x201a
 800ae44:	f00a fd0c 	bl	8015860 <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_L_REG+1, 0x00);
 800ae48:	2100      	movs	r1, #0
 800ae4a:	f242 001b 	movw	r0, #8219	; 0x201b
 800ae4e:	f00a fd07 	bl	8015860 <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 800ae52:	4b93      	ldr	r3, [pc, #588]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7fb ffbc 	bl	8006dd4 <osMutexRelease>

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // вычитывавем из памяти значение адреса последнего события
 800ae5c:	4b90      	ldr	r3, [pc, #576]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f04f 31ff 	mov.w	r1, #4294967295
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fb ff67 	bl	8006d38 <osMutexWait>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &read_temp);
 800ae6a:	498e      	ldr	r1, [pc, #568]	; (800b0a4 <ThreadEventWriteTask+0x290>)
 800ae6c:	f242 001d 	movw	r0, #8221	; 0x201d
 800ae70:	f00a fcbc 	bl	80157ec <fm25v02_read>
	status_registers.address_last_event_h_reg = (uint16_t)read_temp;
 800ae74:	4b8b      	ldr	r3, [pc, #556]	; (800b0a4 <ThreadEventWriteTask+0x290>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	4b8a      	ldr	r3, [pc, #552]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800ae7e:	839a      	strh	r2, [r3, #28]
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &read_temp);
 800ae80:	4988      	ldr	r1, [pc, #544]	; (800b0a4 <ThreadEventWriteTask+0x290>)
 800ae82:	f242 001f 	movw	r0, #8223	; 0x201f
 800ae86:	f00a fcb1 	bl	80157ec <fm25v02_read>
	status_registers.address_last_event_l_reg = (uint16_t)read_temp;
 800ae8a:	4b86      	ldr	r3, [pc, #536]	; (800b0a4 <ThreadEventWriteTask+0x290>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	4b85      	ldr	r3, [pc, #532]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800ae94:	83da      	strh	r2, [r3, #30]
	osMutexRelease(Fm25v02MutexHandle);
 800ae96:	4b82      	ldr	r3, [pc, #520]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fb ff9a 	bl	8006dd4 <osMutexRelease>

	address_event_temp = ((((status_registers.address_last_event_h_reg)<<8)&0xFF00)|(status_registers.address_last_event_l_reg&0x00FF)); // высчитываем адрес последнего события
 800aea0:	4b81      	ldr	r3, [pc, #516]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800aea2:	8b9b      	ldrh	r3, [r3, #28]
 800aea4:	021b      	lsls	r3, r3, #8
 800aea6:	b21a      	sxth	r2, r3
 800aea8:	4b7f      	ldr	r3, [pc, #508]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800aeaa:	8bdb      	ldrh	r3, [r3, #30]
 800aeac:	b21b      	sxth	r3, r3
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	b21b      	sxth	r3, r3
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	b21b      	sxth	r3, r3
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	4b7c      	ldr	r3, [pc, #496]	; (800b0ac <ThreadEventWriteTask+0x298>)
 800aeba:	801a      	strh	r2, [r3, #0]

	if( (address_event_temp < 0x2000) || (address_event_temp > 0x288E) ) // проверяем, входит ли значение последнего события в диапазон памяти событий, если нет, то выставляем по умолчанию
 800aebc:	4b7b      	ldr	r3, [pc, #492]	; (800b0ac <ThreadEventWriteTask+0x298>)
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aec6:	d306      	bcc.n	800aed6 <ThreadEventWriteTask+0xc2>
 800aec8:	4b78      	ldr	r3, [pc, #480]	; (800b0ac <ThreadEventWriteTask+0x298>)
 800aeca:	881b      	ldrh	r3, [r3, #0]
 800aecc:	b29b      	uxth	r3, r3
 800aece:	f642 028e 	movw	r2, #10382	; 0x288e
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d925      	bls.n	800af22 <ThreadEventWriteTask+0x10e>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aed6:	4b72      	ldr	r3, [pc, #456]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f04f 31ff 	mov.w	r1, #4294967295
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fb ff2a 	bl	8006d38 <osMutexWait>
		fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 800aee4:	2100      	movs	r1, #0
 800aee6:	f242 001c 	movw	r0, #8220	; 0x201c
 800aeea:	f00a fcb9 	bl	8015860 <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 800aeee:	2120      	movs	r1, #32
 800aef0:	f242 001d 	movw	r0, #8221	; 0x201d
 800aef4:	f00a fcb4 	bl	8015860 <fm25v02_write>
		status_registers.address_last_event_h_reg = 0x0020;
 800aef8:	4b6b      	ldr	r3, [pc, #428]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800aefa:	2220      	movs	r2, #32
 800aefc:	839a      	strh	r2, [r3, #28]
		fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 800aefe:	2100      	movs	r1, #0
 800af00:	f242 001e 	movw	r0, #8222	; 0x201e
 800af04:	f00a fcac 	bl	8015860 <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 800af08:	2100      	movs	r1, #0
 800af0a:	f242 001f 	movw	r0, #8223	; 0x201f
 800af0e:	f00a fca7 	bl	8015860 <fm25v02_write>
		status_registers.address_last_event_l_reg = 0x0000;
 800af12:	4b65      	ldr	r3, [pc, #404]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800af14:	2200      	movs	r2, #0
 800af16:	83da      	strh	r2, [r3, #30]
		osMutexRelease(Fm25v02MutexHandle);
 800af18:	4b61      	ldr	r3, [pc, #388]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fb ff59 	bl	8006dd4 <osMutexRelease>



	for(;;)
	{
		osThreadSuspend(EventWriteTaskHandle);
 800af22:	4b63      	ldr	r3, [pc, #396]	; (800b0b0 <ThreadEventWriteTask+0x29c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4618      	mov	r0, r3
 800af28:	f7fc f92a 	bl	8007180 <osThreadSuspend>

		osMutexWait(Fm25v02MutexHandle, osWaitForever); // вычитывавем из памяти значение последнего события
 800af2c:	4b5c      	ldr	r3, [pc, #368]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f04f 31ff 	mov.w	r1, #4294967295
 800af34:	4618      	mov	r0, r3
 800af36:	f7fb feff 	bl	8006d38 <osMutexWait>
		fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &read_temp);
 800af3a:	495a      	ldr	r1, [pc, #360]	; (800b0a4 <ThreadEventWriteTask+0x290>)
 800af3c:	f242 001d 	movw	r0, #8221	; 0x201d
 800af40:	f00a fc54 	bl	80157ec <fm25v02_read>
		status_registers.address_last_event_h_reg = read_temp;
 800af44:	4b57      	ldr	r3, [pc, #348]	; (800b0a4 <ThreadEventWriteTask+0x290>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	4b56      	ldr	r3, [pc, #344]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800af4e:	839a      	strh	r2, [r3, #28]
		fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &read_temp);
 800af50:	4954      	ldr	r1, [pc, #336]	; (800b0a4 <ThreadEventWriteTask+0x290>)
 800af52:	f242 001f 	movw	r0, #8223	; 0x201f
 800af56:	f00a fc49 	bl	80157ec <fm25v02_read>
		status_registers.address_last_event_l_reg = read_temp;
 800af5a:	4b52      	ldr	r3, [pc, #328]	; (800b0a4 <ThreadEventWriteTask+0x290>)
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	b29a      	uxth	r2, r3
 800af62:	4b51      	ldr	r3, [pc, #324]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800af64:	83da      	strh	r2, [r3, #30]
		osMutexRelease(Fm25v02MutexHandle);
 800af66:	4b4e      	ldr	r3, [pc, #312]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fb ff32 	bl	8006dd4 <osMutexRelease>

		address_event_temp = ((((status_registers.address_last_event_h_reg)<<8)&0xFF00)|(status_registers.address_last_event_l_reg&0x00FF)); // считаем значение адреса последнего события
 800af70:	4b4d      	ldr	r3, [pc, #308]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800af72:	8b9b      	ldrh	r3, [r3, #28]
 800af74:	021b      	lsls	r3, r3, #8
 800af76:	b21a      	sxth	r2, r3
 800af78:	4b4b      	ldr	r3, [pc, #300]	; (800b0a8 <ThreadEventWriteTask+0x294>)
 800af7a:	8bdb      	ldrh	r3, [r3, #30]
 800af7c:	b21b      	sxth	r3, r3
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	b21b      	sxth	r3, r3
 800af82:	4313      	orrs	r3, r2
 800af84:	b21b      	sxth	r3, r3
 800af86:	b29a      	uxth	r2, r3
 800af88:	4b48      	ldr	r3, [pc, #288]	; (800b0ac <ThreadEventWriteTask+0x298>)
 800af8a:	801a      	strh	r2, [r3, #0]

		if( (address_event_temp >= 0x2000) && (address_event_temp <= 0x288E) ) // проверяем, чтобы значение адреса события лежало в области памяти ведения протокола событий
 800af8c:	4b47      	ldr	r3, [pc, #284]	; (800b0ac <ThreadEventWriteTask+0x298>)
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	b29b      	uxth	r3, r3
 800af92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af96:	f0c0 8162 	bcc.w	800b25e <ThreadEventWriteTask+0x44a>
 800af9a:	4b44      	ldr	r3, [pc, #272]	; (800b0ac <ThreadEventWriteTask+0x298>)
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	f642 028e 	movw	r2, #10382	; 0x288e
 800afa4:	4293      	cmp	r3, r2
 800afa6:	f200 815a 	bhi.w	800b25e <ThreadEventWriteTask+0x44a>
		{

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800afaa:	4b3d      	ldr	r3, [pc, #244]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f04f 31ff 	mov.w	r1, #4294967295
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fb fec0 	bl	8006d38 <osMutexWait>

			fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &temp_data[0]);
 800afb8:	493e      	ldr	r1, [pc, #248]	; (800b0b4 <ThreadEventWriteTask+0x2a0>)
 800afba:	f242 000b 	movw	r0, #8203	; 0x200b
 800afbe:	f00a fc15 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &temp_data[1]);
 800afc2:	493d      	ldr	r1, [pc, #244]	; (800b0b8 <ThreadEventWriteTask+0x2a4>)
 800afc4:	f242 000d 	movw	r0, #8205	; 0x200d
 800afc8:	f00a fc10 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &temp_data[2]);
 800afcc:	493b      	ldr	r1, [pc, #236]	; (800b0bc <ThreadEventWriteTask+0x2a8>)
 800afce:	f242 000f 	movw	r0, #8207	; 0x200f
 800afd2:	f00a fc0b 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &temp_data[3]);
 800afd6:	493a      	ldr	r1, [pc, #232]	; (800b0c0 <ThreadEventWriteTask+0x2ac>)
 800afd8:	f242 0011 	movw	r0, #8209	; 0x2011
 800afdc:	f00a fc06 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &temp_data[4]);
 800afe0:	4938      	ldr	r1, [pc, #224]	; (800b0c4 <ThreadEventWriteTask+0x2b0>)
 800afe2:	f242 0013 	movw	r0, #8211	; 0x2013
 800afe6:	f00a fc01 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &temp_data[5]);
 800afea:	4937      	ldr	r1, [pc, #220]	; (800b0c8 <ThreadEventWriteTask+0x2b4>)
 800afec:	f242 0015 	movw	r0, #8213	; 0x2015
 800aff0:	f00a fbfc 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*SYSTEM_STATUS_REG+1, &temp_data[6]);
 800aff4:	4935      	ldr	r1, [pc, #212]	; (800b0cc <ThreadEventWriteTask+0x2b8>)
 800aff6:	f242 0021 	movw	r0, #8225	; 0x2021
 800affa:	f00a fbf7 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*SECURITY_STATUS_REG+1, &temp_data[7]);
 800affe:	4934      	ldr	r1, [pc, #208]	; (800b0d0 <ThreadEventWriteTask+0x2bc>)
 800b000:	f242 0003 	movw	r0, #8195	; 0x2003
 800b004:	f00a fbf2 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*STATUS_LOOP_REG+1, &temp_data[8]);
 800b008:	4932      	ldr	r1, [pc, #200]	; (800b0d4 <ThreadEventWriteTask+0x2c0>)
 800b00a:	f242 0005 	movw	r0, #8197	; 0x2005
 800b00e:	f00a fbed 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*ALARM_LOOP_REG+1, &temp_data[9]);
 800b012:	4931      	ldr	r1, [pc, #196]	; (800b0d8 <ThreadEventWriteTask+0x2c4>)
 800b014:	f242 0009 	movw	r0, #8201	; 0x2009
 800b018:	f00a fbe8 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*ERROR_LOOP_REG+1, &temp_data[10]);
 800b01c:	492f      	ldr	r1, [pc, #188]	; (800b0dc <ThreadEventWriteTask+0x2c8>)
 800b01e:	f242 0007 	movw	r0, #8199	; 0x2007
 800b022:	f00a fbe3 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &temp_data[11]);
 800b026:	492e      	ldr	r1, [pc, #184]	; (800b0e0 <ThreadEventWriteTask+0x2cc>)
 800b028:	f242 002b 	movw	r0, #8235	; 0x202b
 800b02c:	f00a fbde 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &temp_data[12]);
 800b030:	492c      	ldr	r1, [pc, #176]	; (800b0e4 <ThreadEventWriteTask+0x2d0>)
 800b032:	f242 002d 	movw	r0, #8237	; 0x202d
 800b036:	f00a fbd9 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &temp_data[13]);
 800b03a:	492b      	ldr	r1, [pc, #172]	; (800b0e8 <ThreadEventWriteTask+0x2d4>)
 800b03c:	f242 002f 	movw	r0, #8239	; 0x202f
 800b040:	f00a fbd4 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &temp_data[14]);
 800b044:	4929      	ldr	r1, [pc, #164]	; (800b0ec <ThreadEventWriteTask+0x2d8>)
 800b046:	f242 0031 	movw	r0, #8241	; 0x2031
 800b04a:	f00a fbcf 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &temp_data[15]);
 800b04e:	4928      	ldr	r1, [pc, #160]	; (800b0f0 <ThreadEventWriteTask+0x2dc>)
 800b050:	f242 0033 	movw	r0, #8243	; 0x2033
 800b054:	f00a fbca 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &temp_data[16]);
 800b058:	4926      	ldr	r1, [pc, #152]	; (800b0f4 <ThreadEventWriteTask+0x2e0>)
 800b05a:	f242 0035 	movw	r0, #8245	; 0x2035
 800b05e:	f00a fbc5 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &temp_data[17]);
 800b062:	4925      	ldr	r1, [pc, #148]	; (800b0f8 <ThreadEventWriteTask+0x2e4>)
 800b064:	f242 0037 	movw	r0, #8247	; 0x2037
 800b068:	f00a fbc0 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &temp_data[18]);
 800b06c:	4923      	ldr	r1, [pc, #140]	; (800b0fc <ThreadEventWriteTask+0x2e8>)
 800b06e:	f242 0039 	movw	r0, #8249	; 0x2039
 800b072:	f00a fbbb 	bl	80157ec <fm25v02_read>
			fm25v02_read(2*POWER_ON_REG+1, &temp_data[19]);
 800b076:	4922      	ldr	r1, [pc, #136]	; (800b100 <ThreadEventWriteTask+0x2ec>)
 800b078:	f242 0023 	movw	r0, #8227	; 0x2023
 800b07c:	f00a fbb6 	bl	80157ec <fm25v02_read>

			osMutexRelease(Fm25v02MutexHandle);
 800b080:	4b07      	ldr	r3, [pc, #28]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4618      	mov	r0, r3
 800b086:	f7fb fea5 	bl	8006dd4 <osMutexRelease>

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b08a:	4b05      	ldr	r3, [pc, #20]	; (800b0a0 <ThreadEventWriteTask+0x28c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f04f 31ff 	mov.w	r1, #4294967295
 800b092:	4618      	mov	r0, r3
 800b094:	f7fb fe50 	bl	8006d38 <osMutexWait>
			//fm25v02_fast_write(address_event_temp, &temp_data[0], 30); // переписываем текущие значения переменных для события в память

			for(uint8_t i=0; i<30; i++) // переписываем текущие значения переменных для события в память
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
 800b09c:	e055      	b.n	800b14a <ThreadEventWriteTask+0x336>
 800b09e:	bf00      	nop
 800b0a0:	20009a6c 	.word	0x20009a6c
 800b0a4:	20009d64 	.word	0x20009d64
 800b0a8:	2000a10c 	.word	0x2000a10c
 800b0ac:	20009d86 	.word	0x20009d86
 800b0b0:	2000969c 	.word	0x2000969c
 800b0b4:	20009d68 	.word	0x20009d68
 800b0b8:	20009d69 	.word	0x20009d69
 800b0bc:	20009d6a 	.word	0x20009d6a
 800b0c0:	20009d6b 	.word	0x20009d6b
 800b0c4:	20009d6c 	.word	0x20009d6c
 800b0c8:	20009d6d 	.word	0x20009d6d
 800b0cc:	20009d6e 	.word	0x20009d6e
 800b0d0:	20009d6f 	.word	0x20009d6f
 800b0d4:	20009d70 	.word	0x20009d70
 800b0d8:	20009d71 	.word	0x20009d71
 800b0dc:	20009d72 	.word	0x20009d72
 800b0e0:	20009d73 	.word	0x20009d73
 800b0e4:	20009d74 	.word	0x20009d74
 800b0e8:	20009d75 	.word	0x20009d75
 800b0ec:	20009d76 	.word	0x20009d76
 800b0f0:	20009d77 	.word	0x20009d77
 800b0f4:	20009d78 	.word	0x20009d78
 800b0f8:	20009d79 	.word	0x20009d79
 800b0fc:	20009d7a 	.word	0x20009d7a
 800b100:	20009d7b 	.word	0x20009d7b
			{
				fm25v02_write(2*(address_event_temp+i), 0x00);
 800b104:	4b58      	ldr	r3, [pc, #352]	; (800b268 <ThreadEventWriteTask+0x454>)
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	461a      	mov	r2, r3
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	4413      	add	r3, r2
 800b110:	b29b      	uxth	r3, r3
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	b29b      	uxth	r3, r3
 800b116:	2100      	movs	r1, #0
 800b118:	4618      	mov	r0, r3
 800b11a:	f00a fba1 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*(address_event_temp+i)+1, temp_data[i]);
 800b11e:	4b52      	ldr	r3, [pc, #328]	; (800b268 <ThreadEventWriteTask+0x454>)
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	b29b      	uxth	r3, r3
 800b124:	461a      	mov	r2, r3
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	4413      	add	r3, r2
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	005b      	lsls	r3, r3, #1
 800b12e:	b29b      	uxth	r3, r3
 800b130:	3301      	adds	r3, #1
 800b132:	b29a      	uxth	r2, r3
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	494d      	ldr	r1, [pc, #308]	; (800b26c <ThreadEventWriteTask+0x458>)
 800b138:	5ccb      	ldrb	r3, [r1, r3]
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	4619      	mov	r1, r3
 800b13e:	4610      	mov	r0, r2
 800b140:	f00a fb8e 	bl	8015860 <fm25v02_write>
			for(uint8_t i=0; i<30; i++) // переписываем текущие значения переменных для события в память
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	3301      	adds	r3, #1
 800b148:	73fb      	strb	r3, [r7, #15]
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	2b1d      	cmp	r3, #29
 800b14e:	d9d9      	bls.n	800b104 <ThreadEventWriteTask+0x2f0>
			fm25v02_write(2*(address_event_temp+29)+1, temp_data[29]);
			*/



			osMutexRelease(Fm25v02MutexHandle);
 800b150:	4b47      	ldr	r3, [pc, #284]	; (800b270 <ThreadEventWriteTask+0x45c>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f7fb fe3d 	bl	8006dd4 <osMutexRelease>

			address_event_temp = address_event_temp + 30;
 800b15a:	4b43      	ldr	r3, [pc, #268]	; (800b268 <ThreadEventWriteTask+0x454>)
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	b29b      	uxth	r3, r3
 800b160:	331e      	adds	r3, #30
 800b162:	b29a      	uxth	r2, r3
 800b164:	4b40      	ldr	r3, [pc, #256]	; (800b268 <ThreadEventWriteTask+0x454>)
 800b166:	801a      	strh	r2, [r3, #0]

			if( address_event_temp > 0x288E )
 800b168:	4b3f      	ldr	r3, [pc, #252]	; (800b268 <ThreadEventWriteTask+0x454>)
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	f642 028e 	movw	r2, #10382	; 0x288e
 800b172:	4293      	cmp	r3, r2
 800b174:	d926      	bls.n	800b1c4 <ThreadEventWriteTask+0x3b0>
			{

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b176:	4b3e      	ldr	r3, [pc, #248]	; (800b270 <ThreadEventWriteTask+0x45c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f04f 31ff 	mov.w	r1, #4294967295
 800b17e:	4618      	mov	r0, r3
 800b180:	f7fb fdda 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 800b184:	2100      	movs	r1, #0
 800b186:	f242 001c 	movw	r0, #8220	; 0x201c
 800b18a:	f00a fb69 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 800b18e:	2120      	movs	r1, #32
 800b190:	f242 001d 	movw	r0, #8221	; 0x201d
 800b194:	f00a fb64 	bl	8015860 <fm25v02_write>
				status_registers.address_last_event_h_reg = 0x0020;
 800b198:	4b36      	ldr	r3, [pc, #216]	; (800b274 <ThreadEventWriteTask+0x460>)
 800b19a:	2220      	movs	r2, #32
 800b19c:	839a      	strh	r2, [r3, #28]
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 800b19e:	2100      	movs	r1, #0
 800b1a0:	f242 001e 	movw	r0, #8222	; 0x201e
 800b1a4:	f00a fb5c 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	f242 001f 	movw	r0, #8223	; 0x201f
 800b1ae:	f00a fb57 	bl	8015860 <fm25v02_write>
				status_registers.address_last_event_l_reg = 0x0000;
 800b1b2:	4b30      	ldr	r3, [pc, #192]	; (800b274 <ThreadEventWriteTask+0x460>)
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 800b1b8:	4b2d      	ldr	r3, [pc, #180]	; (800b270 <ThreadEventWriteTask+0x45c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fb fe09 	bl	8006dd4 <osMutexRelease>
 800b1c2:	e04c      	b.n	800b25e <ThreadEventWriteTask+0x44a>

				osMutexRelease(Fm25v02MutexHandle);
				*/

			}
			else if( (address_event_temp >= 0x2000) && (address_event_temp <= 0x288E) )
 800b1c4:	4b28      	ldr	r3, [pc, #160]	; (800b268 <ThreadEventWriteTask+0x454>)
 800b1c6:	881b      	ldrh	r3, [r3, #0]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1ce:	d346      	bcc.n	800b25e <ThreadEventWriteTask+0x44a>
 800b1d0:	4b25      	ldr	r3, [pc, #148]	; (800b268 <ThreadEventWriteTask+0x454>)
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	f642 028e 	movw	r2, #10382	; 0x288e
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d83f      	bhi.n	800b25e <ThreadEventWriteTask+0x44a>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b1de:	4b24      	ldr	r3, [pc, #144]	; (800b270 <ThreadEventWriteTask+0x45c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f04f 31ff 	mov.w	r1, #4294967295
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fb fda6 	bl	8006d38 <osMutexWait>

				read_temp = (uint8_t)((address_event_temp>>8)&0x00FF);
 800b1ec:	4b1e      	ldr	r3, [pc, #120]	; (800b268 <ThreadEventWriteTask+0x454>)
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	0a1b      	lsrs	r3, r3, #8
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	b2da      	uxtb	r2, r3
 800b1f8:	4b1f      	ldr	r3, [pc, #124]	; (800b278 <ThreadEventWriteTask+0x464>)
 800b1fa:	701a      	strb	r2, [r3, #0]
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	f242 001c 	movw	r0, #8220	; 0x201c
 800b202:	f00a fb2d 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, read_temp);
 800b206:	4b1c      	ldr	r3, [pc, #112]	; (800b278 <ThreadEventWriteTask+0x464>)
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	4619      	mov	r1, r3
 800b20e:	f242 001d 	movw	r0, #8221	; 0x201d
 800b212:	f00a fb25 	bl	8015860 <fm25v02_write>
				status_registers.address_last_event_h_reg = (uint16_t)read_temp;
 800b216:	4b18      	ldr	r3, [pc, #96]	; (800b278 <ThreadEventWriteTask+0x464>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	4b15      	ldr	r3, [pc, #84]	; (800b274 <ThreadEventWriteTask+0x460>)
 800b220:	839a      	strh	r2, [r3, #28]

				read_temp = (uint8_t)(address_event_temp&0x00FF);
 800b222:	4b11      	ldr	r3, [pc, #68]	; (800b268 <ThreadEventWriteTask+0x454>)
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	b29b      	uxth	r3, r3
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	4b13      	ldr	r3, [pc, #76]	; (800b278 <ThreadEventWriteTask+0x464>)
 800b22c:	701a      	strb	r2, [r3, #0]
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 800b22e:	2100      	movs	r1, #0
 800b230:	f242 001e 	movw	r0, #8222	; 0x201e
 800b234:	f00a fb14 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, read_temp);
 800b238:	4b0f      	ldr	r3, [pc, #60]	; (800b278 <ThreadEventWriteTask+0x464>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	4619      	mov	r1, r3
 800b240:	f242 001f 	movw	r0, #8223	; 0x201f
 800b244:	f00a fb0c 	bl	8015860 <fm25v02_write>
				status_registers.address_last_event_l_reg = (uint16_t)read_temp;
 800b248:	4b0b      	ldr	r3, [pc, #44]	; (800b278 <ThreadEventWriteTask+0x464>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	b29a      	uxth	r2, r3
 800b250:	4b08      	ldr	r3, [pc, #32]	; (800b274 <ThreadEventWriteTask+0x460>)
 800b252:	83da      	strh	r2, [r3, #30]

				osMutexRelease(Fm25v02MutexHandle);
 800b254:	4b06      	ldr	r3, [pc, #24]	; (800b270 <ThreadEventWriteTask+0x45c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fb fdbb 	bl	8006dd4 <osMutexRelease>
		else // здесь должно быть то, что нужно сделать если значение адреса не вошло в область памяти ведения протокола событий, например можно выставить соответствующий флаг и сделать запрос на сервер
		{

		}

		osDelay(1);
 800b25e:	2001      	movs	r0, #1
 800b260:	f7fb fc89 	bl	8006b76 <osDelay>
		osThreadSuspend(EventWriteTaskHandle);
 800b264:	e65d      	b.n	800af22 <ThreadEventWriteTask+0x10e>
 800b266:	bf00      	nop
 800b268:	20009d86 	.word	0x20009d86
 800b26c:	20009d68 	.word	0x20009d68
 800b270:	20009a6c 	.word	0x20009a6c
 800b274:	2000a10c 	.word	0x2000a10c
 800b278:	20009d64 	.word	0x20009d64

0800b27c <ThreadIbuttonTask>:
uint32_t t;


//Поток обработки ibutton и постановки на сигнализацию-------------------------
void ThreadIbuttonTask(void const * argument)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
	uint8_t ibutton_temp[8]; //временная переменная для записи номера таблетки
	uint8_t temp;
	osThreadSuspend(IbuttonTaskHandle); // переводим поток ThreadIbuttonTask в спящий режим
 800b284:	4b87      	ldr	r3, [pc, #540]	; (800b4a4 <ThreadIbuttonTask+0x228>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fb ff79 	bl	8007180 <osThreadSuspend>

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b28e:	4b86      	ldr	r3, [pc, #536]	; (800b4a8 <ThreadIbuttonTask+0x22c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f04f 31ff 	mov.w	r1, #4294967295
 800b296:	4618      	mov	r0, r3
 800b298:	f7fb fd4e 	bl	8006d38 <osMutexWait>
	fm25v02_write(2*SECURITY_STATUS_REG, 0x00); // обнуляем старший байт статуса режима охраны
 800b29c:	2100      	movs	r1, #0
 800b29e:	f242 0002 	movw	r0, #8194	; 0x2002
 800b2a2:	f00a fadd 	bl	8015860 <fm25v02_write>
	fm25v02_read(2*SECURITY_STATUS_REG+1, &temp); // читаем младший байт статуса режима охраны
 800b2a6:	f107 030f 	add.w	r3, r7, #15
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	f242 0003 	movw	r0, #8195	; 0x2003
 800b2b0:	f00a fa9c 	bl	80157ec <fm25v02_read>
	osMutexRelease(Fm25v02MutexHandle);
 800b2b4:	4b7c      	ldr	r3, [pc, #496]	; (800b4a8 <ThreadIbuttonTask+0x22c>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fb fd8b 	bl	8006dd4 <osMutexRelease>

	if( (temp<0)||(temp>8) ) // если младший байт статуса режима охраны не входит в диапазон режимов статуса охраны, то обнуляем младший байт статуса режима охраны
 800b2be:	7bfb      	ldrb	r3, [r7, #15]
 800b2c0:	2b08      	cmp	r3, #8
 800b2c2:	d915      	bls.n	800b2f0 <ThreadIbuttonTask+0x74>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b2c4:	4b78      	ldr	r3, [pc, #480]	; (800b4a8 <ThreadIbuttonTask+0x22c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f04f 31ff 	mov.w	r1, #4294967295
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fb fd33 	bl	8006d38 <osMutexWait>
		fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	f242 0002 	movw	r0, #8194	; 0x2002
 800b2d8:	f00a fac2 	bl	8015860 <fm25v02_write>
		fm25v02_write(2*SECURITY_STATUS_REG+1, 0x00); // обнуляем младший байт статуса режима охраны
 800b2dc:	2100      	movs	r1, #0
 800b2de:	f242 0003 	movw	r0, #8195	; 0x2003
 800b2e2:	f00a fabd 	bl	8015860 <fm25v02_write>
		osMutexRelease(Fm25v02MutexHandle);
 800b2e6:	4b70      	ldr	r3, [pc, #448]	; (800b4a8 <ThreadIbuttonTask+0x22c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fb fd72 	bl	8006dd4 <osMutexRelease>
	}

	for(;;)
	{
		if( ibutton_reset() == HAL_OK )// Инициализируем ibutton таблетку, проверяем отвечает ли она на сброс, если отвечает, то выполняем чтение ROM
 800b2f0:	f00a fc22 	bl	8015b38 <ibutton_reset>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f040 8174 	bne.w	800b5e4 <ThreadIbuttonTask+0x368>
		{

			if( ibutton_read_rom(&IbuttonROM) == HAL_OK ) // Считываем ROM-код таблетки
 800b2fc:	486b      	ldr	r0, [pc, #428]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b2fe:	f00a fc47 	bl	8015b90 <ibutton_read_rom>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	f040 816d 	bne.w	800b5e4 <ThreadIbuttonTask+0x368>
			{
				if( (ibutton_search_rom(&IbuttonROM) == HAL_OK) && (IbuttonROM.IbuttonROM_High != 0) && (IbuttonROM.IbuttonROM_Low != 0) )
 800b30a:	4868      	ldr	r0, [pc, #416]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b30c:	f00a fdea 	bl	8015ee4 <ibutton_search_rom>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	f040 8166 	bne.w	800b5e4 <ThreadIbuttonTask+0x368>
 800b318:	4b64      	ldr	r3, [pc, #400]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 8161 	beq.w	800b5e4 <ThreadIbuttonTask+0x368>
 800b322:	4b62      	ldr	r3, [pc, #392]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 815c 	beq.w	800b5e4 <ThreadIbuttonTask+0x368>
				{

		  			BUZ_ON();
 800b32c:	f00a fb46 	bl	80159bc <BUZ_ON>
		  			HAL_Delay(20);
 800b330:	2014      	movs	r0, #20
 800b332:	f7f6 fce7 	bl	8001d04 <HAL_Delay>
		  			BUZ_OFF();
 800b336:	f00a fb4d 	bl	80159d4 <BUZ_OFF>

					ibutton_temp[0] = (uint8_t)(IbuttonROM.IbuttonROM_Low); // записываем во временные переменные номер найденной таблетки
 800b33a:	4b5c      	ldr	r3, [pc, #368]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	743b      	strb	r3, [r7, #16]
					ibutton_temp[1] = (uint8_t)(IbuttonROM.IbuttonROM_Low>>8);
 800b342:	4b5a      	ldr	r3, [pc, #360]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	0a1b      	lsrs	r3, r3, #8
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	747b      	strb	r3, [r7, #17]
					ibutton_temp[2] = (uint8_t)(IbuttonROM.IbuttonROM_Low>>16);
 800b34c:	4b57      	ldr	r3, [pc, #348]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	0c1b      	lsrs	r3, r3, #16
 800b352:	b2db      	uxtb	r3, r3
 800b354:	74bb      	strb	r3, [r7, #18]
					ibutton_temp[3] = (uint8_t)(IbuttonROM.IbuttonROM_Low>>24);
 800b356:	4b55      	ldr	r3, [pc, #340]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	0e1b      	lsrs	r3, r3, #24
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	74fb      	strb	r3, [r7, #19]
					ibutton_temp[4] = (uint8_t)(IbuttonROM.IbuttonROM_High);
 800b360:	4b52      	ldr	r3, [pc, #328]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	b2db      	uxtb	r3, r3
 800b366:	753b      	strb	r3, [r7, #20]
					ibutton_temp[5] = (uint8_t)(IbuttonROM.IbuttonROM_High>>8);
 800b368:	4b50      	ldr	r3, [pc, #320]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	0a1b      	lsrs	r3, r3, #8
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	757b      	strb	r3, [r7, #21]
					ibutton_temp[6] = (uint8_t)(IbuttonROM.IbuttonROM_High>>16);
 800b372:	4b4e      	ldr	r3, [pc, #312]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	0c1b      	lsrs	r3, r3, #16
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	75bb      	strb	r3, [r7, #22]
					ibutton_temp[7] = (uint8_t)(IbuttonROM.IbuttonROM_High>>24);
 800b37c:	4b4b      	ldr	r3, [pc, #300]	; (800b4ac <ThreadIbuttonTask+0x230>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	0e1b      	lsrs	r3, r3, #24
 800b382:	b2db      	uxtb	r3, r3
 800b384:	75fb      	strb	r3, [r7, #23]

					if( (status_registers.security_status_reg == DISABLED_BY_IBUTTON) || (status_registers.security_status_reg == DISABLED_BY_SERVER) || (status_registers.security_status_reg == RESERVED_0) ) // Если сигнализация выключена, ставим на охрану
 800b386:	4b4a      	ldr	r3, [pc, #296]	; (800b4b0 <ThreadIbuttonTask+0x234>)
 800b388:	885b      	ldrh	r3, [r3, #2]
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d008      	beq.n	800b3a0 <ThreadIbuttonTask+0x124>
 800b38e:	4b48      	ldr	r3, [pc, #288]	; (800b4b0 <ThreadIbuttonTask+0x234>)
 800b390:	885b      	ldrh	r3, [r3, #2]
 800b392:	2b02      	cmp	r3, #2
 800b394:	d004      	beq.n	800b3a0 <ThreadIbuttonTask+0x124>
 800b396:	4b46      	ldr	r3, [pc, #280]	; (800b4b0 <ThreadIbuttonTask+0x234>)
 800b398:	885b      	ldrh	r3, [r3, #2]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f040 808c 	bne.w	800b4b8 <ThreadIbuttonTask+0x23c>
			  		{

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b3a0:	4b41      	ldr	r3, [pc, #260]	; (800b4a8 <ThreadIbuttonTask+0x22c>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f04f 31ff 	mov.w	r1, #4294967295
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fb fcc5 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*IBUTTON_COMPLETE_0_REG, 0x00);
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	f242 002a 	movw	r0, #8234	; 0x202a
 800b3b4:	f00a fa54 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_0_REG+1, ibutton_temp[0]);
 800b3b8:	7c3b      	ldrb	r3, [r7, #16]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	f242 002b 	movw	r0, #8235	; 0x202b
 800b3c0:	f00a fa4e 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_1_REG, 0x00);
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	f242 002c 	movw	r0, #8236	; 0x202c
 800b3ca:	f00a fa49 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_1_REG+1, ibutton_temp[1]);
 800b3ce:	7c7b      	ldrb	r3, [r7, #17]
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	f242 002d 	movw	r0, #8237	; 0x202d
 800b3d6:	f00a fa43 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_2_REG, 0x00);
 800b3da:	2100      	movs	r1, #0
 800b3dc:	f242 002e 	movw	r0, #8238	; 0x202e
 800b3e0:	f00a fa3e 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_2_REG+1, ibutton_temp[2]);
 800b3e4:	7cbb      	ldrb	r3, [r7, #18]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	f242 002f 	movw	r0, #8239	; 0x202f
 800b3ec:	f00a fa38 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_3_REG, 0x00);
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	f242 0030 	movw	r0, #8240	; 0x2030
 800b3f6:	f00a fa33 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_3_REG+1, ibutton_temp[3]);
 800b3fa:	7cfb      	ldrb	r3, [r7, #19]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	f242 0031 	movw	r0, #8241	; 0x2031
 800b402:	f00a fa2d 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_4_REG, 0x00);
 800b406:	2100      	movs	r1, #0
 800b408:	f242 0032 	movw	r0, #8242	; 0x2032
 800b40c:	f00a fa28 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_4_REG+1, ibutton_temp[4]);
 800b410:	7d3b      	ldrb	r3, [r7, #20]
 800b412:	4619      	mov	r1, r3
 800b414:	f242 0033 	movw	r0, #8243	; 0x2033
 800b418:	f00a fa22 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_5_REG, 0x00);
 800b41c:	2100      	movs	r1, #0
 800b41e:	f242 0034 	movw	r0, #8244	; 0x2034
 800b422:	f00a fa1d 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_5_REG+1, ibutton_temp[5]);
 800b426:	7d7b      	ldrb	r3, [r7, #21]
 800b428:	4619      	mov	r1, r3
 800b42a:	f242 0035 	movw	r0, #8245	; 0x2035
 800b42e:	f00a fa17 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_6_REG, 0x00);
 800b432:	2100      	movs	r1, #0
 800b434:	f242 0036 	movw	r0, #8246	; 0x2036
 800b438:	f00a fa12 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_6_REG+1, ibutton_temp[6]);
 800b43c:	7dbb      	ldrb	r3, [r7, #22]
 800b43e:	4619      	mov	r1, r3
 800b440:	f242 0037 	movw	r0, #8247	; 0x2037
 800b444:	f00a fa0c 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_7_REG, 0x00);
 800b448:	2100      	movs	r1, #0
 800b44a:	f242 0038 	movw	r0, #8248	; 0x2038
 800b44e:	f00a fa07 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_7_REG+1, ibutton_temp[7]);
 800b452:	7dfb      	ldrb	r3, [r7, #23]
 800b454:	4619      	mov	r1, r3
 800b456:	f242 0039 	movw	r0, #8249	; 0x2039
 800b45a:	f00a fa01 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800b45e:	4b12      	ldr	r3, [pc, #72]	; (800b4a8 <ThreadIbuttonTask+0x22c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4618      	mov	r0, r3
 800b464:	f7fb fcb6 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b468:	4b0f      	ldr	r3, [pc, #60]	; (800b4a8 <ThreadIbuttonTask+0x22c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f04f 31ff 	mov.w	r1, #4294967295
 800b470:	4618      	mov	r0, r3
 800b472:	f7fb fc61 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_CONTROL_REG, 0x00); // запускаем процесс постановки на охрану
 800b476:	2100      	movs	r1, #0
 800b478:	f242 1020 	movw	r0, #8480	; 0x2120
 800b47c:	f00a f9f0 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_CONTROL_REG+1, ENABLE_FROM_IBUTTON);
 800b480:	2103      	movs	r1, #3
 800b482:	f242 1021 	movw	r0, #8481	; 0x2121
 800b486:	f00a f9eb 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800b48a:	4b07      	ldr	r3, [pc, #28]	; (800b4a8 <ThreadIbuttonTask+0x22c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fb fca0 	bl	8006dd4 <osMutexRelease>

						control_registers.security_control_reg = ENABLE_FROM_IBUTTON;
 800b494:	4b07      	ldr	r3, [pc, #28]	; (800b4b4 <ThreadIbuttonTask+0x238>)
 800b496:	2203      	movs	r2, #3
 800b498:	801a      	strh	r2, [r3, #0]

						HAL_Delay(10000); // делаем паузу
 800b49a:	f242 7010 	movw	r0, #10000	; 0x2710
 800b49e:	f7f6 fc31 	bl	8001d04 <HAL_Delay>
 800b4a2:	e09f      	b.n	800b5e4 <ThreadIbuttonTask+0x368>
 800b4a4:	20008114 	.word	0x20008114
 800b4a8:	20009a6c 	.word	0x20009a6c
 800b4ac:	20009d8c 	.word	0x20009d8c
 800b4b0:	2000a10c 	.word	0x2000a10c
 800b4b4:	2000a1cc 	.word	0x2000a1cc

			  		}

					else if( (status_registers.security_status_reg == ENABLED_BY_IBUTTON) || (status_registers.security_status_reg == ENABLED_BY_SERVER) || ( status_registers.security_status_reg == DOOR_OPEN_ALARM ) || ( status_registers.security_status_reg == ARMING_ERROR ) || ( status_registers.security_status_reg == DOOR_OPEN_POWER_OFF) ) // если сигнализация включена, снимаем с охраны
 800b4b8:	4b4c      	ldr	r3, [pc, #304]	; (800b5ec <ThreadIbuttonTask+0x370>)
 800b4ba:	885b      	ldrh	r3, [r3, #2]
 800b4bc:	2b03      	cmp	r3, #3
 800b4be:	d010      	beq.n	800b4e2 <ThreadIbuttonTask+0x266>
 800b4c0:	4b4a      	ldr	r3, [pc, #296]	; (800b5ec <ThreadIbuttonTask+0x370>)
 800b4c2:	885b      	ldrh	r3, [r3, #2]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d00c      	beq.n	800b4e2 <ThreadIbuttonTask+0x266>
 800b4c8:	4b48      	ldr	r3, [pc, #288]	; (800b5ec <ThreadIbuttonTask+0x370>)
 800b4ca:	885b      	ldrh	r3, [r3, #2]
 800b4cc:	2b05      	cmp	r3, #5
 800b4ce:	d008      	beq.n	800b4e2 <ThreadIbuttonTask+0x266>
 800b4d0:	4b46      	ldr	r3, [pc, #280]	; (800b5ec <ThreadIbuttonTask+0x370>)
 800b4d2:	885b      	ldrh	r3, [r3, #2]
 800b4d4:	2b07      	cmp	r3, #7
 800b4d6:	d004      	beq.n	800b4e2 <ThreadIbuttonTask+0x266>
 800b4d8:	4b44      	ldr	r3, [pc, #272]	; (800b5ec <ThreadIbuttonTask+0x370>)
 800b4da:	885b      	ldrh	r3, [r3, #2]
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	f040 8081 	bne.w	800b5e4 <ThreadIbuttonTask+0x368>
			  		{

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b4e2:	4b43      	ldr	r3, [pc, #268]	; (800b5f0 <ThreadIbuttonTask+0x374>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f04f 31ff 	mov.w	r1, #4294967295
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fb fc24 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*IBUTTON_COMPLETE_0_REG, 0x00);
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	f242 002a 	movw	r0, #8234	; 0x202a
 800b4f6:	f00a f9b3 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_0_REG+1, ibutton_temp[0]);
 800b4fa:	7c3b      	ldrb	r3, [r7, #16]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	f242 002b 	movw	r0, #8235	; 0x202b
 800b502:	f00a f9ad 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_1_REG, 0x00);
 800b506:	2100      	movs	r1, #0
 800b508:	f242 002c 	movw	r0, #8236	; 0x202c
 800b50c:	f00a f9a8 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_1_REG+1, ibutton_temp[1]);
 800b510:	7c7b      	ldrb	r3, [r7, #17]
 800b512:	4619      	mov	r1, r3
 800b514:	f242 002d 	movw	r0, #8237	; 0x202d
 800b518:	f00a f9a2 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_2_REG, 0x00);
 800b51c:	2100      	movs	r1, #0
 800b51e:	f242 002e 	movw	r0, #8238	; 0x202e
 800b522:	f00a f99d 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_2_REG+1, ibutton_temp[2]);
 800b526:	7cbb      	ldrb	r3, [r7, #18]
 800b528:	4619      	mov	r1, r3
 800b52a:	f242 002f 	movw	r0, #8239	; 0x202f
 800b52e:	f00a f997 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_3_REG, 0x00);
 800b532:	2100      	movs	r1, #0
 800b534:	f242 0030 	movw	r0, #8240	; 0x2030
 800b538:	f00a f992 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_3_REG+1, ibutton_temp[3]);
 800b53c:	7cfb      	ldrb	r3, [r7, #19]
 800b53e:	4619      	mov	r1, r3
 800b540:	f242 0031 	movw	r0, #8241	; 0x2031
 800b544:	f00a f98c 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_4_REG, 0x00);
 800b548:	2100      	movs	r1, #0
 800b54a:	f242 0032 	movw	r0, #8242	; 0x2032
 800b54e:	f00a f987 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_4_REG+1, ibutton_temp[4]);
 800b552:	7d3b      	ldrb	r3, [r7, #20]
 800b554:	4619      	mov	r1, r3
 800b556:	f242 0033 	movw	r0, #8243	; 0x2033
 800b55a:	f00a f981 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_5_REG, 0x00);
 800b55e:	2100      	movs	r1, #0
 800b560:	f242 0034 	movw	r0, #8244	; 0x2034
 800b564:	f00a f97c 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_5_REG+1, ibutton_temp[5]);
 800b568:	7d7b      	ldrb	r3, [r7, #21]
 800b56a:	4619      	mov	r1, r3
 800b56c:	f242 0035 	movw	r0, #8245	; 0x2035
 800b570:	f00a f976 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_6_REG, 0x00);
 800b574:	2100      	movs	r1, #0
 800b576:	f242 0036 	movw	r0, #8246	; 0x2036
 800b57a:	f00a f971 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_6_REG+1, ibutton_temp[6]);
 800b57e:	7dbb      	ldrb	r3, [r7, #22]
 800b580:	4619      	mov	r1, r3
 800b582:	f242 0037 	movw	r0, #8247	; 0x2037
 800b586:	f00a f96b 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_7_REG, 0x00);
 800b58a:	2100      	movs	r1, #0
 800b58c:	f242 0038 	movw	r0, #8248	; 0x2038
 800b590:	f00a f966 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*IBUTTON_COMPLETE_7_REG+1, ibutton_temp[7]);
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	4619      	mov	r1, r3
 800b598:	f242 0039 	movw	r0, #8249	; 0x2039
 800b59c:	f00a f960 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800b5a0:	4b13      	ldr	r3, [pc, #76]	; (800b5f0 <ThreadIbuttonTask+0x374>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fb fc15 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b5aa:	4b11      	ldr	r3, [pc, #68]	; (800b5f0 <ThreadIbuttonTask+0x374>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f04f 31ff 	mov.w	r1, #4294967295
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fb fbc0 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_CONTROL_REG, 0x00); // запускаем процесс постановки на охрану
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	f242 1020 	movw	r0, #8480	; 0x2120
 800b5be:	f00a f94f 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_CONTROL_REG+1, DISABLE_FROM_IBUTTON);
 800b5c2:	2104      	movs	r1, #4
 800b5c4:	f242 1021 	movw	r0, #8481	; 0x2121
 800b5c8:	f00a f94a 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800b5cc:	4b08      	ldr	r3, [pc, #32]	; (800b5f0 <ThreadIbuttonTask+0x374>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fb fbff 	bl	8006dd4 <osMutexRelease>

						control_registers.security_control_reg = DISABLE_FROM_IBUTTON;
 800b5d6:	4b07      	ldr	r3, [pc, #28]	; (800b5f4 <ThreadIbuttonTask+0x378>)
 800b5d8:	2204      	movs	r2, #4
 800b5da:	801a      	strh	r2, [r3, #0]

						HAL_Delay(10000);
 800b5dc:	f242 7010 	movw	r0, #10000	; 0x2710
 800b5e0:	f7f6 fb90 	bl	8001d04 <HAL_Delay>
			}


		}

		osDelay(10);
 800b5e4:	200a      	movs	r0, #10
 800b5e6:	f7fb fac6 	bl	8006b76 <osDelay>
		if( ibutton_reset() == HAL_OK )// Инициализируем ibutton таблетку, проверяем отвечает ли она на сброс, если отвечает, то выполняем чтение ROM
 800b5ea:	e681      	b.n	800b2f0 <ThreadIbuttonTask+0x74>
 800b5ec:	2000a10c 	.word	0x2000a10c
 800b5f0:	20009a6c 	.word	0x20009a6c
 800b5f4:	2000a1cc 	.word	0x2000a1cc

0800b5f8 <ThreadLedTask>:
extern osThreadId IbuttonTaskHandle;
extern status_register_struct status_registers;
extern uint8_t security_state;

void ThreadLedTask(void const * argument)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]

	uint8_t door_open_alarm_counter = 0; // счетчик времени для процесса тревоги открытия двери
 800b600:	2300      	movs	r3, #0
 800b602:	73fb      	strb	r3, [r7, #15]
	uint8_t arming_process_counter = 0; // счетчик времени для процесса постановки на охрану
 800b604:	2300      	movs	r3, #0
 800b606:	73bb      	strb	r3, [r7, #14]
	uint8_t arming_error_counter = 0; // счетчик времени для процесса ошибки постановки на охрану
 800b608:	2300      	movs	r3, #0
 800b60a:	737b      	strb	r3, [r7, #13]

	osThreadSuspend(LedTaskHandle); // переводим поток ThreadLedTask в спящий режим
 800b60c:	4b3a      	ldr	r3, [pc, #232]	; (800b6f8 <ThreadLedTask+0x100>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4618      	mov	r0, r3
 800b612:	f7fb fdb5 	bl	8007180 <osThreadSuspend>
	osThreadResume(IbuttonTaskHandle); // пробуждаем поток ThreadIbuttonTask из спящего режима
 800b616:	4b39      	ldr	r3, [pc, #228]	; (800b6fc <ThreadLedTask+0x104>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fb fdbc 	bl	8007198 <osThreadResume>



	for(;;)
	{
		switch(status_registers.security_status_reg)
 800b620:	4b37      	ldr	r3, [pc, #220]	; (800b700 <ThreadLedTask+0x108>)
 800b622:	885b      	ldrh	r3, [r3, #2]
 800b624:	3b01      	subs	r3, #1
 800b626:	2b07      	cmp	r3, #7
 800b628:	d861      	bhi.n	800b6ee <ThreadLedTask+0xf6>
 800b62a:	a201      	add	r2, pc, #4	; (adr r2, 800b630 <ThreadLedTask+0x38>)
 800b62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b630:	0800b651 	.word	0x0800b651
 800b634:	0800b65b 	.word	0x0800b65b
 800b638:	0800b665 	.word	0x0800b665
 800b63c:	0800b66f 	.word	0x0800b66f
 800b640:	0800b679 	.word	0x0800b679
 800b644:	0800b693 	.word	0x0800b693
 800b648:	0800b6ad 	.word	0x0800b6ad
 800b64c:	0800b6c7 	.word	0x0800b6c7
		{
			case(ENABLED_BY_SERVER): // Если включена из центра

				LED_OUT_ON();
 800b650:	f00a f9cc 	bl	80159ec <LED_OUT_ON>
				LED2_ON();
 800b654:	f00a fa1e 	bl	8015a94 <LED2_ON>

			break;
 800b658:	e049      	b.n	800b6ee <ThreadLedTask+0xf6>

			case(DISABLED_BY_SERVER): // Если отключена из центра

				LED_OUT_OFF();
 800b65a:	f00a f9d3 	bl	8015a04 <LED_OUT_OFF>
				LED2_OFF();
 800b65e:	f00a fa0d 	bl	8015a7c <LED2_OFF>

			break;
 800b662:	e044      	b.n	800b6ee <ThreadLedTask+0xf6>

			case(ENABLED_BY_IBUTTON): // Если включена с таблетки

				LED_OUT_ON();
 800b664:	f00a f9c2 	bl	80159ec <LED_OUT_ON>
				LED2_ON();
 800b668:	f00a fa14 	bl	8015a94 <LED2_ON>

			break;
 800b66c:	e03f      	b.n	800b6ee <ThreadLedTask+0xf6>

			case(DISABLED_BY_IBUTTON): // Если отключена с таблетки

				LED_OUT_OFF();
 800b66e:	f00a f9c9 	bl	8015a04 <LED_OUT_OFF>
				LED2_OFF();
 800b672:	f00a fa03 	bl	8015a7c <LED2_OFF>

			break;
 800b676:	e03a      	b.n	800b6ee <ThreadLedTask+0xf6>

			case(DOOR_OPEN_ALARM): // Если тревога открытия двери

				door_open_alarm_counter++; // увеличиваем значение счетчика времени для процесса тревоги открытия двери
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	3301      	adds	r3, #1
 800b67c:	73fb      	strb	r3, [r7, #15]

				if(door_open_alarm_counter>=20)
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
 800b680:	2b13      	cmp	r3, #19
 800b682:	d92d      	bls.n	800b6e0 <ThreadLedTask+0xe8>
				{
					door_open_alarm_counter = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	73fb      	strb	r3, [r7, #15]
					LED_OUT_TOGGLE();
 800b688:	f00a f9c8 	bl	8015a1c <LED_OUT_TOGGLE>
					LED2_TOGGLE();
 800b68c:	f00a fa0e 	bl	8015aac <LED2_TOGGLE>
				}

			break;
 800b690:	e026      	b.n	800b6e0 <ThreadLedTask+0xe8>

			case(ARMING_PROCESS): // Если в процессе постановки на охрану

				arming_process_counter++; // увеличиваем значение счетчика времени для процесса постановки на охрану
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	3301      	adds	r3, #1
 800b696:	73bb      	strb	r3, [r7, #14]

				if(arming_process_counter>=100)
 800b698:	7bbb      	ldrb	r3, [r7, #14]
 800b69a:	2b63      	cmp	r3, #99	; 0x63
 800b69c:	d922      	bls.n	800b6e4 <ThreadLedTask+0xec>
				{
					arming_process_counter = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73bb      	strb	r3, [r7, #14]
					LED_OUT_TOGGLE();
 800b6a2:	f00a f9bb 	bl	8015a1c <LED_OUT_TOGGLE>
					LED2_TOGGLE();
 800b6a6:	f00a fa01 	bl	8015aac <LED2_TOGGLE>
				}

			break;
 800b6aa:	e01b      	b.n	800b6e4 <ThreadLedTask+0xec>

			case(ARMING_ERROR): // Если ошибка постановки на охрану

				arming_error_counter++; // увеличиваем значение счетчика времени для процесса ошибки постановки на охрану
 800b6ac:	7b7b      	ldrb	r3, [r7, #13]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	737b      	strb	r3, [r7, #13]

				if(arming_error_counter>=10)
 800b6b2:	7b7b      	ldrb	r3, [r7, #13]
 800b6b4:	2b09      	cmp	r3, #9
 800b6b6:	d917      	bls.n	800b6e8 <ThreadLedTask+0xf0>
				{
					arming_error_counter = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	737b      	strb	r3, [r7, #13]
					LED_OUT_TOGGLE();
 800b6bc:	f00a f9ae 	bl	8015a1c <LED_OUT_TOGGLE>
					LED2_TOGGLE();
 800b6c0:	f00a f9f4 	bl	8015aac <LED2_TOGGLE>
				}

			break;
 800b6c4:	e010      	b.n	800b6e8 <ThreadLedTask+0xf0>

			case(DOOR_OPEN_POWER_OFF): // Если тревога открытия двери

				door_open_alarm_counter++; // увеличиваем значение счетчика времени для процесса тревоги открытия двери
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	73fb      	strb	r3, [r7, #15]

				if(door_open_alarm_counter>=20)
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	2b13      	cmp	r3, #19
 800b6d0:	d90c      	bls.n	800b6ec <ThreadLedTask+0xf4>
				{
					door_open_alarm_counter = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73fb      	strb	r3, [r7, #15]
					LED_OUT_TOGGLE();
 800b6d6:	f00a f9a1 	bl	8015a1c <LED_OUT_TOGGLE>
					LED2_TOGGLE();
 800b6da:	f00a f9e7 	bl	8015aac <LED2_TOGGLE>
				}

			break;
 800b6de:	e005      	b.n	800b6ec <ThreadLedTask+0xf4>
			break;
 800b6e0:	bf00      	nop
 800b6e2:	e004      	b.n	800b6ee <ThreadLedTask+0xf6>
			break;
 800b6e4:	bf00      	nop
 800b6e6:	e002      	b.n	800b6ee <ThreadLedTask+0xf6>
			break;
 800b6e8:	bf00      	nop
 800b6ea:	e000      	b.n	800b6ee <ThreadLedTask+0xf6>
			break;
 800b6ec:	bf00      	nop
		}


		osDelay(10); // вызываем процесс один раз в 10 мс
 800b6ee:	200a      	movs	r0, #10
 800b6f0:	f7fb fa41 	bl	8006b76 <osDelay>
		switch(status_registers.security_status_reg)
 800b6f4:	e794      	b.n	800b620 <ThreadLedTask+0x28>
 800b6f6:	bf00      	nop
 800b6f8:	200098d8 	.word	0x200098d8
 800b6fc:	20008114 	.word	0x20008114
 800b700:	2000a10c 	.word	0x2000a10c

0800b704 <ThreadM95Task>:




void ThreadM95Task(void const * argument)
{
 800b704:	b590      	push	{r4, r7, lr}
 800b706:	b085      	sub	sp, #20
 800b708:	af02      	add	r7, sp, #8
 800b70a:	6078      	str	r0, [r7, #4]
	osThreadSuspend(M95TaskHandle);
 800b70c:	4bbe      	ldr	r3, [pc, #760]	; (800ba08 <ThreadM95Task+0x304>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4618      	mov	r0, r3
 800b712:	f7fb fd35 	bl	8007180 <osThreadSuspend>
	osSemaphoreWait(TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800b716:	4bbd      	ldr	r3, [pc, #756]	; (800ba0c <ThreadM95Task+0x308>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f04f 31ff 	mov.w	r1, #4294967295
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fb fbce 	bl	8006ec0 <osSemaphoreWait>
	osSemaphoreWait(ReceiveStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800b724:	4bba      	ldr	r3, [pc, #744]	; (800ba10 <ThreadM95Task+0x30c>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f04f 31ff 	mov.w	r1, #4294967295
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7fb fbc7 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(Ring_Center_TimerHandle, 60000); // запускаем таймер для перезагрузки по его окончанию
 800b732:	4bb8      	ldr	r3, [pc, #736]	; (800ba14 <ThreadM95Task+0x310>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f64e 2160 	movw	r1, #60000	; 0xea60
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fb fa64 	bl	8006c08 <osTimerStart>
	*/


	// сервер освещения Главный, неопределено 239

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b740:	4bb5      	ldr	r3, [pc, #724]	; (800ba18 <ThreadM95Task+0x314>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f04f 31ff 	mov.w	r1, #4294967295
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fb faf5 	bl	8006d38 <osMutexWait>
	fm25v02_write(2*VERSION_REG, 0x02);
 800b74e:	2102      	movs	r1, #2
 800b750:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b754:	f00a f884 	bl	8015860 <fm25v02_write>
	fm25v02_write(2*VERSION_REG+1, 0x0E);
 800b758:	210e      	movs	r1, #14
 800b75a:	f242 0001 	movw	r0, #8193	; 0x2001
 800b75e:	f00a f87f 	bl	8015860 <fm25v02_write>
	//fm25v02_write(2*ERROR_LOOP_REG+1, 0x00);

	//fm25v02_write(2*ALARM_LOOP_REG, 0);
	//fm25v02_write(2*ALARM_LOOP_REG+1, 0x00);

	osMutexRelease(Fm25v02MutexHandle);
 800b762:	4bad      	ldr	r3, [pc, #692]	; (800ba18 <ThreadM95Task+0x314>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4618      	mov	r0, r3
 800b768:	f7fb fb34 	bl	8006dd4 <osMutexRelease>


	for(;;)
	{

		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b76c:	4baa      	ldr	r3, [pc, #680]	; (800ba18 <ThreadM95Task+0x314>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f04f 31ff 	mov.w	r1, #4294967295
 800b774:	4618      	mov	r0, r3
 800b776:	f7fb fadf 	bl	8006d38 <osMutexWait>

		fm25v02_read(2*IP_1_REG+1, &ip1); // читаем значение IP адреса сервера из памяти
 800b77a:	49a8      	ldr	r1, [pc, #672]	; (800ba1c <ThreadM95Task+0x318>)
 800b77c:	f242 105f 	movw	r0, #8543	; 0x215f
 800b780:	f00a f834 	bl	80157ec <fm25v02_read>
		fm25v02_read(2*IP_2_REG+1, &ip2);
 800b784:	49a6      	ldr	r1, [pc, #664]	; (800ba20 <ThreadM95Task+0x31c>)
 800b786:	f242 1061 	movw	r0, #8545	; 0x2161
 800b78a:	f00a f82f 	bl	80157ec <fm25v02_read>
		fm25v02_read(2*IP_3_REG+1, &ip3);
 800b78e:	49a5      	ldr	r1, [pc, #660]	; (800ba24 <ThreadM95Task+0x320>)
 800b790:	f242 1063 	movw	r0, #8547	; 0x2163
 800b794:	f00a f82a 	bl	80157ec <fm25v02_read>
		fm25v02_read(2*IP_4_REG+1, &ip4);
 800b798:	49a3      	ldr	r1, [pc, #652]	; (800ba28 <ThreadM95Task+0x324>)
 800b79a:	f242 1065 	movw	r0, #8549	; 0x2165
 800b79e:	f00a f825 	bl	80157ec <fm25v02_read>
		fm25v02_read(2*PORT_HIGH_REG+1, &port_high_reg); // читаем значение старшего байта порта сервера
 800b7a2:	49a2      	ldr	r1, [pc, #648]	; (800ba2c <ThreadM95Task+0x328>)
 800b7a4:	f242 1067 	movw	r0, #8551	; 0x2167
 800b7a8:	f00a f820 	bl	80157ec <fm25v02_read>
		fm25v02_read(2*PORT_LOW_REG+1, &port_low_reg); // читаем занчение младшего байта порта сервера
 800b7ac:	49a0      	ldr	r1, [pc, #640]	; (800ba30 <ThreadM95Task+0x32c>)
 800b7ae:	f242 1069 	movw	r0, #8553	; 0x2169
 800b7b2:	f00a f81b 	bl	80157ec <fm25v02_read>

		osMutexRelease(Fm25v02MutexHandle);
 800b7b6:	4b98      	ldr	r3, [pc, #608]	; (800ba18 <ThreadM95Task+0x314>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fb fb0a 	bl	8006dd4 <osMutexRelease>

		port = (((uint16_t)port_high_reg)<<8)|((uint16_t)port_low_reg); // вычисляем общее значение регистра порта
 800b7c0:	4b9a      	ldr	r3, [pc, #616]	; (800ba2c <ThreadM95Task+0x328>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	021b      	lsls	r3, r3, #8
 800b7c8:	b21a      	sxth	r2, r3
 800b7ca:	4b99      	ldr	r3, [pc, #612]	; (800ba30 <ThreadM95Task+0x32c>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	b21b      	sxth	r3, r3
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	b21b      	sxth	r3, r3
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	4b96      	ldr	r3, [pc, #600]	; (800ba34 <ThreadM95Task+0x330>)
 800b7da:	801a      	strh	r2, [r3, #0]

		if ( (ip1==0)&&(ip2==0)&&(ip3==0)&&(ip4==0)&&(port==0) ) // Если значения ip адреса сервера и его номера порта при инициализации нулевые, то выставляем их значения по умолчанию
 800b7dc:	4b8f      	ldr	r3, [pc, #572]	; (800ba1c <ThreadM95Task+0x318>)
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d123      	bne.n	800b82e <ThreadM95Task+0x12a>
 800b7e6:	4b8e      	ldr	r3, [pc, #568]	; (800ba20 <ThreadM95Task+0x31c>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d11e      	bne.n	800b82e <ThreadM95Task+0x12a>
 800b7f0:	4b8c      	ldr	r3, [pc, #560]	; (800ba24 <ThreadM95Task+0x320>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d119      	bne.n	800b82e <ThreadM95Task+0x12a>
 800b7fa:	4b8b      	ldr	r3, [pc, #556]	; (800ba28 <ThreadM95Task+0x324>)
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d114      	bne.n	800b82e <ThreadM95Task+0x12a>
 800b804:	4b8b      	ldr	r3, [pc, #556]	; (800ba34 <ThreadM95Task+0x330>)
 800b806:	881b      	ldrh	r3, [r3, #0]
 800b808:	b29b      	uxth	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10f      	bne.n	800b82e <ThreadM95Task+0x12a>
		{
			// сервер сигнализации
			ip1 = 195;    // значение по умолчанию
 800b80e:	4b83      	ldr	r3, [pc, #524]	; (800ba1c <ThreadM95Task+0x318>)
 800b810:	22c3      	movs	r2, #195	; 0xc3
 800b812:	701a      	strb	r2, [r3, #0]
			ip2 = 208;    // значение по умолчанию
 800b814:	4b82      	ldr	r3, [pc, #520]	; (800ba20 <ThreadM95Task+0x31c>)
 800b816:	22d0      	movs	r2, #208	; 0xd0
 800b818:	701a      	strb	r2, [r3, #0]
			ip3 = 163;    // значение по умолчанию
 800b81a:	4b82      	ldr	r3, [pc, #520]	; (800ba24 <ThreadM95Task+0x320>)
 800b81c:	22a3      	movs	r2, #163	; 0xa3
 800b81e:	701a      	strb	r2, [r3, #0]
			ip4 = 67;     // значение по умолчанию
 800b820:	4b81      	ldr	r3, [pc, #516]	; (800ba28 <ThreadM95Task+0x324>)
 800b822:	2243      	movs	r2, #67	; 0x43
 800b824:	701a      	strb	r2, [r3, #0]
			port = 35050; // значение по умолчанию
 800b826:	4b83      	ldr	r3, [pc, #524]	; (800ba34 <ThreadM95Task+0x330>)
 800b828:	f648 02ea 	movw	r2, #35050	; 0x88ea
 800b82c:	801a      	strh	r2, [r3, #0]
			//ip4 = 67;     // значение по умолчанию
			//port = 35070; // значение по умолчанию
		}


		osMutexWait(UartMutexHandle, osWaitForever);
 800b82e:	4b82      	ldr	r3, [pc, #520]	; (800ba38 <ThreadM95Task+0x334>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f04f 31ff 	mov.w	r1, #4294967295
 800b836:	4618      	mov	r0, r3
 800b838:	f7fb fa7e 	bl	8006d38 <osMutexWait>

		if(AT()==AT_ERROR) // два раза проверяем, есть ли ответ на команду АТ, если нет, включаем питание
 800b83c:	f00a fc80 	bl	8016140 <AT>
 800b840:	4603      	mov	r3, r0
 800b842:	2b01      	cmp	r3, #1
 800b844:	d106      	bne.n	800b854 <ThreadM95Task+0x150>
		{
			if(AT()==AT_ERROR)
 800b846:	f00a fc7b 	bl	8016140 <AT>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <ThreadM95Task+0x150>
			{
				m95_power_on();
 800b850:	f00a fbce 	bl	8015ff0 <m95_power_on>
			}
		}

		if( ATE0() == AT_OK )
 800b854:	f00a fc1e 	bl	8016094 <ATE0>
		{

		}

		osMutexRelease(UartMutexHandle);
 800b858:	4b77      	ldr	r3, [pc, #476]	; (800ba38 <ThreadM95Task+0x334>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fb fab9 	bl	8006dd4 <osMutexRelease>

		osMutexWait(UartMutexHandle, osWaitForever);
 800b862:	4b75      	ldr	r3, [pc, #468]	; (800ba38 <ThreadM95Task+0x334>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f04f 31ff 	mov.w	r1, #4294967295
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fb fa64 	bl	8006d38 <osMutexWait>

		switch(AT_QISTATE())
 800b870:	f00b fc40 	bl	80170f4 <AT_QISTATE>
 800b874:	4603      	mov	r3, r0
 800b876:	3b01      	subs	r3, #1
 800b878:	2b0b      	cmp	r3, #11
 800b87a:	f200 8157 	bhi.w	800bb2c <ThreadM95Task+0x428>
 800b87e:	a201      	add	r2, pc, #4	; (adr r2, 800b884 <ThreadM95Task+0x180>)
 800b880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b884:	0800bb2d 	.word	0x0800bb2d
 800b888:	0800b8b5 	.word	0x0800b8b5
 800b88c:	0800b9b5 	.word	0x0800b9b5
 800b890:	0800bb2d 	.word	0x0800bb2d
 800b894:	0800b9bf 	.word	0x0800b9bf
 800b898:	0800b9c9 	.word	0x0800b9c9
 800b89c:	0800bb23 	.word	0x0800bb23
 800b8a0:	0800bb2d 	.word	0x0800bb2d
 800b8a4:	0800bb2d 	.word	0x0800bb2d
 800b8a8:	0800ba51 	.word	0x0800ba51
 800b8ac:	0800ba97 	.word	0x0800ba97
 800b8b0:	0800ba8d 	.word	0x0800ba8d
		{
			case IP_INITIAL:

				LED1_OFF();
 800b8b4:	f00a f8ca 	bl	8015a4c <LED1_OFF>
				if( AT_QIMUX(0) == AT_OK )
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f00b fa5d 	bl	8016d78 <AT_QIMUX>
				{

				}
				if( AT_COPS() == AT_OK )
 800b8be:	f00b f89d 	bl	80169fc <AT_COPS>
				{

				}
				if(	AT_QCCID(&id2[0], &id1[0]) == AT_OK ) // читаем CCID сим-карты
 800b8c2:	495e      	ldr	r1, [pc, #376]	; (800ba3c <ThreadM95Task+0x338>)
 800b8c4:	485e      	ldr	r0, [pc, #376]	; (800ba40 <ThreadM95Task+0x33c>)
 800b8c6:	f00a fd0f 	bl	80162e8 <AT_QCCID>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d16b      	bne.n	800b9a8 <ThreadM95Task+0x2a4>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800b8d0:	4b51      	ldr	r3, [pc, #324]	; (800ba18 <ThreadM95Task+0x314>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f04f 31ff 	mov.w	r1, #4294967295
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fb fa2d 	bl	8006d38 <osMutexWait>
					//fm25v02_fast_write(ICCID_NUMBER_REG1, &id2[0], 8); // записываем в регистры CCID сим-карты
					fm25v02_write(2*ICCID_NUMBER_REG1, 0x00);
 800b8de:	2100      	movs	r1, #0
 800b8e0:	f242 00b0 	movw	r0, #8368	; 0x20b0
 800b8e4:	f009 ffbc 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG1+1, id2[0]);
 800b8e8:	4b55      	ldr	r3, [pc, #340]	; (800ba40 <ThreadM95Task+0x33c>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	f242 00b1 	movw	r0, #8369	; 0x20b1
 800b8f2:	f009 ffb5 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2, 0x00);
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	f242 00b2 	movw	r0, #8370	; 0x20b2
 800b8fc:	f009 ffb0 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2+1, id2[1]);
 800b900:	4b4f      	ldr	r3, [pc, #316]	; (800ba40 <ThreadM95Task+0x33c>)
 800b902:	785b      	ldrb	r3, [r3, #1]
 800b904:	4619      	mov	r1, r3
 800b906:	f242 00b3 	movw	r0, #8371	; 0x20b3
 800b90a:	f009 ffa9 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3, 0x00);
 800b90e:	2100      	movs	r1, #0
 800b910:	f242 00b4 	movw	r0, #8372	; 0x20b4
 800b914:	f009 ffa4 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3+1, id2[2]);
 800b918:	4b49      	ldr	r3, [pc, #292]	; (800ba40 <ThreadM95Task+0x33c>)
 800b91a:	789b      	ldrb	r3, [r3, #2]
 800b91c:	4619      	mov	r1, r3
 800b91e:	f242 00b5 	movw	r0, #8373	; 0x20b5
 800b922:	f009 ff9d 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4, 0x00);
 800b926:	2100      	movs	r1, #0
 800b928:	f242 00b6 	movw	r0, #8374	; 0x20b6
 800b92c:	f009 ff98 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4+1, id2[3]);
 800b930:	4b43      	ldr	r3, [pc, #268]	; (800ba40 <ThreadM95Task+0x33c>)
 800b932:	78db      	ldrb	r3, [r3, #3]
 800b934:	4619      	mov	r1, r3
 800b936:	f242 00b7 	movw	r0, #8375	; 0x20b7
 800b93a:	f009 ff91 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5, 0x00);
 800b93e:	2100      	movs	r1, #0
 800b940:	f242 00b8 	movw	r0, #8376	; 0x20b8
 800b944:	f009 ff8c 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5+1, id2[4]);
 800b948:	4b3d      	ldr	r3, [pc, #244]	; (800ba40 <ThreadM95Task+0x33c>)
 800b94a:	791b      	ldrb	r3, [r3, #4]
 800b94c:	4619      	mov	r1, r3
 800b94e:	f242 00b9 	movw	r0, #8377	; 0x20b9
 800b952:	f009 ff85 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6, 0x00);
 800b956:	2100      	movs	r1, #0
 800b958:	f242 00ba 	movw	r0, #8378	; 0x20ba
 800b95c:	f009 ff80 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6+1, id2[5]);
 800b960:	4b37      	ldr	r3, [pc, #220]	; (800ba40 <ThreadM95Task+0x33c>)
 800b962:	795b      	ldrb	r3, [r3, #5]
 800b964:	4619      	mov	r1, r3
 800b966:	f242 00bb 	movw	r0, #8379	; 0x20bb
 800b96a:	f009 ff79 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7, 0x00);
 800b96e:	2100      	movs	r1, #0
 800b970:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800b974:	f009 ff74 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7+1, id2[6]);
 800b978:	4b31      	ldr	r3, [pc, #196]	; (800ba40 <ThreadM95Task+0x33c>)
 800b97a:	799b      	ldrb	r3, [r3, #6]
 800b97c:	4619      	mov	r1, r3
 800b97e:	f242 00bd 	movw	r0, #8381	; 0x20bd
 800b982:	f009 ff6d 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8, 0x00);
 800b986:	2100      	movs	r1, #0
 800b988:	f242 00be 	movw	r0, #8382	; 0x20be
 800b98c:	f009 ff68 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8+1, id2[7]);
 800b990:	4b2b      	ldr	r3, [pc, #172]	; (800ba40 <ThreadM95Task+0x33c>)
 800b992:	79db      	ldrb	r3, [r3, #7]
 800b994:	4619      	mov	r1, r3
 800b996:	f242 00bf 	movw	r0, #8383	; 0x20bf
 800b99a:	f009 ff61 	bl	8015860 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800b99e:	4b1e      	ldr	r3, [pc, #120]	; (800ba18 <ThreadM95Task+0x314>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fb fa16 	bl	8006dd4 <osMutexRelease>
				}

				if(AT_QIREGAPP("mts.internet.ru", "mts", "mts") == AT_OK)
 800b9a8:	4a26      	ldr	r2, [pc, #152]	; (800ba44 <ThreadM95Task+0x340>)
 800b9aa:	4926      	ldr	r1, [pc, #152]	; (800ba44 <ThreadM95Task+0x340>)
 800b9ac:	4826      	ldr	r0, [pc, #152]	; (800ba48 <ThreadM95Task+0x344>)
 800b9ae:	f00b fa51 	bl	8016e54 <AT_QIREGAPP>
				{

				}

			break;
 800b9b2:	e0c0      	b.n	800bb36 <ThreadM95Task+0x432>

			case IP_START:

				LED1_OFF();
 800b9b4:	f00a f84a 	bl	8015a4c <LED1_OFF>
				if(AT_QIACT()!=AT_OK)
 800b9b8:	f00b fac8 	bl	8016f4c <AT_QIACT>
				{

				}

			break;
 800b9bc:	e0bb      	b.n	800bb36 <ThreadM95Task+0x432>

			case IP_IND:

				LED1_OFF();
 800b9be:	f00a f845 	bl	8015a4c <LED1_OFF>
				if(AT_QIDEACT()!=AT_OK)
 800b9c2:	f00b fb2d 	bl	8017020 <AT_QIDEACT>
				{

				}

			break;
 800b9c6:	e0b6      	b.n	800bb36 <ThreadM95Task+0x432>

			case IP_GPRSACT:

				LED1_OFF();
 800b9c8:	f00a f840 	bl	8015a4c <LED1_OFF>
				if( AT_QIOPEN("TCP", ip1, ip2, ip3, ip4, port) == AT_OK )
 800b9cc:	4b13      	ldr	r3, [pc, #76]	; (800ba1c <ThreadM95Task+0x318>)
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	b2d9      	uxtb	r1, r3
 800b9d2:	4b13      	ldr	r3, [pc, #76]	; (800ba20 <ThreadM95Task+0x31c>)
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	b2d8      	uxtb	r0, r3
 800b9d8:	4b12      	ldr	r3, [pc, #72]	; (800ba24 <ThreadM95Task+0x320>)
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	b2dc      	uxtb	r4, r3
 800b9de:	4b12      	ldr	r3, [pc, #72]	; (800ba28 <ThreadM95Task+0x324>)
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	b2db      	uxtb	r3, r3
 800b9e4:	4a13      	ldr	r2, [pc, #76]	; (800ba34 <ThreadM95Task+0x330>)
 800b9e6:	8812      	ldrh	r2, [r2, #0]
 800b9e8:	b292      	uxth	r2, r2
 800b9ea:	9201      	str	r2, [sp, #4]
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	4623      	mov	r3, r4
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	4816      	ldr	r0, [pc, #88]	; (800ba4c <ThreadM95Task+0x348>)
 800b9f4:	f00b f85e 	bl	8016ab4 <AT_QIOPEN>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f000 8098 	beq.w	800bb30 <ThreadM95Task+0x42c>
				{

				}
				else
				{
					LED1_OFF();
 800ba00:	f00a f824 	bl	8015a4c <LED1_OFF>
				}

			break;
 800ba04:	e094      	b.n	800bb30 <ThreadM95Task+0x42c>
 800ba06:	bf00      	nop
 800ba08:	200098e0 	.word	0x200098e0
 800ba0c:	20009cb8 	.word	0x20009cb8
 800ba10:	20009cd4 	.word	0x20009cd4
 800ba14:	200096a4 	.word	0x200096a4
 800ba18:	20009a6c 	.word	0x20009a6c
 800ba1c:	20007fe4 	.word	0x20007fe4
 800ba20:	20007fe5 	.word	0x20007fe5
 800ba24:	20007fe6 	.word	0x20007fe6
 800ba28:	20007fe7 	.word	0x20007fe7
 800ba2c:	20007fe8 	.word	0x20007fe8
 800ba30:	20007fe9 	.word	0x20007fe9
 800ba34:	20007fea 	.word	0x20007fea
 800ba38:	200096a0 	.word	0x200096a0
 800ba3c:	20009dd8 	.word	0x20009dd8
 800ba40:	20009dcc 	.word	0x20009dcc
 800ba44:	0801a874 	.word	0x0801a874
 800ba48:	0801a878 	.word	0x0801a878
 800ba4c:	0801a888 	.word	0x0801a888

			case IP_CLOSE:
				osThreadSuspend(CallRingCenterTaskHandle);
 800ba50:	4b3e      	ldr	r3, [pc, #248]	; (800bb4c <ThreadM95Task+0x448>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fb fb93 	bl	8007180 <osThreadSuspend>
				LED1_OFF();
 800ba5a:	f009 fff7 	bl	8015a4c <LED1_OFF>
				if( AT_QIOPEN("TCP", ip1 , ip2, ip3, ip4, port) == AT_OK )
 800ba5e:	4b3c      	ldr	r3, [pc, #240]	; (800bb50 <ThreadM95Task+0x44c>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	b2d9      	uxtb	r1, r3
 800ba64:	4b3b      	ldr	r3, [pc, #236]	; (800bb54 <ThreadM95Task+0x450>)
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	b2d8      	uxtb	r0, r3
 800ba6a:	4b3b      	ldr	r3, [pc, #236]	; (800bb58 <ThreadM95Task+0x454>)
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	b2dc      	uxtb	r4, r3
 800ba70:	4b3a      	ldr	r3, [pc, #232]	; (800bb5c <ThreadM95Task+0x458>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	4a3a      	ldr	r2, [pc, #232]	; (800bb60 <ThreadM95Task+0x45c>)
 800ba78:	8812      	ldrh	r2, [r2, #0]
 800ba7a:	b292      	uxth	r2, r2
 800ba7c:	9201      	str	r2, [sp, #4]
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	4623      	mov	r3, r4
 800ba82:	4602      	mov	r2, r0
 800ba84:	4837      	ldr	r0, [pc, #220]	; (800bb64 <ThreadM95Task+0x460>)
 800ba86:	f00b f815 	bl	8016ab4 <AT_QIOPEN>
				else
				{

				}

			break;
 800ba8a:	e054      	b.n	800bb36 <ThreadM95Task+0x432>

			case PDP_DEACT:

				LED1_OFF();
 800ba8c:	f009 ffde 	bl	8015a4c <LED1_OFF>
				if(AT_QIACT()!=AT_OK)
 800ba90:	f00b fa5c 	bl	8016f4c <AT_QIACT>
				{

				}
			break;
 800ba94:	e04f      	b.n	800bb36 <ThreadM95Task+0x432>

			case CONNECT_OK: // Если соединение установлено

				//osTimerStart(Ring_Center_TimerHandle, 60000); // запускаем таймер и обнуляем его при каждом ответе о соединении.

				osThreadResume(CallRingCenterTaskHandle); // пробуждаем процесс запроса к серверу
 800ba96:	4b2d      	ldr	r3, [pc, #180]	; (800bb4c <ThreadM95Task+0x448>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fb fb7c 	bl	8007198 <osThreadResume>
				LED1_ON();
 800baa0:	f009 ffe0 	bl	8015a64 <LED1_ON>
				if( AT_COPS() == AT_OK )
 800baa4:	f00a ffaa 	bl	80169fc <AT_COPS>
				{

				}
				if( AT_CSQ(&level) == AT_OK )
 800baa8:	482f      	ldr	r0, [pc, #188]	; (800bb68 <ThreadM95Task+0x464>)
 800baaa:	f00a fb9f 	bl	80161ec <AT_CSQ>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d117      	bne.n	800bae4 <ThreadM95Task+0x3e0>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bab4:	4b2d      	ldr	r3, [pc, #180]	; (800bb6c <ThreadM95Task+0x468>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f04f 31ff 	mov.w	r1, #4294967295
 800babc:	4618      	mov	r0, r3
 800babe:	f7fb f93b 	bl	8006d38 <osMutexWait>
					fm25v02_write(2*SIGNAL_LEVEL_REG, 0x00);
 800bac2:	2100      	movs	r1, #0
 800bac4:	f242 00a6 	movw	r0, #8358	; 0x20a6
 800bac8:	f009 feca 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*SIGNAL_LEVEL_REG+1, level);
 800bacc:	4b26      	ldr	r3, [pc, #152]	; (800bb68 <ThreadM95Task+0x464>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	4619      	mov	r1, r3
 800bad2:	f242 00a7 	movw	r0, #8359	; 0x20a7
 800bad6:	f009 fec3 	bl	8015860 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800bada:	4b24      	ldr	r3, [pc, #144]	; (800bb6c <ThreadM95Task+0x468>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fb f978 	bl	8006dd4 <osMutexRelease>
				if( AT_QIOPEN("TCP", ip1 , ip2, ip3, ip4, port) == AT_OK )
				{

				}
				*/
				if( request_state == 0)
 800bae4:	4b22      	ldr	r3, [pc, #136]	; (800bb70 <ThreadM95Task+0x46c>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b00      	cmp	r3, #0
 800baec:	d122      	bne.n	800bb34 <ThreadM95Task+0x430>
				{
					request_state = 1;
 800baee:	4b20      	ldr	r3, [pc, #128]	; (800bb70 <ThreadM95Task+0x46c>)
 800baf0:	2201      	movs	r2, #1
 800baf2:	701a      	strb	r2, [r3, #0]
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800baf4:	4b1d      	ldr	r3, [pc, #116]	; (800bb6c <ThreadM95Task+0x468>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f04f 31ff 	mov.w	r1, #4294967295
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7fb f91b 	bl	8006d38 <osMutexWait>
					fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800bb02:	2100      	movs	r1, #0
 800bb04:	f242 106e 	movw	r0, #8558	; 0x216e
 800bb08:	f009 feaa 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800bb0c:	2101      	movs	r1, #1
 800bb0e:	f242 106f 	movw	r0, #8559	; 0x216f
 800bb12:	f009 fea5 	bl	8015860 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800bb16:	4b15      	ldr	r3, [pc, #84]	; (800bb6c <ThreadM95Task+0x468>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fb f95a 	bl	8006dd4 <osMutexRelease>

					//}

				//}

			break;
 800bb20:	e008      	b.n	800bb34 <ThreadM95Task+0x430>

			case IP_STATUS:

				LED1_OFF();
 800bb22:	f009 ff93 	bl	8015a4c <LED1_OFF>
				m95_power_off();
 800bb26:	f00a fa7f 	bl	8016028 <m95_power_off>
				//else
				//{

				//}

			break;
 800bb2a:	e004      	b.n	800bb36 <ThreadM95Task+0x432>

			break;

			default:

			break;
 800bb2c:	bf00      	nop
 800bb2e:	e002      	b.n	800bb36 <ThreadM95Task+0x432>
			break;
 800bb30:	bf00      	nop
 800bb32:	e000      	b.n	800bb36 <ThreadM95Task+0x432>
			break;
 800bb34:	bf00      	nop

		}

		osMutexRelease(UartMutexHandle);
 800bb36:	4b0f      	ldr	r3, [pc, #60]	; (800bb74 <ThreadM95Task+0x470>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fb f94a 	bl	8006dd4 <osMutexRelease>
		if(AT_QIMODE(0) == AT_OK){}
		if(AT_QIHEAD(1) == AT_OK){}
		if(AT_QISHOWPT(0) == AT_OK){}
		*/

		osDelay(1000);
 800bb40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bb44:	f7fb f817 	bl	8006b76 <osDelay>
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bb48:	e610      	b.n	800b76c <ThreadM95Task+0x68>
 800bb4a:	bf00      	nop
 800bb4c:	2000827c 	.word	0x2000827c
 800bb50:	20007fe4 	.word	0x20007fe4
 800bb54:	20007fe5 	.word	0x20007fe5
 800bb58:	20007fe6 	.word	0x20007fe6
 800bb5c:	20007fe7 	.word	0x20007fe7
 800bb60:	20007fea 	.word	0x20007fea
 800bb64:	0801a888 	.word	0x0801a888
 800bb68:	20009dc9 	.word	0x20009dc9
 800bb6c:	20009a6c 	.word	0x20009a6c
 800bb70:	20007fec 	.word	0x20007fec
 800bb74:	200096a0 	.word	0x200096a0

0800bb78 <__NVIC_SystemReset>:
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bb7c:	f3bf 8f4f 	dsb	sy
}
 800bb80:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bb82:	4b06      	ldr	r3, [pc, #24]	; (800bb9c <__NVIC_SystemReset+0x24>)
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bb8a:	4904      	ldr	r1, [pc, #16]	; (800bb9c <__NVIC_SystemReset+0x24>)
 800bb8c:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <__NVIC_SystemReset+0x28>)
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb92:	f3bf 8f4f 	dsb	sy
}
 800bb96:	bf00      	nop
    __NOP();
 800bb98:	bf00      	nop
 800bb9a:	e7fd      	b.n	800bb98 <__NVIC_SystemReset+0x20>
 800bb9c:	e000ed00 	.word	0xe000ed00
 800bba0:	05fa0004 	.word	0x05fa0004

0800bba4 <ThreadMainTask>:




void ThreadMainTask(void const * argument)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]


	osThreadSuspend(MainTaskHandle); // ждем пока не будут вычитаны регистры и не получен статус фаз А1,А2,В1,В2,С1,С2
 800bbac:	4bb0      	ldr	r3, [pc, #704]	; (800be70 <ThreadMainTask+0x2cc>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fb fae5 	bl	8007180 <osThreadSuspend>


	for(;;)
	{

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET ) // проверяем если есть наличие единицы на пине PFO микросхемы TPS3306-15
 800bbb6:	2101      	movs	r1, #1
 800bbb8:	48ae      	ldr	r0, [pc, #696]	; (800be74 <ThreadMainTask+0x2d0>)
 800bbba:	f7f7 fb3f 	bl	800323c <HAL_GPIO_ReadPin>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d152      	bne.n	800bc6a <ThreadMainTask+0xc6>
		{
			if(status_registers.power_on_reg != 1)
 800bbc4:	4bac      	ldr	r3, [pc, #688]	; (800be78 <ThreadMainTask+0x2d4>)
 800bbc6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	f000 80bc 	beq.w	800bd46 <ThreadMainTask+0x1a2>
			//if(status_registers.power_on_reg == 0) // если основного питания до этого не было, записываем в регистр наличия питания 1
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bbce:	4bab      	ldr	r3, [pc, #684]	; (800be7c <ThreadMainTask+0x2d8>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f04f 31ff 	mov.w	r1, #4294967295
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fb f8ae 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*POWER_ON_REG, 0x00);
 800bbdc:	2100      	movs	r1, #0
 800bbde:	f242 0022 	movw	r0, #8226	; 0x2022
 800bbe2:	f009 fe3d 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*POWER_ON_REG+1, 1);
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	f242 0023 	movw	r0, #8227	; 0x2023
 800bbec:	f009 fe38 	bl	8015860 <fm25v02_write>
				status_registers.power_on_reg = 1;
 800bbf0:	4ba1      	ldr	r3, [pc, #644]	; (800be78 <ThreadMainTask+0x2d4>)
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	845a      	strh	r2, [r3, #34]	; 0x22
				osMutexRelease(Fm25v02MutexHandle);
 800bbf6:	4ba1      	ldr	r3, [pc, #644]	; (800be7c <ThreadMainTask+0x2d8>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fb f8ea 	bl	8006dd4 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bc00:	4b9e      	ldr	r3, [pc, #632]	; (800be7c <ThreadMainTask+0x2d8>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f04f 31ff 	mov.w	r1, #4294967295
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7fb f895 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800bc0e:	2100      	movs	r1, #0
 800bc10:	f242 106e 	movw	r0, #8558	; 0x216e
 800bc14:	f009 fe24 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800bc18:	2101      	movs	r1, #1
 800bc1a:	f242 106f 	movw	r0, #8559	; 0x216f
 800bc1e:	f009 fe1f 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800bc22:	4b96      	ldr	r3, [pc, #600]	; (800be7c <ThreadMainTask+0x2d8>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fb f8d4 	bl	8006dd4 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bc2c:	4b93      	ldr	r3, [pc, #588]	; (800be7c <ThreadMainTask+0x2d8>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f04f 31ff 	mov.w	r1, #4294967295
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fb f87f 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	f242 0020 	movw	r0, #8224	; 0x2020
 800bc40:	f009 fe0e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_ON);
 800bc44:	2101      	movs	r1, #1
 800bc46:	f242 0021 	movw	r0, #8225	; 0x2021
 800bc4a:	f009 fe09 	bl	8015860 <fm25v02_write>
				status_registers.system_status_reg = POWER_ON;
 800bc4e:	4b8a      	ldr	r3, [pc, #552]	; (800be78 <ThreadMainTask+0x2d4>)
 800bc50:	2201      	movs	r2, #1
 800bc52:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 800bc54:	4b89      	ldr	r3, [pc, #548]	; (800be7c <ThreadMainTask+0x2d8>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fb f8bb 	bl	8006dd4 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800bc5e:	4b88      	ldr	r3, [pc, #544]	; (800be80 <ThreadMainTask+0x2dc>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fb fa98 	bl	8007198 <osThreadResume>
 800bc68:	e06d      	b.n	800bd46 <ThreadMainTask+0x1a2>
			}
		}
		else // если на пине PFO микросхемы TPS3306-15 нет наличия единицы
		{
			if(status_registers.power_on_reg == 1)
 800bc6a:	4b83      	ldr	r3, [pc, #524]	; (800be78 <ThreadMainTask+0x2d4>)
 800bc6c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d169      	bne.n	800bd46 <ThreadMainTask+0x1a2>
			//if(status_registers.power_on_reg != 0)
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bc72:	4b82      	ldr	r3, [pc, #520]	; (800be7c <ThreadMainTask+0x2d8>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f04f 31ff 	mov.w	r1, #4294967295
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7fb f85c 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*POWER_ON_REG, 0x00);
 800bc80:	2100      	movs	r1, #0
 800bc82:	f242 0022 	movw	r0, #8226	; 0x2022
 800bc86:	f009 fdeb 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*POWER_ON_REG+1, 0x00);
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	f242 0023 	movw	r0, #8227	; 0x2023
 800bc90:	f009 fde6 	bl	8015860 <fm25v02_write>
				status_registers.power_on_reg = 0;
 800bc94:	4b78      	ldr	r3, [pc, #480]	; (800be78 <ThreadMainTask+0x2d4>)
 800bc96:	2200      	movs	r2, #0
 800bc98:	845a      	strh	r2, [r3, #34]	; 0x22
				osMutexRelease(Fm25v02MutexHandle);
 800bc9a:	4b78      	ldr	r3, [pc, #480]	; (800be7c <ThreadMainTask+0x2d8>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7fb f898 	bl	8006dd4 <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bca4:	4b75      	ldr	r3, [pc, #468]	; (800be7c <ThreadMainTask+0x2d8>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f04f 31ff 	mov.w	r1, #4294967295
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7fb f843 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	f242 0020 	movw	r0, #8224	; 0x2020
 800bcb8:	f009 fdd2 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_OFF);
 800bcbc:	2102      	movs	r1, #2
 800bcbe:	f242 0021 	movw	r0, #8225	; 0x2021
 800bcc2:	f009 fdcd 	bl	8015860 <fm25v02_write>
				status_registers.system_status_reg = POWER_OFF;
 800bcc6:	4b6c      	ldr	r3, [pc, #432]	; (800be78 <ThreadMainTask+0x2d4>)
 800bcc8:	2202      	movs	r2, #2
 800bcca:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 800bccc:	4b6b      	ldr	r3, [pc, #428]	; (800be7c <ThreadMainTask+0x2d8>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fb f87f 	bl	8006dd4 <osMutexRelease>

				//---- тест -------------------------------------------------
				if(status_registers.security_status_reg == DOOR_OPEN_ALARM)
 800bcd6:	4b68      	ldr	r3, [pc, #416]	; (800be78 <ThreadMainTask+0x2d4>)
 800bcd8:	885b      	ldrh	r3, [r3, #2]
 800bcda:	2b05      	cmp	r3, #5
 800bcdc:	d118      	bne.n	800bd10 <ThreadMainTask+0x16c>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bcde:	4b67      	ldr	r3, [pc, #412]	; (800be7c <ThreadMainTask+0x2d8>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f04f 31ff 	mov.w	r1, #4294967295
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fb f826 	bl	8006d38 <osMutexWait>
					fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800bcec:	2100      	movs	r1, #0
 800bcee:	f242 0002 	movw	r0, #8194	; 0x2002
 800bcf2:	f009 fdb5 	bl	8015860 <fm25v02_write>
					fm25v02_write(2*SECURITY_STATUS_REG+1, 0x08);
 800bcf6:	2108      	movs	r1, #8
 800bcf8:	f242 0003 	movw	r0, #8195	; 0x2003
 800bcfc:	f009 fdb0 	bl	8015860 <fm25v02_write>
					status_registers.security_status_reg = 0x08;
 800bd00:	4b5d      	ldr	r3, [pc, #372]	; (800be78 <ThreadMainTask+0x2d4>)
 800bd02:	2208      	movs	r2, #8
 800bd04:	805a      	strh	r2, [r3, #2]
					osMutexRelease(Fm25v02MutexHandle);
 800bd06:	4b5d      	ldr	r3, [pc, #372]	; (800be7c <ThreadMainTask+0x2d8>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fb f862 	bl	8006dd4 <osMutexRelease>
				}
				//-----------------------------------------------------------

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bd10:	4b5a      	ldr	r3, [pc, #360]	; (800be7c <ThreadMainTask+0x2d8>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f04f 31ff 	mov.w	r1, #4294967295
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fb f80d 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800bd1e:	2100      	movs	r1, #0
 800bd20:	f242 106e 	movw	r0, #8558	; 0x216e
 800bd24:	f009 fd9c 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800bd28:	2101      	movs	r1, #1
 800bd2a:	f242 106f 	movw	r0, #8559	; 0x216f
 800bd2e:	f009 fd97 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800bd32:	4b52      	ldr	r3, [pc, #328]	; (800be7c <ThreadMainTask+0x2d8>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fb f84c 	bl	8006dd4 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800bd3c:	4b50      	ldr	r3, [pc, #320]	; (800be80 <ThreadMainTask+0x2dc>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fb fa29 	bl	8007198 <osThreadResume>
			}
		}

		switch(control_registers.security_control_reg) // проверяем значение переменной включения охранной сигнализации
 800bd46:	4b4f      	ldr	r3, [pc, #316]	; (800be84 <ThreadMainTask+0x2e0>)
 800bd48:	881b      	ldrh	r3, [r3, #0]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	f200 811c 	bhi.w	800bf8a <ThreadMainTask+0x3e6>
 800bd52:	a201      	add	r2, pc, #4	; (adr r2, 800bd58 <ThreadMainTask+0x1b4>)
 800bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd58:	0800be1d 	.word	0x0800be1d
 800bd5c:	0800bd69 	.word	0x0800bd69
 800bd60:	0800bf3d 	.word	0x0800bf3d
 800bd64:	0800be8d 	.word	0x0800be8d
		{

			case(DISABLE_FROM_SERVER):

				BUZ_OFF();
 800bd68:	f009 fe34 	bl	80159d4 <BUZ_OFF>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bd6c:	4b43      	ldr	r3, [pc, #268]	; (800be7c <ThreadMainTask+0x2d8>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f04f 31ff 	mov.w	r1, #4294967295
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fa ffdf 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	f242 1020 	movw	r0, #8480	; 0x2120
 800bd80:	f009 fd6e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 800bd84:	2100      	movs	r1, #0
 800bd86:	f242 1021 	movw	r0, #8481	; 0x2121
 800bd8a:	f009 fd69 	bl	8015860 <fm25v02_write>
				control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT; // обновляем переменную
 800bd8e:	4b3d      	ldr	r3, [pc, #244]	; (800be84 <ThreadMainTask+0x2e0>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	801a      	strh	r2, [r3, #0]
				fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800bd94:	2100      	movs	r1, #0
 800bd96:	f242 0002 	movw	r0, #8194	; 0x2002
 800bd9a:	f009 fd61 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SECURITY_STATUS_REG+1, DISABLED_BY_SERVER);
 800bd9e:	2102      	movs	r1, #2
 800bda0:	f242 0003 	movw	r0, #8195	; 0x2003
 800bda4:	f009 fd5c 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800bda8:	4b34      	ldr	r3, [pc, #208]	; (800be7c <ThreadMainTask+0x2d8>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fb f811 	bl	8006dd4 <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bdb2:	4b32      	ldr	r3, [pc, #200]	; (800be7c <ThreadMainTask+0x2d8>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f04f 31ff 	mov.w	r1, #4294967295
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fa ffbc 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	f242 0020 	movw	r0, #8224	; 0x2020
 800bdc6:	f009 fd4b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, TURN_OFF_STATE_ALARM);
 800bdca:	2107      	movs	r1, #7
 800bdcc:	f242 0021 	movw	r0, #8225	; 0x2021
 800bdd0:	f009 fd46 	bl	8015860 <fm25v02_write>
				status_registers.system_status_reg = TURN_OFF_STATE_ALARM;
 800bdd4:	4b28      	ldr	r3, [pc, #160]	; (800be78 <ThreadMainTask+0x2d4>)
 800bdd6:	2207      	movs	r2, #7
 800bdd8:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 800bdda:	4b28      	ldr	r3, [pc, #160]	; (800be7c <ThreadMainTask+0x2d8>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7fa fff8 	bl	8006dd4 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bde4:	4b25      	ldr	r3, [pc, #148]	; (800be7c <ThreadMainTask+0x2d8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f04f 31ff 	mov.w	r1, #4294967295
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fa ffa3 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	f242 106e 	movw	r0, #8558	; 0x216e
 800bdf8:	f009 fd32 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	f242 106f 	movw	r0, #8559	; 0x216f
 800be02:	f009 fd2d 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800be06:	4b1d      	ldr	r3, [pc, #116]	; (800be7c <ThreadMainTask+0x2d8>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fa ffe2 	bl	8006dd4 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800be10:	4b1b      	ldr	r3, [pc, #108]	; (800be80 <ThreadMainTask+0x2dc>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4618      	mov	r0, r3
 800be16:	f7fb f9bf 	bl	8007198 <osThreadResume>

			break;
 800be1a:	e0b6      	b.n	800bf8a <ThreadMainTask+0x3e6>

			case(ENABLE_FROM_SERVER): // если в регистр поступила команда включить из сервера

				BUZ_OFF();
 800be1c:	f009 fdda 	bl	80159d4 <BUZ_OFF>

				security_control_temp = ENABLED_BY_SERVER;
 800be20:	4b19      	ldr	r3, [pc, #100]	; (800be88 <ThreadMainTask+0x2e4>)
 800be22:	2201      	movs	r2, #1
 800be24:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800be26:	4b15      	ldr	r3, [pc, #84]	; (800be7c <ThreadMainTask+0x2d8>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f04f 31ff 	mov.w	r1, #4294967295
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fa ff82 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 800be34:	2100      	movs	r1, #0
 800be36:	f242 1020 	movw	r0, #8480	; 0x2120
 800be3a:	f009 fd11 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 800be3e:	2100      	movs	r1, #0
 800be40:	f242 1021 	movw	r0, #8481	; 0x2121
 800be44:	f009 fd0c 	bl	8015860 <fm25v02_write>
				control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT; // обновляем переменную
 800be48:	4b0e      	ldr	r3, [pc, #56]	; (800be84 <ThreadMainTask+0x2e0>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	801a      	strh	r2, [r3, #0]
				fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800be4e:	2100      	movs	r1, #0
 800be50:	f242 0002 	movw	r0, #8194	; 0x2002
 800be54:	f009 fd04 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SECURITY_STATUS_REG+1, ARMING_PROCESS);
 800be58:	2106      	movs	r1, #6
 800be5a:	f242 0003 	movw	r0, #8195	; 0x2003
 800be5e:	f009 fcff 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800be62:	4b06      	ldr	r3, [pc, #24]	; (800be7c <ThreadMainTask+0x2d8>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4618      	mov	r0, r3
 800be68:	f7fa ffb4 	bl	8006dd4 <osMutexRelease>

			break;
 800be6c:	e08d      	b.n	800bf8a <ThreadMainTask+0x3e6>
 800be6e:	bf00      	nop
 800be70:	20009718 	.word	0x20009718
 800be74:	40021000 	.word	0x40021000
 800be78:	2000a10c 	.word	0x2000a10c
 800be7c:	20009a6c 	.word	0x20009a6c
 800be80:	2000969c 	.word	0x2000969c
 800be84:	2000a1cc 	.word	0x2000a1cc
 800be88:	20007fed 	.word	0x20007fed

			case(DISABLE_FROM_IBUTTON): // если поступила команда выключить из сервера или с таблетки

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800be8c:	4b84      	ldr	r3, [pc, #528]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f04f 31ff 	mov.w	r1, #4294967295
 800be94:	4618      	mov	r0, r3
 800be96:	f7fa ff4f 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 800be9a:	2100      	movs	r1, #0
 800be9c:	f242 1020 	movw	r0, #8480	; 0x2120
 800bea0:	f009 fcde 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 800bea4:	2100      	movs	r1, #0
 800bea6:	f242 1021 	movw	r0, #8481	; 0x2121
 800beaa:	f009 fcd9 	bl	8015860 <fm25v02_write>
				control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT; // обновляем переменную
 800beae:	4b7d      	ldr	r3, [pc, #500]	; (800c0a4 <ThreadMainTask+0x500>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	801a      	strh	r2, [r3, #0]
				fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800beb4:	2100      	movs	r1, #0
 800beb6:	f242 0002 	movw	r0, #8194	; 0x2002
 800beba:	f009 fcd1 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SECURITY_STATUS_REG+1, DISABLED_BY_IBUTTON);
 800bebe:	2104      	movs	r1, #4
 800bec0:	f242 0003 	movw	r0, #8195	; 0x2003
 800bec4:	f009 fccc 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800bec8:	4b75      	ldr	r3, [pc, #468]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4618      	mov	r0, r3
 800bece:	f7fa ff81 	bl	8006dd4 <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bed2:	4b73      	ldr	r3, [pc, #460]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f04f 31ff 	mov.w	r1, #4294967295
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fa ff2c 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800bee0:	2100      	movs	r1, #0
 800bee2:	f242 0020 	movw	r0, #8224	; 0x2020
 800bee6:	f009 fcbb 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, TURN_OFF_STATE_ALARM);
 800beea:	2107      	movs	r1, #7
 800beec:	f242 0021 	movw	r0, #8225	; 0x2021
 800bef0:	f009 fcb6 	bl	8015860 <fm25v02_write>
				status_registers.system_status_reg = TURN_OFF_STATE_ALARM;
 800bef4:	4b6c      	ldr	r3, [pc, #432]	; (800c0a8 <ThreadMainTask+0x504>)
 800bef6:	2207      	movs	r2, #7
 800bef8:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 800befa:	4b69      	ldr	r3, [pc, #420]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4618      	mov	r0, r3
 800bf00:	f7fa ff68 	bl	8006dd4 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bf04:	4b66      	ldr	r3, [pc, #408]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f04f 31ff 	mov.w	r1, #4294967295
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fa ff13 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800bf12:	2100      	movs	r1, #0
 800bf14:	f242 106e 	movw	r0, #8558	; 0x216e
 800bf18:	f009 fca2 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	f242 106f 	movw	r0, #8559	; 0x216f
 800bf22:	f009 fc9d 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800bf26:	4b5e      	ldr	r3, [pc, #376]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fa ff52 	bl	8006dd4 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800bf30:	4b5e      	ldr	r3, [pc, #376]	; (800c0ac <ThreadMainTask+0x508>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fb f92f 	bl	8007198 <osThreadResume>

			break;
 800bf3a:	e026      	b.n	800bf8a <ThreadMainTask+0x3e6>

			case(ENABLE_FROM_IBUTTON): // если поступила команда включить с таблетки

				security_control_temp = ENABLED_BY_IBUTTON;
 800bf3c:	4b5c      	ldr	r3, [pc, #368]	; (800c0b0 <ThreadMainTask+0x50c>)
 800bf3e:	2203      	movs	r2, #3
 800bf40:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bf42:	4b57      	ldr	r3, [pc, #348]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f04f 31ff 	mov.w	r1, #4294967295
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fa fef4 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*SECURITY_CONTROL_REG, 0x00);
 800bf50:	2100      	movs	r1, #0
 800bf52:	f242 1020 	movw	r0, #8480	; 0x2120
 800bf56:	f009 fc83 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SECURITY_CONTROL_REG+1, SECURITY_CONTROL_DEFAULT);
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	f242 1021 	movw	r0, #8481	; 0x2121
 800bf60:	f009 fc7e 	bl	8015860 <fm25v02_write>
				control_registers.security_control_reg = SECURITY_CONTROL_DEFAULT; // обновляем переменную
 800bf64:	4b4f      	ldr	r3, [pc, #316]	; (800c0a4 <ThreadMainTask+0x500>)
 800bf66:	2200      	movs	r2, #0
 800bf68:	801a      	strh	r2, [r3, #0]
				fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	f242 0002 	movw	r0, #8194	; 0x2002
 800bf70:	f009 fc76 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*SECURITY_STATUS_REG+1, ARMING_PROCESS);
 800bf74:	2106      	movs	r1, #6
 800bf76:	f242 0003 	movw	r0, #8195	; 0x2003
 800bf7a:	f009 fc71 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800bf7e:	4b48      	ldr	r3, [pc, #288]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fa ff26 	bl	8006dd4 <osMutexRelease>

			break;
 800bf88:	bf00      	nop
		}

		switch(control_registers.time_update_reg) // проверяем значение переменной обновления времени
 800bf8a:	4b46      	ldr	r3, [pc, #280]	; (800c0a4 <ThreadMainTask+0x500>)
 800bf8c:	8a1b      	ldrh	r3, [r3, #16]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 8096 	beq.w	800c0c0 <ThreadMainTask+0x51c>
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	f040 8160 	bne.w	800c25a <ThreadMainTask+0x6b6>
		{
			case(SET_TIME): // Если в регистр записана команда установить время

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800bf9a:	4b41      	ldr	r3, [pc, #260]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f04f 31ff 	mov.w	r1, #4294967295
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fa fec8 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*TIME_UPDATE_REG, 0x00);
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	f242 1030 	movw	r0, #8496	; 0x2130
 800bfae:	f009 fc57 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_UPDATE_REG+1, SET_TIME_DEFAULT);
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	f242 1031 	movw	r0, #8497	; 0x2131
 800bfb8:	f009 fc52 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800bfbc:	4b38      	ldr	r3, [pc, #224]	; (800c0a0 <ThreadMainTask+0x4fc>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fa ff07 	bl	8006dd4 <osMutexRelease>

				set_time.Hours = control_registers.time_hour_reg; // записываем в переменные структуры времени значения регистров управления временем
 800bfc6:	4b37      	ldr	r3, [pc, #220]	; (800c0a4 <ThreadMainTask+0x500>)
 800bfc8:	8b1b      	ldrh	r3, [r3, #24]
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	4b39      	ldr	r3, [pc, #228]	; (800c0b4 <ThreadMainTask+0x510>)
 800bfce:	701a      	strb	r2, [r3, #0]
				set_time.Minutes = control_registers.time_minute_reg;
 800bfd0:	4b34      	ldr	r3, [pc, #208]	; (800c0a4 <ThreadMainTask+0x500>)
 800bfd2:	8b5b      	ldrh	r3, [r3, #26]
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	4b37      	ldr	r3, [pc, #220]	; (800c0b4 <ThreadMainTask+0x510>)
 800bfd8:	705a      	strb	r2, [r3, #1]
				set_time.Seconds = control_registers.time_seconds_reg;
 800bfda:	4b32      	ldr	r3, [pc, #200]	; (800c0a4 <ThreadMainTask+0x500>)
 800bfdc:	8b9b      	ldrh	r3, [r3, #28]
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	4b34      	ldr	r3, [pc, #208]	; (800c0b4 <ThreadMainTask+0x510>)
 800bfe2:	709a      	strb	r2, [r3, #2]
				set_date.Date = control_registers.time_day_reg;
 800bfe4:	4b2f      	ldr	r3, [pc, #188]	; (800c0a4 <ThreadMainTask+0x500>)
 800bfe6:	8adb      	ldrh	r3, [r3, #22]
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	4b33      	ldr	r3, [pc, #204]	; (800c0b8 <ThreadMainTask+0x514>)
 800bfec:	709a      	strb	r2, [r3, #2]
				set_date.Month = control_registers.time_month_reg;
 800bfee:	4b2d      	ldr	r3, [pc, #180]	; (800c0a4 <ThreadMainTask+0x500>)
 800bff0:	8a9b      	ldrh	r3, [r3, #20]
 800bff2:	b2da      	uxtb	r2, r3
 800bff4:	4b30      	ldr	r3, [pc, #192]	; (800c0b8 <ThreadMainTask+0x514>)
 800bff6:	705a      	strb	r2, [r3, #1]
				set_date.Year = control_registers.time_year_reg;
 800bff8:	4b2a      	ldr	r3, [pc, #168]	; (800c0a4 <ThreadMainTask+0x500>)
 800bffa:	8a5b      	ldrh	r3, [r3, #18]
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	4b2e      	ldr	r3, [pc, #184]	; (800c0b8 <ThreadMainTask+0x514>)
 800c000:	70da      	strb	r2, [r3, #3]
				set_date.WeekDay = control_registers.time_weekday_reg;
 800c002:	4b28      	ldr	r3, [pc, #160]	; (800c0a4 <ThreadMainTask+0x500>)
 800c004:	8bdb      	ldrh	r3, [r3, #30]
 800c006:	b2da      	uxtb	r2, r3
 800c008:	4b2b      	ldr	r3, [pc, #172]	; (800c0b8 <ThreadMainTask+0x514>)
 800c00a:	701a      	strb	r2, [r3, #0]

				set_time.Hours = RTC_ByteToBcd2(set_time.Hours); // переводим обычный формат времени в BCD
 800c00c:	4b29      	ldr	r3, [pc, #164]	; (800c0b4 <ThreadMainTask+0x510>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	4618      	mov	r0, r3
 800c012:	f7f8 f9d2 	bl	80043ba <RTC_ByteToBcd2>
 800c016:	4603      	mov	r3, r0
 800c018:	461a      	mov	r2, r3
 800c01a:	4b26      	ldr	r3, [pc, #152]	; (800c0b4 <ThreadMainTask+0x510>)
 800c01c:	701a      	strb	r2, [r3, #0]
				set_time.Minutes = RTC_ByteToBcd2(set_time.Minutes);
 800c01e:	4b25      	ldr	r3, [pc, #148]	; (800c0b4 <ThreadMainTask+0x510>)
 800c020:	785b      	ldrb	r3, [r3, #1]
 800c022:	4618      	mov	r0, r3
 800c024:	f7f8 f9c9 	bl	80043ba <RTC_ByteToBcd2>
 800c028:	4603      	mov	r3, r0
 800c02a:	461a      	mov	r2, r3
 800c02c:	4b21      	ldr	r3, [pc, #132]	; (800c0b4 <ThreadMainTask+0x510>)
 800c02e:	705a      	strb	r2, [r3, #1]
				set_time.Seconds = RTC_ByteToBcd2(set_time.Seconds);
 800c030:	4b20      	ldr	r3, [pc, #128]	; (800c0b4 <ThreadMainTask+0x510>)
 800c032:	789b      	ldrb	r3, [r3, #2]
 800c034:	4618      	mov	r0, r3
 800c036:	f7f8 f9c0 	bl	80043ba <RTC_ByteToBcd2>
 800c03a:	4603      	mov	r3, r0
 800c03c:	461a      	mov	r2, r3
 800c03e:	4b1d      	ldr	r3, [pc, #116]	; (800c0b4 <ThreadMainTask+0x510>)
 800c040:	709a      	strb	r2, [r3, #2]
				set_date.Date = RTC_ByteToBcd2(set_date.Date);
 800c042:	4b1d      	ldr	r3, [pc, #116]	; (800c0b8 <ThreadMainTask+0x514>)
 800c044:	789b      	ldrb	r3, [r3, #2]
 800c046:	4618      	mov	r0, r3
 800c048:	f7f8 f9b7 	bl	80043ba <RTC_ByteToBcd2>
 800c04c:	4603      	mov	r3, r0
 800c04e:	461a      	mov	r2, r3
 800c050:	4b19      	ldr	r3, [pc, #100]	; (800c0b8 <ThreadMainTask+0x514>)
 800c052:	709a      	strb	r2, [r3, #2]
				set_date.Month = RTC_ByteToBcd2(set_date.Month);
 800c054:	4b18      	ldr	r3, [pc, #96]	; (800c0b8 <ThreadMainTask+0x514>)
 800c056:	785b      	ldrb	r3, [r3, #1]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7f8 f9ae 	bl	80043ba <RTC_ByteToBcd2>
 800c05e:	4603      	mov	r3, r0
 800c060:	461a      	mov	r2, r3
 800c062:	4b15      	ldr	r3, [pc, #84]	; (800c0b8 <ThreadMainTask+0x514>)
 800c064:	705a      	strb	r2, [r3, #1]
				set_date.Year = RTC_ByteToBcd2(set_date.Year);
 800c066:	4b14      	ldr	r3, [pc, #80]	; (800c0b8 <ThreadMainTask+0x514>)
 800c068:	78db      	ldrb	r3, [r3, #3]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7f8 f9a5 	bl	80043ba <RTC_ByteToBcd2>
 800c070:	4603      	mov	r3, r0
 800c072:	461a      	mov	r2, r3
 800c074:	4b10      	ldr	r3, [pc, #64]	; (800c0b8 <ThreadMainTask+0x514>)
 800c076:	70da      	strb	r2, [r3, #3]
				set_date.WeekDay = RTC_ByteToBcd2(set_date.WeekDay);
 800c078:	4b0f      	ldr	r3, [pc, #60]	; (800c0b8 <ThreadMainTask+0x514>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7f8 f99c 	bl	80043ba <RTC_ByteToBcd2>
 800c082:	4603      	mov	r3, r0
 800c084:	461a      	mov	r2, r3
 800c086:	4b0c      	ldr	r3, [pc, #48]	; (800c0b8 <ThreadMainTask+0x514>)
 800c088:	701a      	strb	r2, [r3, #0]

				HAL_RTC_SetTime(&hrtc, &set_time, RTC_FORMAT_BCD); // устанавливаем дату и время
 800c08a:	2201      	movs	r2, #1
 800c08c:	4909      	ldr	r1, [pc, #36]	; (800c0b4 <ThreadMainTask+0x510>)
 800c08e:	480b      	ldr	r0, [pc, #44]	; (800c0bc <ThreadMainTask+0x518>)
 800c090:	f7f7 ff44 	bl	8003f1c <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &set_date, RTC_FORMAT_BCD);
 800c094:	2201      	movs	r2, #1
 800c096:	4908      	ldr	r1, [pc, #32]	; (800c0b8 <ThreadMainTask+0x514>)
 800c098:	4808      	ldr	r0, [pc, #32]	; (800c0bc <ThreadMainTask+0x518>)
 800c09a:	f7f8 f837 	bl	800410c <HAL_RTC_SetDate>


			break;
 800c09e:	e0dc      	b.n	800c25a <ThreadMainTask+0x6b6>
 800c0a0:	20009a6c 	.word	0x20009a6c
 800c0a4:	2000a1cc 	.word	0x2000a1cc
 800c0a8:	2000a10c 	.word	0x2000a10c
 800c0ac:	2000969c 	.word	0x2000969c
 800c0b0:	20007fed 	.word	0x20007fed
 800c0b4:	20009e94 	.word	0x20009e94
 800c0b8:	20009e90 	.word	0x20009e90
 800c0bc:	20009a30 	.word	0x20009a30

			case(SET_TIME_DEFAULT): // Если в регистр не поступала команда установки времени

				HAL_RTC_GetTime(&hrtc, &current_time , RTC_FORMAT_BCD); // получаем значение даты и времени
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	4974      	ldr	r1, [pc, #464]	; (800c294 <ThreadMainTask+0x6f0>)
 800c0c4:	4874      	ldr	r0, [pc, #464]	; (800c298 <ThreadMainTask+0x6f4>)
 800c0c6:	f7f7 ffc3 	bl	8004050 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &current_date , RTC_FORMAT_BCD);
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	4973      	ldr	r1, [pc, #460]	; (800c29c <ThreadMainTask+0x6f8>)
 800c0ce:	4872      	ldr	r0, [pc, #456]	; (800c298 <ThreadMainTask+0x6f4>)
 800c0d0:	f7f8 f8a0 	bl	8004214 <HAL_RTC_GetDate>

				current_time.Hours = RTC_Bcd2ToByte(current_time.Hours); // переводим из BCD формата в обычный
 800c0d4:	4b6f      	ldr	r3, [pc, #444]	; (800c294 <ThreadMainTask+0x6f0>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7f8 f98b 	bl	80043f4 <RTC_Bcd2ToByte>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	4b6c      	ldr	r3, [pc, #432]	; (800c294 <ThreadMainTask+0x6f0>)
 800c0e4:	701a      	strb	r2, [r3, #0]
				current_time.Minutes = RTC_Bcd2ToByte(current_time.Minutes);
 800c0e6:	4b6b      	ldr	r3, [pc, #428]	; (800c294 <ThreadMainTask+0x6f0>)
 800c0e8:	785b      	ldrb	r3, [r3, #1]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7f8 f982 	bl	80043f4 <RTC_Bcd2ToByte>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	4b67      	ldr	r3, [pc, #412]	; (800c294 <ThreadMainTask+0x6f0>)
 800c0f6:	705a      	strb	r2, [r3, #1]
				current_time.Seconds = RTC_Bcd2ToByte(current_time.Seconds);
 800c0f8:	4b66      	ldr	r3, [pc, #408]	; (800c294 <ThreadMainTask+0x6f0>)
 800c0fa:	789b      	ldrb	r3, [r3, #2]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7f8 f979 	bl	80043f4 <RTC_Bcd2ToByte>
 800c102:	4603      	mov	r3, r0
 800c104:	461a      	mov	r2, r3
 800c106:	4b63      	ldr	r3, [pc, #396]	; (800c294 <ThreadMainTask+0x6f0>)
 800c108:	709a      	strb	r2, [r3, #2]
				current_date.Date = RTC_Bcd2ToByte(current_date.Date);
 800c10a:	4b64      	ldr	r3, [pc, #400]	; (800c29c <ThreadMainTask+0x6f8>)
 800c10c:	789b      	ldrb	r3, [r3, #2]
 800c10e:	4618      	mov	r0, r3
 800c110:	f7f8 f970 	bl	80043f4 <RTC_Bcd2ToByte>
 800c114:	4603      	mov	r3, r0
 800c116:	461a      	mov	r2, r3
 800c118:	4b60      	ldr	r3, [pc, #384]	; (800c29c <ThreadMainTask+0x6f8>)
 800c11a:	709a      	strb	r2, [r3, #2]
				current_date.Month = RTC_Bcd2ToByte(current_date.Month);
 800c11c:	4b5f      	ldr	r3, [pc, #380]	; (800c29c <ThreadMainTask+0x6f8>)
 800c11e:	785b      	ldrb	r3, [r3, #1]
 800c120:	4618      	mov	r0, r3
 800c122:	f7f8 f967 	bl	80043f4 <RTC_Bcd2ToByte>
 800c126:	4603      	mov	r3, r0
 800c128:	461a      	mov	r2, r3
 800c12a:	4b5c      	ldr	r3, [pc, #368]	; (800c29c <ThreadMainTask+0x6f8>)
 800c12c:	705a      	strb	r2, [r3, #1]
				current_date.Year = RTC_Bcd2ToByte(current_date.Year);
 800c12e:	4b5b      	ldr	r3, [pc, #364]	; (800c29c <ThreadMainTask+0x6f8>)
 800c130:	78db      	ldrb	r3, [r3, #3]
 800c132:	4618      	mov	r0, r3
 800c134:	f7f8 f95e 	bl	80043f4 <RTC_Bcd2ToByte>
 800c138:	4603      	mov	r3, r0
 800c13a:	461a      	mov	r2, r3
 800c13c:	4b57      	ldr	r3, [pc, #348]	; (800c29c <ThreadMainTask+0x6f8>)
 800c13e:	70da      	strb	r2, [r3, #3]
				current_date.WeekDay = RTC_Bcd2ToByte(current_date.WeekDay);
 800c140:	4b56      	ldr	r3, [pc, #344]	; (800c29c <ThreadMainTask+0x6f8>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	4618      	mov	r0, r3
 800c146:	f7f8 f955 	bl	80043f4 <RTC_Bcd2ToByte>
 800c14a:	4603      	mov	r3, r0
 800c14c:	461a      	mov	r2, r3
 800c14e:	4b53      	ldr	r3, [pc, #332]	; (800c29c <ThreadMainTask+0x6f8>)
 800c150:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c152:	4b53      	ldr	r3, [pc, #332]	; (800c2a0 <ThreadMainTask+0x6fc>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f04f 31ff 	mov.w	r1, #4294967295
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fa fdec 	bl	8006d38 <osMutexWait>

				fm25v02_write(2*TIME_CURRENT_HOUR_REG, 0x00); // записываем в регистры значения даты и времени
 800c160:	2100      	movs	r1, #0
 800c162:	f242 0010 	movw	r0, #8208	; 0x2010
 800c166:	f009 fb7b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_HOUR_REG+1, current_time.Hours);
 800c16a:	4b4a      	ldr	r3, [pc, #296]	; (800c294 <ThreadMainTask+0x6f0>)
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	4619      	mov	r1, r3
 800c170:	f242 0011 	movw	r0, #8209	; 0x2011
 800c174:	f009 fb74 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MINUTE_REG, 0x00);
 800c178:	2100      	movs	r1, #0
 800c17a:	f242 0012 	movw	r0, #8210	; 0x2012
 800c17e:	f009 fb6f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MINUTE_REG+1, current_time.Minutes);
 800c182:	4b44      	ldr	r3, [pc, #272]	; (800c294 <ThreadMainTask+0x6f0>)
 800c184:	785b      	ldrb	r3, [r3, #1]
 800c186:	4619      	mov	r1, r3
 800c188:	f242 0013 	movw	r0, #8211	; 0x2013
 800c18c:	f009 fb68 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_SECOND_REG, 0x00);
 800c190:	2100      	movs	r1, #0
 800c192:	f242 0014 	movw	r0, #8212	; 0x2014
 800c196:	f009 fb63 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_SECOND_REG+1, current_time.Seconds);
 800c19a:	4b3e      	ldr	r3, [pc, #248]	; (800c294 <ThreadMainTask+0x6f0>)
 800c19c:	789b      	ldrb	r3, [r3, #2]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	f242 0015 	movw	r0, #8213	; 0x2015
 800c1a4:	f009 fb5c 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_DAY_REG, 0x00);
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	f242 000e 	movw	r0, #8206	; 0x200e
 800c1ae:	f009 fb57 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_DAY_REG+1, current_date.Date);
 800c1b2:	4b3a      	ldr	r3, [pc, #232]	; (800c29c <ThreadMainTask+0x6f8>)
 800c1b4:	789b      	ldrb	r3, [r3, #2]
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	f242 000f 	movw	r0, #8207	; 0x200f
 800c1bc:	f009 fb50 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MONTH_REG, 0x00);
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	f242 000c 	movw	r0, #8204	; 0x200c
 800c1c6:	f009 fb4b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MONTH_REG+1, current_date.Month);
 800c1ca:	4b34      	ldr	r3, [pc, #208]	; (800c29c <ThreadMainTask+0x6f8>)
 800c1cc:	785b      	ldrb	r3, [r3, #1]
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	f242 000d 	movw	r0, #8205	; 0x200d
 800c1d4:	f009 fb44 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_YEAR_REG, 0x00);
 800c1d8:	2100      	movs	r1, #0
 800c1da:	f242 000a 	movw	r0, #8202	; 0x200a
 800c1de:	f009 fb3f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_YEAR_REG+1, current_date.Year);
 800c1e2:	4b2e      	ldr	r3, [pc, #184]	; (800c29c <ThreadMainTask+0x6f8>)
 800c1e4:	78db      	ldrb	r3, [r3, #3]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	f242 000b 	movw	r0, #8203	; 0x200b
 800c1ec:	f009 fb38 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_WEEKDAY_REG, 0x00);
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	f242 0016 	movw	r0, #8214	; 0x2016
 800c1f6:	f009 fb33 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_WEEKDAY_REG+1, current_date.WeekDay);
 800c1fa:	4b28      	ldr	r3, [pc, #160]	; (800c29c <ThreadMainTask+0x6f8>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	4619      	mov	r1, r3
 800c200:	f242 0017 	movw	r0, #8215	; 0x2017
 800c204:	f009 fb2c 	bl	8015860 <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 800c208:	4b25      	ldr	r3, [pc, #148]	; (800c2a0 <ThreadMainTask+0x6fc>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fa fde1 	bl	8006dd4 <osMutexRelease>

				status_registers.time_current_hour_reg = current_time.Hours;
 800c212:	4b20      	ldr	r3, [pc, #128]	; (800c294 <ThreadMainTask+0x6f0>)
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	b29a      	uxth	r2, r3
 800c218:	4b22      	ldr	r3, [pc, #136]	; (800c2a4 <ThreadMainTask+0x700>)
 800c21a:	821a      	strh	r2, [r3, #16]
				status_registers.time_current_minute_reg = current_time.Minutes;
 800c21c:	4b1d      	ldr	r3, [pc, #116]	; (800c294 <ThreadMainTask+0x6f0>)
 800c21e:	785b      	ldrb	r3, [r3, #1]
 800c220:	b29a      	uxth	r2, r3
 800c222:	4b20      	ldr	r3, [pc, #128]	; (800c2a4 <ThreadMainTask+0x700>)
 800c224:	825a      	strh	r2, [r3, #18]
				status_registers.time_current_second_reg = current_time.Seconds;
 800c226:	4b1b      	ldr	r3, [pc, #108]	; (800c294 <ThreadMainTask+0x6f0>)
 800c228:	789b      	ldrb	r3, [r3, #2]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	4b1d      	ldr	r3, [pc, #116]	; (800c2a4 <ThreadMainTask+0x700>)
 800c22e:	829a      	strh	r2, [r3, #20]
				status_registers.time_current_day_reg = current_date.Date;
 800c230:	4b1a      	ldr	r3, [pc, #104]	; (800c29c <ThreadMainTask+0x6f8>)
 800c232:	789b      	ldrb	r3, [r3, #2]
 800c234:	b29a      	uxth	r2, r3
 800c236:	4b1b      	ldr	r3, [pc, #108]	; (800c2a4 <ThreadMainTask+0x700>)
 800c238:	81da      	strh	r2, [r3, #14]
				status_registers.time_current_month_reg = current_date.Month;
 800c23a:	4b18      	ldr	r3, [pc, #96]	; (800c29c <ThreadMainTask+0x6f8>)
 800c23c:	785b      	ldrb	r3, [r3, #1]
 800c23e:	b29a      	uxth	r2, r3
 800c240:	4b18      	ldr	r3, [pc, #96]	; (800c2a4 <ThreadMainTask+0x700>)
 800c242:	819a      	strh	r2, [r3, #12]
				status_registers.time_current_year_reg = current_date.Year;
 800c244:	4b15      	ldr	r3, [pc, #84]	; (800c29c <ThreadMainTask+0x6f8>)
 800c246:	78db      	ldrb	r3, [r3, #3]
 800c248:	b29a      	uxth	r2, r3
 800c24a:	4b16      	ldr	r3, [pc, #88]	; (800c2a4 <ThreadMainTask+0x700>)
 800c24c:	815a      	strh	r2, [r3, #10]
				status_registers.time_current_weekday_reg = current_date.WeekDay;
 800c24e:	4b13      	ldr	r3, [pc, #76]	; (800c29c <ThreadMainTask+0x6f8>)
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b29a      	uxth	r2, r3
 800c254:	4b13      	ldr	r3, [pc, #76]	; (800c2a4 <ThreadMainTask+0x700>)
 800c256:	82da      	strh	r2, [r3, #22]


			break;
 800c258:	bf00      	nop

		}

		switch(control_registers.reset_control_reg) // удаленная перезагрузка контроллера
 800c25a:	4b13      	ldr	r3, [pc, #76]	; (800c2a8 <ThreadMainTask+0x704>)
 800c25c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d124      	bne.n	800c2ac <ThreadMainTask+0x708>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c262:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <ThreadMainTask+0x6fc>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f04f 31ff 	mov.w	r1, #4294967295
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fa fd64 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*RESET_CONTROL_REG, 0);
 800c270:	2100      	movs	r1, #0
 800c272:	f242 105a 	movw	r0, #8538	; 0x215a
 800c276:	f009 faf3 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*RESET_CONTROL_REG+1, 0);
 800c27a:	2100      	movs	r1, #0
 800c27c:	f242 105b 	movw	r0, #8539	; 0x215b
 800c280:	f009 faee 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800c284:	4b06      	ldr	r3, [pc, #24]	; (800c2a0 <ThreadMainTask+0x6fc>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fa fda3 	bl	8006dd4 <osMutexRelease>
				NVIC_SystemReset();
 800c28e:	f7ff fc73 	bl	800bb78 <__NVIC_SystemReset>
 800c292:	bf00      	nop
 800c294:	20009e7c 	.word	0x20009e7c
 800c298:	20009a30 	.word	0x20009a30
 800c29c:	20009e78 	.word	0x20009e78
 800c2a0:	20009a6c 	.word	0x20009a6c
 800c2a4:	2000a10c 	.word	0x2000a10c
 800c2a8:	2000a1cc 	.word	0x2000a1cc
			break;

		}

		switch(control_registers.alarm_loop_clear_reg) // сбросить сработавшие шлейфы
 800c2ac:	4b6b      	ldr	r3, [pc, #428]	; (800c45c <ThreadMainTask+0x8b8>)
 800c2ae:	895b      	ldrh	r3, [r3, #10]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d13b      	bne.n	800c32c <ThreadMainTask+0x788>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c2b4:	4b6a      	ldr	r3, [pc, #424]	; (800c460 <ThreadMainTask+0x8bc>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f04f 31ff 	mov.w	r1, #4294967295
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fa fd3b 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*ALARM_LOOP_CLEAR_REG, 0);
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	f242 102a 	movw	r0, #8490	; 0x212a
 800c2c8:	f009 faca 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_CLEAR_REG+1, 0);
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	f242 102b 	movw	r0, #8491	; 0x212b
 800c2d2:	f009 fac5 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_REG, 0);
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	f242 0008 	movw	r0, #8200	; 0x2008
 800c2dc:	f009 fac0 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_REG+1, 0);
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	f242 0009 	movw	r0, #8201	; 0x2009
 800c2e6:	f009 fabb 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800c2ea:	4b5d      	ldr	r3, [pc, #372]	; (800c460 <ThreadMainTask+0x8bc>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fa fd70 	bl	8006dd4 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c2f4:	4b5a      	ldr	r3, [pc, #360]	; (800c460 <ThreadMainTask+0x8bc>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f04f 31ff 	mov.w	r1, #4294967295
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fa fd1b 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800c302:	2100      	movs	r1, #0
 800c304:	f242 106e 	movw	r0, #8558	; 0x216e
 800c308:	f009 faaa 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800c30c:	2101      	movs	r1, #1
 800c30e:	f242 106f 	movw	r0, #8559	; 0x216f
 800c312:	f009 faa5 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800c316:	4b52      	ldr	r3, [pc, #328]	; (800c460 <ThreadMainTask+0x8bc>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fa fd5a 	bl	8006dd4 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800c320:	4b50      	ldr	r3, [pc, #320]	; (800c464 <ThreadMainTask+0x8c0>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4618      	mov	r0, r3
 800c326:	f7fa ff37 	bl	8007198 <osThreadResume>

			break;
 800c32a:	bf00      	nop

		}

		switch(control_registers.false_loop_clear_reg) // сбросить неисправные шлейфы
 800c32c:	4b4b      	ldr	r3, [pc, #300]	; (800c45c <ThreadMainTask+0x8b8>)
 800c32e:	899b      	ldrh	r3, [r3, #12]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d13b      	bne.n	800c3ac <ThreadMainTask+0x808>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c334:	4b4a      	ldr	r3, [pc, #296]	; (800c460 <ThreadMainTask+0x8bc>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f04f 31ff 	mov.w	r1, #4294967295
 800c33c:	4618      	mov	r0, r3
 800c33e:	f7fa fcfb 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*FALSE_LOOP_CLEAR_REG, 0);
 800c342:	2100      	movs	r1, #0
 800c344:	f242 102c 	movw	r0, #8492	; 0x212c
 800c348:	f009 fa8a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*FALSE_LOOP_CLEAR_REG+1, 0);
 800c34c:	2100      	movs	r1, #0
 800c34e:	f242 102d 	movw	r0, #8493	; 0x212d
 800c352:	f009 fa85 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ERROR_LOOP_REG, 0);
 800c356:	2100      	movs	r1, #0
 800c358:	f242 0006 	movw	r0, #8198	; 0x2006
 800c35c:	f009 fa80 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ERROR_LOOP_REG+1, 0);
 800c360:	2100      	movs	r1, #0
 800c362:	f242 0007 	movw	r0, #8199	; 0x2007
 800c366:	f009 fa7b 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800c36a:	4b3d      	ldr	r3, [pc, #244]	; (800c460 <ThreadMainTask+0x8bc>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fa fd30 	bl	8006dd4 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c374:	4b3a      	ldr	r3, [pc, #232]	; (800c460 <ThreadMainTask+0x8bc>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f04f 31ff 	mov.w	r1, #4294967295
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7fa fcdb 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800c382:	2100      	movs	r1, #0
 800c384:	f242 106e 	movw	r0, #8558	; 0x216e
 800c388:	f009 fa6a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800c38c:	2101      	movs	r1, #1
 800c38e:	f242 106f 	movw	r0, #8559	; 0x216f
 800c392:	f009 fa65 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800c396:	4b32      	ldr	r3, [pc, #200]	; (800c460 <ThreadMainTask+0x8bc>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fa fd1a 	bl	8006dd4 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800c3a0:	4b30      	ldr	r3, [pc, #192]	; (800c464 <ThreadMainTask+0x8c0>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fa fef7 	bl	8007198 <osThreadResume>


			break;
 800c3aa:	bf00      	nop

		}


		switch(control_registers.event_read_reg)
 800c3ac:	4b2b      	ldr	r3, [pc, #172]	; (800c45c <ThreadMainTask+0x8b8>)
 800c3ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d12a      	bne.n	800c40a <ThreadMainTask+0x866>
		{
			case(1):

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c3b4:	4b2a      	ldr	r3, [pc, #168]	; (800c460 <ThreadMainTask+0x8bc>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f04f 31ff 	mov.w	r1, #4294967295
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fa fcbb 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*EVENT_READ_REG, 0);
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	f242 1044 	movw	r0, #8516	; 0x2144
 800c3c8:	f009 fa4a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*EVENT_READ_REG+1, 0);
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	f242 1045 	movw	r0, #8517	; 0x2145
 800c3d2:	f009 fa45 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	f242 001c 	movw	r0, #8220	; 0x201c
 800c3dc:	f009 fa40 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 800c3e0:	2120      	movs	r1, #32
 800c3e2:	f242 001d 	movw	r0, #8221	; 0x201d
 800c3e6:	f009 fa3b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 800c3ea:	2100      	movs	r1, #0
 800c3ec:	f242 001e 	movw	r0, #8222	; 0x201e
 800c3f0:	f009 fa36 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	f242 001f 	movw	r0, #8223	; 0x201f
 800c3fa:	f009 fa31 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800c3fe:	4b18      	ldr	r3, [pc, #96]	; (800c460 <ThreadMainTask+0x8bc>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4618      	mov	r0, r3
 800c404:	f7fa fce6 	bl	8006dd4 <osMutexRelease>

			break;
 800c408:	bf00      	nop
		}

		switch(bootloader_registers.working_mode_reg)
 800c40a:	4b17      	ldr	r3, [pc, #92]	; (800c468 <ThreadMainTask+0x8c4>)
 800c40c:	8b9b      	ldrh	r3, [r3, #28]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d101      	bne.n	800c416 <ThreadMainTask+0x872>
		{
			case(1):

				NVIC_SystemReset();
 800c412:	f7ff fbb1 	bl	800bb78 <__NVIC_SystemReset>

			break;
		}

		if( modem_reset_state == 1)
 800c416:	4b15      	ldr	r3, [pc, #84]	; (800c46c <ThreadMainTask+0x8c8>)
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d116      	bne.n	800c44e <ThreadMainTask+0x8aa>
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800c420:	4b0f      	ldr	r3, [pc, #60]	; (800c460 <ThreadMainTask+0x8bc>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f04f 31ff 	mov.w	r1, #4294967295
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fa fc85 	bl	8006d38 <osMutexWait>
			osThreadSuspend(M95TaskHandle);
 800c42e:	4b10      	ldr	r3, [pc, #64]	; (800c470 <ThreadMainTask+0x8cc>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4618      	mov	r0, r3
 800c434:	f7fa fea4 	bl	8007180 <osThreadSuspend>
			modem_reset_state = 0;
 800c438:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <ThreadMainTask+0x8c8>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	701a      	strb	r2, [r3, #0]
			//AT_QPOWD(0);
			m95_power_off();
 800c43e:	f009 fdf3 	bl	8016028 <m95_power_off>
			HAL_Delay(5000);
 800c442:	f241 3088 	movw	r0, #5000	; 0x1388
 800c446:	f7f5 fc5d 	bl	8001d04 <HAL_Delay>
			NVIC_SystemReset();
 800c44a:	f7ff fb95 	bl	800bb78 <__NVIC_SystemReset>
		}


		osDelay(500);
 800c44e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c452:	f7fa fb90 	bl	8006b76 <osDelay>
		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET ) // проверяем если есть наличие единицы на пине PFO микросхемы TPS3306-15
 800c456:	f7ff bbae 	b.w	800bbb6 <ThreadMainTask+0x12>
 800c45a:	bf00      	nop
 800c45c:	2000a1cc 	.word	0x2000a1cc
 800c460:	20009a6c 	.word	0x20009a6c
 800c464:	2000969c 	.word	0x2000969c
 800c468:	2000a0c0 	.word	0x2000a0c0
 800c46c:	2000085e 	.word	0x2000085e
 800c470:	200098e0 	.word	0x200098e0

0800c474 <ThreadMeterTask>:

uint8_t meter_id;


void ThreadMeterTask(void const * argument)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]


	osSemaphoreWait(RS485TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800c47c:	4b57      	ldr	r3, [pc, #348]	; (800c5dc <ThreadMeterTask+0x168>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f04f 31ff 	mov.w	r1, #4294967295
 800c484:	4618      	mov	r0, r3
 800c486:	f7fa fd1b 	bl	8006ec0 <osSemaphoreWait>

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // тестово обнуляем регистр ошибки опроса счетчика
 800c48a:	4b55      	ldr	r3, [pc, #340]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f04f 31ff 	mov.w	r1, #4294967295
 800c492:	4618      	mov	r0, r3
 800c494:	f7fa fc50 	bl	8006d38 <osMutexWait>
	fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 800c498:	2100      	movs	r1, #0
 800c49a:	f242 003c 	movw	r0, #8252	; 0x203c
 800c49e:	f009 f9df 	bl	8015860 <fm25v02_write>
	fm25v02_write(2*CE_303_ERROR_REG+1, 0x01);
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	f242 003d 	movw	r0, #8253	; 0x203d
 800c4a8:	f009 f9da 	bl	8015860 <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 800c4ac:	4b4c      	ldr	r3, [pc, #304]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fa fc8f 	bl	8006dd4 <osMutexRelease>


	for(;;)
	{
		if(control_registers.meter_polling_reg == 1)
 800c4b6:	4b4b      	ldr	r3, [pc, #300]	; (800c5e4 <ThreadMeterTask+0x170>)
 800c4b8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	f040 8089 	bne.w	800c5d2 <ThreadMeterTask+0x15e>
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c4c0:	4b47      	ldr	r3, [pc, #284]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f04f 31ff 	mov.w	r1, #4294967295
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fa fc35 	bl	8006d38 <osMutexWait>
			fm25v02_read(2*METER_ID_LOW_REG+1, &meter_temp); // вычитываем значение регистра номера счетчика и записываем его в переменную буфера.
 800c4ce:	4946      	ldr	r1, [pc, #280]	; (800c5e8 <ThreadMeterTask+0x174>)
 800c4d0:	f242 106d 	movw	r0, #8557	; 0x216d
 800c4d4:	f009 f98a 	bl	80157ec <fm25v02_read>

			osMutexRelease(Fm25v02MutexHandle);
 800c4d8:	4b41      	ldr	r3, [pc, #260]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fa fc79 	bl	8006dd4 <osMutexRelease>

			if(meter_temp != meter_id)
 800c4e2:	4b41      	ldr	r3, [pc, #260]	; (800c5e8 <ThreadMeterTask+0x174>)
 800c4e4:	781a      	ldrb	r2, [r3, #0]
 800c4e6:	4b41      	ldr	r3, [pc, #260]	; (800c5ec <ThreadMeterTask+0x178>)
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d019      	beq.n	800c522 <ThreadMeterTask+0xae>
			{
				meter_id = meter_temp;
 800c4ee:	4b3e      	ldr	r3, [pc, #248]	; (800c5e8 <ThreadMeterTask+0x174>)
 800c4f0:	781a      	ldrb	r2, [r3, #0]
 800c4f2:	4b3e      	ldr	r3, [pc, #248]	; (800c5ec <ThreadMeterTask+0x178>)
 800c4f4:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c4f6:	4b3a      	ldr	r3, [pc, #232]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f04f 31ff 	mov.w	r1, #4294967295
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fa fc1a 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 800c504:	2100      	movs	r1, #0
 800c506:	f242 003c 	movw	r0, #8252	; 0x203c
 800c50a:	f009 f9a9 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_ERROR_REG+1, 0x01);
 800c50e:	2101      	movs	r1, #1
 800c510:	f242 003d 	movw	r0, #8253	; 0x203d
 800c514:	f009 f9a4 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800c518:	4b31      	ldr	r3, [pc, #196]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fa fc59 	bl	8006dd4 <osMutexRelease>

			}

			ce303_voltage(meter_temp); // читаем напряжение
 800c522:	4b31      	ldr	r3, [pc, #196]	; (800c5e8 <ThreadMeterTask+0x174>)
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	4618      	mov	r0, r3
 800c528:	f002 fad2 	bl	800ead0 <ce303_voltage>
			ce303_current(meter_temp); // читаем ток
 800c52c:	4b2e      	ldr	r3, [pc, #184]	; (800c5e8 <ThreadMeterTask+0x174>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	4618      	mov	r0, r3
 800c532:	f003 fd19 	bl	800ff68 <ce303_current>
			ce303_power(meter_temp); // читаем мощность
 800c536:	4b2c      	ldr	r3, [pc, #176]	; (800c5e8 <ThreadMeterTask+0x174>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f004 ff5e 	bl	80113fc <ce303_power>
			ce303_tarif(meter_temp); // читаем тарифы
 800c540:	4b29      	ldr	r3, [pc, #164]	; (800c5e8 <ThreadMeterTask+0x174>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	4618      	mov	r0, r3
 800c546:	f006 f9a5 	bl	8012894 <ce303_tarif>

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c54a:	4b25      	ldr	r3, [pc, #148]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f04f 31ff 	mov.w	r1, #4294967295
 800c552:	4618      	mov	r0, r3
 800c554:	f7fa fbf0 	bl	8006d38 <osMutexWait>
			fm25v02_read(2*METER_ID_LOW_REG+1, &meter_temp);
 800c558:	4923      	ldr	r1, [pc, #140]	; (800c5e8 <ThreadMeterTask+0x174>)
 800c55a:	f242 106d 	movw	r0, #8557	; 0x216d
 800c55e:	f009 f945 	bl	80157ec <fm25v02_read>
			osMutexRelease(Fm25v02MutexHandle);
 800c562:	4b1f      	ldr	r3, [pc, #124]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4618      	mov	r0, r3
 800c568:	f7fa fc34 	bl	8006dd4 <osMutexRelease>

			if(meter_temp == meter_id)
 800c56c:	4b1e      	ldr	r3, [pc, #120]	; (800c5e8 <ThreadMeterTask+0x174>)
 800c56e:	781a      	ldrb	r2, [r3, #0]
 800c570:	4b1e      	ldr	r3, [pc, #120]	; (800c5ec <ThreadMeterTask+0x178>)
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	429a      	cmp	r2, r3
 800c576:	d116      	bne.n	800c5a6 <ThreadMeterTask+0x132>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c578:	4b19      	ldr	r3, [pc, #100]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f04f 31ff 	mov.w	r1, #4294967295
 800c580:	4618      	mov	r0, r3
 800c582:	f7fa fbd9 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 800c586:	2100      	movs	r1, #0
 800c588:	f242 003c 	movw	r0, #8252	; 0x203c
 800c58c:	f009 f968 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_ERROR_REG+1, 0x00);
 800c590:	2100      	movs	r1, #0
 800c592:	f242 003d 	movw	r0, #8253	; 0x203d
 800c596:	f009 f963 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800c59a:	4b11      	ldr	r3, [pc, #68]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fa fc18 	bl	8006dd4 <osMutexRelease>
 800c5a4:	e015      	b.n	800c5d2 <ThreadMeterTask+0x15e>
			}
			else
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c5a6:	4b0e      	ldr	r3, [pc, #56]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f04f 31ff 	mov.w	r1, #4294967295
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fa fbc2 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	f242 003c 	movw	r0, #8252	; 0x203c
 800c5ba:	f009 f951 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_ERROR_REG+1, 0x01);
 800c5be:	2101      	movs	r1, #1
 800c5c0:	f242 003d 	movw	r0, #8253	; 0x203d
 800c5c4:	f009 f94c 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800c5c8:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <ThreadMeterTask+0x16c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fa fc01 	bl	8006dd4 <osMutexRelease>
			}

		}


		osDelay(2000);
 800c5d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c5d6:	f7fa face 	bl	8006b76 <osDelay>
		if(control_registers.meter_polling_reg == 1)
 800c5da:	e76c      	b.n	800c4b6 <ThreadMeterTask+0x42>
 800c5dc:	20009a50 	.word	0x20009a50
 800c5e0:	20009a6c 	.word	0x20009a6c
 800c5e4:	2000a1cc 	.word	0x2000a1cc
 800c5e8:	20009ea9 	.word	0x20009ea9
 800c5ec:	20009ea8 	.word	0x20009ea8

0800c5f0 <ThreadModbusPacketTask>:
uint16_t modbus_address;



void ThreadModbusPacketTask(void const * argument)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
	uint8_t temp_h1;
	uint8_t temp_l1;

	osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800c5f8:	4b8b      	ldr	r3, [pc, #556]	; (800c828 <ThreadModbusPacketTask+0x238>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f04f 31ff 	mov.w	r1, #4294967295
 800c600:	4618      	mov	r0, r3
 800c602:	f7fa fc5d 	bl	8006ec0 <osSemaphoreWait>



	for(;;)
	{
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800c606:	4b88      	ldr	r3, [pc, #544]	; (800c828 <ThreadModbusPacketTask+0x238>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f04f 31ff 	mov.w	r1, #4294967295
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fa fc56 	bl	8006ec0 <osSemaphoreWait>

		switch(modbus_buffer[modbus_packet_number1][1]) // проверяем тип поступившей команды MODBUS и формируем соответствующий ответ
 800c614:	4b85      	ldr	r3, [pc, #532]	; (800c82c <ThreadModbusPacketTask+0x23c>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	4a85      	ldr	r2, [pc, #532]	; (800c830 <ThreadModbusPacketTask+0x240>)
 800c61a:	021b      	lsls	r3, r3, #8
 800c61c:	4413      	add	r3, r2
 800c61e:	3301      	adds	r3, #1
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	2b03      	cmp	r3, #3
 800c624:	d003      	beq.n	800c62e <ThreadModbusPacketTask+0x3e>
 800c626:	2b10      	cmp	r3, #16
 800c628:	f000 80b3 	beq.w	800c792 <ThreadModbusPacketTask+0x1a2>
 800c62c:	e22a      	b.n	800ca84 <ThreadModbusPacketTask+0x494>
		{
			case(0x03): // чтение регистра

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для чтения
 800c62e:	4b7f      	ldr	r3, [pc, #508]	; (800c82c <ThreadModbusPacketTask+0x23c>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	4a7f      	ldr	r2, [pc, #508]	; (800c830 <ThreadModbusPacketTask+0x240>)
 800c634:	021b      	lsls	r3, r3, #8
 800c636:	4413      	add	r3, r2
 800c638:	3302      	adds	r3, #2
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	021b      	lsls	r3, r3, #8
 800c63e:	b21a      	sxth	r2, r3
 800c640:	4b7a      	ldr	r3, [pc, #488]	; (800c82c <ThreadModbusPacketTask+0x23c>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	497a      	ldr	r1, [pc, #488]	; (800c830 <ThreadModbusPacketTask+0x240>)
 800c646:	021b      	lsls	r3, r3, #8
 800c648:	440b      	add	r3, r1
 800c64a:	3303      	adds	r3, #3
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	b21b      	sxth	r3, r3
 800c650:	4313      	orrs	r3, r2
 800c652:	b21b      	sxth	r3, r3
 800c654:	b29a      	uxth	r2, r3
 800c656:	4b77      	ldr	r3, [pc, #476]	; (800c834 <ThreadModbusPacketTask+0x244>)
 800c658:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800c65a:	4b74      	ldr	r3, [pc, #464]	; (800c82c <ThreadModbusPacketTask+0x23c>)
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	4a74      	ldr	r2, [pc, #464]	; (800c830 <ThreadModbusPacketTask+0x240>)
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	4413      	add	r3, r2
 800c664:	3304      	adds	r3, #4
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	021b      	lsls	r3, r3, #8
 800c66a:	b21a      	sxth	r2, r3
 800c66c:	4b6f      	ldr	r3, [pc, #444]	; (800c82c <ThreadModbusPacketTask+0x23c>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	496f      	ldr	r1, [pc, #444]	; (800c830 <ThreadModbusPacketTask+0x240>)
 800c672:	021b      	lsls	r3, r3, #8
 800c674:	440b      	add	r3, r1
 800c676:	3305      	adds	r3, #5
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	b21b      	sxth	r3, r3
 800c67c:	4313      	orrs	r3, r2
 800c67e:	b21b      	sxth	r3, r3
 800c680:	b29a      	uxth	r2, r3
 800c682:	4b6d      	ldr	r3, [pc, #436]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c684:	801a      	strh	r2, [r3, #0]

				// обработка пакета чтения 16-битного регистра modbus

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c686:	4b6d      	ldr	r3, [pc, #436]	; (800c83c <ThreadModbusPacketTask+0x24c>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f04f 31ff 	mov.w	r1, #4294967295
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fa fb52 	bl	8006d38 <osMutexWait>
				fm25v02_fast_read( 2*modbus_address , &buf_out[0] , 2*modbus_size); // читаем из памяти необходимое количество регистров
 800c694:	4b67      	ldr	r3, [pc, #412]	; (800c834 <ThreadModbusPacketTask+0x244>)
 800c696:	881b      	ldrh	r3, [r3, #0]
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	b298      	uxth	r0, r3
 800c69c:	4b66      	ldr	r3, [pc, #408]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c69e:	881b      	ldrh	r3, [r3, #0]
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	4966      	ldr	r1, [pc, #408]	; (800c840 <ThreadModbusPacketTask+0x250>)
 800c6a8:	f009 f94a 	bl	8015940 <fm25v02_fast_read>
				osMutexRelease(Fm25v02MutexHandle);
 800c6ac:	4b63      	ldr	r3, [pc, #396]	; (800c83c <ThreadModbusPacketTask+0x24c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fa fb8f 	bl	8006dd4 <osMutexRelease>

				buf_out1[0] = 0x01;
 800c6b6:	4b63      	ldr	r3, [pc, #396]	; (800c844 <ThreadModbusPacketTask+0x254>)
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	701a      	strb	r2, [r3, #0]
				buf_out1[1] = 0x03;
 800c6bc:	4b61      	ldr	r3, [pc, #388]	; (800c844 <ThreadModbusPacketTask+0x254>)
 800c6be:	2203      	movs	r2, #3
 800c6c0:	705a      	strb	r2, [r3, #1]
				buf_out1[2] = 2*modbus_size;
 800c6c2:	4b5d      	ldr	r3, [pc, #372]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	4b5d      	ldr	r3, [pc, #372]	; (800c844 <ThreadModbusPacketTask+0x254>)
 800c6ce:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<modbus_size; i++)
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	73fb      	strb	r3, [r7, #15]
 800c6d4:	e015      	b.n	800c702 <ThreadModbusPacketTask+0x112>
				{
					buf_out1[2*i+3] = buf_out[2*i];
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
 800c6d8:	005a      	lsls	r2, r3, #1
 800c6da:	7bfb      	ldrb	r3, [r7, #15]
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	3303      	adds	r3, #3
 800c6e0:	4957      	ldr	r1, [pc, #348]	; (800c840 <ThreadModbusPacketTask+0x250>)
 800c6e2:	5c89      	ldrb	r1, [r1, r2]
 800c6e4:	4a57      	ldr	r2, [pc, #348]	; (800c844 <ThreadModbusPacketTask+0x254>)
 800c6e6:	54d1      	strb	r1, [r2, r3]
					buf_out1[2*i+4] = buf_out[2*i+1];
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	1c5a      	adds	r2, r3, #1
 800c6ee:	7bfb      	ldrb	r3, [r7, #15]
 800c6f0:	3302      	adds	r3, #2
 800c6f2:	005b      	lsls	r3, r3, #1
 800c6f4:	4952      	ldr	r1, [pc, #328]	; (800c840 <ThreadModbusPacketTask+0x250>)
 800c6f6:	5c89      	ldrb	r1, [r1, r2]
 800c6f8:	4a52      	ldr	r2, [pc, #328]	; (800c844 <ThreadModbusPacketTask+0x254>)
 800c6fa:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0; i<modbus_size; i++)
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	3301      	adds	r3, #1
 800c700:	73fb      	strb	r3, [r7, #15]
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	b29a      	uxth	r2, r3
 800c706:	4b4c      	ldr	r3, [pc, #304]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d3e3      	bcc.n	800c6d6 <ThreadModbusPacketTask+0xe6>
				}
				crc_temp = CRC16(&buf_out1[0], 3+2*modbus_size);
 800c70e:	4b4a      	ldr	r3, [pc, #296]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c710:	881b      	ldrh	r3, [r3, #0]
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	3303      	adds	r3, #3
 800c716:	4619      	mov	r1, r3
 800c718:	484a      	ldr	r0, [pc, #296]	; (800c844 <ThreadModbusPacketTask+0x254>)
 800c71a:	f00c fe53 	bl	80193c4 <CRC16>
 800c71e:	4603      	mov	r3, r0
 800c720:	4a49      	ldr	r2, [pc, #292]	; (800c848 <ThreadModbusPacketTask+0x258>)
 800c722:	6013      	str	r3, [r2, #0]
				buf_out1[2*modbus_size+3] = (uint8_t)(crc_temp&0x00FF);
 800c724:	4b48      	ldr	r3, [pc, #288]	; (800c848 <ThreadModbusPacketTask+0x258>)
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	4b43      	ldr	r3, [pc, #268]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c72a:	881b      	ldrh	r3, [r3, #0]
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	3303      	adds	r3, #3
 800c730:	b2d1      	uxtb	r1, r2
 800c732:	4a44      	ldr	r2, [pc, #272]	; (800c844 <ThreadModbusPacketTask+0x254>)
 800c734:	54d1      	strb	r1, [r2, r3]
				buf_out1[2*modbus_size+4] = (uint8_t)((crc_temp>>8)&0x00FF);
 800c736:	4b44      	ldr	r3, [pc, #272]	; (800c848 <ThreadModbusPacketTask+0x258>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	0a1a      	lsrs	r2, r3, #8
 800c73c:	4b3e      	ldr	r3, [pc, #248]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	3302      	adds	r3, #2
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	b2d1      	uxtb	r1, r2
 800c746:	4a3f      	ldr	r2, [pc, #252]	; (800c844 <ThreadModbusPacketTask+0x254>)
 800c748:	54d1      	strb	r1, [r2, r3]

				osMutexWait(UartMutexHandle, osWaitForever);
 800c74a:	4b40      	ldr	r3, [pc, #256]	; (800c84c <ThreadModbusPacketTask+0x25c>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f04f 31ff 	mov.w	r1, #4294967295
 800c752:	4618      	mov	r0, r3
 800c754:	f7fa faf0 	bl	8006d38 <osMutexWait>
				if( AT_QISEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
 800c758:	4b37      	ldr	r3, [pc, #220]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c75a:	881b      	ldrh	r3, [r3, #0]
 800c75c:	005b      	lsls	r3, r3, #1
 800c75e:	b29b      	uxth	r3, r3
 800c760:	3305      	adds	r3, #5
 800c762:	b29b      	uxth	r3, r3
 800c764:	4619      	mov	r1, r3
 800c766:	4837      	ldr	r0, [pc, #220]	; (800c844 <ThreadModbusPacketTask+0x254>)
 800c768:	f00a fa72 	bl	8016c50 <AT_QISEND>
				{
					//LED7_ON();
				}
				osMutexRelease(UartMutexHandle);
 800c76c:	4b37      	ldr	r3, [pc, #220]	; (800c84c <ThreadModbusPacketTask+0x25c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4618      	mov	r0, r3
 800c772:	f7fa fb2f 	bl	8006dd4 <osMutexRelease>

				if( modbus_address == VERSION_REG ) // если запрашивается адрес версии прошивки обновляем таймер перезагрузки
 800c776:	4b2f      	ldr	r3, [pc, #188]	; (800c834 <ThreadModbusPacketTask+0x244>)
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c77e:	f040 817e 	bne.w	800ca7e <ThreadModbusPacketTask+0x48e>
				{
					//osTimerStop(Ring_Center_TimerHandle);
					osTimerStart(Ring_Center_TimerHandle, 60000);
 800c782:	4b33      	ldr	r3, [pc, #204]	; (800c850 <ThreadModbusPacketTask+0x260>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f64e 2160 	movw	r1, #60000	; 0xea60
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fa fa3c 	bl	8006c08 <osTimerStart>
				}


			break;
 800c790:	e175      	b.n	800ca7e <ThreadModbusPacketTask+0x48e>

			case(0x10): // запись нескольких регистров

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для записи
 800c792:	4b26      	ldr	r3, [pc, #152]	; (800c82c <ThreadModbusPacketTask+0x23c>)
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	4a26      	ldr	r2, [pc, #152]	; (800c830 <ThreadModbusPacketTask+0x240>)
 800c798:	021b      	lsls	r3, r3, #8
 800c79a:	4413      	add	r3, r2
 800c79c:	3302      	adds	r3, #2
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	021b      	lsls	r3, r3, #8
 800c7a2:	b21a      	sxth	r2, r3
 800c7a4:	4b21      	ldr	r3, [pc, #132]	; (800c82c <ThreadModbusPacketTask+0x23c>)
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	4921      	ldr	r1, [pc, #132]	; (800c830 <ThreadModbusPacketTask+0x240>)
 800c7aa:	021b      	lsls	r3, r3, #8
 800c7ac:	440b      	add	r3, r1
 800c7ae:	3303      	adds	r3, #3
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	b21b      	sxth	r3, r3
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	b21b      	sxth	r3, r3
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	4b1e      	ldr	r3, [pc, #120]	; (800c834 <ThreadModbusPacketTask+0x244>)
 800c7bc:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800c7be:	4b1b      	ldr	r3, [pc, #108]	; (800c82c <ThreadModbusPacketTask+0x23c>)
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	4a1b      	ldr	r2, [pc, #108]	; (800c830 <ThreadModbusPacketTask+0x240>)
 800c7c4:	021b      	lsls	r3, r3, #8
 800c7c6:	4413      	add	r3, r2
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	021b      	lsls	r3, r3, #8
 800c7ce:	b21a      	sxth	r2, r3
 800c7d0:	4b16      	ldr	r3, [pc, #88]	; (800c82c <ThreadModbusPacketTask+0x23c>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	4916      	ldr	r1, [pc, #88]	; (800c830 <ThreadModbusPacketTask+0x240>)
 800c7d6:	021b      	lsls	r3, r3, #8
 800c7d8:	440b      	add	r3, r1
 800c7da:	3305      	adds	r3, #5
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	b21b      	sxth	r3, r3
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	b21b      	sxth	r3, r3
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	4b14      	ldr	r3, [pc, #80]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c7e8:	801a      	strh	r2, [r3, #0]

				if( !( (modbus_address>=0x1000) && (modbus_address<=0x108F) ) && !( (modbus_address<0x1000) && (modbus_address+modbus_size>0x1000) ) ) // модбас адресс не должен находиться в области статусных регистров, а также запись не должна затрагивать статусные регистры
 800c7ea:	4b12      	ldr	r3, [pc, #72]	; (800c834 <ThreadModbusPacketTask+0x244>)
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7f2:	d306      	bcc.n	800c802 <ThreadModbusPacketTask+0x212>
 800c7f4:	4b0f      	ldr	r3, [pc, #60]	; (800c834 <ThreadModbusPacketTask+0x244>)
 800c7f6:	881b      	ldrh	r3, [r3, #0]
 800c7f8:	f241 028f 	movw	r2, #4239	; 0x108f
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	f240 8140 	bls.w	800ca82 <ThreadModbusPacketTask+0x492>
 800c802:	4b0c      	ldr	r3, [pc, #48]	; (800c834 <ThreadModbusPacketTask+0x244>)
 800c804:	881b      	ldrh	r3, [r3, #0]
 800c806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c80a:	d209      	bcs.n	800c820 <ThreadModbusPacketTask+0x230>
 800c80c:	4b09      	ldr	r3, [pc, #36]	; (800c834 <ThreadModbusPacketTask+0x244>)
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	461a      	mov	r2, r3
 800c812:	4b09      	ldr	r3, [pc, #36]	; (800c838 <ThreadModbusPacketTask+0x248>)
 800c814:	881b      	ldrh	r3, [r3, #0]
 800c816:	4413      	add	r3, r2
 800c818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c81c:	f300 8131 	bgt.w	800ca82 <ThreadModbusPacketTask+0x492>
				{

					// обработка пакета записи 16-битного регистра modbus

					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 800c820:	2300      	movs	r3, #0
 800c822:	73bb      	strb	r3, [r7, #14]
 800c824:	e053      	b.n	800c8ce <ThreadModbusPacketTask+0x2de>
 800c826:	bf00      	nop
 800c828:	20009a28 	.word	0x20009a28
 800c82c:	20007fef 	.word	0x20007fef
 800c830:	20008298 	.word	0x20008298
 800c834:	2000a0ac 	.word	0x2000a0ac
 800c838:	2000a0ae 	.word	0x2000a0ae
 800c83c:	20009a6c 	.word	0x20009a6c
 800c840:	20009fac 	.word	0x20009fac
 800c844:	20009eac 	.word	0x20009eac
 800c848:	2000a0bc 	.word	0x2000a0bc
 800c84c:	200096a0 	.word	0x200096a0
 800c850:	200096a4 	.word	0x200096a4
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c854:	4b8d      	ldr	r3, [pc, #564]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f04f 31ff 	mov.w	r1, #4294967295
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fa fa6b 	bl	8006d38 <osMutexWait>
						fm25v02_fast_write( (2*modbus_address+2*a), &modbus_buffer[modbus_packet_number1][7+a*2], 1 );
 800c862:	4b8b      	ldr	r3, [pc, #556]	; (800ca90 <ThreadModbusPacketTask+0x4a0>)
 800c864:	881b      	ldrh	r3, [r3, #0]
 800c866:	461a      	mov	r2, r3
 800c868:	7bbb      	ldrb	r3, [r7, #14]
 800c86a:	4413      	add	r3, r2
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	005b      	lsls	r3, r3, #1
 800c870:	b298      	uxth	r0, r3
 800c872:	4b88      	ldr	r3, [pc, #544]	; (800ca94 <ThreadModbusPacketTask+0x4a4>)
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	7bbb      	ldrb	r3, [r7, #14]
 800c87a:	005b      	lsls	r3, r3, #1
 800c87c:	3307      	adds	r3, #7
 800c87e:	0212      	lsls	r2, r2, #8
 800c880:	4413      	add	r3, r2
 800c882:	4a85      	ldr	r2, [pc, #532]	; (800ca98 <ThreadModbusPacketTask+0x4a8>)
 800c884:	4413      	add	r3, r2
 800c886:	2201      	movs	r2, #1
 800c888:	4619      	mov	r1, r3
 800c88a:	f009 f835 	bl	80158f8 <fm25v02_fast_write>
						fm25v02_fast_write( (2*modbus_address+2*a+1), &modbus_buffer[modbus_packet_number1][8+a*2], 1 );
 800c88e:	4b80      	ldr	r3, [pc, #512]	; (800ca90 <ThreadModbusPacketTask+0x4a0>)
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	7bbb      	ldrb	r3, [r7, #14]
 800c896:	4413      	add	r3, r2
 800c898:	b29b      	uxth	r3, r3
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3301      	adds	r3, #1
 800c8a0:	b298      	uxth	r0, r3
 800c8a2:	4b7c      	ldr	r3, [pc, #496]	; (800ca94 <ThreadModbusPacketTask+0x4a4>)
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	005b      	lsls	r3, r3, #1
 800c8ae:	0212      	lsls	r2, r2, #8
 800c8b0:	4413      	add	r3, r2
 800c8b2:	4a79      	ldr	r2, [pc, #484]	; (800ca98 <ThreadModbusPacketTask+0x4a8>)
 800c8b4:	4413      	add	r3, r2
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	f009 f81d 	bl	80158f8 <fm25v02_fast_write>
						osMutexRelease(Fm25v02MutexHandle);
 800c8be:	4b73      	ldr	r3, [pc, #460]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fa fa86 	bl	8006dd4 <osMutexRelease>
					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 800c8c8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	73bb      	strb	r3, [r7, #14]
 800c8ce:	4b71      	ldr	r3, [pc, #452]	; (800ca94 <ThreadModbusPacketTask+0x4a4>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	4a71      	ldr	r2, [pc, #452]	; (800ca98 <ThreadModbusPacketTask+0x4a8>)
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	4413      	add	r3, r2
 800c8d8:	3306      	adds	r3, #6
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	085b      	lsrs	r3, r3, #1
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	7bba      	ldrb	r2, [r7, #14]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d3b6      	bcc.n	800c854 <ThreadModbusPacketTask+0x264>
					}

					buf_out1[0] = 0x01;
 800c8e6:	4b6d      	ldr	r3, [pc, #436]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	701a      	strb	r2, [r3, #0]
					buf_out1[1] = 0x10;
 800c8ec:	4b6b      	ldr	r3, [pc, #428]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c8ee:	2210      	movs	r2, #16
 800c8f0:	705a      	strb	r2, [r3, #1]
					buf_out1[2] = modbus_buffer[modbus_packet_number1][2];
 800c8f2:	4b68      	ldr	r3, [pc, #416]	; (800ca94 <ThreadModbusPacketTask+0x4a4>)
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	4a68      	ldr	r2, [pc, #416]	; (800ca98 <ThreadModbusPacketTask+0x4a8>)
 800c8f8:	021b      	lsls	r3, r3, #8
 800c8fa:	4413      	add	r3, r2
 800c8fc:	3302      	adds	r3, #2
 800c8fe:	781a      	ldrb	r2, [r3, #0]
 800c900:	4b66      	ldr	r3, [pc, #408]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c902:	709a      	strb	r2, [r3, #2]
					buf_out1[3] = modbus_buffer[modbus_packet_number1][3];
 800c904:	4b63      	ldr	r3, [pc, #396]	; (800ca94 <ThreadModbusPacketTask+0x4a4>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	4a63      	ldr	r2, [pc, #396]	; (800ca98 <ThreadModbusPacketTask+0x4a8>)
 800c90a:	021b      	lsls	r3, r3, #8
 800c90c:	4413      	add	r3, r2
 800c90e:	3303      	adds	r3, #3
 800c910:	781a      	ldrb	r2, [r3, #0]
 800c912:	4b62      	ldr	r3, [pc, #392]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c914:	70da      	strb	r2, [r3, #3]
					buf_out1[4] = modbus_buffer[modbus_packet_number1][4];
 800c916:	4b5f      	ldr	r3, [pc, #380]	; (800ca94 <ThreadModbusPacketTask+0x4a4>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	4a5f      	ldr	r2, [pc, #380]	; (800ca98 <ThreadModbusPacketTask+0x4a8>)
 800c91c:	021b      	lsls	r3, r3, #8
 800c91e:	4413      	add	r3, r2
 800c920:	3304      	adds	r3, #4
 800c922:	781a      	ldrb	r2, [r3, #0]
 800c924:	4b5d      	ldr	r3, [pc, #372]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c926:	711a      	strb	r2, [r3, #4]
					buf_out1[5] = modbus_buffer[modbus_packet_number1][5];
 800c928:	4b5a      	ldr	r3, [pc, #360]	; (800ca94 <ThreadModbusPacketTask+0x4a4>)
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	4a5a      	ldr	r2, [pc, #360]	; (800ca98 <ThreadModbusPacketTask+0x4a8>)
 800c92e:	021b      	lsls	r3, r3, #8
 800c930:	4413      	add	r3, r2
 800c932:	3305      	adds	r3, #5
 800c934:	781a      	ldrb	r2, [r3, #0]
 800c936:	4b59      	ldr	r3, [pc, #356]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c938:	715a      	strb	r2, [r3, #5]

					crc_temp = CRC16(&buf_out1[0], 6);
 800c93a:	2106      	movs	r1, #6
 800c93c:	4857      	ldr	r0, [pc, #348]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c93e:	f00c fd41 	bl	80193c4 <CRC16>
 800c942:	4603      	mov	r3, r0
 800c944:	4a56      	ldr	r2, [pc, #344]	; (800caa0 <ThreadModbusPacketTask+0x4b0>)
 800c946:	6013      	str	r3, [r2, #0]

					buf_out1[6] = (uint8_t)(crc_temp&0x00FF);
 800c948:	4b55      	ldr	r3, [pc, #340]	; (800caa0 <ThreadModbusPacketTask+0x4b0>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	4b53      	ldr	r3, [pc, #332]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c950:	719a      	strb	r2, [r3, #6]
					buf_out1[7] = (uint8_t)((crc_temp>>8)&0x00FF);
 800c952:	4b53      	ldr	r3, [pc, #332]	; (800caa0 <ThreadModbusPacketTask+0x4b0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	0a1b      	lsrs	r3, r3, #8
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	4b50      	ldr	r3, [pc, #320]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c95c:	71da      	strb	r2, [r3, #7]

					osMutexWait(UartMutexHandle, osWaitForever);
 800c95e:	4b51      	ldr	r3, [pc, #324]	; (800caa4 <ThreadModbusPacketTask+0x4b4>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f04f 31ff 	mov.w	r1, #4294967295
 800c966:	4618      	mov	r0, r3
 800c968:	f7fa f9e6 	bl	8006d38 <osMutexWait>
					if( AT_QISEND(&buf_out1[0], 8) != AT_OK )
 800c96c:	2108      	movs	r1, #8
 800c96e:	484b      	ldr	r0, [pc, #300]	; (800ca9c <ThreadModbusPacketTask+0x4ac>)
 800c970:	f00a f96e 	bl	8016c50 <AT_QISEND>
					{

					}
					osMutexRelease(UartMutexHandle);
 800c974:	4b4b      	ldr	r3, [pc, #300]	; (800caa4 <ThreadModbusPacketTask+0x4b4>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fa fa2b 	bl	8006dd4 <osMutexRelease>

					if( modbus_address == CONTROL_LOOP_REG)
 800c97e:	4b44      	ldr	r3, [pc, #272]	; (800ca90 <ThreadModbusPacketTask+0x4a0>)
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	f241 0291 	movw	r2, #4241	; 0x1091
 800c986:	4293      	cmp	r3, r2
 800c988:	d115      	bne.n	800c9b6 <ThreadModbusPacketTask+0x3c6>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c98a:	4b40      	ldr	r3, [pc, #256]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f04f 31ff 	mov.w	r1, #4294967295
 800c992:	4618      	mov	r0, r3
 800c994:	f7fa f9d0 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800c998:	2100      	movs	r1, #0
 800c99a:	f242 106e 	movw	r0, #8558	; 0x216e
 800c99e:	f008 ff5f 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800c9a2:	2101      	movs	r1, #1
 800c9a4:	f242 106f 	movw	r0, #8559	; 0x216f
 800c9a8:	f008 ff5a 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800c9ac:	4b37      	ldr	r3, [pc, #220]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fa fa0f 	bl	8006dd4 <osMutexRelease>
					}

					if( modbus_address == 0x2710)
 800c9b6:	4b36      	ldr	r3, [pc, #216]	; (800ca90 <ThreadModbusPacketTask+0x4a0>)
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	f242 7210 	movw	r2, #10000	; 0x2710
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d115      	bne.n	800c9ee <ThreadModbusPacketTask+0x3fe>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c9c2:	4b32      	ldr	r3, [pc, #200]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f04f 31ff 	mov.w	r1, #4294967295
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7fa f9b4 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	f242 106e 	movw	r0, #8558	; 0x216e
 800c9d6:	f008 ff43 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800c9da:	2101      	movs	r1, #1
 800c9dc:	f242 106f 	movw	r0, #8559	; 0x216f
 800c9e0:	f008 ff3e 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800c9e4:	4b29      	ldr	r3, [pc, #164]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fa f9f3 	bl	8006dd4 <osMutexRelease>
					}

					if( modbus_address == LIGHT_CONTROL_REG)
 800c9ee:	4b28      	ldr	r3, [pc, #160]	; (800ca90 <ThreadModbusPacketTask+0x4a0>)
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	f241 02c1 	movw	r2, #4289	; 0x10c1
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d124      	bne.n	800ca44 <ThreadModbusPacketTask+0x454>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c9fa:	4b24      	ldr	r3, [pc, #144]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f04f 31ff 	mov.w	r1, #4294967295
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fa f998 	bl	8006d38 <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h1);
 800ca08:	f107 030d 	add.w	r3, r7, #13
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	f242 1082 	movw	r0, #8578	; 0x2182
 800ca12:	f008 feeb 	bl	80157ec <fm25v02_read>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l1);
 800ca16:	f107 030c 	add.w	r3, r7, #12
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	f242 1083 	movw	r0, #8579	; 0x2183
 800ca20:	f008 fee4 	bl	80157ec <fm25v02_read>
						control_registers.light_control_reg = (((uint16_t)temp_h1)<<8)|temp_l1;
 800ca24:	7b7b      	ldrb	r3, [r7, #13]
 800ca26:	021b      	lsls	r3, r3, #8
 800ca28:	b21a      	sxth	r2, r3
 800ca2a:	7b3b      	ldrb	r3, [r7, #12]
 800ca2c:	b21b      	sxth	r3, r3
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	b21b      	sxth	r3, r3
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	4b1c      	ldr	r3, [pc, #112]	; (800caa8 <ThreadModbusPacketTask+0x4b8>)
 800ca36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
						osMutexRelease(Fm25v02MutexHandle);
 800ca3a:	4b14      	ldr	r3, [pc, #80]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fa f9c8 	bl	8006dd4 <osMutexRelease>

					}

					if( modbus_address == METER_ID_LOW_REG) // тест
 800ca44:	4b12      	ldr	r3, [pc, #72]	; (800ca90 <ThreadModbusPacketTask+0x4a0>)
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	f241 02b6 	movw	r2, #4278	; 0x10b6
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d118      	bne.n	800ca82 <ThreadModbusPacketTask+0x492>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ca50:	4b0e      	ldr	r3, [pc, #56]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f04f 31ff 	mov.w	r1, #4294967295
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fa f96d 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 800ca5e:	2100      	movs	r1, #0
 800ca60:	f242 003c 	movw	r0, #8252	; 0x203c
 800ca64:	f008 fefc 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*CE_303_ERROR_REG+1, 0x01);
 800ca68:	2101      	movs	r1, #1
 800ca6a:	f242 003d 	movw	r0, #8253	; 0x203d
 800ca6e:	f008 fef7 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800ca72:	4b06      	ldr	r3, [pc, #24]	; (800ca8c <ThreadModbusPacketTask+0x49c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fa f9ac 	bl	8006dd4 <osMutexRelease>
					}

				}


			break;
 800ca7c:	e001      	b.n	800ca82 <ThreadModbusPacketTask+0x492>
			break;
 800ca7e:	bf00      	nop
 800ca80:	e000      	b.n	800ca84 <ThreadModbusPacketTask+0x494>
			break;
 800ca82:	bf00      	nop
		}


		osDelay(1);
 800ca84:	2001      	movs	r0, #1
 800ca86:	f7fa f876 	bl	8006b76 <osDelay>
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800ca8a:	e5bc      	b.n	800c606 <ThreadModbusPacketTask+0x16>
 800ca8c:	20009a6c 	.word	0x20009a6c
 800ca90:	2000a0ac 	.word	0x2000a0ac
 800ca94:	20007fef 	.word	0x20007fef
 800ca98:	20008298 	.word	0x20008298
 800ca9c:	20009eac 	.word	0x20009eac
 800caa0:	2000a0bc 	.word	0x2000a0bc
 800caa4:	200096a0 	.word	0x200096a0
 800caa8:	2000a1cc 	.word	0x2000a1cc

0800caac <ThreadModbusTask>:
uint8_t modbus_packet_number = 0;
uint8_t modbus_packet_number1 = 0;


void ThreadModbusTask(void const * argument)
{
 800caac:	b590      	push	{r4, r7, lr}
 800caae:	b089      	sub	sp, #36	; 0x24
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6178      	str	r0, [r7, #20]
	uint16_t i=0;
 800cab4:	2300      	movs	r3, #0
 800cab6:	83fb      	strh	r3, [r7, #30]
	uint16_t i_max;


	for(;;)
	{
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800cab8:	4ba1      	ldr	r3, [pc, #644]	; (800cd40 <ThreadModbusTask+0x294>)
 800caba:	6819      	ldr	r1, [r3, #0]
 800cabc:	4ca1      	ldr	r4, [pc, #644]	; (800cd44 <ThreadModbusTask+0x298>)
 800cabe:	463b      	mov	r3, r7
 800cac0:	f04f 32ff 	mov.w	r2, #4294967295
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fa fae7 	bl	8007098 <osMessageGet>
 800caca:	463b      	mov	r3, r7
 800cacc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cad0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(ModbusEvent.status == osEventMessage) // если сообщение пришло
 800cad4:	4b9b      	ldr	r3, [pc, #620]	; (800cd44 <ThreadModbusTask+0x298>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b10      	cmp	r3, #16
 800cada:	f040 8226 	bne.w	800cf2a <ThreadModbusTask+0x47e>
		{

			switch(ModbusEvent.value.v) // проверяем полученное значение из очереди
 800cade:	4b99      	ldr	r3, [pc, #612]	; (800cd44 <ThreadModbusTask+0x298>)
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	3b01      	subs	r3, #1
 800cae4:	2b0f      	cmp	r3, #15
 800cae6:	f200 817f 	bhi.w	800cde8 <ThreadModbusTask+0x33c>
 800caea:	a201      	add	r2, pc, #4	; (adr r2, 800caf0 <ThreadModbusTask+0x44>)
 800caec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf0:	0800cb31 	.word	0x0800cb31
 800caf4:	0800cde9 	.word	0x0800cde9
 800caf8:	0800cbd9 	.word	0x0800cbd9
 800cafc:	0800cde9 	.word	0x0800cde9
 800cb00:	0800cde9 	.word	0x0800cde9
 800cb04:	0800cc85 	.word	0x0800cc85
 800cb08:	0800cde9 	.word	0x0800cde9
 800cb0c:	0800cde9 	.word	0x0800cde9
 800cb10:	0800cde9 	.word	0x0800cde9
 800cb14:	0800cde9 	.word	0x0800cde9
 800cb18:	0800cde9 	.word	0x0800cde9
 800cb1c:	0800cde9 	.word	0x0800cde9
 800cb20:	0800cde9 	.word	0x0800cde9
 800cb24:	0800cde9 	.word	0x0800cde9
 800cb28:	0800cde9 	.word	0x0800cde9
 800cb2c:	0800cd2f 	.word	0x0800cd2f
			{
				case(0x01):
					if(i==0)
 800cb30:	8bfb      	ldrh	r3, [r7, #30]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d110      	bne.n	800cb58 <ThreadModbusTask+0xac>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cb36:	4b83      	ldr	r3, [pc, #524]	; (800cd44 <ThreadModbusTask+0x298>)
 800cb38:	6859      	ldr	r1, [r3, #4]
 800cb3a:	4b83      	ldr	r3, [pc, #524]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	8bfb      	ldrh	r3, [r7, #30]
 800cb42:	b2c8      	uxtb	r0, r1
 800cb44:	4981      	ldr	r1, [pc, #516]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800cb46:	0212      	lsls	r2, r2, #8
 800cb48:	440a      	add	r2, r1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	701a      	strb	r2, [r3, #0]
						i++;
 800cb50:	8bfb      	ldrh	r3, [r7, #30]
 800cb52:	3301      	adds	r3, #1
 800cb54:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800cb56:	e18e      	b.n	800ce76 <ThreadModbusTask+0x3ca>
					else if(i==1)
 800cb58:	8bfb      	ldrh	r3, [r7, #30]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d104      	bne.n	800cb68 <ThreadModbusTask+0xbc>
						i = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	83bb      	strh	r3, [r7, #28]
				break;
 800cb66:	e186      	b.n	800ce76 <ThreadModbusTask+0x3ca>
					else if(i>1)
 800cb68:	8bfb      	ldrh	r3, [r7, #30]
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	f240 8183 	bls.w	800ce76 <ThreadModbusTask+0x3ca>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800cb70:	8bfb      	ldrh	r3, [r7, #30]
 800cb72:	2b06      	cmp	r3, #6
 800cb74:	d11f      	bne.n	800cbb6 <ThreadModbusTask+0x10a>
 800cb76:	4b74      	ldr	r3, [pc, #464]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	4a74      	ldr	r2, [pc, #464]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800cb7c:	021b      	lsls	r3, r3, #8
 800cb7e:	4413      	add	r3, r2
 800cb80:	3301      	adds	r3, #1
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	2b10      	cmp	r3, #16
 800cb86:	d116      	bne.n	800cbb6 <ThreadModbusTask+0x10a>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cb88:	4b6e      	ldr	r3, [pc, #440]	; (800cd44 <ThreadModbusTask+0x298>)
 800cb8a:	6859      	ldr	r1, [r3, #4]
 800cb8c:	4b6e      	ldr	r3, [pc, #440]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	461a      	mov	r2, r3
 800cb92:	8bfb      	ldrh	r3, [r7, #30]
 800cb94:	b2c8      	uxtb	r0, r1
 800cb96:	496d      	ldr	r1, [pc, #436]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800cb98:	0212      	lsls	r2, r2, #8
 800cb9a:	440a      	add	r2, r1
 800cb9c:	4413      	add	r3, r2
 800cb9e:	4602      	mov	r2, r0
 800cba0:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800cba2:	4b68      	ldr	r3, [pc, #416]	; (800cd44 <ThreadModbusTask+0x298>)
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	3309      	adds	r3, #9
 800cbac:	83bb      	strh	r3, [r7, #28]
							i++;
 800cbae:	8bfb      	ldrh	r3, [r7, #30]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	83fb      	strh	r3, [r7, #30]
				break;
 800cbb4:	e15f      	b.n	800ce76 <ThreadModbusTask+0x3ca>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cbb6:	4b63      	ldr	r3, [pc, #396]	; (800cd44 <ThreadModbusTask+0x298>)
 800cbb8:	6859      	ldr	r1, [r3, #4]
 800cbba:	4b63      	ldr	r3, [pc, #396]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	8bfb      	ldrh	r3, [r7, #30]
 800cbc2:	b2c8      	uxtb	r0, r1
 800cbc4:	4961      	ldr	r1, [pc, #388]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800cbc6:	0212      	lsls	r2, r2, #8
 800cbc8:	440a      	add	r2, r1
 800cbca:	4413      	add	r3, r2
 800cbcc:	4602      	mov	r2, r0
 800cbce:	701a      	strb	r2, [r3, #0]
							i++;
 800cbd0:	8bfb      	ldrh	r3, [r7, #30]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	83fb      	strh	r3, [r7, #30]
				break;
 800cbd6:	e14e      	b.n	800ce76 <ThreadModbusTask+0x3ca>

				case(0x03):
					if(i==0)
 800cbd8:	8bfb      	ldrh	r3, [r7, #30]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d104      	bne.n	800cbe8 <ThreadModbusTask+0x13c>
					{
						i = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800cbe6:	e148      	b.n	800ce7a <ThreadModbusTask+0x3ce>
					else if(i==1)
 800cbe8:	8bfb      	ldrh	r3, [r7, #30]
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d112      	bne.n	800cc14 <ThreadModbusTask+0x168>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cbee:	4b55      	ldr	r3, [pc, #340]	; (800cd44 <ThreadModbusTask+0x298>)
 800cbf0:	6859      	ldr	r1, [r3, #4]
 800cbf2:	4b55      	ldr	r3, [pc, #340]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	8bfb      	ldrh	r3, [r7, #30]
 800cbfa:	b2c8      	uxtb	r0, r1
 800cbfc:	4953      	ldr	r1, [pc, #332]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800cbfe:	0212      	lsls	r2, r2, #8
 800cc00:	440a      	add	r2, r1
 800cc02:	4413      	add	r3, r2
 800cc04:	4602      	mov	r2, r0
 800cc06:	701a      	strb	r2, [r3, #0]
						i++;
 800cc08:	8bfb      	ldrh	r3, [r7, #30]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800cc0e:	2308      	movs	r3, #8
 800cc10:	83bb      	strh	r3, [r7, #28]
				break;
 800cc12:	e132      	b.n	800ce7a <ThreadModbusTask+0x3ce>
					else if(i>1)
 800cc14:	8bfb      	ldrh	r3, [r7, #30]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	f240 812f 	bls.w	800ce7a <ThreadModbusTask+0x3ce>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800cc1c:	8bfb      	ldrh	r3, [r7, #30]
 800cc1e:	2b06      	cmp	r3, #6
 800cc20:	d11f      	bne.n	800cc62 <ThreadModbusTask+0x1b6>
 800cc22:	4b49      	ldr	r3, [pc, #292]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	4a49      	ldr	r2, [pc, #292]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800cc28:	021b      	lsls	r3, r3, #8
 800cc2a:	4413      	add	r3, r2
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	2b10      	cmp	r3, #16
 800cc32:	d116      	bne.n	800cc62 <ThreadModbusTask+0x1b6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cc34:	4b43      	ldr	r3, [pc, #268]	; (800cd44 <ThreadModbusTask+0x298>)
 800cc36:	6859      	ldr	r1, [r3, #4]
 800cc38:	4b43      	ldr	r3, [pc, #268]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	8bfb      	ldrh	r3, [r7, #30]
 800cc40:	b2c8      	uxtb	r0, r1
 800cc42:	4942      	ldr	r1, [pc, #264]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800cc44:	0212      	lsls	r2, r2, #8
 800cc46:	440a      	add	r2, r1
 800cc48:	4413      	add	r3, r2
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800cc4e:	4b3d      	ldr	r3, [pc, #244]	; (800cd44 <ThreadModbusTask+0x298>)
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	3309      	adds	r3, #9
 800cc58:	83bb      	strh	r3, [r7, #28]
							i++;
 800cc5a:	8bfb      	ldrh	r3, [r7, #30]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	83fb      	strh	r3, [r7, #30]
				break;
 800cc60:	e10b      	b.n	800ce7a <ThreadModbusTask+0x3ce>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cc62:	4b38      	ldr	r3, [pc, #224]	; (800cd44 <ThreadModbusTask+0x298>)
 800cc64:	6859      	ldr	r1, [r3, #4]
 800cc66:	4b38      	ldr	r3, [pc, #224]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	8bfb      	ldrh	r3, [r7, #30]
 800cc6e:	b2c8      	uxtb	r0, r1
 800cc70:	4936      	ldr	r1, [pc, #216]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800cc72:	0212      	lsls	r2, r2, #8
 800cc74:	440a      	add	r2, r1
 800cc76:	4413      	add	r3, r2
 800cc78:	4602      	mov	r2, r0
 800cc7a:	701a      	strb	r2, [r3, #0]
							i++;
 800cc7c:	8bfb      	ldrh	r3, [r7, #30]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	83fb      	strh	r3, [r7, #30]
				break;
 800cc82:	e0fa      	b.n	800ce7a <ThreadModbusTask+0x3ce>

				case(0x06):
					if(i==0)
 800cc84:	8bfb      	ldrh	r3, [r7, #30]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d104      	bne.n	800cc94 <ThreadModbusTask+0x1e8>
					{
						i = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	83bb      	strh	r3, [r7, #28]
 800cc92:	e014      	b.n	800ccbe <ThreadModbusTask+0x212>
					}
					else if(i==1)
 800cc94:	8bfb      	ldrh	r3, [r7, #30]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d111      	bne.n	800ccbe <ThreadModbusTask+0x212>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cc9a:	4b2a      	ldr	r3, [pc, #168]	; (800cd44 <ThreadModbusTask+0x298>)
 800cc9c:	6859      	ldr	r1, [r3, #4]
 800cc9e:	4b2a      	ldr	r3, [pc, #168]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	461a      	mov	r2, r3
 800cca4:	8bfb      	ldrh	r3, [r7, #30]
 800cca6:	b2c8      	uxtb	r0, r1
 800cca8:	4928      	ldr	r1, [pc, #160]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800ccaa:	0212      	lsls	r2, r2, #8
 800ccac:	440a      	add	r2, r1
 800ccae:	4413      	add	r3, r2
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	701a      	strb	r2, [r3, #0]
						i++;
 800ccb4:	8bfb      	ldrh	r3, [r7, #30]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800ccba:	2308      	movs	r3, #8
 800ccbc:	83bb      	strh	r3, [r7, #28]
					}
					if(i>1)
 800ccbe:	8bfb      	ldrh	r3, [r7, #30]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	f240 80dc 	bls.w	800ce7e <ThreadModbusTask+0x3d2>
					{
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800ccc6:	8bfb      	ldrh	r3, [r7, #30]
 800ccc8:	2b06      	cmp	r3, #6
 800ccca:	d11f      	bne.n	800cd0c <ThreadModbusTask+0x260>
 800cccc:	4b1e      	ldr	r3, [pc, #120]	; (800cd48 <ThreadModbusTask+0x29c>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	4a1e      	ldr	r2, [pc, #120]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800ccd2:	021b      	lsls	r3, r3, #8
 800ccd4:	4413      	add	r3, r2
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b10      	cmp	r3, #16
 800ccdc:	d116      	bne.n	800cd0c <ThreadModbusTask+0x260>
						{
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800ccde:	4b19      	ldr	r3, [pc, #100]	; (800cd44 <ThreadModbusTask+0x298>)
 800cce0:	6859      	ldr	r1, [r3, #4]
 800cce2:	4b19      	ldr	r3, [pc, #100]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	461a      	mov	r2, r3
 800cce8:	8bfb      	ldrh	r3, [r7, #30]
 800ccea:	b2c8      	uxtb	r0, r1
 800ccec:	4917      	ldr	r1, [pc, #92]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800ccee:	0212      	lsls	r2, r2, #8
 800ccf0:	440a      	add	r2, r1
 800ccf2:	4413      	add	r3, r2
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800ccf8:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <ThreadModbusTask+0x298>)
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	3309      	adds	r3, #9
 800cd02:	83bb      	strh	r3, [r7, #28]
							i++;
 800cd04:	8bfb      	ldrh	r3, [r7, #30]
 800cd06:	3301      	adds	r3, #1
 800cd08:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800cd0a:	e0b8      	b.n	800ce7e <ThreadModbusTask+0x3d2>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cd0c:	4b0d      	ldr	r3, [pc, #52]	; (800cd44 <ThreadModbusTask+0x298>)
 800cd0e:	6859      	ldr	r1, [r3, #4]
 800cd10:	4b0d      	ldr	r3, [pc, #52]	; (800cd48 <ThreadModbusTask+0x29c>)
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	461a      	mov	r2, r3
 800cd16:	8bfb      	ldrh	r3, [r7, #30]
 800cd18:	b2c8      	uxtb	r0, r1
 800cd1a:	490c      	ldr	r1, [pc, #48]	; (800cd4c <ThreadModbusTask+0x2a0>)
 800cd1c:	0212      	lsls	r2, r2, #8
 800cd1e:	440a      	add	r2, r1
 800cd20:	4413      	add	r3, r2
 800cd22:	4602      	mov	r2, r0
 800cd24:	701a      	strb	r2, [r3, #0]
							i++;
 800cd26:	8bfb      	ldrh	r3, [r7, #30]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	83fb      	strh	r3, [r7, #30]
				break;
 800cd2c:	e0a7      	b.n	800ce7e <ThreadModbusTask+0x3d2>

				case(0x10):
					if(i==0)
 800cd2e:	8bfb      	ldrh	r3, [r7, #30]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10d      	bne.n	800cd50 <ThreadModbusTask+0x2a4>
					{
						i = 0;
 800cd34:	2300      	movs	r3, #0
 800cd36:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800cd3c:	e0a1      	b.n	800ce82 <ThreadModbusTask+0x3d6>
 800cd3e:	bf00      	nop
 800cd40:	20008294 	.word	0x20008294
 800cd44:	2000a0b0 	.word	0x2000a0b0
 800cd48:	20007fee 	.word	0x20007fee
 800cd4c:	20008298 	.word	0x20008298
					else if(i==1)
 800cd50:	8bfb      	ldrh	r3, [r7, #30]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d110      	bne.n	800cd78 <ThreadModbusTask+0x2cc>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cd56:	4b77      	ldr	r3, [pc, #476]	; (800cf34 <ThreadModbusTask+0x488>)
 800cd58:	6859      	ldr	r1, [r3, #4]
 800cd5a:	4b77      	ldr	r3, [pc, #476]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	8bfb      	ldrh	r3, [r7, #30]
 800cd62:	b2c8      	uxtb	r0, r1
 800cd64:	4975      	ldr	r1, [pc, #468]	; (800cf3c <ThreadModbusTask+0x490>)
 800cd66:	0212      	lsls	r2, r2, #8
 800cd68:	440a      	add	r2, r1
 800cd6a:	4413      	add	r3, r2
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	701a      	strb	r2, [r3, #0]
						i++;
 800cd70:	8bfb      	ldrh	r3, [r7, #30]
 800cd72:	3301      	adds	r3, #1
 800cd74:	83fb      	strh	r3, [r7, #30]
				break;
 800cd76:	e084      	b.n	800ce82 <ThreadModbusTask+0x3d6>
					else if(i>1)
 800cd78:	8bfb      	ldrh	r3, [r7, #30]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	f240 8081 	bls.w	800ce82 <ThreadModbusTask+0x3d6>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800cd80:	8bfb      	ldrh	r3, [r7, #30]
 800cd82:	2b06      	cmp	r3, #6
 800cd84:	d11f      	bne.n	800cdc6 <ThreadModbusTask+0x31a>
 800cd86:	4b6c      	ldr	r3, [pc, #432]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	4a6c      	ldr	r2, [pc, #432]	; (800cf3c <ThreadModbusTask+0x490>)
 800cd8c:	021b      	lsls	r3, r3, #8
 800cd8e:	4413      	add	r3, r2
 800cd90:	3301      	adds	r3, #1
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2b10      	cmp	r3, #16
 800cd96:	d116      	bne.n	800cdc6 <ThreadModbusTask+0x31a>
								modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cd98:	4b66      	ldr	r3, [pc, #408]	; (800cf34 <ThreadModbusTask+0x488>)
 800cd9a:	6859      	ldr	r1, [r3, #4]
 800cd9c:	4b66      	ldr	r3, [pc, #408]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	461a      	mov	r2, r3
 800cda2:	8bfb      	ldrh	r3, [r7, #30]
 800cda4:	b2c8      	uxtb	r0, r1
 800cda6:	4965      	ldr	r1, [pc, #404]	; (800cf3c <ThreadModbusTask+0x490>)
 800cda8:	0212      	lsls	r2, r2, #8
 800cdaa:	440a      	add	r2, r1
 800cdac:	4413      	add	r3, r2
 800cdae:	4602      	mov	r2, r0
 800cdb0:	701a      	strb	r2, [r3, #0]
								i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800cdb2:	4b60      	ldr	r3, [pc, #384]	; (800cf34 <ThreadModbusTask+0x488>)
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	3309      	adds	r3, #9
 800cdbc:	83bb      	strh	r3, [r7, #28]
								i++;
 800cdbe:	8bfb      	ldrh	r3, [r7, #30]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	83fb      	strh	r3, [r7, #30]
				break;
 800cdc4:	e05d      	b.n	800ce82 <ThreadModbusTask+0x3d6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800cdc6:	4b5b      	ldr	r3, [pc, #364]	; (800cf34 <ThreadModbusTask+0x488>)
 800cdc8:	6859      	ldr	r1, [r3, #4]
 800cdca:	4b5b      	ldr	r3, [pc, #364]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	8bfb      	ldrh	r3, [r7, #30]
 800cdd2:	b2c8      	uxtb	r0, r1
 800cdd4:	4959      	ldr	r1, [pc, #356]	; (800cf3c <ThreadModbusTask+0x490>)
 800cdd6:	0212      	lsls	r2, r2, #8
 800cdd8:	440a      	add	r2, r1
 800cdda:	4413      	add	r3, r2
 800cddc:	4602      	mov	r2, r0
 800cdde:	701a      	strb	r2, [r3, #0]
							i++;
 800cde0:	8bfb      	ldrh	r3, [r7, #30]
 800cde2:	3301      	adds	r3, #1
 800cde4:	83fb      	strh	r3, [r7, #30]
				break;
 800cde6:	e04c      	b.n	800ce82 <ThreadModbusTask+0x3d6>

				default:
					if(i==0)
 800cde8:	8bfb      	ldrh	r3, [r7, #30]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d104      	bne.n	800cdf8 <ThreadModbusTask+0x34c>
					{
						i = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800cdf6:	e046      	b.n	800ce86 <ThreadModbusTask+0x3da>
					else if(i==1)
 800cdf8:	8bfb      	ldrh	r3, [r7, #30]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d104      	bne.n	800ce08 <ThreadModbusTask+0x35c>
						i = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	83bb      	strh	r3, [r7, #28]
				break;
 800ce06:	e03e      	b.n	800ce86 <ThreadModbusTask+0x3da>
					else if(i>1)
 800ce08:	8bfb      	ldrh	r3, [r7, #30]
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d93b      	bls.n	800ce86 <ThreadModbusTask+0x3da>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800ce0e:	8bfb      	ldrh	r3, [r7, #30]
 800ce10:	2b06      	cmp	r3, #6
 800ce12:	d11f      	bne.n	800ce54 <ThreadModbusTask+0x3a8>
 800ce14:	4b48      	ldr	r3, [pc, #288]	; (800cf38 <ThreadModbusTask+0x48c>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	4a48      	ldr	r2, [pc, #288]	; (800cf3c <ThreadModbusTask+0x490>)
 800ce1a:	021b      	lsls	r3, r3, #8
 800ce1c:	4413      	add	r3, r2
 800ce1e:	3301      	adds	r3, #1
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b10      	cmp	r3, #16
 800ce24:	d116      	bne.n	800ce54 <ThreadModbusTask+0x3a8>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800ce26:	4b43      	ldr	r3, [pc, #268]	; (800cf34 <ThreadModbusTask+0x488>)
 800ce28:	6859      	ldr	r1, [r3, #4]
 800ce2a:	4b43      	ldr	r3, [pc, #268]	; (800cf38 <ThreadModbusTask+0x48c>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	8bfb      	ldrh	r3, [r7, #30]
 800ce32:	b2c8      	uxtb	r0, r1
 800ce34:	4941      	ldr	r1, [pc, #260]	; (800cf3c <ThreadModbusTask+0x490>)
 800ce36:	0212      	lsls	r2, r2, #8
 800ce38:	440a      	add	r2, r1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800ce40:	4b3c      	ldr	r3, [pc, #240]	; (800cf34 <ThreadModbusTask+0x488>)
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	3309      	adds	r3, #9
 800ce4a:	83bb      	strh	r3, [r7, #28]
							i++;
 800ce4c:	8bfb      	ldrh	r3, [r7, #30]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	83fb      	strh	r3, [r7, #30]
				break;
 800ce52:	e018      	b.n	800ce86 <ThreadModbusTask+0x3da>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800ce54:	4b37      	ldr	r3, [pc, #220]	; (800cf34 <ThreadModbusTask+0x488>)
 800ce56:	6859      	ldr	r1, [r3, #4]
 800ce58:	4b37      	ldr	r3, [pc, #220]	; (800cf38 <ThreadModbusTask+0x48c>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	8bfb      	ldrh	r3, [r7, #30]
 800ce60:	b2c8      	uxtb	r0, r1
 800ce62:	4936      	ldr	r1, [pc, #216]	; (800cf3c <ThreadModbusTask+0x490>)
 800ce64:	0212      	lsls	r2, r2, #8
 800ce66:	440a      	add	r2, r1
 800ce68:	4413      	add	r3, r2
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	701a      	strb	r2, [r3, #0]
							i++;
 800ce6e:	8bfb      	ldrh	r3, [r7, #30]
 800ce70:	3301      	adds	r3, #1
 800ce72:	83fb      	strh	r3, [r7, #30]
				break;
 800ce74:	e007      	b.n	800ce86 <ThreadModbusTask+0x3da>
				break;
 800ce76:	bf00      	nop
 800ce78:	e006      	b.n	800ce88 <ThreadModbusTask+0x3dc>
				break;
 800ce7a:	bf00      	nop
 800ce7c:	e004      	b.n	800ce88 <ThreadModbusTask+0x3dc>
				break;
 800ce7e:	bf00      	nop
 800ce80:	e002      	b.n	800ce88 <ThreadModbusTask+0x3dc>
				break;
 800ce82:	bf00      	nop
 800ce84:	e000      	b.n	800ce88 <ThreadModbusTask+0x3dc>
				break;
 800ce86:	bf00      	nop
			}
			if( (i >= i_max) && (i != 0) && (i_max != 0) ) // если число принятых байт соответствует длине соответствующей команды
 800ce88:	8bfa      	ldrh	r2, [r7, #30]
 800ce8a:	8bbb      	ldrh	r3, [r7, #28]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d34c      	bcc.n	800cf2a <ThreadModbusTask+0x47e>
 800ce90:	8bfb      	ldrh	r3, [r7, #30]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d049      	beq.n	800cf2a <ThreadModbusTask+0x47e>
 800ce96:	8bbb      	ldrh	r3, [r7, #28]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d046      	beq.n	800cf2a <ThreadModbusTask+0x47e>
			{
				crc_temp = CRC16(&modbus_buffer[modbus_packet_number][0], i_max-2); // считаем контрольную сумму принятого пакета
 800ce9c:	4b26      	ldr	r3, [pc, #152]	; (800cf38 <ThreadModbusTask+0x48c>)
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	021b      	lsls	r3, r3, #8
 800cea2:	4a26      	ldr	r2, [pc, #152]	; (800cf3c <ThreadModbusTask+0x490>)
 800cea4:	441a      	add	r2, r3
 800cea6:	8bbb      	ldrh	r3, [r7, #28]
 800cea8:	3b02      	subs	r3, #2
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4610      	mov	r0, r2
 800ceae:	f00c fa89 	bl	80193c4 <CRC16>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	4a22      	ldr	r2, [pc, #136]	; (800cf40 <ThreadModbusTask+0x494>)
 800ceb6:	6013      	str	r3, [r2, #0]
				if( ( ((crc_temp>>8)&0x00FF) == modbus_buffer[modbus_packet_number][i_max-1] ) && ( (crc_temp&0x00FF) == modbus_buffer[modbus_packet_number][i_max-2]) ) // проверяем контрольную сумму принятого пакета
 800ceb8:	4b21      	ldr	r3, [pc, #132]	; (800cf40 <ThreadModbusTask+0x494>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	0a1b      	lsrs	r3, r3, #8
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	4a1d      	ldr	r2, [pc, #116]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cec2:	7812      	ldrb	r2, [r2, #0]
 800cec4:	4611      	mov	r1, r2
 800cec6:	8bba      	ldrh	r2, [r7, #28]
 800cec8:	3a01      	subs	r2, #1
 800ceca:	481c      	ldr	r0, [pc, #112]	; (800cf3c <ThreadModbusTask+0x490>)
 800cecc:	0209      	lsls	r1, r1, #8
 800cece:	4401      	add	r1, r0
 800ced0:	440a      	add	r2, r1
 800ced2:	7812      	ldrb	r2, [r2, #0]
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d124      	bne.n	800cf22 <ThreadModbusTask+0x476>
 800ced8:	4b19      	ldr	r3, [pc, #100]	; (800cf40 <ThreadModbusTask+0x494>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	4a16      	ldr	r2, [pc, #88]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cee0:	7812      	ldrb	r2, [r2, #0]
 800cee2:	4611      	mov	r1, r2
 800cee4:	8bba      	ldrh	r2, [r7, #28]
 800cee6:	3a02      	subs	r2, #2
 800cee8:	4814      	ldr	r0, [pc, #80]	; (800cf3c <ThreadModbusTask+0x490>)
 800ceea:	0209      	lsls	r1, r1, #8
 800ceec:	4401      	add	r1, r0
 800ceee:	440a      	add	r2, r1
 800cef0:	7812      	ldrb	r2, [r2, #0]
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d115      	bne.n	800cf22 <ThreadModbusTask+0x476>
				{
					modbus_packet_number1 = modbus_packet_number;
 800cef6:	4b10      	ldr	r3, [pc, #64]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cef8:	781a      	ldrb	r2, [r3, #0]
 800cefa:	4b12      	ldr	r3, [pc, #72]	; (800cf44 <ThreadModbusTask+0x498>)
 800cefc:	701a      	strb	r2, [r3, #0]
					modbus_packet_number++;
 800cefe:	4b0e      	ldr	r3, [pc, #56]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	3301      	adds	r3, #1
 800cf04:	b2da      	uxtb	r2, r3
 800cf06:	4b0c      	ldr	r3, [pc, #48]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cf08:	701a      	strb	r2, [r3, #0]
					if( modbus_packet_number >= 20)
 800cf0a:	4b0b      	ldr	r3, [pc, #44]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	2b13      	cmp	r3, #19
 800cf10:	d902      	bls.n	800cf18 <ThreadModbusTask+0x46c>
					{
						modbus_packet_number = 0;
 800cf12:	4b09      	ldr	r3, [pc, #36]	; (800cf38 <ThreadModbusTask+0x48c>)
 800cf14:	2200      	movs	r2, #0
 800cf16:	701a      	strb	r2, [r3, #0]
					}

					osSemaphoreRelease(ModbusPacketReceiveHandle);
 800cf18:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <ThreadModbusTask+0x49c>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fa f81d 	bl	8006f5c <osSemaphoreRelease>
				}

				i = 0;     // обнуляем значение текущего принятого байта
 800cf22:	2300      	movs	r3, #0
 800cf24:	83fb      	strh	r3, [r7, #30]
				i_max = 0; // обнуляем максимальное значение принятого байта
 800cf26:	2300      	movs	r3, #0
 800cf28:	83bb      	strh	r3, [r7, #28]
		}




		osDelay(1);
 800cf2a:	2001      	movs	r0, #1
 800cf2c:	f7f9 fe23 	bl	8006b76 <osDelay>
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800cf30:	e5c2      	b.n	800cab8 <ThreadModbusTask+0xc>
 800cf32:	bf00      	nop
 800cf34:	2000a0b0 	.word	0x2000a0b0
 800cf38:	20007fee 	.word	0x20007fee
 800cf3c:	20008298 	.word	0x20008298
 800cf40:	2000a0bc 	.word	0x2000a0bc
 800cf44:	20007fef 	.word	0x20007fef
 800cf48:	20009a28 	.word	0x20009a28

0800cf4c <ThreadReadRegistersTask>:
extern status_register_struct status_registers;
extern control_register_struct control_registers;


void ThreadReadRegistersTask(void const * argument)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
	read_status_registers(); // вычитываем регистры
 800cf54:	f00a fa12 	bl	801737c <read_status_registers>
	read_control_registers();
 800cf58:	f00b fa78 	bl	801844c <read_control_registers>
	read_bootloader_registers();
 800cf5c:	f00b fede 	bl	8018d1c <read_bootloader_registers>

	if(control_registers.arming_timeleft_reg < 100) // если время постановки на охрану больше 100 * 10мс
 800cf60:	4b1e      	ldr	r3, [pc, #120]	; (800cfdc <ThreadReadRegistersTask+0x90>)
 800cf62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf66:	2b63      	cmp	r3, #99	; 0x63
 800cf68:	d815      	bhi.n	800cf96 <ThreadReadRegistersTask+0x4a>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800cf6a:	4b1d      	ldr	r3, [pc, #116]	; (800cfe0 <ThreadReadRegistersTask+0x94>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f04f 31ff 	mov.w	r1, #4294967295
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7f9 fee0 	bl	8006d38 <osMutexWait>
		fm25v02_write(2*ARMING_TIMELEFT, 0x00);
 800cf78:	2100      	movs	r1, #0
 800cf7a:	f242 1092 	movw	r0, #8594	; 0x2192
 800cf7e:	f008 fc6f 	bl	8015860 <fm25v02_write>
		fm25v02_write(2*ARMING_TIMELEFT+1, 0x64); // выставляем значение времени постановки на охрану равное 100 * 10мс
 800cf82:	2164      	movs	r1, #100	; 0x64
 800cf84:	f242 1093 	movw	r0, #8595	; 0x2193
 800cf88:	f008 fc6a 	bl	8015860 <fm25v02_write>
		osMutexRelease(Fm25v02MutexHandle);
 800cf8c:	4b14      	ldr	r3, [pc, #80]	; (800cfe0 <ThreadReadRegistersTask+0x94>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f7f9 ff1f 	bl	8006dd4 <osMutexRelease>
	}

	osDelay(2000); // ждем пока будет получен статус фаз А1,А2,В1,В2,С1,С2
 800cf96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cf9a:	f7f9 fdec 	bl	8006b76 <osDelay>
	osThreadResume(LedTaskHandle);  // запускаем процесс светодиодов
 800cf9e:	4b11      	ldr	r3, [pc, #68]	; (800cfe4 <ThreadReadRegistersTask+0x98>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fa f8f8 	bl	8007198 <osThreadResume>
	osThreadResume(MainTaskHandle); // запускаем основной процесс
 800cfa8:	4b0f      	ldr	r3, [pc, #60]	; (800cfe8 <ThreadReadRegistersTask+0x9c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fa f8f3 	bl	8007198 <osThreadResume>
	osThreadResume(M95TaskHandle);  // запускаем процесс модема
 800cfb2:	4b0e      	ldr	r3, [pc, #56]	; (800cfec <ThreadReadRegistersTask+0xa0>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fa f8ee 	bl	8007198 <osThreadResume>
	osDelay(1000); //ждем 1 секунду
 800cfbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cfc0:	f7f9 fdd9 	bl	8006b76 <osDelay>


	for(;;)
	{

		read_status_registers(); // вычитываем регистры
 800cfc4:	f00a f9da 	bl	801737c <read_status_registers>
		read_control_registers();
 800cfc8:	f00b fa40 	bl	801844c <read_control_registers>
		read_bootloader_registers();
 800cfcc:	f00b fea6 	bl	8018d1c <read_bootloader_registers>

		osDelay(1000); // ждем 1 секунду
 800cfd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cfd4:	f7f9 fdcf 	bl	8006b76 <osDelay>
		read_status_registers(); // вычитываем регистры
 800cfd8:	e7f4      	b.n	800cfc4 <ThreadReadRegistersTask+0x78>
 800cfda:	bf00      	nop
 800cfdc:	2000a1cc 	.word	0x2000a1cc
 800cfe0:	20009a6c 	.word	0x20009a6c
 800cfe4:	200098d8 	.word	0x200098d8
 800cfe8:	20009718 	.word	0x20009718
 800cfec:	200098e0 	.word	0x200098e0

0800cff0 <ThreadSecurityTask>:
uint8_t loop_state8_on=0;
uint8_t loop_state8_off=0;


void ThreadSecurityTask(void const * argument)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
	uint8_t alarm_loop_reg_temp;
	uint8_t status_loop_reg_temp;


	osMutexWait(Fm25v02MutexHandle, osWaitForever); // обнуляем регистр статуса освещения и переменную регитра статуса освещения
 800cff8:	4bb0      	ldr	r3, [pc, #704]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f04f 31ff 	mov.w	r1, #4294967295
 800d000:	4618      	mov	r0, r3
 800d002:	f7f9 fe99 	bl	8006d38 <osMutexWait>
	fm25v02_write(2*LIGHTING_STATUS_REG, 0x00);
 800d006:	2100      	movs	r1, #0
 800d008:	f242 0062 	movw	r0, #8290	; 0x2062
 800d00c:	f008 fc28 	bl	8015860 <fm25v02_write>
	fm25v02_write(2*LIGHTING_STATUS_REG+1, 0x00);
 800d010:	2100      	movs	r1, #0
 800d012:	f242 0063 	movw	r0, #8291	; 0x2063
 800d016:	f008 fc23 	bl	8015860 <fm25v02_write>
	status_registers.lighting_status_reg = 0x0000;
 800d01a:	4ba9      	ldr	r3, [pc, #676]	; (800d2c0 <ThreadSecurityTask+0x2d0>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	osMutexRelease(Fm25v02MutexHandle);
 800d022:	4ba6      	ldr	r3, [pc, #664]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4618      	mov	r0, r3
 800d028:	f7f9 fed4 	bl	8006dd4 <osMutexRelease>

	osDelay(5000);
 800d02c:	f241 3088 	movw	r0, #5000	; 0x1388
 800d030:	f7f9 fda1 	bl	8006b76 <osDelay>

	for(;;)
	{

		//----Контроль статуса шлейфа №1--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_RESET)
 800d034:	2110      	movs	r1, #16
 800d036:	48a3      	ldr	r0, [pc, #652]	; (800d2c4 <ThreadSecurityTask+0x2d4>)
 800d038:	f7f6 f900 	bl	800323c <HAL_GPIO_ReadPin>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d165      	bne.n	800d10e <ThreadSecurityTask+0x11e>
		{
			loop_state1_off = 0;
 800d042:	4ba1      	ldr	r3, [pc, #644]	; (800d2c8 <ThreadSecurityTask+0x2d8>)
 800d044:	2200      	movs	r2, #0
 800d046:	701a      	strb	r2, [r3, #0]

			if(loop_state1_on<10)
 800d048:	4ba0      	ldr	r3, [pc, #640]	; (800d2cc <ThreadSecurityTask+0x2dc>)
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b09      	cmp	r3, #9
 800d04e:	f200 80c7 	bhi.w	800d1e0 <ThreadSecurityTask+0x1f0>
			{
				loop_state1_on++;
 800d052:	4b9e      	ldr	r3, [pc, #632]	; (800d2cc <ThreadSecurityTask+0x2dc>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	3301      	adds	r3, #1
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	4b9c      	ldr	r3, [pc, #624]	; (800d2cc <ThreadSecurityTask+0x2dc>)
 800d05c:	701a      	strb	r2, [r3, #0]
				if(loop_state1_on==10)
 800d05e:	4b9b      	ldr	r3, [pc, #620]	; (800d2cc <ThreadSecurityTask+0x2dc>)
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	2b0a      	cmp	r3, #10
 800d064:	f040 80bc 	bne.w	800d1e0 <ThreadSecurityTask+0x1f0>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d068:	4b94      	ldr	r3, [pc, #592]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f04f 31ff 	mov.w	r1, #4294967295
 800d070:	4618      	mov	r0, r3
 800d072:	f7f9 fe61 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d076:	f107 030e 	add.w	r3, r7, #14
 800d07a:	4619      	mov	r1, r3
 800d07c:	f242 0005 	movw	r0, #8197	; 0x2005
 800d080:	f008 fbb4 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d084:	4b8d      	ldr	r3, [pc, #564]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4618      	mov	r0, r3
 800d08a:	f7f9 fea3 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x01) == 0x00 )
 800d08e:	7bbb      	ldrb	r3, [r7, #14]
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b00      	cmp	r3, #0
 800d096:	f040 80a3 	bne.w	800d1e0 <ThreadSecurityTask+0x1f0>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x01;
 800d09a:	7bbb      	ldrb	r3, [r7, #14]
 800d09c:	f043 0301 	orr.w	r3, r3, #1
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d0a4:	4b85      	ldr	r3, [pc, #532]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f04f 31ff 	mov.w	r1, #4294967295
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7f9 fe43 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	f242 0004 	movw	r0, #8196	; 0x2004
 800d0b8:	f008 fbd2 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
 800d0be:	4619      	mov	r1, r3
 800d0c0:	f242 0005 	movw	r0, #8197	; 0x2005
 800d0c4:	f008 fbcc 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d0c8:	4b7c      	ldr	r3, [pc, #496]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7f9 fe81 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x01;
 800d0d2:	4b7b      	ldr	r3, [pc, #492]	; (800d2c0 <ThreadSecurityTask+0x2d0>)
 800d0d4:	889b      	ldrh	r3, [r3, #4]
 800d0d6:	f043 0301 	orr.w	r3, r3, #1
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	4b78      	ldr	r3, [pc, #480]	; (800d2c0 <ThreadSecurityTask+0x2d0>)
 800d0de:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d0e0:	4b76      	ldr	r3, [pc, #472]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f04f 31ff 	mov.w	r1, #4294967295
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7f9 fe25 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d0ee:	2100      	movs	r1, #0
 800d0f0:	f242 106e 	movw	r0, #8558	; 0x216e
 800d0f4:	f008 fbb4 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	f242 106f 	movw	r0, #8559	; 0x216f
 800d0fe:	f008 fbaf 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d102:	4b6e      	ldr	r3, [pc, #440]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4618      	mov	r0, r3
 800d108:	f7f9 fe64 	bl	8006dd4 <osMutexRelease>
 800d10c:	e068      	b.n	800d1e0 <ThreadSecurityTask+0x1f0>

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_SET)
 800d10e:	2110      	movs	r1, #16
 800d110:	486c      	ldr	r0, [pc, #432]	; (800d2c4 <ThreadSecurityTask+0x2d4>)
 800d112:	f7f6 f893 	bl	800323c <HAL_GPIO_ReadPin>
 800d116:	4603      	mov	r3, r0
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d161      	bne.n	800d1e0 <ThreadSecurityTask+0x1f0>
		{
			loop_state1_on = 0;
 800d11c:	4b6b      	ldr	r3, [pc, #428]	; (800d2cc <ThreadSecurityTask+0x2dc>)
 800d11e:	2200      	movs	r2, #0
 800d120:	701a      	strb	r2, [r3, #0]

			if(loop_state1_off<10)
 800d122:	4b69      	ldr	r3, [pc, #420]	; (800d2c8 <ThreadSecurityTask+0x2d8>)
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	2b09      	cmp	r3, #9
 800d128:	d85a      	bhi.n	800d1e0 <ThreadSecurityTask+0x1f0>
			{
				loop_state1_off++;
 800d12a:	4b67      	ldr	r3, [pc, #412]	; (800d2c8 <ThreadSecurityTask+0x2d8>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	3301      	adds	r3, #1
 800d130:	b2da      	uxtb	r2, r3
 800d132:	4b65      	ldr	r3, [pc, #404]	; (800d2c8 <ThreadSecurityTask+0x2d8>)
 800d134:	701a      	strb	r2, [r3, #0]
				if(loop_state1_off==10)
 800d136:	4b64      	ldr	r3, [pc, #400]	; (800d2c8 <ThreadSecurityTask+0x2d8>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2b0a      	cmp	r3, #10
 800d13c:	d150      	bne.n	800d1e0 <ThreadSecurityTask+0x1f0>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d13e:	4b5f      	ldr	r3, [pc, #380]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f04f 31ff 	mov.w	r1, #4294967295
 800d146:	4618      	mov	r0, r3
 800d148:	f7f9 fdf6 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d14c:	f107 030e 	add.w	r3, r7, #14
 800d150:	4619      	mov	r1, r3
 800d152:	f242 0005 	movw	r0, #8197	; 0x2005
 800d156:	f008 fb49 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d15a:	4b58      	ldr	r3, [pc, #352]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4618      	mov	r0, r3
 800d160:	f7f9 fe38 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x01) == 0x01 )
 800d164:	7bbb      	ldrb	r3, [r7, #14]
 800d166:	f003 0301 	and.w	r3, r3, #1
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d038      	beq.n	800d1e0 <ThreadSecurityTask+0x1f0>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xFE;
 800d16e:	7bbb      	ldrb	r3, [r7, #14]
 800d170:	f023 0301 	bic.w	r3, r3, #1
 800d174:	b2db      	uxtb	r3, r3
 800d176:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d178:	4b50      	ldr	r3, [pc, #320]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f04f 31ff 	mov.w	r1, #4294967295
 800d180:	4618      	mov	r0, r3
 800d182:	f7f9 fdd9 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d186:	2100      	movs	r1, #0
 800d188:	f242 0004 	movw	r0, #8196	; 0x2004
 800d18c:	f008 fb68 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d190:	7bbb      	ldrb	r3, [r7, #14]
 800d192:	4619      	mov	r1, r3
 800d194:	f242 0005 	movw	r0, #8197	; 0x2005
 800d198:	f008 fb62 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d19c:	4b47      	ldr	r3, [pc, #284]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7f9 fe17 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xFE;
 800d1a6:	4b46      	ldr	r3, [pc, #280]	; (800d2c0 <ThreadSecurityTask+0x2d0>)
 800d1a8:	889b      	ldrh	r3, [r3, #4]
 800d1aa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	4b43      	ldr	r3, [pc, #268]	; (800d2c0 <ThreadSecurityTask+0x2d0>)
 800d1b2:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d1b4:	4b41      	ldr	r3, [pc, #260]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f04f 31ff 	mov.w	r1, #4294967295
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7f9 fdbb 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	f242 106e 	movw	r0, #8558	; 0x216e
 800d1c8:	f008 fb4a 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	f242 106f 	movw	r0, #8559	; 0x216f
 800d1d2:	f008 fb45 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d1d6:	4b39      	ldr	r3, [pc, #228]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7f9 fdfa 	bl	8006dd4 <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №2--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_RESET)
 800d1e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d1e4:	483a      	ldr	r0, [pc, #232]	; (800d2d0 <ThreadSecurityTask+0x2e0>)
 800d1e6:	f7f6 f829 	bl	800323c <HAL_GPIO_ReadPin>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d175      	bne.n	800d2dc <ThreadSecurityTask+0x2ec>
		{
			loop_state2_off = 0;
 800d1f0:	4b38      	ldr	r3, [pc, #224]	; (800d2d4 <ThreadSecurityTask+0x2e4>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	701a      	strb	r2, [r3, #0]

			if(loop_state2_on<10)
 800d1f6:	4b38      	ldr	r3, [pc, #224]	; (800d2d8 <ThreadSecurityTask+0x2e8>)
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	2b09      	cmp	r3, #9
 800d1fc:	f200 80d8 	bhi.w	800d3b0 <ThreadSecurityTask+0x3c0>
			{
				loop_state2_on++;
 800d200:	4b35      	ldr	r3, [pc, #212]	; (800d2d8 <ThreadSecurityTask+0x2e8>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	3301      	adds	r3, #1
 800d206:	b2da      	uxtb	r2, r3
 800d208:	4b33      	ldr	r3, [pc, #204]	; (800d2d8 <ThreadSecurityTask+0x2e8>)
 800d20a:	701a      	strb	r2, [r3, #0]
				if(loop_state2_on==10)
 800d20c:	4b32      	ldr	r3, [pc, #200]	; (800d2d8 <ThreadSecurityTask+0x2e8>)
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2b0a      	cmp	r3, #10
 800d212:	f040 80cd 	bne.w	800d3b0 <ThreadSecurityTask+0x3c0>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d216:	4b29      	ldr	r3, [pc, #164]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f04f 31ff 	mov.w	r1, #4294967295
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f9 fd8a 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d224:	f107 030e 	add.w	r3, r7, #14
 800d228:	4619      	mov	r1, r3
 800d22a:	f242 0005 	movw	r0, #8197	; 0x2005
 800d22e:	f008 fadd 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d232:	4b22      	ldr	r3, [pc, #136]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4618      	mov	r0, r3
 800d238:	f7f9 fdcc 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x02) == 0x00 )
 800d23c:	7bbb      	ldrb	r3, [r7, #14]
 800d23e:	f003 0302 	and.w	r3, r3, #2
 800d242:	2b00      	cmp	r3, #0
 800d244:	f040 80b4 	bne.w	800d3b0 <ThreadSecurityTask+0x3c0>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x02;
 800d248:	7bbb      	ldrb	r3, [r7, #14]
 800d24a:	f043 0302 	orr.w	r3, r3, #2
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d252:	4b1a      	ldr	r3, [pc, #104]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f04f 31ff 	mov.w	r1, #4294967295
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7f9 fd6c 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d260:	2100      	movs	r1, #0
 800d262:	f242 0004 	movw	r0, #8196	; 0x2004
 800d266:	f008 fafb 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d26a:	7bbb      	ldrb	r3, [r7, #14]
 800d26c:	4619      	mov	r1, r3
 800d26e:	f242 0005 	movw	r0, #8197	; 0x2005
 800d272:	f008 faf5 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d276:	4b11      	ldr	r3, [pc, #68]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7f9 fdaa 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x02;
 800d280:	4b0f      	ldr	r3, [pc, #60]	; (800d2c0 <ThreadSecurityTask+0x2d0>)
 800d282:	889b      	ldrh	r3, [r3, #4]
 800d284:	f043 0302 	orr.w	r3, r3, #2
 800d288:	b29a      	uxth	r2, r3
 800d28a:	4b0d      	ldr	r3, [pc, #52]	; (800d2c0 <ThreadSecurityTask+0x2d0>)
 800d28c:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d28e:	4b0b      	ldr	r3, [pc, #44]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f04f 31ff 	mov.w	r1, #4294967295
 800d296:	4618      	mov	r0, r3
 800d298:	f7f9 fd4e 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d29c:	2100      	movs	r1, #0
 800d29e:	f242 106e 	movw	r0, #8558	; 0x216e
 800d2a2:	f008 fadd 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d2a6:	2101      	movs	r1, #1
 800d2a8:	f242 106f 	movw	r0, #8559	; 0x216f
 800d2ac:	f008 fad8 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d2b0:	4b02      	ldr	r3, [pc, #8]	; (800d2bc <ThreadSecurityTask+0x2cc>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7f9 fd8d 	bl	8006dd4 <osMutexRelease>
 800d2ba:	e079      	b.n	800d3b0 <ThreadSecurityTask+0x3c0>
 800d2bc:	20009a6c 	.word	0x20009a6c
 800d2c0:	2000a10c 	.word	0x2000a10c
 800d2c4:	40021c00 	.word	0x40021c00
 800d2c8:	20007ff9 	.word	0x20007ff9
 800d2cc:	20007ff8 	.word	0x20007ff8
 800d2d0:	40021400 	.word	0x40021400
 800d2d4:	20007ffb 	.word	0x20007ffb
 800d2d8:	20007ffa 	.word	0x20007ffa

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_SET)
 800d2dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d2e0:	486a      	ldr	r0, [pc, #424]	; (800d48c <ThreadSecurityTask+0x49c>)
 800d2e2:	f7f5 ffab 	bl	800323c <HAL_GPIO_ReadPin>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d161      	bne.n	800d3b0 <ThreadSecurityTask+0x3c0>
		{
			loop_state2_on = 0;
 800d2ec:	4b68      	ldr	r3, [pc, #416]	; (800d490 <ThreadSecurityTask+0x4a0>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	701a      	strb	r2, [r3, #0]

			if(loop_state2_off<10)
 800d2f2:	4b68      	ldr	r3, [pc, #416]	; (800d494 <ThreadSecurityTask+0x4a4>)
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	2b09      	cmp	r3, #9
 800d2f8:	d85a      	bhi.n	800d3b0 <ThreadSecurityTask+0x3c0>
			{
				loop_state2_off++;
 800d2fa:	4b66      	ldr	r3, [pc, #408]	; (800d494 <ThreadSecurityTask+0x4a4>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	3301      	adds	r3, #1
 800d300:	b2da      	uxtb	r2, r3
 800d302:	4b64      	ldr	r3, [pc, #400]	; (800d494 <ThreadSecurityTask+0x4a4>)
 800d304:	701a      	strb	r2, [r3, #0]
				if(loop_state2_off==10)
 800d306:	4b63      	ldr	r3, [pc, #396]	; (800d494 <ThreadSecurityTask+0x4a4>)
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	2b0a      	cmp	r3, #10
 800d30c:	d150      	bne.n	800d3b0 <ThreadSecurityTask+0x3c0>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d30e:	4b62      	ldr	r3, [pc, #392]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f04f 31ff 	mov.w	r1, #4294967295
 800d316:	4618      	mov	r0, r3
 800d318:	f7f9 fd0e 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d31c:	f107 030e 	add.w	r3, r7, #14
 800d320:	4619      	mov	r1, r3
 800d322:	f242 0005 	movw	r0, #8197	; 0x2005
 800d326:	f008 fa61 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d32a:	4b5b      	ldr	r3, [pc, #364]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7f9 fd50 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x02) == 0x02 )
 800d334:	7bbb      	ldrb	r3, [r7, #14]
 800d336:	f003 0302 	and.w	r3, r3, #2
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d038      	beq.n	800d3b0 <ThreadSecurityTask+0x3c0>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xFD;
 800d33e:	7bbb      	ldrb	r3, [r7, #14]
 800d340:	f023 0302 	bic.w	r3, r3, #2
 800d344:	b2db      	uxtb	r3, r3
 800d346:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d348:	4b53      	ldr	r3, [pc, #332]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f04f 31ff 	mov.w	r1, #4294967295
 800d350:	4618      	mov	r0, r3
 800d352:	f7f9 fcf1 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d356:	2100      	movs	r1, #0
 800d358:	f242 0004 	movw	r0, #8196	; 0x2004
 800d35c:	f008 fa80 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d360:	7bbb      	ldrb	r3, [r7, #14]
 800d362:	4619      	mov	r1, r3
 800d364:	f242 0005 	movw	r0, #8197	; 0x2005
 800d368:	f008 fa7a 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d36c:	4b4a      	ldr	r3, [pc, #296]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4618      	mov	r0, r3
 800d372:	f7f9 fd2f 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xFD;
 800d376:	4b49      	ldr	r3, [pc, #292]	; (800d49c <ThreadSecurityTask+0x4ac>)
 800d378:	889b      	ldrh	r3, [r3, #4]
 800d37a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800d37e:	b29a      	uxth	r2, r3
 800d380:	4b46      	ldr	r3, [pc, #280]	; (800d49c <ThreadSecurityTask+0x4ac>)
 800d382:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d384:	4b44      	ldr	r3, [pc, #272]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f04f 31ff 	mov.w	r1, #4294967295
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7f9 fcd3 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d392:	2100      	movs	r1, #0
 800d394:	f242 106e 	movw	r0, #8558	; 0x216e
 800d398:	f008 fa62 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d39c:	2101      	movs	r1, #1
 800d39e:	f242 106f 	movw	r0, #8559	; 0x216f
 800d3a2:	f008 fa5d 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d3a6:	4b3c      	ldr	r3, [pc, #240]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7f9 fd12 	bl	8006dd4 <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №3--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_RESET)
 800d3b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d3b4:	4835      	ldr	r0, [pc, #212]	; (800d48c <ThreadSecurityTask+0x49c>)
 800d3b6:	f7f5 ff41 	bl	800323c <HAL_GPIO_ReadPin>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d173      	bne.n	800d4a8 <ThreadSecurityTask+0x4b8>
		{
			loop_state3_off = 0;
 800d3c0:	4b37      	ldr	r3, [pc, #220]	; (800d4a0 <ThreadSecurityTask+0x4b0>)
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	701a      	strb	r2, [r3, #0]

			if(loop_state3_on<10)
 800d3c6:	4b37      	ldr	r3, [pc, #220]	; (800d4a4 <ThreadSecurityTask+0x4b4>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	2b09      	cmp	r3, #9
 800d3cc:	f200 80d6 	bhi.w	800d57c <ThreadSecurityTask+0x58c>
			{
				loop_state3_on++;
 800d3d0:	4b34      	ldr	r3, [pc, #208]	; (800d4a4 <ThreadSecurityTask+0x4b4>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	4b32      	ldr	r3, [pc, #200]	; (800d4a4 <ThreadSecurityTask+0x4b4>)
 800d3da:	701a      	strb	r2, [r3, #0]
				if(loop_state3_on==10)
 800d3dc:	4b31      	ldr	r3, [pc, #196]	; (800d4a4 <ThreadSecurityTask+0x4b4>)
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	2b0a      	cmp	r3, #10
 800d3e2:	f040 80cb 	bne.w	800d57c <ThreadSecurityTask+0x58c>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d3e6:	4b2c      	ldr	r3, [pc, #176]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f04f 31ff 	mov.w	r1, #4294967295
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7f9 fca2 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d3f4:	f107 030e 	add.w	r3, r7, #14
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	f242 0005 	movw	r0, #8197	; 0x2005
 800d3fe:	f008 f9f5 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d402:	4b25      	ldr	r3, [pc, #148]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4618      	mov	r0, r3
 800d408:	f7f9 fce4 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x04) == 0x00 )
 800d40c:	7bbb      	ldrb	r3, [r7, #14]
 800d40e:	f003 0304 	and.w	r3, r3, #4
 800d412:	2b00      	cmp	r3, #0
 800d414:	f040 80b2 	bne.w	800d57c <ThreadSecurityTask+0x58c>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x04;
 800d418:	7bbb      	ldrb	r3, [r7, #14]
 800d41a:	f043 0304 	orr.w	r3, r3, #4
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d422:	4b1d      	ldr	r3, [pc, #116]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f04f 31ff 	mov.w	r1, #4294967295
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7f9 fc84 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d430:	2100      	movs	r1, #0
 800d432:	f242 0004 	movw	r0, #8196	; 0x2004
 800d436:	f008 fa13 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d43a:	7bbb      	ldrb	r3, [r7, #14]
 800d43c:	4619      	mov	r1, r3
 800d43e:	f242 0005 	movw	r0, #8197	; 0x2005
 800d442:	f008 fa0d 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d446:	4b14      	ldr	r3, [pc, #80]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7f9 fcc2 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x04;
 800d450:	4b12      	ldr	r3, [pc, #72]	; (800d49c <ThreadSecurityTask+0x4ac>)
 800d452:	889b      	ldrh	r3, [r3, #4]
 800d454:	f043 0304 	orr.w	r3, r3, #4
 800d458:	b29a      	uxth	r2, r3
 800d45a:	4b10      	ldr	r3, [pc, #64]	; (800d49c <ThreadSecurityTask+0x4ac>)
 800d45c:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d45e:	4b0e      	ldr	r3, [pc, #56]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f04f 31ff 	mov.w	r1, #4294967295
 800d466:	4618      	mov	r0, r3
 800d468:	f7f9 fc66 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d46c:	2100      	movs	r1, #0
 800d46e:	f242 106e 	movw	r0, #8558	; 0x216e
 800d472:	f008 f9f5 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d476:	2101      	movs	r1, #1
 800d478:	f242 106f 	movw	r0, #8559	; 0x216f
 800d47c:	f008 f9f0 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d480:	4b05      	ldr	r3, [pc, #20]	; (800d498 <ThreadSecurityTask+0x4a8>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4618      	mov	r0, r3
 800d486:	f7f9 fca5 	bl	8006dd4 <osMutexRelease>
 800d48a:	e077      	b.n	800d57c <ThreadSecurityTask+0x58c>
 800d48c:	40021400 	.word	0x40021400
 800d490:	20007ffa 	.word	0x20007ffa
 800d494:	20007ffb 	.word	0x20007ffb
 800d498:	20009a6c 	.word	0x20009a6c
 800d49c:	2000a10c 	.word	0x2000a10c
 800d4a0:	20007ffd 	.word	0x20007ffd
 800d4a4:	20007ffc 	.word	0x20007ffc

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_SET)
 800d4a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d4ac:	486a      	ldr	r0, [pc, #424]	; (800d658 <ThreadSecurityTask+0x668>)
 800d4ae:	f7f5 fec5 	bl	800323c <HAL_GPIO_ReadPin>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d161      	bne.n	800d57c <ThreadSecurityTask+0x58c>
		{
			loop_state3_on = 0;
 800d4b8:	4b68      	ldr	r3, [pc, #416]	; (800d65c <ThreadSecurityTask+0x66c>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	701a      	strb	r2, [r3, #0]

			if(loop_state3_off<10)
 800d4be:	4b68      	ldr	r3, [pc, #416]	; (800d660 <ThreadSecurityTask+0x670>)
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	2b09      	cmp	r3, #9
 800d4c4:	d85a      	bhi.n	800d57c <ThreadSecurityTask+0x58c>
			{
				loop_state3_off++;
 800d4c6:	4b66      	ldr	r3, [pc, #408]	; (800d660 <ThreadSecurityTask+0x670>)
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	b2da      	uxtb	r2, r3
 800d4ce:	4b64      	ldr	r3, [pc, #400]	; (800d660 <ThreadSecurityTask+0x670>)
 800d4d0:	701a      	strb	r2, [r3, #0]
				if(loop_state3_off==10)
 800d4d2:	4b63      	ldr	r3, [pc, #396]	; (800d660 <ThreadSecurityTask+0x670>)
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b0a      	cmp	r3, #10
 800d4d8:	d150      	bne.n	800d57c <ThreadSecurityTask+0x58c>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d4da:	4b62      	ldr	r3, [pc, #392]	; (800d664 <ThreadSecurityTask+0x674>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f04f 31ff 	mov.w	r1, #4294967295
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7f9 fc28 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d4e8:	f107 030e 	add.w	r3, r7, #14
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	f242 0005 	movw	r0, #8197	; 0x2005
 800d4f2:	f008 f97b 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d4f6:	4b5b      	ldr	r3, [pc, #364]	; (800d664 <ThreadSecurityTask+0x674>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7f9 fc6a 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x04) == 0x04 )
 800d500:	7bbb      	ldrb	r3, [r7, #14]
 800d502:	f003 0304 	and.w	r3, r3, #4
 800d506:	2b00      	cmp	r3, #0
 800d508:	d038      	beq.n	800d57c <ThreadSecurityTask+0x58c>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xFB;
 800d50a:	7bbb      	ldrb	r3, [r7, #14]
 800d50c:	f023 0304 	bic.w	r3, r3, #4
 800d510:	b2db      	uxtb	r3, r3
 800d512:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d514:	4b53      	ldr	r3, [pc, #332]	; (800d664 <ThreadSecurityTask+0x674>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f04f 31ff 	mov.w	r1, #4294967295
 800d51c:	4618      	mov	r0, r3
 800d51e:	f7f9 fc0b 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d522:	2100      	movs	r1, #0
 800d524:	f242 0004 	movw	r0, #8196	; 0x2004
 800d528:	f008 f99a 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d52c:	7bbb      	ldrb	r3, [r7, #14]
 800d52e:	4619      	mov	r1, r3
 800d530:	f242 0005 	movw	r0, #8197	; 0x2005
 800d534:	f008 f994 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d538:	4b4a      	ldr	r3, [pc, #296]	; (800d664 <ThreadSecurityTask+0x674>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7f9 fc49 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xFB;
 800d542:	4b49      	ldr	r3, [pc, #292]	; (800d668 <ThreadSecurityTask+0x678>)
 800d544:	889b      	ldrh	r3, [r3, #4]
 800d546:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	4b46      	ldr	r3, [pc, #280]	; (800d668 <ThreadSecurityTask+0x678>)
 800d54e:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d550:	4b44      	ldr	r3, [pc, #272]	; (800d664 <ThreadSecurityTask+0x674>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f04f 31ff 	mov.w	r1, #4294967295
 800d558:	4618      	mov	r0, r3
 800d55a:	f7f9 fbed 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d55e:	2100      	movs	r1, #0
 800d560:	f242 106e 	movw	r0, #8558	; 0x216e
 800d564:	f008 f97c 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d568:	2101      	movs	r1, #1
 800d56a:	f242 106f 	movw	r0, #8559	; 0x216f
 800d56e:	f008 f977 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d572:	4b3c      	ldr	r3, [pc, #240]	; (800d664 <ThreadSecurityTask+0x674>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4618      	mov	r0, r3
 800d578:	f7f9 fc2c 	bl	8006dd4 <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №4--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_RESET)
 800d57c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d580:	4835      	ldr	r0, [pc, #212]	; (800d658 <ThreadSecurityTask+0x668>)
 800d582:	f7f5 fe5b 	bl	800323c <HAL_GPIO_ReadPin>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d173      	bne.n	800d674 <ThreadSecurityTask+0x684>
		{
			loop_state4_off = 0;
 800d58c:	4b37      	ldr	r3, [pc, #220]	; (800d66c <ThreadSecurityTask+0x67c>)
 800d58e:	2200      	movs	r2, #0
 800d590:	701a      	strb	r2, [r3, #0]

			if(loop_state4_on<10)
 800d592:	4b37      	ldr	r3, [pc, #220]	; (800d670 <ThreadSecurityTask+0x680>)
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	2b09      	cmp	r3, #9
 800d598:	f200 80d6 	bhi.w	800d748 <ThreadSecurityTask+0x758>
			{
				loop_state4_on++;
 800d59c:	4b34      	ldr	r3, [pc, #208]	; (800d670 <ThreadSecurityTask+0x680>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	4b32      	ldr	r3, [pc, #200]	; (800d670 <ThreadSecurityTask+0x680>)
 800d5a6:	701a      	strb	r2, [r3, #0]
				if(loop_state4_on==10)
 800d5a8:	4b31      	ldr	r3, [pc, #196]	; (800d670 <ThreadSecurityTask+0x680>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b0a      	cmp	r3, #10
 800d5ae:	f040 80cb 	bne.w	800d748 <ThreadSecurityTask+0x758>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d5b2:	4b2c      	ldr	r3, [pc, #176]	; (800d664 <ThreadSecurityTask+0x674>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f04f 31ff 	mov.w	r1, #4294967295
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7f9 fbbc 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d5c0:	f107 030e 	add.w	r3, r7, #14
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	f242 0005 	movw	r0, #8197	; 0x2005
 800d5ca:	f008 f90f 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d5ce:	4b25      	ldr	r3, [pc, #148]	; (800d664 <ThreadSecurityTask+0x674>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7f9 fbfe 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x08) == 0x00 )
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	f003 0308 	and.w	r3, r3, #8
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	f040 80b2 	bne.w	800d748 <ThreadSecurityTask+0x758>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x08;
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
 800d5e6:	f043 0308 	orr.w	r3, r3, #8
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d5ee:	4b1d      	ldr	r3, [pc, #116]	; (800d664 <ThreadSecurityTask+0x674>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f04f 31ff 	mov.w	r1, #4294967295
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7f9 fb9e 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	f242 0004 	movw	r0, #8196	; 0x2004
 800d602:	f008 f92d 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d606:	7bbb      	ldrb	r3, [r7, #14]
 800d608:	4619      	mov	r1, r3
 800d60a:	f242 0005 	movw	r0, #8197	; 0x2005
 800d60e:	f008 f927 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d612:	4b14      	ldr	r3, [pc, #80]	; (800d664 <ThreadSecurityTask+0x674>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4618      	mov	r0, r3
 800d618:	f7f9 fbdc 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x08;
 800d61c:	4b12      	ldr	r3, [pc, #72]	; (800d668 <ThreadSecurityTask+0x678>)
 800d61e:	889b      	ldrh	r3, [r3, #4]
 800d620:	f043 0308 	orr.w	r3, r3, #8
 800d624:	b29a      	uxth	r2, r3
 800d626:	4b10      	ldr	r3, [pc, #64]	; (800d668 <ThreadSecurityTask+0x678>)
 800d628:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d62a:	4b0e      	ldr	r3, [pc, #56]	; (800d664 <ThreadSecurityTask+0x674>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f04f 31ff 	mov.w	r1, #4294967295
 800d632:	4618      	mov	r0, r3
 800d634:	f7f9 fb80 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d638:	2100      	movs	r1, #0
 800d63a:	f242 106e 	movw	r0, #8558	; 0x216e
 800d63e:	f008 f90f 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d642:	2101      	movs	r1, #1
 800d644:	f242 106f 	movw	r0, #8559	; 0x216f
 800d648:	f008 f90a 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d64c:	4b05      	ldr	r3, [pc, #20]	; (800d664 <ThreadSecurityTask+0x674>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4618      	mov	r0, r3
 800d652:	f7f9 fbbf 	bl	8006dd4 <osMutexRelease>
 800d656:	e077      	b.n	800d748 <ThreadSecurityTask+0x758>
 800d658:	40021400 	.word	0x40021400
 800d65c:	20007ffc 	.word	0x20007ffc
 800d660:	20007ffd 	.word	0x20007ffd
 800d664:	20009a6c 	.word	0x20009a6c
 800d668:	2000a10c 	.word	0x2000a10c
 800d66c:	20007fff 	.word	0x20007fff
 800d670:	20007ffe 	.word	0x20007ffe

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_SET)
 800d674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d678:	486a      	ldr	r0, [pc, #424]	; (800d824 <ThreadSecurityTask+0x834>)
 800d67a:	f7f5 fddf 	bl	800323c <HAL_GPIO_ReadPin>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b01      	cmp	r3, #1
 800d682:	d161      	bne.n	800d748 <ThreadSecurityTask+0x758>
		{
			loop_state4_on = 0;
 800d684:	4b68      	ldr	r3, [pc, #416]	; (800d828 <ThreadSecurityTask+0x838>)
 800d686:	2200      	movs	r2, #0
 800d688:	701a      	strb	r2, [r3, #0]

			if(loop_state4_off<10)
 800d68a:	4b68      	ldr	r3, [pc, #416]	; (800d82c <ThreadSecurityTask+0x83c>)
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	2b09      	cmp	r3, #9
 800d690:	d85a      	bhi.n	800d748 <ThreadSecurityTask+0x758>
			{
				loop_state4_off++;
 800d692:	4b66      	ldr	r3, [pc, #408]	; (800d82c <ThreadSecurityTask+0x83c>)
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	3301      	adds	r3, #1
 800d698:	b2da      	uxtb	r2, r3
 800d69a:	4b64      	ldr	r3, [pc, #400]	; (800d82c <ThreadSecurityTask+0x83c>)
 800d69c:	701a      	strb	r2, [r3, #0]
				if(loop_state4_off==10)
 800d69e:	4b63      	ldr	r3, [pc, #396]	; (800d82c <ThreadSecurityTask+0x83c>)
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	2b0a      	cmp	r3, #10
 800d6a4:	d150      	bne.n	800d748 <ThreadSecurityTask+0x758>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d6a6:	4b62      	ldr	r3, [pc, #392]	; (800d830 <ThreadSecurityTask+0x840>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f04f 31ff 	mov.w	r1, #4294967295
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7f9 fb42 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d6b4:	f107 030e 	add.w	r3, r7, #14
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	f242 0005 	movw	r0, #8197	; 0x2005
 800d6be:	f008 f895 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d6c2:	4b5b      	ldr	r3, [pc, #364]	; (800d830 <ThreadSecurityTask+0x840>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7f9 fb84 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x08) == 0x08 )
 800d6cc:	7bbb      	ldrb	r3, [r7, #14]
 800d6ce:	f003 0308 	and.w	r3, r3, #8
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d038      	beq.n	800d748 <ThreadSecurityTask+0x758>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xF7;
 800d6d6:	7bbb      	ldrb	r3, [r7, #14]
 800d6d8:	f023 0308 	bic.w	r3, r3, #8
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d6e0:	4b53      	ldr	r3, [pc, #332]	; (800d830 <ThreadSecurityTask+0x840>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f04f 31ff 	mov.w	r1, #4294967295
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7f9 fb25 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	f242 0004 	movw	r0, #8196	; 0x2004
 800d6f4:	f008 f8b4 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d6f8:	7bbb      	ldrb	r3, [r7, #14]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f242 0005 	movw	r0, #8197	; 0x2005
 800d700:	f008 f8ae 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d704:	4b4a      	ldr	r3, [pc, #296]	; (800d830 <ThreadSecurityTask+0x840>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7f9 fb63 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xF7;
 800d70e:	4b49      	ldr	r3, [pc, #292]	; (800d834 <ThreadSecurityTask+0x844>)
 800d710:	889b      	ldrh	r3, [r3, #4]
 800d712:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 800d716:	b29a      	uxth	r2, r3
 800d718:	4b46      	ldr	r3, [pc, #280]	; (800d834 <ThreadSecurityTask+0x844>)
 800d71a:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d71c:	4b44      	ldr	r3, [pc, #272]	; (800d830 <ThreadSecurityTask+0x840>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f04f 31ff 	mov.w	r1, #4294967295
 800d724:	4618      	mov	r0, r3
 800d726:	f7f9 fb07 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d72a:	2100      	movs	r1, #0
 800d72c:	f242 106e 	movw	r0, #8558	; 0x216e
 800d730:	f008 f896 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d734:	2101      	movs	r1, #1
 800d736:	f242 106f 	movw	r0, #8559	; 0x216f
 800d73a:	f008 f891 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d73e:	4b3c      	ldr	r3, [pc, #240]	; (800d830 <ThreadSecurityTask+0x840>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4618      	mov	r0, r3
 800d744:	f7f9 fb46 	bl	8006dd4 <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №5--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_RESET)
 800d748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d74c:	4835      	ldr	r0, [pc, #212]	; (800d824 <ThreadSecurityTask+0x834>)
 800d74e:	f7f5 fd75 	bl	800323c <HAL_GPIO_ReadPin>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d173      	bne.n	800d840 <ThreadSecurityTask+0x850>
		{
			loop_state5_off = 0;
 800d758:	4b37      	ldr	r3, [pc, #220]	; (800d838 <ThreadSecurityTask+0x848>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	701a      	strb	r2, [r3, #0]

			if(loop_state5_on<10)
 800d75e:	4b37      	ldr	r3, [pc, #220]	; (800d83c <ThreadSecurityTask+0x84c>)
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	2b09      	cmp	r3, #9
 800d764:	f200 80d6 	bhi.w	800d914 <ThreadSecurityTask+0x924>
			{
				loop_state5_on++;
 800d768:	4b34      	ldr	r3, [pc, #208]	; (800d83c <ThreadSecurityTask+0x84c>)
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	3301      	adds	r3, #1
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	4b32      	ldr	r3, [pc, #200]	; (800d83c <ThreadSecurityTask+0x84c>)
 800d772:	701a      	strb	r2, [r3, #0]
				if(loop_state5_on==10)
 800d774:	4b31      	ldr	r3, [pc, #196]	; (800d83c <ThreadSecurityTask+0x84c>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	2b0a      	cmp	r3, #10
 800d77a:	f040 80cb 	bne.w	800d914 <ThreadSecurityTask+0x924>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d77e:	4b2c      	ldr	r3, [pc, #176]	; (800d830 <ThreadSecurityTask+0x840>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f04f 31ff 	mov.w	r1, #4294967295
 800d786:	4618      	mov	r0, r3
 800d788:	f7f9 fad6 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d78c:	f107 030e 	add.w	r3, r7, #14
 800d790:	4619      	mov	r1, r3
 800d792:	f242 0005 	movw	r0, #8197	; 0x2005
 800d796:	f008 f829 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d79a:	4b25      	ldr	r3, [pc, #148]	; (800d830 <ThreadSecurityTask+0x840>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f9 fb18 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x10) == 0x00 )
 800d7a4:	7bbb      	ldrb	r3, [r7, #14]
 800d7a6:	f003 0310 	and.w	r3, r3, #16
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f040 80b2 	bne.w	800d914 <ThreadSecurityTask+0x924>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x10;
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	f043 0310 	orr.w	r3, r3, #16
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d7ba:	4b1d      	ldr	r3, [pc, #116]	; (800d830 <ThreadSecurityTask+0x840>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f04f 31ff 	mov.w	r1, #4294967295
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7f9 fab8 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	f242 0004 	movw	r0, #8196	; 0x2004
 800d7ce:	f008 f847 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d7d2:	7bbb      	ldrb	r3, [r7, #14]
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	f242 0005 	movw	r0, #8197	; 0x2005
 800d7da:	f008 f841 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d7de:	4b14      	ldr	r3, [pc, #80]	; (800d830 <ThreadSecurityTask+0x840>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7f9 faf6 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x10;
 800d7e8:	4b12      	ldr	r3, [pc, #72]	; (800d834 <ThreadSecurityTask+0x844>)
 800d7ea:	889b      	ldrh	r3, [r3, #4]
 800d7ec:	f043 0310 	orr.w	r3, r3, #16
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	4b10      	ldr	r3, [pc, #64]	; (800d834 <ThreadSecurityTask+0x844>)
 800d7f4:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d7f6:	4b0e      	ldr	r3, [pc, #56]	; (800d830 <ThreadSecurityTask+0x840>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f04f 31ff 	mov.w	r1, #4294967295
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7f9 fa9a 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d804:	2100      	movs	r1, #0
 800d806:	f242 106e 	movw	r0, #8558	; 0x216e
 800d80a:	f008 f829 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d80e:	2101      	movs	r1, #1
 800d810:	f242 106f 	movw	r0, #8559	; 0x216f
 800d814:	f008 f824 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d818:	4b05      	ldr	r3, [pc, #20]	; (800d830 <ThreadSecurityTask+0x840>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7f9 fad9 	bl	8006dd4 <osMutexRelease>
 800d822:	e077      	b.n	800d914 <ThreadSecurityTask+0x924>
 800d824:	40021400 	.word	0x40021400
 800d828:	20007ffe 	.word	0x20007ffe
 800d82c:	20007fff 	.word	0x20007fff
 800d830:	20009a6c 	.word	0x20009a6c
 800d834:	2000a10c 	.word	0x2000a10c
 800d838:	20008001 	.word	0x20008001
 800d83c:	20008000 	.word	0x20008000

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_SET)
 800d840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d844:	486a      	ldr	r0, [pc, #424]	; (800d9f0 <ThreadSecurityTask+0xa00>)
 800d846:	f7f5 fcf9 	bl	800323c <HAL_GPIO_ReadPin>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d161      	bne.n	800d914 <ThreadSecurityTask+0x924>
		{
			loop_state5_on = 0;
 800d850:	4b68      	ldr	r3, [pc, #416]	; (800d9f4 <ThreadSecurityTask+0xa04>)
 800d852:	2200      	movs	r2, #0
 800d854:	701a      	strb	r2, [r3, #0]

			if(loop_state5_off<10)
 800d856:	4b68      	ldr	r3, [pc, #416]	; (800d9f8 <ThreadSecurityTask+0xa08>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b09      	cmp	r3, #9
 800d85c:	d85a      	bhi.n	800d914 <ThreadSecurityTask+0x924>
			{
				loop_state5_off++;
 800d85e:	4b66      	ldr	r3, [pc, #408]	; (800d9f8 <ThreadSecurityTask+0xa08>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	3301      	adds	r3, #1
 800d864:	b2da      	uxtb	r2, r3
 800d866:	4b64      	ldr	r3, [pc, #400]	; (800d9f8 <ThreadSecurityTask+0xa08>)
 800d868:	701a      	strb	r2, [r3, #0]
				if(loop_state5_off==10)
 800d86a:	4b63      	ldr	r3, [pc, #396]	; (800d9f8 <ThreadSecurityTask+0xa08>)
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b0a      	cmp	r3, #10
 800d870:	d150      	bne.n	800d914 <ThreadSecurityTask+0x924>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d872:	4b62      	ldr	r3, [pc, #392]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f04f 31ff 	mov.w	r1, #4294967295
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7f9 fa5c 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d880:	f107 030e 	add.w	r3, r7, #14
 800d884:	4619      	mov	r1, r3
 800d886:	f242 0005 	movw	r0, #8197	; 0x2005
 800d88a:	f007 ffaf 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d88e:	4b5b      	ldr	r3, [pc, #364]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4618      	mov	r0, r3
 800d894:	f7f9 fa9e 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x10) == 0x10 )
 800d898:	7bbb      	ldrb	r3, [r7, #14]
 800d89a:	f003 0310 	and.w	r3, r3, #16
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d038      	beq.n	800d914 <ThreadSecurityTask+0x924>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xEF;
 800d8a2:	7bbb      	ldrb	r3, [r7, #14]
 800d8a4:	f023 0310 	bic.w	r3, r3, #16
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d8ac:	4b53      	ldr	r3, [pc, #332]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f04f 31ff 	mov.w	r1, #4294967295
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7f9 fa3f 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	f242 0004 	movw	r0, #8196	; 0x2004
 800d8c0:	f007 ffce 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d8c4:	7bbb      	ldrb	r3, [r7, #14]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	f242 0005 	movw	r0, #8197	; 0x2005
 800d8cc:	f007 ffc8 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d8d0:	4b4a      	ldr	r3, [pc, #296]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7f9 fa7d 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xEF;
 800d8da:	4b49      	ldr	r3, [pc, #292]	; (800da00 <ThreadSecurityTask+0xa10>)
 800d8dc:	889b      	ldrh	r3, [r3, #4]
 800d8de:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	4b46      	ldr	r3, [pc, #280]	; (800da00 <ThreadSecurityTask+0xa10>)
 800d8e6:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d8e8:	4b44      	ldr	r3, [pc, #272]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f04f 31ff 	mov.w	r1, #4294967295
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7f9 fa21 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	f242 106e 	movw	r0, #8558	; 0x216e
 800d8fc:	f007 ffb0 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d900:	2101      	movs	r1, #1
 800d902:	f242 106f 	movw	r0, #8559	; 0x216f
 800d906:	f007 ffab 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d90a:	4b3c      	ldr	r3, [pc, #240]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4618      	mov	r0, r3
 800d910:	f7f9 fa60 	bl	8006dd4 <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №6--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_RESET)
 800d914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d918:	4835      	ldr	r0, [pc, #212]	; (800d9f0 <ThreadSecurityTask+0xa00>)
 800d91a:	f7f5 fc8f 	bl	800323c <HAL_GPIO_ReadPin>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d173      	bne.n	800da0c <ThreadSecurityTask+0xa1c>
		{
			loop_state6_off = 0;
 800d924:	4b37      	ldr	r3, [pc, #220]	; (800da04 <ThreadSecurityTask+0xa14>)
 800d926:	2200      	movs	r2, #0
 800d928:	701a      	strb	r2, [r3, #0]

			if(loop_state6_on<10)
 800d92a:	4b37      	ldr	r3, [pc, #220]	; (800da08 <ThreadSecurityTask+0xa18>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	2b09      	cmp	r3, #9
 800d930:	f200 80d6 	bhi.w	800dae0 <ThreadSecurityTask+0xaf0>
			{
				loop_state6_on++;
 800d934:	4b34      	ldr	r3, [pc, #208]	; (800da08 <ThreadSecurityTask+0xa18>)
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	3301      	adds	r3, #1
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	4b32      	ldr	r3, [pc, #200]	; (800da08 <ThreadSecurityTask+0xa18>)
 800d93e:	701a      	strb	r2, [r3, #0]
				if(loop_state6_on==10)
 800d940:	4b31      	ldr	r3, [pc, #196]	; (800da08 <ThreadSecurityTask+0xa18>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b0a      	cmp	r3, #10
 800d946:	f040 80cb 	bne.w	800dae0 <ThreadSecurityTask+0xaf0>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d94a:	4b2c      	ldr	r3, [pc, #176]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f04f 31ff 	mov.w	r1, #4294967295
 800d952:	4618      	mov	r0, r3
 800d954:	f7f9 f9f0 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800d958:	f107 030e 	add.w	r3, r7, #14
 800d95c:	4619      	mov	r1, r3
 800d95e:	f242 0005 	movw	r0, #8197	; 0x2005
 800d962:	f007 ff43 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800d966:	4b25      	ldr	r3, [pc, #148]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7f9 fa32 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x20) == 0x00 )
 800d970:	7bbb      	ldrb	r3, [r7, #14]
 800d972:	f003 0320 	and.w	r3, r3, #32
 800d976:	2b00      	cmp	r3, #0
 800d978:	f040 80b2 	bne.w	800dae0 <ThreadSecurityTask+0xaf0>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x20;
 800d97c:	7bbb      	ldrb	r3, [r7, #14]
 800d97e:	f043 0320 	orr.w	r3, r3, #32
 800d982:	b2db      	uxtb	r3, r3
 800d984:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d986:	4b1d      	ldr	r3, [pc, #116]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f04f 31ff 	mov.w	r1, #4294967295
 800d98e:	4618      	mov	r0, r3
 800d990:	f7f9 f9d2 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800d994:	2100      	movs	r1, #0
 800d996:	f242 0004 	movw	r0, #8196	; 0x2004
 800d99a:	f007 ff61 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800d99e:	7bbb      	ldrb	r3, [r7, #14]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	f242 0005 	movw	r0, #8197	; 0x2005
 800d9a6:	f007 ff5b 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d9aa:	4b14      	ldr	r3, [pc, #80]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7f9 fa10 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x20;
 800d9b4:	4b12      	ldr	r3, [pc, #72]	; (800da00 <ThreadSecurityTask+0xa10>)
 800d9b6:	889b      	ldrh	r3, [r3, #4]
 800d9b8:	f043 0320 	orr.w	r3, r3, #32
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	4b10      	ldr	r3, [pc, #64]	; (800da00 <ThreadSecurityTask+0xa10>)
 800d9c0:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d9c2:	4b0e      	ldr	r3, [pc, #56]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f04f 31ff 	mov.w	r1, #4294967295
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7f9 f9b4 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	f242 106e 	movw	r0, #8558	; 0x216e
 800d9d6:	f007 ff43 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800d9da:	2101      	movs	r1, #1
 800d9dc:	f242 106f 	movw	r0, #8559	; 0x216f
 800d9e0:	f007 ff3e 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800d9e4:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <ThreadSecurityTask+0xa0c>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7f9 f9f3 	bl	8006dd4 <osMutexRelease>
 800d9ee:	e077      	b.n	800dae0 <ThreadSecurityTask+0xaf0>
 800d9f0:	40021400 	.word	0x40021400
 800d9f4:	20008000 	.word	0x20008000
 800d9f8:	20008001 	.word	0x20008001
 800d9fc:	20009a6c 	.word	0x20009a6c
 800da00:	2000a10c 	.word	0x2000a10c
 800da04:	20008003 	.word	0x20008003
 800da08:	20008002 	.word	0x20008002

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_SET)
 800da0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800da10:	486a      	ldr	r0, [pc, #424]	; (800dbbc <ThreadSecurityTask+0xbcc>)
 800da12:	f7f5 fc13 	bl	800323c <HAL_GPIO_ReadPin>
 800da16:	4603      	mov	r3, r0
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d161      	bne.n	800dae0 <ThreadSecurityTask+0xaf0>
		{
			loop_state6_on = 0;
 800da1c:	4b68      	ldr	r3, [pc, #416]	; (800dbc0 <ThreadSecurityTask+0xbd0>)
 800da1e:	2200      	movs	r2, #0
 800da20:	701a      	strb	r2, [r3, #0]

			if(loop_state6_off<10)
 800da22:	4b68      	ldr	r3, [pc, #416]	; (800dbc4 <ThreadSecurityTask+0xbd4>)
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	2b09      	cmp	r3, #9
 800da28:	d85a      	bhi.n	800dae0 <ThreadSecurityTask+0xaf0>
			{
				loop_state6_off++;
 800da2a:	4b66      	ldr	r3, [pc, #408]	; (800dbc4 <ThreadSecurityTask+0xbd4>)
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	3301      	adds	r3, #1
 800da30:	b2da      	uxtb	r2, r3
 800da32:	4b64      	ldr	r3, [pc, #400]	; (800dbc4 <ThreadSecurityTask+0xbd4>)
 800da34:	701a      	strb	r2, [r3, #0]
				if(loop_state6_off==10)
 800da36:	4b63      	ldr	r3, [pc, #396]	; (800dbc4 <ThreadSecurityTask+0xbd4>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b0a      	cmp	r3, #10
 800da3c:	d150      	bne.n	800dae0 <ThreadSecurityTask+0xaf0>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800da3e:	4b62      	ldr	r3, [pc, #392]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f04f 31ff 	mov.w	r1, #4294967295
 800da46:	4618      	mov	r0, r3
 800da48:	f7f9 f976 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800da4c:	f107 030e 	add.w	r3, r7, #14
 800da50:	4619      	mov	r1, r3
 800da52:	f242 0005 	movw	r0, #8197	; 0x2005
 800da56:	f007 fec9 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800da5a:	4b5b      	ldr	r3, [pc, #364]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f9 f9b8 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x20) == 0x20 )
 800da64:	7bbb      	ldrb	r3, [r7, #14]
 800da66:	f003 0320 	and.w	r3, r3, #32
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d038      	beq.n	800dae0 <ThreadSecurityTask+0xaf0>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xDF;
 800da6e:	7bbb      	ldrb	r3, [r7, #14]
 800da70:	f023 0320 	bic.w	r3, r3, #32
 800da74:	b2db      	uxtb	r3, r3
 800da76:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800da78:	4b53      	ldr	r3, [pc, #332]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f04f 31ff 	mov.w	r1, #4294967295
 800da80:	4618      	mov	r0, r3
 800da82:	f7f9 f959 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800da86:	2100      	movs	r1, #0
 800da88:	f242 0004 	movw	r0, #8196	; 0x2004
 800da8c:	f007 fee8 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800da90:	7bbb      	ldrb	r3, [r7, #14]
 800da92:	4619      	mov	r1, r3
 800da94:	f242 0005 	movw	r0, #8197	; 0x2005
 800da98:	f007 fee2 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800da9c:	4b4a      	ldr	r3, [pc, #296]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7f9 f997 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xDF;
 800daa6:	4b49      	ldr	r3, [pc, #292]	; (800dbcc <ThreadSecurityTask+0xbdc>)
 800daa8:	889b      	ldrh	r3, [r3, #4]
 800daaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800daae:	b29a      	uxth	r2, r3
 800dab0:	4b46      	ldr	r3, [pc, #280]	; (800dbcc <ThreadSecurityTask+0xbdc>)
 800dab2:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dab4:	4b44      	ldr	r3, [pc, #272]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f04f 31ff 	mov.w	r1, #4294967295
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7f9 f93b 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800dac2:	2100      	movs	r1, #0
 800dac4:	f242 106e 	movw	r0, #8558	; 0x216e
 800dac8:	f007 feca 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800dacc:	2101      	movs	r1, #1
 800dace:	f242 106f 	movw	r0, #8559	; 0x216f
 800dad2:	f007 fec5 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800dad6:	4b3c      	ldr	r3, [pc, #240]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4618      	mov	r0, r3
 800dadc:	f7f9 f97a 	bl	8006dd4 <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №7--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_RESET)
 800dae0:	2101      	movs	r1, #1
 800dae2:	483b      	ldr	r0, [pc, #236]	; (800dbd0 <ThreadSecurityTask+0xbe0>)
 800dae4:	f7f5 fbaa 	bl	800323c <HAL_GPIO_ReadPin>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d176      	bne.n	800dbdc <ThreadSecurityTask+0xbec>
		{
			loop_state7_off = 0;
 800daee:	4b39      	ldr	r3, [pc, #228]	; (800dbd4 <ThreadSecurityTask+0xbe4>)
 800daf0:	2200      	movs	r2, #0
 800daf2:	701a      	strb	r2, [r3, #0]

			if(loop_state7_on<10)
 800daf4:	4b38      	ldr	r3, [pc, #224]	; (800dbd8 <ThreadSecurityTask+0xbe8>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	2b09      	cmp	r3, #9
 800dafa:	f200 80d8 	bhi.w	800dcae <ThreadSecurityTask+0xcbe>
			{
				loop_state7_on++;
 800dafe:	4b36      	ldr	r3, [pc, #216]	; (800dbd8 <ThreadSecurityTask+0xbe8>)
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	3301      	adds	r3, #1
 800db04:	b2da      	uxtb	r2, r3
 800db06:	4b34      	ldr	r3, [pc, #208]	; (800dbd8 <ThreadSecurityTask+0xbe8>)
 800db08:	701a      	strb	r2, [r3, #0]
				if(loop_state7_on==10)
 800db0a:	4b33      	ldr	r3, [pc, #204]	; (800dbd8 <ThreadSecurityTask+0xbe8>)
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b0a      	cmp	r3, #10
 800db10:	f040 80cd 	bne.w	800dcae <ThreadSecurityTask+0xcbe>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800db14:	4b2c      	ldr	r3, [pc, #176]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f04f 31ff 	mov.w	r1, #4294967295
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7f9 f90b 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800db22:	f107 030e 	add.w	r3, r7, #14
 800db26:	4619      	mov	r1, r3
 800db28:	f242 0005 	movw	r0, #8197	; 0x2005
 800db2c:	f007 fe5e 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800db30:	4b25      	ldr	r3, [pc, #148]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4618      	mov	r0, r3
 800db36:	f7f9 f94d 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x40) == 0x00 )
 800db3a:	7bbb      	ldrb	r3, [r7, #14]
 800db3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db40:	2b00      	cmp	r3, #0
 800db42:	f040 80b4 	bne.w	800dcae <ThreadSecurityTask+0xcbe>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x40;
 800db46:	7bbb      	ldrb	r3, [r7, #14]
 800db48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800db50:	4b1d      	ldr	r3, [pc, #116]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f04f 31ff 	mov.w	r1, #4294967295
 800db58:	4618      	mov	r0, r3
 800db5a:	f7f9 f8ed 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800db5e:	2100      	movs	r1, #0
 800db60:	f242 0004 	movw	r0, #8196	; 0x2004
 800db64:	f007 fe7c 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800db68:	7bbb      	ldrb	r3, [r7, #14]
 800db6a:	4619      	mov	r1, r3
 800db6c:	f242 0005 	movw	r0, #8197	; 0x2005
 800db70:	f007 fe76 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800db74:	4b14      	ldr	r3, [pc, #80]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4618      	mov	r0, r3
 800db7a:	f7f9 f92b 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x40;
 800db7e:	4b13      	ldr	r3, [pc, #76]	; (800dbcc <ThreadSecurityTask+0xbdc>)
 800db80:	889b      	ldrh	r3, [r3, #4]
 800db82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db86:	b29a      	uxth	r2, r3
 800db88:	4b10      	ldr	r3, [pc, #64]	; (800dbcc <ThreadSecurityTask+0xbdc>)
 800db8a:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800db8c:	4b0e      	ldr	r3, [pc, #56]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f04f 31ff 	mov.w	r1, #4294967295
 800db94:	4618      	mov	r0, r3
 800db96:	f7f9 f8cf 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800db9a:	2100      	movs	r1, #0
 800db9c:	f242 106e 	movw	r0, #8558	; 0x216e
 800dba0:	f007 fe5e 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800dba4:	2101      	movs	r1, #1
 800dba6:	f242 106f 	movw	r0, #8559	; 0x216f
 800dbaa:	f007 fe59 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800dbae:	4b06      	ldr	r3, [pc, #24]	; (800dbc8 <ThreadSecurityTask+0xbd8>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7f9 f90e 	bl	8006dd4 <osMutexRelease>
 800dbb8:	e079      	b.n	800dcae <ThreadSecurityTask+0xcbe>
 800dbba:	bf00      	nop
 800dbbc:	40021400 	.word	0x40021400
 800dbc0:	20008002 	.word	0x20008002
 800dbc4:	20008003 	.word	0x20008003
 800dbc8:	20009a6c 	.word	0x20009a6c
 800dbcc:	2000a10c 	.word	0x2000a10c
 800dbd0:	40021800 	.word	0x40021800
 800dbd4:	20008005 	.word	0x20008005
 800dbd8:	20008004 	.word	0x20008004

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_SET)
 800dbdc:	2101      	movs	r1, #1
 800dbde:	486a      	ldr	r0, [pc, #424]	; (800dd88 <ThreadSecurityTask+0xd98>)
 800dbe0:	f7f5 fb2c 	bl	800323c <HAL_GPIO_ReadPin>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d161      	bne.n	800dcae <ThreadSecurityTask+0xcbe>
		{
			loop_state7_on = 0;
 800dbea:	4b68      	ldr	r3, [pc, #416]	; (800dd8c <ThreadSecurityTask+0xd9c>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	701a      	strb	r2, [r3, #0]

			if(loop_state7_off<10)
 800dbf0:	4b67      	ldr	r3, [pc, #412]	; (800dd90 <ThreadSecurityTask+0xda0>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	2b09      	cmp	r3, #9
 800dbf6:	d85a      	bhi.n	800dcae <ThreadSecurityTask+0xcbe>
			{
				loop_state7_off++;
 800dbf8:	4b65      	ldr	r3, [pc, #404]	; (800dd90 <ThreadSecurityTask+0xda0>)
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	4b63      	ldr	r3, [pc, #396]	; (800dd90 <ThreadSecurityTask+0xda0>)
 800dc02:	701a      	strb	r2, [r3, #0]
				if(loop_state7_off==10)
 800dc04:	4b62      	ldr	r3, [pc, #392]	; (800dd90 <ThreadSecurityTask+0xda0>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b0a      	cmp	r3, #10
 800dc0a:	d150      	bne.n	800dcae <ThreadSecurityTask+0xcbe>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dc0c:	4b61      	ldr	r3, [pc, #388]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f04f 31ff 	mov.w	r1, #4294967295
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7f9 f88f 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800dc1a:	f107 030e 	add.w	r3, r7, #14
 800dc1e:	4619      	mov	r1, r3
 800dc20:	f242 0005 	movw	r0, #8197	; 0x2005
 800dc24:	f007 fde2 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800dc28:	4b5a      	ldr	r3, [pc, #360]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7f9 f8d1 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x40) == 0x40 )
 800dc32:	7bbb      	ldrb	r3, [r7, #14]
 800dc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d038      	beq.n	800dcae <ThreadSecurityTask+0xcbe>
					{

						status_loop_reg_temp = status_loop_reg_temp&0xBF;
 800dc3c:	7bbb      	ldrb	r3, [r7, #14]
 800dc3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dc46:	4b53      	ldr	r3, [pc, #332]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f04f 31ff 	mov.w	r1, #4294967295
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7f9 f872 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800dc54:	2100      	movs	r1, #0
 800dc56:	f242 0004 	movw	r0, #8196	; 0x2004
 800dc5a:	f007 fe01 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800dc5e:	7bbb      	ldrb	r3, [r7, #14]
 800dc60:	4619      	mov	r1, r3
 800dc62:	f242 0005 	movw	r0, #8197	; 0x2005
 800dc66:	f007 fdfb 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800dc6a:	4b4a      	ldr	r3, [pc, #296]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7f9 f8b0 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0xBF;
 800dc74:	4b48      	ldr	r3, [pc, #288]	; (800dd98 <ThreadSecurityTask+0xda8>)
 800dc76:	889b      	ldrh	r3, [r3, #4]
 800dc78:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800dc7c:	b29a      	uxth	r2, r3
 800dc7e:	4b46      	ldr	r3, [pc, #280]	; (800dd98 <ThreadSecurityTask+0xda8>)
 800dc80:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dc82:	4b44      	ldr	r3, [pc, #272]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f04f 31ff 	mov.w	r1, #4294967295
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f9 f854 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800dc90:	2100      	movs	r1, #0
 800dc92:	f242 106e 	movw	r0, #8558	; 0x216e
 800dc96:	f007 fde3 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800dc9a:	2101      	movs	r1, #1
 800dc9c:	f242 106f 	movw	r0, #8559	; 0x216f
 800dca0:	f007 fdde 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800dca4:	4b3b      	ldr	r3, [pc, #236]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7f9 f893 	bl	8006dd4 <osMutexRelease>

		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------

		//----Контроль статуса шлейфа №8--------------------------------------------------------------------------------------------------------------------------------
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_RESET)
 800dcae:	2102      	movs	r1, #2
 800dcb0:	4835      	ldr	r0, [pc, #212]	; (800dd88 <ThreadSecurityTask+0xd98>)
 800dcb2:	f7f5 fac3 	bl	800323c <HAL_GPIO_ReadPin>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d173      	bne.n	800dda4 <ThreadSecurityTask+0xdb4>
		{
			loop_state8_off = 0;
 800dcbc:	4b37      	ldr	r3, [pc, #220]	; (800dd9c <ThreadSecurityTask+0xdac>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	701a      	strb	r2, [r3, #0]

			if(loop_state8_on<10)
 800dcc2:	4b37      	ldr	r3, [pc, #220]	; (800dda0 <ThreadSecurityTask+0xdb0>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	2b09      	cmp	r3, #9
 800dcc8:	f200 80d4 	bhi.w	800de74 <ThreadSecurityTask+0xe84>
			{
				loop_state8_on++;
 800dccc:	4b34      	ldr	r3, [pc, #208]	; (800dda0 <ThreadSecurityTask+0xdb0>)
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	4b32      	ldr	r3, [pc, #200]	; (800dda0 <ThreadSecurityTask+0xdb0>)
 800dcd6:	701a      	strb	r2, [r3, #0]
				if(loop_state8_on==10)
 800dcd8:	4b31      	ldr	r3, [pc, #196]	; (800dda0 <ThreadSecurityTask+0xdb0>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	2b0a      	cmp	r3, #10
 800dcde:	f040 80c9 	bne.w	800de74 <ThreadSecurityTask+0xe84>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dce2:	4b2c      	ldr	r3, [pc, #176]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f04f 31ff 	mov.w	r1, #4294967295
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7f9 f824 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800dcf0:	f107 030e 	add.w	r3, r7, #14
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	f242 0005 	movw	r0, #8197	; 0x2005
 800dcfa:	f007 fd77 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800dcfe:	4b25      	ldr	r3, [pc, #148]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7f9 f866 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x80) == 0x00 )
 800dd08:	7bbb      	ldrb	r3, [r7, #14]
 800dd0a:	b25b      	sxtb	r3, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f2c0 80b1 	blt.w	800de74 <ThreadSecurityTask+0xe84>
					{

						status_loop_reg_temp = status_loop_reg_temp|0x80;
 800dd12:	7bbb      	ldrb	r3, [r7, #14]
 800dd14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dd1c:	4b1d      	ldr	r3, [pc, #116]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f04f 31ff 	mov.w	r1, #4294967295
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7f9 f807 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	f242 0004 	movw	r0, #8196	; 0x2004
 800dd30:	f007 fd96 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800dd34:	7bbb      	ldrb	r3, [r7, #14]
 800dd36:	4619      	mov	r1, r3
 800dd38:	f242 0005 	movw	r0, #8197	; 0x2005
 800dd3c:	f007 fd90 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800dd40:	4b14      	ldr	r3, [pc, #80]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7f9 f845 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg|0x80;
 800dd4a:	4b13      	ldr	r3, [pc, #76]	; (800dd98 <ThreadSecurityTask+0xda8>)
 800dd4c:	889b      	ldrh	r3, [r3, #4]
 800dd4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	4b10      	ldr	r3, [pc, #64]	; (800dd98 <ThreadSecurityTask+0xda8>)
 800dd56:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dd58:	4b0e      	ldr	r3, [pc, #56]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f04f 31ff 	mov.w	r1, #4294967295
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7f8 ffe9 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800dd66:	2100      	movs	r1, #0
 800dd68:	f242 106e 	movw	r0, #8558	; 0x216e
 800dd6c:	f007 fd78 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800dd70:	2101      	movs	r1, #1
 800dd72:	f242 106f 	movw	r0, #8559	; 0x216f
 800dd76:	f007 fd73 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800dd7a:	4b06      	ldr	r3, [pc, #24]	; (800dd94 <ThreadSecurityTask+0xda4>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7f9 f828 	bl	8006dd4 <osMutexRelease>
 800dd84:	e076      	b.n	800de74 <ThreadSecurityTask+0xe84>
 800dd86:	bf00      	nop
 800dd88:	40021800 	.word	0x40021800
 800dd8c:	20008004 	.word	0x20008004
 800dd90:	20008005 	.word	0x20008005
 800dd94:	20009a6c 	.word	0x20009a6c
 800dd98:	2000a10c 	.word	0x2000a10c
 800dd9c:	20008007 	.word	0x20008007
 800dda0:	20008006 	.word	0x20008006

				}
			}

		}
		else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_SET)
 800dda4:	2102      	movs	r1, #2
 800dda6:	4895      	ldr	r0, [pc, #596]	; (800dffc <ThreadSecurityTask+0x100c>)
 800dda8:	f7f5 fa48 	bl	800323c <HAL_GPIO_ReadPin>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	d160      	bne.n	800de74 <ThreadSecurityTask+0xe84>
		{
			loop_state8_on = 0;
 800ddb2:	4b93      	ldr	r3, [pc, #588]	; (800e000 <ThreadSecurityTask+0x1010>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	701a      	strb	r2, [r3, #0]

			if(loop_state8_off<10)
 800ddb8:	4b92      	ldr	r3, [pc, #584]	; (800e004 <ThreadSecurityTask+0x1014>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2b09      	cmp	r3, #9
 800ddbe:	d859      	bhi.n	800de74 <ThreadSecurityTask+0xe84>
			{
				loop_state8_off++;
 800ddc0:	4b90      	ldr	r3, [pc, #576]	; (800e004 <ThreadSecurityTask+0x1014>)
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	4b8e      	ldr	r3, [pc, #568]	; (800e004 <ThreadSecurityTask+0x1014>)
 800ddca:	701a      	strb	r2, [r3, #0]
				if(loop_state8_off==10)
 800ddcc:	4b8d      	ldr	r3, [pc, #564]	; (800e004 <ThreadSecurityTask+0x1014>)
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	2b0a      	cmp	r3, #10
 800ddd2:	d14f      	bne.n	800de74 <ThreadSecurityTask+0xe84>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ddd4:	4b8c      	ldr	r3, [pc, #560]	; (800e008 <ThreadSecurityTask+0x1018>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f04f 31ff 	mov.w	r1, #4294967295
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7f8 ffab 	bl	8006d38 <osMutexWait>
					fm25v02_read(2*STATUS_LOOP_REG+1, &status_loop_reg_temp);
 800dde2:	f107 030e 	add.w	r3, r7, #14
 800dde6:	4619      	mov	r1, r3
 800dde8:	f242 0005 	movw	r0, #8197	; 0x2005
 800ddec:	f007 fcfe 	bl	80157ec <fm25v02_read>
					osMutexRelease(Fm25v02MutexHandle);
 800ddf0:	4b85      	ldr	r3, [pc, #532]	; (800e008 <ThreadSecurityTask+0x1018>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7f8 ffed 	bl	8006dd4 <osMutexRelease>

					if( (status_loop_reg_temp&0x80) == 0x80 )
 800ddfa:	7bbb      	ldrb	r3, [r7, #14]
 800ddfc:	b25b      	sxtb	r3, r3
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	da38      	bge.n	800de74 <ThreadSecurityTask+0xe84>
					{

						status_loop_reg_temp = status_loop_reg_temp&0x7F;
 800de02:	7bbb      	ldrb	r3, [r7, #14]
 800de04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	73bb      	strb	r3, [r7, #14]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800de0c:	4b7e      	ldr	r3, [pc, #504]	; (800e008 <ThreadSecurityTask+0x1018>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f04f 31ff 	mov.w	r1, #4294967295
 800de14:	4618      	mov	r0, r3
 800de16:	f7f8 ff8f 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*STATUS_LOOP_REG, 0x00);
 800de1a:	2100      	movs	r1, #0
 800de1c:	f242 0004 	movw	r0, #8196	; 0x2004
 800de20:	f007 fd1e 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*STATUS_LOOP_REG+1, status_loop_reg_temp);
 800de24:	7bbb      	ldrb	r3, [r7, #14]
 800de26:	4619      	mov	r1, r3
 800de28:	f242 0005 	movw	r0, #8197	; 0x2005
 800de2c:	f007 fd18 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800de30:	4b75      	ldr	r3, [pc, #468]	; (800e008 <ThreadSecurityTask+0x1018>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4618      	mov	r0, r3
 800de36:	f7f8 ffcd 	bl	8006dd4 <osMutexRelease>

						status_registers.status_loop_reg = status_registers.status_loop_reg&0x7F;
 800de3a:	4b74      	ldr	r3, [pc, #464]	; (800e00c <ThreadSecurityTask+0x101c>)
 800de3c:	889b      	ldrh	r3, [r3, #4]
 800de3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de42:	b29a      	uxth	r2, r3
 800de44:	4b71      	ldr	r3, [pc, #452]	; (800e00c <ThreadSecurityTask+0x101c>)
 800de46:	809a      	strh	r2, [r3, #4]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800de48:	4b6f      	ldr	r3, [pc, #444]	; (800e008 <ThreadSecurityTask+0x1018>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f04f 31ff 	mov.w	r1, #4294967295
 800de50:	4618      	mov	r0, r3
 800de52:	f7f8 ff71 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800de56:	2100      	movs	r1, #0
 800de58:	f242 106e 	movw	r0, #8558	; 0x216e
 800de5c:	f007 fd00 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800de60:	2101      	movs	r1, #1
 800de62:	f242 106f 	movw	r0, #8559	; 0x216f
 800de66:	f007 fcfb 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800de6a:	4b67      	ldr	r3, [pc, #412]	; (800e008 <ThreadSecurityTask+0x1018>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4618      	mov	r0, r3
 800de70:	f7f8 ffb0 	bl	8006dd4 <osMutexRelease>
		}
		//--------------------------------------------------------------------------------------------------------------------------------------------------



		if( (status_registers.security_status_reg == ENABLED_BY_IBUTTON) || (status_registers.security_status_reg == ENABLED_BY_SERVER) && (status_registers.power_on_reg == 1) ) // если основное питание есть и режим охраны включен таблеткой или из центра
 800de74:	4b65      	ldr	r3, [pc, #404]	; (800e00c <ThreadSecurityTask+0x101c>)
 800de76:	885b      	ldrh	r3, [r3, #2]
 800de78:	2b03      	cmp	r3, #3
 800de7a:	d009      	beq.n	800de90 <ThreadSecurityTask+0xea0>
 800de7c:	4b63      	ldr	r3, [pc, #396]	; (800e00c <ThreadSecurityTask+0x101c>)
 800de7e:	885b      	ldrh	r3, [r3, #2]
 800de80:	2b01      	cmp	r3, #1
 800de82:	f040 85fa 	bne.w	800ea7a <ThreadSecurityTask+0x1a8a>
 800de86:	4b61      	ldr	r3, [pc, #388]	; (800e00c <ThreadSecurityTask+0x101c>)
 800de88:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	f040 85f5 	bne.w	800ea7a <ThreadSecurityTask+0x1a8a>
		{

			//----Контроль шлейфа №1--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x01) != 0x00 ) )
 800de90:	2110      	movs	r1, #16
 800de92:	485f      	ldr	r0, [pc, #380]	; (800e010 <ThreadSecurityTask+0x1020>)
 800de94:	f7f5 f9d2 	bl	800323c <HAL_GPIO_ReadPin>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f040 8098 	bne.w	800dfd0 <ThreadSecurityTask+0xfe0>
 800dea0:	4b5c      	ldr	r3, [pc, #368]	; (800e014 <ThreadSecurityTask+0x1024>)
 800dea2:	885b      	ldrh	r3, [r3, #2]
 800dea4:	f003 0301 	and.w	r3, r3, #1
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 8091 	beq.w	800dfd0 <ThreadSecurityTask+0xfe0>
			{
				if(button_state1<10)
 800deae:	4b5a      	ldr	r3, [pc, #360]	; (800e018 <ThreadSecurityTask+0x1028>)
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	2b09      	cmp	r3, #9
 800deb4:	f200 80b4 	bhi.w	800e020 <ThreadSecurityTask+0x1030>
				{
					button_state1++;
 800deb8:	4b57      	ldr	r3, [pc, #348]	; (800e018 <ThreadSecurityTask+0x1028>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	3301      	adds	r3, #1
 800debe:	b2da      	uxtb	r2, r3
 800dec0:	4b55      	ldr	r3, [pc, #340]	; (800e018 <ThreadSecurityTask+0x1028>)
 800dec2:	701a      	strb	r2, [r3, #0]
					if(button_state1==10)
 800dec4:	4b54      	ldr	r3, [pc, #336]	; (800e018 <ThreadSecurityTask+0x1028>)
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	2b0a      	cmp	r3, #10
 800deca:	f040 80a9 	bne.w	800e020 <ThreadSecurityTask+0x1030>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 800dece:	4b51      	ldr	r3, [pc, #324]	; (800e014 <ThreadSecurityTask+0x1024>)
 800ded0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d101      	bne.n	800dedc <ThreadSecurityTask+0xeec>
						{
							BUZ_ON();
 800ded8:	f007 fd70 	bl	80159bc <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dedc:	4b4a      	ldr	r3, [pc, #296]	; (800e008 <ThreadSecurityTask+0x1018>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f04f 31ff 	mov.w	r1, #4294967295
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7f8 ff27 	bl	8006d38 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 800deea:	f107 030f 	add.w	r3, r7, #15
 800deee:	4619      	mov	r1, r3
 800def0:	f242 0009 	movw	r0, #8201	; 0x2009
 800def4:	f007 fc7a 	bl	80157ec <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800def8:	4b43      	ldr	r3, [pc, #268]	; (800e008 <ThreadSecurityTask+0x1018>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4618      	mov	r0, r3
 800defe:	f7f8 ff69 	bl	8006dd4 <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x01;
 800df02:	7bfb      	ldrb	r3, [r7, #15]
 800df04:	f043 0301 	orr.w	r3, r3, #1
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800df0c:	4b3e      	ldr	r3, [pc, #248]	; (800e008 <ThreadSecurityTask+0x1018>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f04f 31ff 	mov.w	r1, #4294967295
 800df14:	4618      	mov	r0, r3
 800df16:	f7f8 ff0f 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 800df1a:	2100      	movs	r1, #0
 800df1c:	f242 0008 	movw	r0, #8200	; 0x2008
 800df20:	f007 fc9e 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 800df24:	7bfb      	ldrb	r3, [r7, #15]
 800df26:	4619      	mov	r1, r3
 800df28:	f242 0009 	movw	r0, #8201	; 0x2009
 800df2c:	f007 fc98 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800df30:	4b35      	ldr	r3, [pc, #212]	; (800e008 <ThreadSecurityTask+0x1018>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4618      	mov	r0, r3
 800df36:	f7f8 ff4d 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800df3a:	4b33      	ldr	r3, [pc, #204]	; (800e008 <ThreadSecurityTask+0x1018>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f04f 31ff 	mov.w	r1, #4294967295
 800df42:	4618      	mov	r0, r3
 800df44:	f7f8 fef8 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800df48:	2100      	movs	r1, #0
 800df4a:	f242 0002 	movw	r0, #8194	; 0x2002
 800df4e:	f007 fc87 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 800df52:	2105      	movs	r1, #5
 800df54:	f242 0003 	movw	r0, #8195	; 0x2003
 800df58:	f007 fc82 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800df5c:	4b2a      	ldr	r3, [pc, #168]	; (800e008 <ThreadSecurityTask+0x1018>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4618      	mov	r0, r3
 800df62:	f7f8 ff37 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800df66:	4b28      	ldr	r3, [pc, #160]	; (800e008 <ThreadSecurityTask+0x1018>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f04f 31ff 	mov.w	r1, #4294967295
 800df6e:	4618      	mov	r0, r3
 800df70:	f7f8 fee2 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800df74:	2100      	movs	r1, #0
 800df76:	f242 0020 	movw	r0, #8224	; 0x2020
 800df7a:	f007 fc71 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 800df7e:	210a      	movs	r1, #10
 800df80:	f242 0021 	movw	r0, #8225	; 0x2021
 800df84:	f007 fc6c 	bl	8015860 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 800df88:	4b20      	ldr	r3, [pc, #128]	; (800e00c <ThreadSecurityTask+0x101c>)
 800df8a:	220a      	movs	r2, #10
 800df8c:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 800df8e:	4b1e      	ldr	r3, [pc, #120]	; (800e008 <ThreadSecurityTask+0x1018>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4618      	mov	r0, r3
 800df94:	f7f8 ff1e 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800df98:	4b1b      	ldr	r3, [pc, #108]	; (800e008 <ThreadSecurityTask+0x1018>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f04f 31ff 	mov.w	r1, #4294967295
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7f8 fec9 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800dfa6:	2100      	movs	r1, #0
 800dfa8:	f242 106e 	movw	r0, #8558	; 0x216e
 800dfac:	f007 fc58 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800dfb0:	2101      	movs	r1, #1
 800dfb2:	f242 106f 	movw	r0, #8559	; 0x216f
 800dfb6:	f007 fc53 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800dfba:	4b13      	ldr	r3, [pc, #76]	; (800e008 <ThreadSecurityTask+0x1018>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7f8 ff08 	bl	8006dd4 <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 800dfc4:	4b15      	ldr	r3, [pc, #84]	; (800e01c <ThreadSecurityTask+0x102c>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7f9 f8e5 	bl	8007198 <osThreadResume>
				if(button_state1<10)
 800dfce:	e027      	b.n	800e020 <ThreadSecurityTask+0x1030>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x01) != 0x00 ) )
 800dfd0:	2110      	movs	r1, #16
 800dfd2:	480f      	ldr	r0, [pc, #60]	; (800e010 <ThreadSecurityTask+0x1020>)
 800dfd4:	f7f5 f932 	bl	800323c <HAL_GPIO_ReadPin>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d121      	bne.n	800e022 <ThreadSecurityTask+0x1032>
 800dfde:	4b0d      	ldr	r3, [pc, #52]	; (800e014 <ThreadSecurityTask+0x1024>)
 800dfe0:	885b      	ldrh	r3, [r3, #2]
 800dfe2:	f003 0301 	and.w	r3, r3, #1
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d01b      	beq.n	800e022 <ThreadSecurityTask+0x1032>
			{
				if(button_state1>0)
 800dfea:	4b0b      	ldr	r3, [pc, #44]	; (800e018 <ThreadSecurityTask+0x1028>)
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d017      	beq.n	800e022 <ThreadSecurityTask+0x1032>
				{
					button_state1 = 0;
 800dff2:	4b09      	ldr	r3, [pc, #36]	; (800e018 <ThreadSecurityTask+0x1028>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	701a      	strb	r2, [r3, #0]
 800dff8:	e013      	b.n	800e022 <ThreadSecurityTask+0x1032>
 800dffa:	bf00      	nop
 800dffc:	40021800 	.word	0x40021800
 800e000:	20008006 	.word	0x20008006
 800e004:	20008007 	.word	0x20008007
 800e008:	20009a6c 	.word	0x20009a6c
 800e00c:	2000a10c 	.word	0x2000a10c
 800e010:	40021c00 	.word	0x40021c00
 800e014:	2000a1cc 	.word	0x2000a1cc
 800e018:	20007ff0 	.word	0x20007ff0
 800e01c:	2000969c 	.word	0x2000969c
				if(button_state1<10)
 800e020:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №2--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x02) != 0x00 ) )
 800e022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e026:	48b6      	ldr	r0, [pc, #728]	; (800e300 <ThreadSecurityTask+0x1310>)
 800e028:	f7f5 f908 	bl	800323c <HAL_GPIO_ReadPin>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f040 8098 	bne.w	800e164 <ThreadSecurityTask+0x1174>
 800e034:	4bb3      	ldr	r3, [pc, #716]	; (800e304 <ThreadSecurityTask+0x1314>)
 800e036:	885b      	ldrh	r3, [r3, #2]
 800e038:	f003 0302 	and.w	r3, r3, #2
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f000 8091 	beq.w	800e164 <ThreadSecurityTask+0x1174>
			{
				if(button_state2<10)
 800e042:	4bb1      	ldr	r3, [pc, #708]	; (800e308 <ThreadSecurityTask+0x1318>)
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	2b09      	cmp	r3, #9
 800e048:	f200 80a2 	bhi.w	800e190 <ThreadSecurityTask+0x11a0>
				{
					button_state2++;
 800e04c:	4bae      	ldr	r3, [pc, #696]	; (800e308 <ThreadSecurityTask+0x1318>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	3301      	adds	r3, #1
 800e052:	b2da      	uxtb	r2, r3
 800e054:	4bac      	ldr	r3, [pc, #688]	; (800e308 <ThreadSecurityTask+0x1318>)
 800e056:	701a      	strb	r2, [r3, #0]
					if(button_state2==10)
 800e058:	4bab      	ldr	r3, [pc, #684]	; (800e308 <ThreadSecurityTask+0x1318>)
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b0a      	cmp	r3, #10
 800e05e:	f040 8097 	bne.w	800e190 <ThreadSecurityTask+0x11a0>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 800e062:	4ba8      	ldr	r3, [pc, #672]	; (800e304 <ThreadSecurityTask+0x1314>)
 800e064:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <ThreadSecurityTask+0x1080>
						{
							BUZ_ON();
 800e06c:	f007 fca6 	bl	80159bc <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e070:	4ba6      	ldr	r3, [pc, #664]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f04f 31ff 	mov.w	r1, #4294967295
 800e078:	4618      	mov	r0, r3
 800e07a:	f7f8 fe5d 	bl	8006d38 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 800e07e:	f107 030f 	add.w	r3, r7, #15
 800e082:	4619      	mov	r1, r3
 800e084:	f242 0009 	movw	r0, #8201	; 0x2009
 800e088:	f007 fbb0 	bl	80157ec <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800e08c:	4b9f      	ldr	r3, [pc, #636]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4618      	mov	r0, r3
 800e092:	f7f8 fe9f 	bl	8006dd4 <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x02;
 800e096:	7bfb      	ldrb	r3, [r7, #15]
 800e098:	f043 0302 	orr.w	r3, r3, #2
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e0a0:	4b9a      	ldr	r3, [pc, #616]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f04f 31ff 	mov.w	r1, #4294967295
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7f8 fe45 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	f242 0008 	movw	r0, #8200	; 0x2008
 800e0b4:	f007 fbd4 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	f242 0009 	movw	r0, #8201	; 0x2009
 800e0c0:	f007 fbce 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e0c4:	4b91      	ldr	r3, [pc, #580]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7f8 fe83 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e0ce:	4b8f      	ldr	r3, [pc, #572]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f04f 31ff 	mov.w	r1, #4294967295
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7f8 fe2e 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800e0dc:	2100      	movs	r1, #0
 800e0de:	f242 0002 	movw	r0, #8194	; 0x2002
 800e0e2:	f007 fbbd 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 800e0e6:	2105      	movs	r1, #5
 800e0e8:	f242 0003 	movw	r0, #8195	; 0x2003
 800e0ec:	f007 fbb8 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e0f0:	4b86      	ldr	r3, [pc, #536]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f8 fe6d 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e0fa:	4b84      	ldr	r3, [pc, #528]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f04f 31ff 	mov.w	r1, #4294967295
 800e102:	4618      	mov	r0, r3
 800e104:	f7f8 fe18 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e108:	2100      	movs	r1, #0
 800e10a:	f242 0020 	movw	r0, #8224	; 0x2020
 800e10e:	f007 fba7 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 800e112:	210a      	movs	r1, #10
 800e114:	f242 0021 	movw	r0, #8225	; 0x2021
 800e118:	f007 fba2 	bl	8015860 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 800e11c:	4b7c      	ldr	r3, [pc, #496]	; (800e310 <ThreadSecurityTask+0x1320>)
 800e11e:	220a      	movs	r2, #10
 800e120:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 800e122:	4b7a      	ldr	r3, [pc, #488]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4618      	mov	r0, r3
 800e128:	f7f8 fe54 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e12c:	4b77      	ldr	r3, [pc, #476]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f04f 31ff 	mov.w	r1, #4294967295
 800e134:	4618      	mov	r0, r3
 800e136:	f7f8 fdff 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800e13a:	2100      	movs	r1, #0
 800e13c:	f242 106e 	movw	r0, #8558	; 0x216e
 800e140:	f007 fb8e 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800e144:	2101      	movs	r1, #1
 800e146:	f242 106f 	movw	r0, #8559	; 0x216f
 800e14a:	f007 fb89 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e14e:	4b6f      	ldr	r3, [pc, #444]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4618      	mov	r0, r3
 800e154:	f7f8 fe3e 	bl	8006dd4 <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 800e158:	4b6e      	ldr	r3, [pc, #440]	; (800e314 <ThreadSecurityTask+0x1324>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7f9 f81b 	bl	8007198 <osThreadResume>
				if(button_state2<10)
 800e162:	e015      	b.n	800e190 <ThreadSecurityTask+0x11a0>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x02) != 0x00 ) )
 800e164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e168:	4865      	ldr	r0, [pc, #404]	; (800e300 <ThreadSecurityTask+0x1310>)
 800e16a:	f7f5 f867 	bl	800323c <HAL_GPIO_ReadPin>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b01      	cmp	r3, #1
 800e172:	d10e      	bne.n	800e192 <ThreadSecurityTask+0x11a2>
 800e174:	4b63      	ldr	r3, [pc, #396]	; (800e304 <ThreadSecurityTask+0x1314>)
 800e176:	885b      	ldrh	r3, [r3, #2]
 800e178:	f003 0302 	and.w	r3, r3, #2
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d008      	beq.n	800e192 <ThreadSecurityTask+0x11a2>
			{
				if(button_state2>0)
 800e180:	4b61      	ldr	r3, [pc, #388]	; (800e308 <ThreadSecurityTask+0x1318>)
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d004      	beq.n	800e192 <ThreadSecurityTask+0x11a2>
				{
					button_state2 = 0;
 800e188:	4b5f      	ldr	r3, [pc, #380]	; (800e308 <ThreadSecurityTask+0x1318>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	e000      	b.n	800e192 <ThreadSecurityTask+0x11a2>
				if(button_state2<10)
 800e190:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №3--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x04) != 0x00 ) )
 800e192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e196:	485a      	ldr	r0, [pc, #360]	; (800e300 <ThreadSecurityTask+0x1310>)
 800e198:	f7f5 f850 	bl	800323c <HAL_GPIO_ReadPin>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f040 8098 	bne.w	800e2d4 <ThreadSecurityTask+0x12e4>
 800e1a4:	4b57      	ldr	r3, [pc, #348]	; (800e304 <ThreadSecurityTask+0x1314>)
 800e1a6:	885b      	ldrh	r3, [r3, #2]
 800e1a8:	f003 0304 	and.w	r3, r3, #4
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	f000 8091 	beq.w	800e2d4 <ThreadSecurityTask+0x12e4>
			{
				if(button_state3<10)
 800e1b2:	4b59      	ldr	r3, [pc, #356]	; (800e318 <ThreadSecurityTask+0x1328>)
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	2b09      	cmp	r3, #9
 800e1b8:	f200 80b0 	bhi.w	800e31c <ThreadSecurityTask+0x132c>
				{
					button_state3++;
 800e1bc:	4b56      	ldr	r3, [pc, #344]	; (800e318 <ThreadSecurityTask+0x1328>)
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	4b54      	ldr	r3, [pc, #336]	; (800e318 <ThreadSecurityTask+0x1328>)
 800e1c6:	701a      	strb	r2, [r3, #0]
					if(button_state3==10)
 800e1c8:	4b53      	ldr	r3, [pc, #332]	; (800e318 <ThreadSecurityTask+0x1328>)
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	2b0a      	cmp	r3, #10
 800e1ce:	f040 80a5 	bne.w	800e31c <ThreadSecurityTask+0x132c>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 800e1d2:	4b4c      	ldr	r3, [pc, #304]	; (800e304 <ThreadSecurityTask+0x1314>)
 800e1d4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d101      	bne.n	800e1e0 <ThreadSecurityTask+0x11f0>
						{
							BUZ_ON();
 800e1dc:	f007 fbee 	bl	80159bc <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e1e0:	4b4a      	ldr	r3, [pc, #296]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f04f 31ff 	mov.w	r1, #4294967295
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7f8 fda5 	bl	8006d38 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 800e1ee:	f107 030f 	add.w	r3, r7, #15
 800e1f2:	4619      	mov	r1, r3
 800e1f4:	f242 0009 	movw	r0, #8201	; 0x2009
 800e1f8:	f007 faf8 	bl	80157ec <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800e1fc:	4b43      	ldr	r3, [pc, #268]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4618      	mov	r0, r3
 800e202:	f7f8 fde7 	bl	8006dd4 <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x04;
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	f043 0304 	orr.w	r3, r3, #4
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e210:	4b3e      	ldr	r3, [pc, #248]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f04f 31ff 	mov.w	r1, #4294967295
 800e218:	4618      	mov	r0, r3
 800e21a:	f7f8 fd8d 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 800e21e:	2100      	movs	r1, #0
 800e220:	f242 0008 	movw	r0, #8200	; 0x2008
 800e224:	f007 fb1c 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 800e228:	7bfb      	ldrb	r3, [r7, #15]
 800e22a:	4619      	mov	r1, r3
 800e22c:	f242 0009 	movw	r0, #8201	; 0x2009
 800e230:	f007 fb16 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e234:	4b35      	ldr	r3, [pc, #212]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4618      	mov	r0, r3
 800e23a:	f7f8 fdcb 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e23e:	4b33      	ldr	r3, [pc, #204]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f04f 31ff 	mov.w	r1, #4294967295
 800e246:	4618      	mov	r0, r3
 800e248:	f7f8 fd76 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800e24c:	2100      	movs	r1, #0
 800e24e:	f242 0002 	movw	r0, #8194	; 0x2002
 800e252:	f007 fb05 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 800e256:	2105      	movs	r1, #5
 800e258:	f242 0003 	movw	r0, #8195	; 0x2003
 800e25c:	f007 fb00 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e260:	4b2a      	ldr	r3, [pc, #168]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4618      	mov	r0, r3
 800e266:	f7f8 fdb5 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e26a:	4b28      	ldr	r3, [pc, #160]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f04f 31ff 	mov.w	r1, #4294967295
 800e272:	4618      	mov	r0, r3
 800e274:	f7f8 fd60 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e278:	2100      	movs	r1, #0
 800e27a:	f242 0020 	movw	r0, #8224	; 0x2020
 800e27e:	f007 faef 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 800e282:	210a      	movs	r1, #10
 800e284:	f242 0021 	movw	r0, #8225	; 0x2021
 800e288:	f007 faea 	bl	8015860 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 800e28c:	4b20      	ldr	r3, [pc, #128]	; (800e310 <ThreadSecurityTask+0x1320>)
 800e28e:	220a      	movs	r2, #10
 800e290:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 800e292:	4b1e      	ldr	r3, [pc, #120]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4618      	mov	r0, r3
 800e298:	f7f8 fd9c 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e29c:	4b1b      	ldr	r3, [pc, #108]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f04f 31ff 	mov.w	r1, #4294967295
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7f8 fd47 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	f242 106e 	movw	r0, #8558	; 0x216e
 800e2b0:	f007 fad6 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800e2b4:	2101      	movs	r1, #1
 800e2b6:	f242 106f 	movw	r0, #8559	; 0x216f
 800e2ba:	f007 fad1 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e2be:	4b13      	ldr	r3, [pc, #76]	; (800e30c <ThreadSecurityTask+0x131c>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7f8 fd86 	bl	8006dd4 <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 800e2c8:	4b12      	ldr	r3, [pc, #72]	; (800e314 <ThreadSecurityTask+0x1324>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7f8 ff63 	bl	8007198 <osThreadResume>
				if(button_state3<10)
 800e2d2:	e023      	b.n	800e31c <ThreadSecurityTask+0x132c>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x04) != 0x00 ) )
 800e2d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e2d8:	4809      	ldr	r0, [pc, #36]	; (800e300 <ThreadSecurityTask+0x1310>)
 800e2da:	f7f4 ffaf 	bl	800323c <HAL_GPIO_ReadPin>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d11c      	bne.n	800e31e <ThreadSecurityTask+0x132e>
 800e2e4:	4b07      	ldr	r3, [pc, #28]	; (800e304 <ThreadSecurityTask+0x1314>)
 800e2e6:	885b      	ldrh	r3, [r3, #2]
 800e2e8:	f003 0304 	and.w	r3, r3, #4
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d016      	beq.n	800e31e <ThreadSecurityTask+0x132e>
			{
				if(button_state3>0)
 800e2f0:	4b09      	ldr	r3, [pc, #36]	; (800e318 <ThreadSecurityTask+0x1328>)
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d012      	beq.n	800e31e <ThreadSecurityTask+0x132e>
				{
					button_state3 = 0;
 800e2f8:	4b07      	ldr	r3, [pc, #28]	; (800e318 <ThreadSecurityTask+0x1328>)
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	701a      	strb	r2, [r3, #0]
 800e2fe:	e00e      	b.n	800e31e <ThreadSecurityTask+0x132e>
 800e300:	40021400 	.word	0x40021400
 800e304:	2000a1cc 	.word	0x2000a1cc
 800e308:	20007ff1 	.word	0x20007ff1
 800e30c:	20009a6c 	.word	0x20009a6c
 800e310:	2000a10c 	.word	0x2000a10c
 800e314:	2000969c 	.word	0x2000969c
 800e318:	20007ff2 	.word	0x20007ff2
				if(button_state3<10)
 800e31c:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №4--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x08) != 0x00 ) )
 800e31e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e322:	48b6      	ldr	r0, [pc, #728]	; (800e5fc <ThreadSecurityTask+0x160c>)
 800e324:	f7f4 ff8a 	bl	800323c <HAL_GPIO_ReadPin>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f040 8098 	bne.w	800e460 <ThreadSecurityTask+0x1470>
 800e330:	4bb3      	ldr	r3, [pc, #716]	; (800e600 <ThreadSecurityTask+0x1610>)
 800e332:	885b      	ldrh	r3, [r3, #2]
 800e334:	f003 0308 	and.w	r3, r3, #8
 800e338:	2b00      	cmp	r3, #0
 800e33a:	f000 8091 	beq.w	800e460 <ThreadSecurityTask+0x1470>
			{
				if(button_state4<10)
 800e33e:	4bb1      	ldr	r3, [pc, #708]	; (800e604 <ThreadSecurityTask+0x1614>)
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	2b09      	cmp	r3, #9
 800e344:	f200 80a2 	bhi.w	800e48c <ThreadSecurityTask+0x149c>
				{
					button_state4++;
 800e348:	4bae      	ldr	r3, [pc, #696]	; (800e604 <ThreadSecurityTask+0x1614>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	3301      	adds	r3, #1
 800e34e:	b2da      	uxtb	r2, r3
 800e350:	4bac      	ldr	r3, [pc, #688]	; (800e604 <ThreadSecurityTask+0x1614>)
 800e352:	701a      	strb	r2, [r3, #0]
					if(button_state4==10)
 800e354:	4bab      	ldr	r3, [pc, #684]	; (800e604 <ThreadSecurityTask+0x1614>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	2b0a      	cmp	r3, #10
 800e35a:	f040 8097 	bne.w	800e48c <ThreadSecurityTask+0x149c>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 800e35e:	4ba8      	ldr	r3, [pc, #672]	; (800e600 <ThreadSecurityTask+0x1610>)
 800e360:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e364:	2b00      	cmp	r3, #0
 800e366:	d101      	bne.n	800e36c <ThreadSecurityTask+0x137c>
						{
							BUZ_ON();
 800e368:	f007 fb28 	bl	80159bc <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e36c:	4ba6      	ldr	r3, [pc, #664]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f04f 31ff 	mov.w	r1, #4294967295
 800e374:	4618      	mov	r0, r3
 800e376:	f7f8 fcdf 	bl	8006d38 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 800e37a:	f107 030f 	add.w	r3, r7, #15
 800e37e:	4619      	mov	r1, r3
 800e380:	f242 0009 	movw	r0, #8201	; 0x2009
 800e384:	f007 fa32 	bl	80157ec <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800e388:	4b9f      	ldr	r3, [pc, #636]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7f8 fd21 	bl	8006dd4 <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x08;
 800e392:	7bfb      	ldrb	r3, [r7, #15]
 800e394:	f043 0308 	orr.w	r3, r3, #8
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e39c:	4b9a      	ldr	r3, [pc, #616]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f04f 31ff 	mov.w	r1, #4294967295
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7f8 fcc7 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 800e3aa:	2100      	movs	r1, #0
 800e3ac:	f242 0008 	movw	r0, #8200	; 0x2008
 800e3b0:	f007 fa56 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 800e3b4:	7bfb      	ldrb	r3, [r7, #15]
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	f242 0009 	movw	r0, #8201	; 0x2009
 800e3bc:	f007 fa50 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e3c0:	4b91      	ldr	r3, [pc, #580]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7f8 fd05 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e3ca:	4b8f      	ldr	r3, [pc, #572]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f04f 31ff 	mov.w	r1, #4294967295
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7f8 fcb0 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800e3d8:	2100      	movs	r1, #0
 800e3da:	f242 0002 	movw	r0, #8194	; 0x2002
 800e3de:	f007 fa3f 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 800e3e2:	2105      	movs	r1, #5
 800e3e4:	f242 0003 	movw	r0, #8195	; 0x2003
 800e3e8:	f007 fa3a 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e3ec:	4b86      	ldr	r3, [pc, #536]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7f8 fcef 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e3f6:	4b84      	ldr	r3, [pc, #528]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f04f 31ff 	mov.w	r1, #4294967295
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7f8 fc9a 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e404:	2100      	movs	r1, #0
 800e406:	f242 0020 	movw	r0, #8224	; 0x2020
 800e40a:	f007 fa29 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 800e40e:	210a      	movs	r1, #10
 800e410:	f242 0021 	movw	r0, #8225	; 0x2021
 800e414:	f007 fa24 	bl	8015860 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 800e418:	4b7c      	ldr	r3, [pc, #496]	; (800e60c <ThreadSecurityTask+0x161c>)
 800e41a:	220a      	movs	r2, #10
 800e41c:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 800e41e:	4b7a      	ldr	r3, [pc, #488]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4618      	mov	r0, r3
 800e424:	f7f8 fcd6 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e428:	4b77      	ldr	r3, [pc, #476]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f04f 31ff 	mov.w	r1, #4294967295
 800e430:	4618      	mov	r0, r3
 800e432:	f7f8 fc81 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800e436:	2100      	movs	r1, #0
 800e438:	f242 106e 	movw	r0, #8558	; 0x216e
 800e43c:	f007 fa10 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800e440:	2101      	movs	r1, #1
 800e442:	f242 106f 	movw	r0, #8559	; 0x216f
 800e446:	f007 fa0b 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e44a:	4b6f      	ldr	r3, [pc, #444]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4618      	mov	r0, r3
 800e450:	f7f8 fcc0 	bl	8006dd4 <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 800e454:	4b6e      	ldr	r3, [pc, #440]	; (800e610 <ThreadSecurityTask+0x1620>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4618      	mov	r0, r3
 800e45a:	f7f8 fe9d 	bl	8007198 <osThreadResume>
				if(button_state4<10)
 800e45e:	e015      	b.n	800e48c <ThreadSecurityTask+0x149c>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x08) != 0x00 ) )
 800e460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e464:	4865      	ldr	r0, [pc, #404]	; (800e5fc <ThreadSecurityTask+0x160c>)
 800e466:	f7f4 fee9 	bl	800323c <HAL_GPIO_ReadPin>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d10e      	bne.n	800e48e <ThreadSecurityTask+0x149e>
 800e470:	4b63      	ldr	r3, [pc, #396]	; (800e600 <ThreadSecurityTask+0x1610>)
 800e472:	885b      	ldrh	r3, [r3, #2]
 800e474:	f003 0308 	and.w	r3, r3, #8
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d008      	beq.n	800e48e <ThreadSecurityTask+0x149e>
			{
				if(button_state4>0)
 800e47c:	4b61      	ldr	r3, [pc, #388]	; (800e604 <ThreadSecurityTask+0x1614>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d004      	beq.n	800e48e <ThreadSecurityTask+0x149e>
				{
					button_state4 = 0;
 800e484:	4b5f      	ldr	r3, [pc, #380]	; (800e604 <ThreadSecurityTask+0x1614>)
 800e486:	2200      	movs	r2, #0
 800e488:	701a      	strb	r2, [r3, #0]
 800e48a:	e000      	b.n	800e48e <ThreadSecurityTask+0x149e>
				if(button_state4<10)
 800e48c:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №5--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x10) != 0x00 ) )
 800e48e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e492:	485a      	ldr	r0, [pc, #360]	; (800e5fc <ThreadSecurityTask+0x160c>)
 800e494:	f7f4 fed2 	bl	800323c <HAL_GPIO_ReadPin>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f040 8098 	bne.w	800e5d0 <ThreadSecurityTask+0x15e0>
 800e4a0:	4b57      	ldr	r3, [pc, #348]	; (800e600 <ThreadSecurityTask+0x1610>)
 800e4a2:	885b      	ldrh	r3, [r3, #2]
 800e4a4:	f003 0310 	and.w	r3, r3, #16
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 8091 	beq.w	800e5d0 <ThreadSecurityTask+0x15e0>
			{
				if(button_state5<10)
 800e4ae:	4b59      	ldr	r3, [pc, #356]	; (800e614 <ThreadSecurityTask+0x1624>)
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	2b09      	cmp	r3, #9
 800e4b4:	f200 80b0 	bhi.w	800e618 <ThreadSecurityTask+0x1628>
				{
					button_state5++;
 800e4b8:	4b56      	ldr	r3, [pc, #344]	; (800e614 <ThreadSecurityTask+0x1624>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	4b54      	ldr	r3, [pc, #336]	; (800e614 <ThreadSecurityTask+0x1624>)
 800e4c2:	701a      	strb	r2, [r3, #0]
					if(button_state5==10)
 800e4c4:	4b53      	ldr	r3, [pc, #332]	; (800e614 <ThreadSecurityTask+0x1624>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	2b0a      	cmp	r3, #10
 800e4ca:	f040 80a5 	bne.w	800e618 <ThreadSecurityTask+0x1628>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 800e4ce:	4b4c      	ldr	r3, [pc, #304]	; (800e600 <ThreadSecurityTask+0x1610>)
 800e4d0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d101      	bne.n	800e4dc <ThreadSecurityTask+0x14ec>
						{
							BUZ_ON();
 800e4d8:	f007 fa70 	bl	80159bc <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e4dc:	4b4a      	ldr	r3, [pc, #296]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f04f 31ff 	mov.w	r1, #4294967295
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7f8 fc27 	bl	8006d38 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 800e4ea:	f107 030f 	add.w	r3, r7, #15
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	f242 0009 	movw	r0, #8201	; 0x2009
 800e4f4:	f007 f97a 	bl	80157ec <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800e4f8:	4b43      	ldr	r3, [pc, #268]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7f8 fc69 	bl	8006dd4 <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x10;
 800e502:	7bfb      	ldrb	r3, [r7, #15]
 800e504:	f043 0310 	orr.w	r3, r3, #16
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e50c:	4b3e      	ldr	r3, [pc, #248]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f04f 31ff 	mov.w	r1, #4294967295
 800e514:	4618      	mov	r0, r3
 800e516:	f7f8 fc0f 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 800e51a:	2100      	movs	r1, #0
 800e51c:	f242 0008 	movw	r0, #8200	; 0x2008
 800e520:	f007 f99e 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 800e524:	7bfb      	ldrb	r3, [r7, #15]
 800e526:	4619      	mov	r1, r3
 800e528:	f242 0009 	movw	r0, #8201	; 0x2009
 800e52c:	f007 f998 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e530:	4b35      	ldr	r3, [pc, #212]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4618      	mov	r0, r3
 800e536:	f7f8 fc4d 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e53a:	4b33      	ldr	r3, [pc, #204]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f04f 31ff 	mov.w	r1, #4294967295
 800e542:	4618      	mov	r0, r3
 800e544:	f7f8 fbf8 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800e548:	2100      	movs	r1, #0
 800e54a:	f242 0002 	movw	r0, #8194	; 0x2002
 800e54e:	f007 f987 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 800e552:	2105      	movs	r1, #5
 800e554:	f242 0003 	movw	r0, #8195	; 0x2003
 800e558:	f007 f982 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e55c:	4b2a      	ldr	r3, [pc, #168]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4618      	mov	r0, r3
 800e562:	f7f8 fc37 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e566:	4b28      	ldr	r3, [pc, #160]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f04f 31ff 	mov.w	r1, #4294967295
 800e56e:	4618      	mov	r0, r3
 800e570:	f7f8 fbe2 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e574:	2100      	movs	r1, #0
 800e576:	f242 0020 	movw	r0, #8224	; 0x2020
 800e57a:	f007 f971 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 800e57e:	210a      	movs	r1, #10
 800e580:	f242 0021 	movw	r0, #8225	; 0x2021
 800e584:	f007 f96c 	bl	8015860 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 800e588:	4b20      	ldr	r3, [pc, #128]	; (800e60c <ThreadSecurityTask+0x161c>)
 800e58a:	220a      	movs	r2, #10
 800e58c:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 800e58e:	4b1e      	ldr	r3, [pc, #120]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4618      	mov	r0, r3
 800e594:	f7f8 fc1e 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e598:	4b1b      	ldr	r3, [pc, #108]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f04f 31ff 	mov.w	r1, #4294967295
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f8 fbc9 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800e5a6:	2100      	movs	r1, #0
 800e5a8:	f242 106e 	movw	r0, #8558	; 0x216e
 800e5ac:	f007 f958 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800e5b0:	2101      	movs	r1, #1
 800e5b2:	f242 106f 	movw	r0, #8559	; 0x216f
 800e5b6:	f007 f953 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e5ba:	4b13      	ldr	r3, [pc, #76]	; (800e608 <ThreadSecurityTask+0x1618>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7f8 fc08 	bl	8006dd4 <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 800e5c4:	4b12      	ldr	r3, [pc, #72]	; (800e610 <ThreadSecurityTask+0x1620>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7f8 fde5 	bl	8007198 <osThreadResume>
				if(button_state5<10)
 800e5ce:	e023      	b.n	800e618 <ThreadSecurityTask+0x1628>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x10) != 0x00 ) )
 800e5d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e5d4:	4809      	ldr	r0, [pc, #36]	; (800e5fc <ThreadSecurityTask+0x160c>)
 800e5d6:	f7f4 fe31 	bl	800323c <HAL_GPIO_ReadPin>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d11c      	bne.n	800e61a <ThreadSecurityTask+0x162a>
 800e5e0:	4b07      	ldr	r3, [pc, #28]	; (800e600 <ThreadSecurityTask+0x1610>)
 800e5e2:	885b      	ldrh	r3, [r3, #2]
 800e5e4:	f003 0310 	and.w	r3, r3, #16
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d016      	beq.n	800e61a <ThreadSecurityTask+0x162a>
			{
				if(button_state5>0)
 800e5ec:	4b09      	ldr	r3, [pc, #36]	; (800e614 <ThreadSecurityTask+0x1624>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d012      	beq.n	800e61a <ThreadSecurityTask+0x162a>
				{
					button_state5 = 0;
 800e5f4:	4b07      	ldr	r3, [pc, #28]	; (800e614 <ThreadSecurityTask+0x1624>)
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	701a      	strb	r2, [r3, #0]
 800e5fa:	e00e      	b.n	800e61a <ThreadSecurityTask+0x162a>
 800e5fc:	40021400 	.word	0x40021400
 800e600:	2000a1cc 	.word	0x2000a1cc
 800e604:	20007ff3 	.word	0x20007ff3
 800e608:	20009a6c 	.word	0x20009a6c
 800e60c:	2000a10c 	.word	0x2000a10c
 800e610:	2000969c 	.word	0x2000969c
 800e614:	20007ff4 	.word	0x20007ff4
				if(button_state5<10)
 800e618:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №6--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x20) != 0x00 ) )
 800e61a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e61e:	48b3      	ldr	r0, [pc, #716]	; (800e8ec <ThreadSecurityTask+0x18fc>)
 800e620:	f7f4 fe0c 	bl	800323c <HAL_GPIO_ReadPin>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	f040 8098 	bne.w	800e75c <ThreadSecurityTask+0x176c>
 800e62c:	4bb0      	ldr	r3, [pc, #704]	; (800e8f0 <ThreadSecurityTask+0x1900>)
 800e62e:	885b      	ldrh	r3, [r3, #2]
 800e630:	f003 0320 	and.w	r3, r3, #32
 800e634:	2b00      	cmp	r3, #0
 800e636:	f000 8091 	beq.w	800e75c <ThreadSecurityTask+0x176c>
			{
				if(button_state6<10)
 800e63a:	4bae      	ldr	r3, [pc, #696]	; (800e8f4 <ThreadSecurityTask+0x1904>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b09      	cmp	r3, #9
 800e640:	f200 809e 	bhi.w	800e780 <ThreadSecurityTask+0x1790>
				{
					button_state6++;
 800e644:	4bab      	ldr	r3, [pc, #684]	; (800e8f4 <ThreadSecurityTask+0x1904>)
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	3301      	adds	r3, #1
 800e64a:	b2da      	uxtb	r2, r3
 800e64c:	4ba9      	ldr	r3, [pc, #676]	; (800e8f4 <ThreadSecurityTask+0x1904>)
 800e64e:	701a      	strb	r2, [r3, #0]
					if(button_state6==10)
 800e650:	4ba8      	ldr	r3, [pc, #672]	; (800e8f4 <ThreadSecurityTask+0x1904>)
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	2b0a      	cmp	r3, #10
 800e656:	f040 8093 	bne.w	800e780 <ThreadSecurityTask+0x1790>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 800e65a:	4ba5      	ldr	r3, [pc, #660]	; (800e8f0 <ThreadSecurityTask+0x1900>)
 800e65c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <ThreadSecurityTask+0x1678>
						{
							BUZ_ON();
 800e664:	f007 f9aa 	bl	80159bc <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e668:	4ba3      	ldr	r3, [pc, #652]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f04f 31ff 	mov.w	r1, #4294967295
 800e670:	4618      	mov	r0, r3
 800e672:	f7f8 fb61 	bl	8006d38 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 800e676:	f107 030f 	add.w	r3, r7, #15
 800e67a:	4619      	mov	r1, r3
 800e67c:	f242 0009 	movw	r0, #8201	; 0x2009
 800e680:	f007 f8b4 	bl	80157ec <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800e684:	4b9c      	ldr	r3, [pc, #624]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7f8 fba3 	bl	8006dd4 <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x20;
 800e68e:	7bfb      	ldrb	r3, [r7, #15]
 800e690:	f043 0320 	orr.w	r3, r3, #32
 800e694:	b2db      	uxtb	r3, r3
 800e696:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e698:	4b97      	ldr	r3, [pc, #604]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f04f 31ff 	mov.w	r1, #4294967295
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7f8 fb49 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	f242 0008 	movw	r0, #8200	; 0x2008
 800e6ac:	f007 f8d8 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 800e6b0:	7bfb      	ldrb	r3, [r7, #15]
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	f242 0009 	movw	r0, #8201	; 0x2009
 800e6b8:	f007 f8d2 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e6bc:	4b8e      	ldr	r3, [pc, #568]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7f8 fb87 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e6c6:	4b8c      	ldr	r3, [pc, #560]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f04f 31ff 	mov.w	r1, #4294967295
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7f8 fb32 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	f242 0002 	movw	r0, #8194	; 0x2002
 800e6da:	f007 f8c1 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 800e6de:	2105      	movs	r1, #5
 800e6e0:	f242 0003 	movw	r0, #8195	; 0x2003
 800e6e4:	f007 f8bc 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e6e8:	4b83      	ldr	r3, [pc, #524]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f7f8 fb71 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e6f2:	4b81      	ldr	r3, [pc, #516]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f04f 31ff 	mov.w	r1, #4294967295
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7f8 fb1c 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e700:	2100      	movs	r1, #0
 800e702:	f242 0020 	movw	r0, #8224	; 0x2020
 800e706:	f007 f8ab 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 800e70a:	210a      	movs	r1, #10
 800e70c:	f242 0021 	movw	r0, #8225	; 0x2021
 800e710:	f007 f8a6 	bl	8015860 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 800e714:	4b79      	ldr	r3, [pc, #484]	; (800e8fc <ThreadSecurityTask+0x190c>)
 800e716:	220a      	movs	r2, #10
 800e718:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 800e71a:	4b77      	ldr	r3, [pc, #476]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4618      	mov	r0, r3
 800e720:	f7f8 fb58 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e724:	4b74      	ldr	r3, [pc, #464]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f04f 31ff 	mov.w	r1, #4294967295
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7f8 fb03 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800e732:	2100      	movs	r1, #0
 800e734:	f242 106e 	movw	r0, #8558	; 0x216e
 800e738:	f007 f892 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800e73c:	2101      	movs	r1, #1
 800e73e:	f242 106f 	movw	r0, #8559	; 0x216f
 800e742:	f007 f88d 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e746:	4b6c      	ldr	r3, [pc, #432]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7f8 fb42 	bl	8006dd4 <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 800e750:	4b6b      	ldr	r3, [pc, #428]	; (800e900 <ThreadSecurityTask+0x1910>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4618      	mov	r0, r3
 800e756:	f7f8 fd1f 	bl	8007198 <osThreadResume>
				if(button_state6<10)
 800e75a:	e011      	b.n	800e780 <ThreadSecurityTask+0x1790>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x20) != 0x00 ) )
 800e75c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e760:	4862      	ldr	r0, [pc, #392]	; (800e8ec <ThreadSecurityTask+0x18fc>)
 800e762:	f7f4 fd6b 	bl	800323c <HAL_GPIO_ReadPin>
 800e766:	4603      	mov	r3, r0
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d10a      	bne.n	800e782 <ThreadSecurityTask+0x1792>
 800e76c:	4b60      	ldr	r3, [pc, #384]	; (800e8f0 <ThreadSecurityTask+0x1900>)
 800e76e:	885b      	ldrh	r3, [r3, #2]
 800e770:	f003 0320 	and.w	r3, r3, #32
 800e774:	2b00      	cmp	r3, #0
 800e776:	d004      	beq.n	800e782 <ThreadSecurityTask+0x1792>
			{
				if(button_state6>0)
 800e778:	4b5e      	ldr	r3, [pc, #376]	; (800e8f4 <ThreadSecurityTask+0x1904>)
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	e000      	b.n	800e782 <ThreadSecurityTask+0x1792>
				if(button_state6<10)
 800e780:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №7--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x40) != 0x00 ) )
 800e782:	2101      	movs	r1, #1
 800e784:	485f      	ldr	r0, [pc, #380]	; (800e904 <ThreadSecurityTask+0x1914>)
 800e786:	f7f4 fd59 	bl	800323c <HAL_GPIO_ReadPin>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f040 8098 	bne.w	800e8c2 <ThreadSecurityTask+0x18d2>
 800e792:	4b57      	ldr	r3, [pc, #348]	; (800e8f0 <ThreadSecurityTask+0x1900>)
 800e794:	885b      	ldrh	r3, [r3, #2]
 800e796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f000 8091 	beq.w	800e8c2 <ThreadSecurityTask+0x18d2>
			{
				if(button_state7<10)
 800e7a0:	4b59      	ldr	r3, [pc, #356]	; (800e908 <ThreadSecurityTask+0x1918>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	2b09      	cmp	r3, #9
 800e7a6:	f200 80b1 	bhi.w	800e90c <ThreadSecurityTask+0x191c>
				{
					button_state7++;
 800e7aa:	4b57      	ldr	r3, [pc, #348]	; (800e908 <ThreadSecurityTask+0x1918>)
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	b2da      	uxtb	r2, r3
 800e7b2:	4b55      	ldr	r3, [pc, #340]	; (800e908 <ThreadSecurityTask+0x1918>)
 800e7b4:	701a      	strb	r2, [r3, #0]
					if(button_state7==10)
 800e7b6:	4b54      	ldr	r3, [pc, #336]	; (800e908 <ThreadSecurityTask+0x1918>)
 800e7b8:	781b      	ldrb	r3, [r3, #0]
 800e7ba:	2b0a      	cmp	r3, #10
 800e7bc:	f040 80a6 	bne.w	800e90c <ThreadSecurityTask+0x191c>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 800e7c0:	4b4b      	ldr	r3, [pc, #300]	; (800e8f0 <ThreadSecurityTask+0x1900>)
 800e7c2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <ThreadSecurityTask+0x17de>
						{
							BUZ_ON();
 800e7ca:	f007 f8f7 	bl	80159bc <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e7ce:	4b4a      	ldr	r3, [pc, #296]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f04f 31ff 	mov.w	r1, #4294967295
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7f8 faae 	bl	8006d38 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 800e7dc:	f107 030f 	add.w	r3, r7, #15
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	f242 0009 	movw	r0, #8201	; 0x2009
 800e7e6:	f007 f801 	bl	80157ec <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800e7ea:	4b43      	ldr	r3, [pc, #268]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7f8 faf0 	bl	8006dd4 <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x40;
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
 800e7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e7fe:	4b3e      	ldr	r3, [pc, #248]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f04f 31ff 	mov.w	r1, #4294967295
 800e806:	4618      	mov	r0, r3
 800e808:	f7f8 fa96 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 800e80c:	2100      	movs	r1, #0
 800e80e:	f242 0008 	movw	r0, #8200	; 0x2008
 800e812:	f007 f825 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 800e816:	7bfb      	ldrb	r3, [r7, #15]
 800e818:	4619      	mov	r1, r3
 800e81a:	f242 0009 	movw	r0, #8201	; 0x2009
 800e81e:	f007 f81f 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e822:	4b35      	ldr	r3, [pc, #212]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4618      	mov	r0, r3
 800e828:	f7f8 fad4 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e82c:	4b32      	ldr	r3, [pc, #200]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f04f 31ff 	mov.w	r1, #4294967295
 800e834:	4618      	mov	r0, r3
 800e836:	f7f8 fa7f 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800e83a:	2100      	movs	r1, #0
 800e83c:	f242 0002 	movw	r0, #8194	; 0x2002
 800e840:	f007 f80e 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 800e844:	2105      	movs	r1, #5
 800e846:	f242 0003 	movw	r0, #8195	; 0x2003
 800e84a:	f007 f809 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e84e:	4b2a      	ldr	r3, [pc, #168]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4618      	mov	r0, r3
 800e854:	f7f8 fabe 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e858:	4b27      	ldr	r3, [pc, #156]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f04f 31ff 	mov.w	r1, #4294967295
 800e860:	4618      	mov	r0, r3
 800e862:	f7f8 fa69 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e866:	2100      	movs	r1, #0
 800e868:	f242 0020 	movw	r0, #8224	; 0x2020
 800e86c:	f006 fff8 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 800e870:	210a      	movs	r1, #10
 800e872:	f242 0021 	movw	r0, #8225	; 0x2021
 800e876:	f006 fff3 	bl	8015860 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 800e87a:	4b20      	ldr	r3, [pc, #128]	; (800e8fc <ThreadSecurityTask+0x190c>)
 800e87c:	220a      	movs	r2, #10
 800e87e:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 800e880:	4b1d      	ldr	r3, [pc, #116]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4618      	mov	r0, r3
 800e886:	f7f8 faa5 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e88a:	4b1b      	ldr	r3, [pc, #108]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f04f 31ff 	mov.w	r1, #4294967295
 800e892:	4618      	mov	r0, r3
 800e894:	f7f8 fa50 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800e898:	2100      	movs	r1, #0
 800e89a:	f242 106e 	movw	r0, #8558	; 0x216e
 800e89e:	f006 ffdf 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800e8a2:	2101      	movs	r1, #1
 800e8a4:	f242 106f 	movw	r0, #8559	; 0x216f
 800e8a8:	f006 ffda 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e8ac:	4b12      	ldr	r3, [pc, #72]	; (800e8f8 <ThreadSecurityTask+0x1908>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7f8 fa8f 	bl	8006dd4 <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 800e8b6:	4b12      	ldr	r3, [pc, #72]	; (800e900 <ThreadSecurityTask+0x1910>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7f8 fc6c 	bl	8007198 <osThreadResume>
				if(button_state7<10)
 800e8c0:	e024      	b.n	800e90c <ThreadSecurityTask+0x191c>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x40) != 0x00 ) )
 800e8c2:	2101      	movs	r1, #1
 800e8c4:	480f      	ldr	r0, [pc, #60]	; (800e904 <ThreadSecurityTask+0x1914>)
 800e8c6:	f7f4 fcb9 	bl	800323c <HAL_GPIO_ReadPin>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d11e      	bne.n	800e90e <ThreadSecurityTask+0x191e>
 800e8d0:	4b07      	ldr	r3, [pc, #28]	; (800e8f0 <ThreadSecurityTask+0x1900>)
 800e8d2:	885b      	ldrh	r3, [r3, #2]
 800e8d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d018      	beq.n	800e90e <ThreadSecurityTask+0x191e>
			{
				if(button_state7>0)
 800e8dc:	4b0a      	ldr	r3, [pc, #40]	; (800e908 <ThreadSecurityTask+0x1918>)
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d014      	beq.n	800e90e <ThreadSecurityTask+0x191e>
				{
					button_state7 = 0;
 800e8e4:	4b08      	ldr	r3, [pc, #32]	; (800e908 <ThreadSecurityTask+0x1918>)
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	701a      	strb	r2, [r3, #0]
 800e8ea:	e010      	b.n	800e90e <ThreadSecurityTask+0x191e>
 800e8ec:	40021400 	.word	0x40021400
 800e8f0:	2000a1cc 	.word	0x2000a1cc
 800e8f4:	20007ff5 	.word	0x20007ff5
 800e8f8:	20009a6c 	.word	0x20009a6c
 800e8fc:	2000a10c 	.word	0x2000a10c
 800e900:	2000969c 	.word	0x2000969c
 800e904:	40021800 	.word	0x40021800
 800e908:	20007ff6 	.word	0x20007ff6
				if(button_state7<10)
 800e90c:	bf00      	nop

			}
			//--------------------------------------------------------------------------------------------------------------------------------------------------

			//----Контроль шлейфа №8--------------------------------------------------------------------------------------------------------------------------------
			if( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_RESET) && ( (control_registers.control_loop_reg&0x80) != 0x00 ) )
 800e90e:	2102      	movs	r1, #2
 800e910:	485c      	ldr	r0, [pc, #368]	; (800ea84 <ThreadSecurityTask+0x1a94>)
 800e912:	f7f4 fc93 	bl	800323c <HAL_GPIO_ReadPin>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f040 8098 	bne.w	800ea4e <ThreadSecurityTask+0x1a5e>
 800e91e:	4b5a      	ldr	r3, [pc, #360]	; (800ea88 <ThreadSecurityTask+0x1a98>)
 800e920:	885b      	ldrh	r3, [r3, #2]
 800e922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e926:	2b00      	cmp	r3, #0
 800e928:	f000 8091 	beq.w	800ea4e <ThreadSecurityTask+0x1a5e>
			{
				if(button_state8<10)
 800e92c:	4b57      	ldr	r3, [pc, #348]	; (800ea8c <ThreadSecurityTask+0x1a9c>)
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	2b09      	cmp	r3, #9
 800e932:	f200 80a1 	bhi.w	800ea78 <ThreadSecurityTask+0x1a88>
				{
					button_state8++;
 800e936:	4b55      	ldr	r3, [pc, #340]	; (800ea8c <ThreadSecurityTask+0x1a9c>)
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	3301      	adds	r3, #1
 800e93c:	b2da      	uxtb	r2, r3
 800e93e:	4b53      	ldr	r3, [pc, #332]	; (800ea8c <ThreadSecurityTask+0x1a9c>)
 800e940:	701a      	strb	r2, [r3, #0]
					if(button_state8==10)
 800e942:	4b52      	ldr	r3, [pc, #328]	; (800ea8c <ThreadSecurityTask+0x1a9c>)
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	2b0a      	cmp	r3, #10
 800e948:	f040 8096 	bne.w	800ea78 <ThreadSecurityTask+0x1a88>
					{
						if(control_registers.mute_reg == MUTE_OFF)
 800e94c:	4b4e      	ldr	r3, [pc, #312]	; (800ea88 <ThreadSecurityTask+0x1a98>)
 800e94e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <ThreadSecurityTask+0x196a>
						{
							BUZ_ON();
 800e956:	f007 f831 	bl	80159bc <BUZ_ON>
						}

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e95a:	4b4d      	ldr	r3, [pc, #308]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f04f 31ff 	mov.w	r1, #4294967295
 800e962:	4618      	mov	r0, r3
 800e964:	f7f8 f9e8 	bl	8006d38 <osMutexWait>
						fm25v02_read(2*ALARM_LOOP_REG+1, &alarm_loop_reg_temp);
 800e968:	f107 030f 	add.w	r3, r7, #15
 800e96c:	4619      	mov	r1, r3
 800e96e:	f242 0009 	movw	r0, #8201	; 0x2009
 800e972:	f006 ff3b 	bl	80157ec <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800e976:	4b46      	ldr	r3, [pc, #280]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7f8 fa2a 	bl	8006dd4 <osMutexRelease>

						alarm_loop_reg_temp = alarm_loop_reg_temp|0x80;
 800e980:	7bfb      	ldrb	r3, [r7, #15]
 800e982:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e986:	b2db      	uxtb	r3, r3
 800e988:	73fb      	strb	r3, [r7, #15]

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e98a:	4b41      	ldr	r3, [pc, #260]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f04f 31ff 	mov.w	r1, #4294967295
 800e992:	4618      	mov	r0, r3
 800e994:	f7f8 f9d0 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*ALARM_LOOP_REG, 0x00);
 800e998:	2100      	movs	r1, #0
 800e99a:	f242 0008 	movw	r0, #8200	; 0x2008
 800e99e:	f006 ff5f 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*ALARM_LOOP_REG+1, alarm_loop_reg_temp);
 800e9a2:	7bfb      	ldrb	r3, [r7, #15]
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	f242 0009 	movw	r0, #8201	; 0x2009
 800e9aa:	f006 ff59 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e9ae:	4b38      	ldr	r3, [pc, #224]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7f8 fa0e 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e9b8:	4b35      	ldr	r3, [pc, #212]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f04f 31ff 	mov.w	r1, #4294967295
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7f8 f9b9 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SECURITY_STATUS_REG, 0x00);
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	f242 0002 	movw	r0, #8194	; 0x2002
 800e9cc:	f006 ff48 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SECURITY_STATUS_REG+1, DOOR_OPEN_ALARM);
 800e9d0:	2105      	movs	r1, #5
 800e9d2:	f242 0003 	movw	r0, #8195	; 0x2003
 800e9d6:	f006 ff43 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800e9da:	4b2d      	ldr	r3, [pc, #180]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7f8 f9f8 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f04f 31ff 	mov.w	r1, #4294967295
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7f8 f9a3 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	f242 0020 	movw	r0, #8224	; 0x2020
 800e9f8:	f006 ff32 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*SYSTEM_STATUS_REG+1, ALARM_STATE);
 800e9fc:	210a      	movs	r1, #10
 800e9fe:	f242 0021 	movw	r0, #8225	; 0x2021
 800ea02:	f006 ff2d 	bl	8015860 <fm25v02_write>
						status_registers.system_status_reg = ALARM_STATE;
 800ea06:	4b23      	ldr	r3, [pc, #140]	; (800ea94 <ThreadSecurityTask+0x1aa4>)
 800ea08:	220a      	movs	r2, #10
 800ea0a:	841a      	strh	r2, [r3, #32]
						osMutexRelease(Fm25v02MutexHandle);
 800ea0c:	4b20      	ldr	r3, [pc, #128]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7f8 f9df 	bl	8006dd4 <osMutexRelease>

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ea16:	4b1e      	ldr	r3, [pc, #120]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f04f 31ff 	mov.w	r1, #4294967295
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7f8 f98a 	bl	8006d38 <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800ea24:	2100      	movs	r1, #0
 800ea26:	f242 106e 	movw	r0, #8558	; 0x216e
 800ea2a:	f006 ff19 	bl	8015860 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800ea2e:	2101      	movs	r1, #1
 800ea30:	f242 106f 	movw	r0, #8559	; 0x216f
 800ea34:	f006 ff14 	bl	8015860 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 800ea38:	4b15      	ldr	r3, [pc, #84]	; (800ea90 <ThreadSecurityTask+0x1aa0>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7f8 f9c9 	bl	8006dd4 <osMutexRelease>

						osThreadResume(EventWriteTaskHandle);
 800ea42:	4b15      	ldr	r3, [pc, #84]	; (800ea98 <ThreadSecurityTask+0x1aa8>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7f8 fba6 	bl	8007198 <osThreadResume>
				if(button_state8<10)
 800ea4c:	e014      	b.n	800ea78 <ThreadSecurityTask+0x1a88>

					}
				}

			}
			else if ( (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_SET) && ( (control_registers.control_loop_reg&0x80) != 0x00 ) )
 800ea4e:	2102      	movs	r1, #2
 800ea50:	480c      	ldr	r0, [pc, #48]	; (800ea84 <ThreadSecurityTask+0x1a94>)
 800ea52:	f7f4 fbf3 	bl	800323c <HAL_GPIO_ReadPin>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d10e      	bne.n	800ea7a <ThreadSecurityTask+0x1a8a>
 800ea5c:	4b0a      	ldr	r3, [pc, #40]	; (800ea88 <ThreadSecurityTask+0x1a98>)
 800ea5e:	885b      	ldrh	r3, [r3, #2]
 800ea60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d008      	beq.n	800ea7a <ThreadSecurityTask+0x1a8a>
			{
				if(button_state8>0)
 800ea68:	4b08      	ldr	r3, [pc, #32]	; (800ea8c <ThreadSecurityTask+0x1a9c>)
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d004      	beq.n	800ea7a <ThreadSecurityTask+0x1a8a>
				{
					button_state8 = 0;
 800ea70:	4b06      	ldr	r3, [pc, #24]	; (800ea8c <ThreadSecurityTask+0x1a9c>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	701a      	strb	r2, [r3, #0]
 800ea76:	e000      	b.n	800ea7a <ThreadSecurityTask+0x1a8a>
				if(button_state8<10)
 800ea78:	bf00      	nop



		}

		osDelay(10);
 800ea7a:	200a      	movs	r0, #10
 800ea7c:	f7f8 f87b 	bl	8006b76 <osDelay>
		if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_RESET)
 800ea80:	f7fe bad8 	b.w	800d034 <ThreadSecurityTask+0x44>
 800ea84:	40021800 	.word	0x40021800
 800ea88:	2000a1cc 	.word	0x2000a1cc
 800ea8c:	20007ff7 	.word	0x20007ff7
 800ea90:	20009a6c 	.word	0x20009a6c
 800ea94:	2000a10c 	.word	0x2000a10c
 800ea98:	2000969c 	.word	0x2000969c

0800ea9c <meter_rx_buffer_clear>:
uint8_t current_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x43, 0x55, 0x52, 0x52, 0x45, 0x28, 0x29, 0x03, 0x5A};
uint8_t power_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x50, 0x4F, 0x57, 0x50, 0x50, 0x28, 0x29, 0x03, 0x6F};
uint8_t tarif_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x45, 0x54, 0x30, 0x50, 0x45, 0x28, 0x29, 0x03, 0x37};

void meter_rx_buffer_clear (void)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	80fb      	strh	r3, [r7, #6]
 800eaa6:	e006      	b.n	800eab6 <meter_rx_buffer_clear+0x1a>
	{
		meter_rx_buffer[i] = 0;
 800eaa8:	88fb      	ldrh	r3, [r7, #6]
 800eaaa:	4a08      	ldr	r2, [pc, #32]	; (800eacc <meter_rx_buffer_clear+0x30>)
 800eaac:	2100      	movs	r1, #0
 800eaae:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 800eab0:	88fb      	ldrh	r3, [r7, #6]
 800eab2:	3301      	adds	r3, #1
 800eab4:	80fb      	strh	r3, [r7, #6]
 800eab6:	88fb      	ldrh	r3, [r7, #6]
 800eab8:	2bff      	cmp	r3, #255	; 0xff
 800eaba:	d9f5      	bls.n	800eaa8 <meter_rx_buffer_clear+0xc>
	}
}
 800eabc:	bf00      	nop
 800eabe:	bf00      	nop
 800eac0:	370c      	adds	r7, #12
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr
 800eaca:	bf00      	nop
 800eacc:	200098e4 	.word	0x200098e4

0800ead0 <ce303_voltage>:

void ce303_voltage (uint8_t meter_id) // функция чтения напряения из счетчика СЕ303
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b086      	sub	sp, #24
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	4603      	mov	r3, r0
 800ead8:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t voltage_a_state; // переменные состояния прочтения значений напряжения ( если переменная равна 0, то значение напряжения не прочитано, если 1 - значение прочитанно )
	uint8_t voltage_b_state;
	uint8_t voltage_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 800eada:	79fb      	ldrb	r3, [r7, #7]
 800eadc:	2b63      	cmp	r3, #99	; 0x63
 800eade:	d962      	bls.n	800eba6 <ce303_voltage+0xd6>
	{
		start_buf[0] = 0x2F;
 800eae0:	4b9d      	ldr	r3, [pc, #628]	; (800ed58 <ce303_voltage+0x288>)
 800eae2:	222f      	movs	r2, #47	; 0x2f
 800eae4:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 800eae6:	4b9c      	ldr	r3, [pc, #624]	; (800ed58 <ce303_voltage+0x288>)
 800eae8:	223f      	movs	r2, #63	; 0x3f
 800eaea:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 800eaec:	79fb      	ldrb	r3, [r7, #7]
 800eaee:	4a9b      	ldr	r2, [pc, #620]	; (800ed5c <ce303_voltage+0x28c>)
 800eaf0:	fba2 2303 	umull	r2, r3, r2, r3
 800eaf4:	095b      	lsrs	r3, r3, #5
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	3330      	adds	r3, #48	; 0x30
 800eafa:	b2da      	uxtb	r2, r3
 800eafc:	4b96      	ldr	r3, [pc, #600]	; (800ed58 <ce303_voltage+0x288>)
 800eafe:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 800eb00:	79fa      	ldrb	r2, [r7, #7]
 800eb02:	79fb      	ldrb	r3, [r7, #7]
 800eb04:	4995      	ldr	r1, [pc, #596]	; (800ed5c <ce303_voltage+0x28c>)
 800eb06:	fba1 1303 	umull	r1, r3, r1, r3
 800eb0a:	095b      	lsrs	r3, r3, #5
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	4619      	mov	r1, r3
 800eb10:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800eb14:	fb03 f301 	mul.w	r3, r3, r1
 800eb18:	4413      	add	r3, r2
 800eb1a:	4a91      	ldr	r2, [pc, #580]	; (800ed60 <ce303_voltage+0x290>)
 800eb1c:	fb82 1203 	smull	r1, r2, r2, r3
 800eb20:	1092      	asrs	r2, r2, #2
 800eb22:	17db      	asrs	r3, r3, #31
 800eb24:	1ad3      	subs	r3, r2, r3
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	3330      	adds	r3, #48	; 0x30
 800eb2a:	b2da      	uxtb	r2, r3
 800eb2c:	4b8a      	ldr	r3, [pc, #552]	; (800ed58 <ce303_voltage+0x288>)
 800eb2e:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 800eb30:	79fa      	ldrb	r2, [r7, #7]
 800eb32:	79fb      	ldrb	r3, [r7, #7]
 800eb34:	4989      	ldr	r1, [pc, #548]	; (800ed5c <ce303_voltage+0x28c>)
 800eb36:	fba1 1303 	umull	r1, r3, r1, r3
 800eb3a:	095b      	lsrs	r3, r3, #5
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	4619      	mov	r1, r3
 800eb40:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800eb44:	fb03 f301 	mul.w	r3, r3, r1
 800eb48:	441a      	add	r2, r3
 800eb4a:	4b85      	ldr	r3, [pc, #532]	; (800ed60 <ce303_voltage+0x290>)
 800eb4c:	fb83 1302 	smull	r1, r3, r3, r2
 800eb50:	1099      	asrs	r1, r3, #2
 800eb52:	17d3      	asrs	r3, r2, #31
 800eb54:	1ac9      	subs	r1, r1, r3
 800eb56:	460b      	mov	r3, r1
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	440b      	add	r3, r1
 800eb5c:	005b      	lsls	r3, r3, #1
 800eb5e:	1ad1      	subs	r1, r2, r3
 800eb60:	b2cb      	uxtb	r3, r1
 800eb62:	3330      	adds	r3, #48	; 0x30
 800eb64:	b2da      	uxtb	r2, r3
 800eb66:	4b7c      	ldr	r3, [pc, #496]	; (800ed58 <ce303_voltage+0x288>)
 800eb68:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 800eb6a:	4b7b      	ldr	r3, [pc, #492]	; (800ed58 <ce303_voltage+0x288>)
 800eb6c:	2221      	movs	r2, #33	; 0x21
 800eb6e:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 800eb70:	4b79      	ldr	r3, [pc, #484]	; (800ed58 <ce303_voltage+0x288>)
 800eb72:	220d      	movs	r2, #13
 800eb74:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 800eb76:	4b78      	ldr	r3, [pc, #480]	; (800ed58 <ce303_voltage+0x288>)
 800eb78:	220a      	movs	r2, #10
 800eb7a:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 800eb7c:	4b79      	ldr	r3, [pc, #484]	; (800ed64 <ce303_voltage+0x294>)
 800eb7e:	2200      	movs	r2, #0
 800eb80:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 800eb82:	f7ff ff8b 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 800eb86:	2201      	movs	r2, #1
 800eb88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eb8c:	4876      	ldr	r0, [pc, #472]	; (800ed68 <ce303_voltage+0x298>)
 800eb8e:	f7f4 fb6d 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 800eb92:	2208      	movs	r2, #8
 800eb94:	4970      	ldr	r1, [pc, #448]	; (800ed58 <ce303_voltage+0x288>)
 800eb96:	4875      	ldr	r0, [pc, #468]	; (800ed6c <ce303_voltage+0x29c>)
 800eb98:	f7f6 fe20 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 800eb9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800eba0:	f7f3 f8b0 	bl	8001d04 <HAL_Delay>
 800eba4:	e072      	b.n	800ec8c <ce303_voltage+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 800eba6:	79fb      	ldrb	r3, [r7, #7]
 800eba8:	2b09      	cmp	r3, #9
 800ebaa:	d944      	bls.n	800ec36 <ce303_voltage+0x166>
 800ebac:	79fb      	ldrb	r3, [r7, #7]
 800ebae:	2b63      	cmp	r3, #99	; 0x63
 800ebb0:	d841      	bhi.n	800ec36 <ce303_voltage+0x166>
	{
		start_buf[0] = 0x2F;
 800ebb2:	4b69      	ldr	r3, [pc, #420]	; (800ed58 <ce303_voltage+0x288>)
 800ebb4:	222f      	movs	r2, #47	; 0x2f
 800ebb6:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 800ebb8:	4b67      	ldr	r3, [pc, #412]	; (800ed58 <ce303_voltage+0x288>)
 800ebba:	223f      	movs	r2, #63	; 0x3f
 800ebbc:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 800ebbe:	79fb      	ldrb	r3, [r7, #7]
 800ebc0:	4a6b      	ldr	r2, [pc, #428]	; (800ed70 <ce303_voltage+0x2a0>)
 800ebc2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebc6:	08db      	lsrs	r3, r3, #3
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	3330      	adds	r3, #48	; 0x30
 800ebcc:	b2da      	uxtb	r2, r3
 800ebce:	4b62      	ldr	r3, [pc, #392]	; (800ed58 <ce303_voltage+0x288>)
 800ebd0:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 800ebd2:	79fb      	ldrb	r3, [r7, #7]
 800ebd4:	4a66      	ldr	r2, [pc, #408]	; (800ed70 <ce303_voltage+0x2a0>)
 800ebd6:	fba2 2303 	umull	r2, r3, r2, r3
 800ebda:	08db      	lsrs	r3, r3, #3
 800ebdc:	b2db      	uxtb	r3, r3
 800ebde:	461a      	mov	r2, r3
 800ebe0:	0152      	lsls	r2, r2, #5
 800ebe2:	1ad2      	subs	r2, r2, r3
 800ebe4:	0092      	lsls	r2, r2, #2
 800ebe6:	1ad3      	subs	r3, r2, r3
 800ebe8:	005b      	lsls	r3, r3, #1
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	79fb      	ldrb	r3, [r7, #7]
 800ebee:	4413      	add	r3, r2
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	3330      	adds	r3, #48	; 0x30
 800ebf4:	b2da      	uxtb	r2, r3
 800ebf6:	4b58      	ldr	r3, [pc, #352]	; (800ed58 <ce303_voltage+0x288>)
 800ebf8:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 800ebfa:	4b57      	ldr	r3, [pc, #348]	; (800ed58 <ce303_voltage+0x288>)
 800ebfc:	2221      	movs	r2, #33	; 0x21
 800ebfe:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 800ec00:	4b55      	ldr	r3, [pc, #340]	; (800ed58 <ce303_voltage+0x288>)
 800ec02:	220d      	movs	r2, #13
 800ec04:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 800ec06:	4b54      	ldr	r3, [pc, #336]	; (800ed58 <ce303_voltage+0x288>)
 800ec08:	220a      	movs	r2, #10
 800ec0a:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 800ec0c:	4b55      	ldr	r3, [pc, #340]	; (800ed64 <ce303_voltage+0x294>)
 800ec0e:	2200      	movs	r2, #0
 800ec10:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 800ec12:	f7ff ff43 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 800ec16:	2201      	movs	r2, #1
 800ec18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ec1c:	4852      	ldr	r0, [pc, #328]	; (800ed68 <ce303_voltage+0x298>)
 800ec1e:	f7f4 fb25 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 800ec22:	2207      	movs	r2, #7
 800ec24:	494c      	ldr	r1, [pc, #304]	; (800ed58 <ce303_voltage+0x288>)
 800ec26:	4851      	ldr	r0, [pc, #324]	; (800ed6c <ce303_voltage+0x29c>)
 800ec28:	f7f6 fdd8 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 800ec2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ec30:	f7f3 f868 	bl	8001d04 <HAL_Delay>
 800ec34:	e02a      	b.n	800ec8c <ce303_voltage+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 800ec36:	79fb      	ldrb	r3, [r7, #7]
 800ec38:	2b09      	cmp	r3, #9
 800ec3a:	d827      	bhi.n	800ec8c <ce303_voltage+0x1bc>
	{
		start_buf[0] = 0x2F;
 800ec3c:	4b46      	ldr	r3, [pc, #280]	; (800ed58 <ce303_voltage+0x288>)
 800ec3e:	222f      	movs	r2, #47	; 0x2f
 800ec40:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 800ec42:	4b45      	ldr	r3, [pc, #276]	; (800ed58 <ce303_voltage+0x288>)
 800ec44:	223f      	movs	r2, #63	; 0x3f
 800ec46:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 800ec48:	79fb      	ldrb	r3, [r7, #7]
 800ec4a:	3330      	adds	r3, #48	; 0x30
 800ec4c:	b2da      	uxtb	r2, r3
 800ec4e:	4b42      	ldr	r3, [pc, #264]	; (800ed58 <ce303_voltage+0x288>)
 800ec50:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 800ec52:	4b41      	ldr	r3, [pc, #260]	; (800ed58 <ce303_voltage+0x288>)
 800ec54:	2221      	movs	r2, #33	; 0x21
 800ec56:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 800ec58:	4b3f      	ldr	r3, [pc, #252]	; (800ed58 <ce303_voltage+0x288>)
 800ec5a:	220d      	movs	r2, #13
 800ec5c:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 800ec5e:	4b3e      	ldr	r3, [pc, #248]	; (800ed58 <ce303_voltage+0x288>)
 800ec60:	220a      	movs	r2, #10
 800ec62:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 800ec64:	4b3f      	ldr	r3, [pc, #252]	; (800ed64 <ce303_voltage+0x294>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 800ec6a:	f7ff ff17 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ec74:	483c      	ldr	r0, [pc, #240]	; (800ed68 <ce303_voltage+0x298>)
 800ec76:	f7f4 faf9 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 800ec7a:	2206      	movs	r2, #6
 800ec7c:	4936      	ldr	r1, [pc, #216]	; (800ed58 <ce303_voltage+0x288>)
 800ec7e:	483b      	ldr	r0, [pc, #236]	; (800ed6c <ce303_voltage+0x29c>)
 800ec80:	f7f6 fdac 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 800ec84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ec88:	f7f3 f83c 	bl	8001d04 <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 800ec8c:	79fb      	ldrb	r3, [r7, #7]
 800ec8e:	2b63      	cmp	r3, #99	; 0x63
 800ec90:	d970      	bls.n	800ed74 <ce303_voltage+0x2a4>
	{
		start_buf[0] = 0x2F;
 800ec92:	4b31      	ldr	r3, [pc, #196]	; (800ed58 <ce303_voltage+0x288>)
 800ec94:	222f      	movs	r2, #47	; 0x2f
 800ec96:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 800ec98:	4b2f      	ldr	r3, [pc, #188]	; (800ed58 <ce303_voltage+0x288>)
 800ec9a:	223f      	movs	r2, #63	; 0x3f
 800ec9c:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 800ec9e:	79fb      	ldrb	r3, [r7, #7]
 800eca0:	4a2e      	ldr	r2, [pc, #184]	; (800ed5c <ce303_voltage+0x28c>)
 800eca2:	fba2 2303 	umull	r2, r3, r2, r3
 800eca6:	095b      	lsrs	r3, r3, #5
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	3330      	adds	r3, #48	; 0x30
 800ecac:	b2da      	uxtb	r2, r3
 800ecae:	4b2a      	ldr	r3, [pc, #168]	; (800ed58 <ce303_voltage+0x288>)
 800ecb0:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 800ecb2:	79fa      	ldrb	r2, [r7, #7]
 800ecb4:	79fb      	ldrb	r3, [r7, #7]
 800ecb6:	4929      	ldr	r1, [pc, #164]	; (800ed5c <ce303_voltage+0x28c>)
 800ecb8:	fba1 1303 	umull	r1, r3, r1, r3
 800ecbc:	095b      	lsrs	r3, r3, #5
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800ecc6:	fb03 f301 	mul.w	r3, r3, r1
 800ecca:	4413      	add	r3, r2
 800eccc:	4a24      	ldr	r2, [pc, #144]	; (800ed60 <ce303_voltage+0x290>)
 800ecce:	fb82 1203 	smull	r1, r2, r2, r3
 800ecd2:	1092      	asrs	r2, r2, #2
 800ecd4:	17db      	asrs	r3, r3, #31
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	3330      	adds	r3, #48	; 0x30
 800ecdc:	b2da      	uxtb	r2, r3
 800ecde:	4b1e      	ldr	r3, [pc, #120]	; (800ed58 <ce303_voltage+0x288>)
 800ece0:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 800ece2:	79fa      	ldrb	r2, [r7, #7]
 800ece4:	79fb      	ldrb	r3, [r7, #7]
 800ece6:	491d      	ldr	r1, [pc, #116]	; (800ed5c <ce303_voltage+0x28c>)
 800ece8:	fba1 1303 	umull	r1, r3, r1, r3
 800ecec:	095b      	lsrs	r3, r3, #5
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800ecf6:	fb03 f301 	mul.w	r3, r3, r1
 800ecfa:	441a      	add	r2, r3
 800ecfc:	4b18      	ldr	r3, [pc, #96]	; (800ed60 <ce303_voltage+0x290>)
 800ecfe:	fb83 1302 	smull	r1, r3, r3, r2
 800ed02:	1099      	asrs	r1, r3, #2
 800ed04:	17d3      	asrs	r3, r2, #31
 800ed06:	1ac9      	subs	r1, r1, r3
 800ed08:	460b      	mov	r3, r1
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	440b      	add	r3, r1
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	1ad1      	subs	r1, r2, r3
 800ed12:	b2cb      	uxtb	r3, r1
 800ed14:	3330      	adds	r3, #48	; 0x30
 800ed16:	b2da      	uxtb	r2, r3
 800ed18:	4b0f      	ldr	r3, [pc, #60]	; (800ed58 <ce303_voltage+0x288>)
 800ed1a:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 800ed1c:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <ce303_voltage+0x288>)
 800ed1e:	2221      	movs	r2, #33	; 0x21
 800ed20:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 800ed22:	4b0d      	ldr	r3, [pc, #52]	; (800ed58 <ce303_voltage+0x288>)
 800ed24:	220d      	movs	r2, #13
 800ed26:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 800ed28:	4b0b      	ldr	r3, [pc, #44]	; (800ed58 <ce303_voltage+0x288>)
 800ed2a:	220a      	movs	r2, #10
 800ed2c:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 800ed2e:	4b0d      	ldr	r3, [pc, #52]	; (800ed64 <ce303_voltage+0x294>)
 800ed30:	2200      	movs	r2, #0
 800ed32:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 800ed34:	f7ff feb2 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 800ed38:	2201      	movs	r2, #1
 800ed3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ed3e:	480a      	ldr	r0, [pc, #40]	; (800ed68 <ce303_voltage+0x298>)
 800ed40:	f7f4 fa94 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 800ed44:	2208      	movs	r2, #8
 800ed46:	4904      	ldr	r1, [pc, #16]	; (800ed58 <ce303_voltage+0x288>)
 800ed48:	4808      	ldr	r0, [pc, #32]	; (800ed6c <ce303_voltage+0x29c>)
 800ed4a:	f7f6 fd47 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 800ed4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ed52:	f7f2 ffd7 	bl	8001d04 <HAL_Delay>
 800ed56:	e080      	b.n	800ee5a <ce303_voltage+0x38a>
 800ed58:	20000010 	.word	0x20000010
 800ed5c:	51eb851f 	.word	0x51eb851f
 800ed60:	66666667 	.word	0x66666667
 800ed64:	2000085d 	.word	0x2000085d
 800ed68:	40021800 	.word	0x40021800
 800ed6c:	20009c70 	.word	0x20009c70
 800ed70:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 800ed74:	79fb      	ldrb	r3, [r7, #7]
 800ed76:	2b09      	cmp	r3, #9
 800ed78:	d944      	bls.n	800ee04 <ce303_voltage+0x334>
 800ed7a:	79fb      	ldrb	r3, [r7, #7]
 800ed7c:	2b63      	cmp	r3, #99	; 0x63
 800ed7e:	d841      	bhi.n	800ee04 <ce303_voltage+0x334>
	{
		start_buf[0] = 0x2F;
 800ed80:	4b90      	ldr	r3, [pc, #576]	; (800efc4 <ce303_voltage+0x4f4>)
 800ed82:	222f      	movs	r2, #47	; 0x2f
 800ed84:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 800ed86:	4b8f      	ldr	r3, [pc, #572]	; (800efc4 <ce303_voltage+0x4f4>)
 800ed88:	223f      	movs	r2, #63	; 0x3f
 800ed8a:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 800ed8c:	79fb      	ldrb	r3, [r7, #7]
 800ed8e:	4a8e      	ldr	r2, [pc, #568]	; (800efc8 <ce303_voltage+0x4f8>)
 800ed90:	fba2 2303 	umull	r2, r3, r2, r3
 800ed94:	08db      	lsrs	r3, r3, #3
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	3330      	adds	r3, #48	; 0x30
 800ed9a:	b2da      	uxtb	r2, r3
 800ed9c:	4b89      	ldr	r3, [pc, #548]	; (800efc4 <ce303_voltage+0x4f4>)
 800ed9e:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 800eda0:	79fb      	ldrb	r3, [r7, #7]
 800eda2:	4a89      	ldr	r2, [pc, #548]	; (800efc8 <ce303_voltage+0x4f8>)
 800eda4:	fba2 2303 	umull	r2, r3, r2, r3
 800eda8:	08db      	lsrs	r3, r3, #3
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	461a      	mov	r2, r3
 800edae:	0152      	lsls	r2, r2, #5
 800edb0:	1ad2      	subs	r2, r2, r3
 800edb2:	0092      	lsls	r2, r2, #2
 800edb4:	1ad3      	subs	r3, r2, r3
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	b2da      	uxtb	r2, r3
 800edba:	79fb      	ldrb	r3, [r7, #7]
 800edbc:	4413      	add	r3, r2
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	3330      	adds	r3, #48	; 0x30
 800edc2:	b2da      	uxtb	r2, r3
 800edc4:	4b7f      	ldr	r3, [pc, #508]	; (800efc4 <ce303_voltage+0x4f4>)
 800edc6:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 800edc8:	4b7e      	ldr	r3, [pc, #504]	; (800efc4 <ce303_voltage+0x4f4>)
 800edca:	2221      	movs	r2, #33	; 0x21
 800edcc:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 800edce:	4b7d      	ldr	r3, [pc, #500]	; (800efc4 <ce303_voltage+0x4f4>)
 800edd0:	220d      	movs	r2, #13
 800edd2:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 800edd4:	4b7b      	ldr	r3, [pc, #492]	; (800efc4 <ce303_voltage+0x4f4>)
 800edd6:	220a      	movs	r2, #10
 800edd8:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 800edda:	4b7c      	ldr	r3, [pc, #496]	; (800efcc <ce303_voltage+0x4fc>)
 800eddc:	2200      	movs	r2, #0
 800edde:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 800ede0:	f7ff fe5c 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 800ede4:	2201      	movs	r2, #1
 800ede6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800edea:	4879      	ldr	r0, [pc, #484]	; (800efd0 <ce303_voltage+0x500>)
 800edec:	f7f4 fa3e 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 800edf0:	2207      	movs	r2, #7
 800edf2:	4974      	ldr	r1, [pc, #464]	; (800efc4 <ce303_voltage+0x4f4>)
 800edf4:	4877      	ldr	r0, [pc, #476]	; (800efd4 <ce303_voltage+0x504>)
 800edf6:	f7f6 fcf1 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 800edfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800edfe:	f7f2 ff81 	bl	8001d04 <HAL_Delay>
 800ee02:	e02a      	b.n	800ee5a <ce303_voltage+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 800ee04:	79fb      	ldrb	r3, [r7, #7]
 800ee06:	2b09      	cmp	r3, #9
 800ee08:	d827      	bhi.n	800ee5a <ce303_voltage+0x38a>
	{
		start_buf[0] = 0x2F;
 800ee0a:	4b6e      	ldr	r3, [pc, #440]	; (800efc4 <ce303_voltage+0x4f4>)
 800ee0c:	222f      	movs	r2, #47	; 0x2f
 800ee0e:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 800ee10:	4b6c      	ldr	r3, [pc, #432]	; (800efc4 <ce303_voltage+0x4f4>)
 800ee12:	223f      	movs	r2, #63	; 0x3f
 800ee14:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 800ee16:	79fb      	ldrb	r3, [r7, #7]
 800ee18:	3330      	adds	r3, #48	; 0x30
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	4b69      	ldr	r3, [pc, #420]	; (800efc4 <ce303_voltage+0x4f4>)
 800ee1e:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 800ee20:	4b68      	ldr	r3, [pc, #416]	; (800efc4 <ce303_voltage+0x4f4>)
 800ee22:	2221      	movs	r2, #33	; 0x21
 800ee24:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 800ee26:	4b67      	ldr	r3, [pc, #412]	; (800efc4 <ce303_voltage+0x4f4>)
 800ee28:	220d      	movs	r2, #13
 800ee2a:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 800ee2c:	4b65      	ldr	r3, [pc, #404]	; (800efc4 <ce303_voltage+0x4f4>)
 800ee2e:	220a      	movs	r2, #10
 800ee30:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 800ee32:	4b66      	ldr	r3, [pc, #408]	; (800efcc <ce303_voltage+0x4fc>)
 800ee34:	2200      	movs	r2, #0
 800ee36:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 800ee38:	f7ff fe30 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ee42:	4863      	ldr	r0, [pc, #396]	; (800efd0 <ce303_voltage+0x500>)
 800ee44:	f7f4 fa12 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 800ee48:	2206      	movs	r2, #6
 800ee4a:	495e      	ldr	r1, [pc, #376]	; (800efc4 <ce303_voltage+0x4f4>)
 800ee4c:	4861      	ldr	r0, [pc, #388]	; (800efd4 <ce303_voltage+0x504>)
 800ee4e:	f7f6 fcc5 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 800ee52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ee56:	f7f2 ff55 	bl	8001d04 <HAL_Delay>
	}



	meter_rx_number = 0;
 800ee5a:	4b5c      	ldr	r3, [pc, #368]	; (800efcc <ce303_voltage+0x4fc>)
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 800ee60:	f7ff fe1c 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 800ee64:	2201      	movs	r2, #1
 800ee66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ee6a:	4859      	ldr	r0, [pc, #356]	; (800efd0 <ce303_voltage+0x500>)
 800ee6c:	f7f4 f9fe 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 800ee70:	2206      	movs	r2, #6
 800ee72:	4959      	ldr	r1, [pc, #356]	; (800efd8 <ce303_voltage+0x508>)
 800ee74:	4857      	ldr	r0, [pc, #348]	; (800efd4 <ce303_voltage+0x504>)
 800ee76:	f7f6 fcb1 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 800ee7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ee7e:	f7f2 ff41 	bl	8001d04 <HAL_Delay>

	meter_rx_number = 0;
 800ee82:	4b52      	ldr	r3, [pc, #328]	; (800efcc <ce303_voltage+0x4fc>)
 800ee84:	2200      	movs	r2, #0
 800ee86:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 800ee88:	f7ff fe08 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ee92:	484f      	ldr	r0, [pc, #316]	; (800efd0 <ce303_voltage+0x500>)
 800ee94:	f7f4 f9ea 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &voltage_buf[0], 13); // передаем команду
 800ee98:	220d      	movs	r2, #13
 800ee9a:	4950      	ldr	r1, [pc, #320]	; (800efdc <ce303_voltage+0x50c>)
 800ee9c:	484d      	ldr	r0, [pc, #308]	; (800efd4 <ce303_voltage+0x504>)
 800ee9e:	f7f6 fc9d 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 800eea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800eea6:	f7f2 ff2d 	bl	8001d04 <HAL_Delay>

	voltage_a_state = 0; // обнуляем переменные состояния прочтения напряжения перед их прочтением
 800eeaa:	2300      	movs	r3, #0
 800eeac:	757b      	strb	r3, [r7, #21]
	voltage_b_state = 0;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	753b      	strb	r3, [r7, #20]
	voltage_c_state = 0;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	823b      	strh	r3, [r7, #16]
 800eeba:	f001 b82b 	b.w	800ff14 <ce303_voltage+0x1444>
	{

		if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==0) && (voltage_b_state==0) && (voltage_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 800eebe:	8a3b      	ldrh	r3, [r7, #16]
 800eec0:	4a47      	ldr	r2, [pc, #284]	; (800efe0 <ce303_voltage+0x510>)
 800eec2:	5cd3      	ldrb	r3, [r2, r3]
 800eec4:	2b28      	cmp	r3, #40	; 0x28
 800eec6:	f040 82ba 	bne.w	800f43e <ce303_voltage+0x96e>
 800eeca:	7d7b      	ldrb	r3, [r7, #21]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	f040 82b6 	bne.w	800f43e <ce303_voltage+0x96e>
 800eed2:	7d3b      	ldrb	r3, [r7, #20]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	f040 82b2 	bne.w	800f43e <ce303_voltage+0x96e>
 800eeda:	7cfb      	ldrb	r3, [r7, #19]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	f040 82ae 	bne.w	800f43e <ce303_voltage+0x96e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800eee2:	8a3b      	ldrh	r3, [r7, #16]
 800eee4:	3302      	adds	r3, #2
 800eee6:	4a3e      	ldr	r2, [pc, #248]	; (800efe0 <ce303_voltage+0x510>)
 800eee8:	5cd3      	ldrb	r3, [r2, r3]
 800eeea:	2b2e      	cmp	r3, #46	; 0x2e
 800eeec:	f040 80d8 	bne.w	800f0a0 <ce303_voltage+0x5d0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 800eef0:	8a3b      	ldrh	r3, [r7, #16]
 800eef2:	3301      	adds	r3, #1
 800eef4:	4a3a      	ldr	r2, [pc, #232]	; (800efe0 <ce303_voltage+0x510>)
 800eef6:	5cd3      	ldrb	r3, [r2, r3]
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	3b30      	subs	r3, #48	; 0x30
 800eefc:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 800eefe:	8a3b      	ldrh	r3, [r7, #16]
 800ef00:	3304      	adds	r3, #4
 800ef02:	4a37      	ldr	r2, [pc, #220]	; (800efe0 <ce303_voltage+0x510>)
 800ef04:	5cd3      	ldrb	r3, [r2, r3]
 800ef06:	2b29      	cmp	r3, #41	; 0x29
 800ef08:	d110      	bne.n	800ef2c <ce303_voltage+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 800ef0a:	8a3b      	ldrh	r3, [r7, #16]
 800ef0c:	3303      	adds	r3, #3
 800ef0e:	4a34      	ldr	r2, [pc, #208]	; (800efe0 <ce303_voltage+0x510>)
 800ef10:	5cd3      	ldrb	r3, [r2, r3]
 800ef12:	3b30      	subs	r3, #48	; 0x30
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	461a      	mov	r2, r3
 800ef18:	0092      	lsls	r2, r2, #2
 800ef1a:	4413      	add	r3, r2
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	0091      	lsls	r1, r2, #2
 800ef20:	461a      	mov	r2, r3
 800ef22:	460b      	mov	r3, r1
 800ef24:	4413      	add	r3, r2
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	82fb      	strh	r3, [r7, #22]
 800ef2a:	e081      	b.n	800f030 <ce303_voltage+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 800ef2c:	8a3b      	ldrh	r3, [r7, #16]
 800ef2e:	3305      	adds	r3, #5
 800ef30:	4a2b      	ldr	r2, [pc, #172]	; (800efe0 <ce303_voltage+0x510>)
 800ef32:	5cd3      	ldrb	r3, [r2, r3]
 800ef34:	2b29      	cmp	r3, #41	; 0x29
 800ef36:	d117      	bne.n	800ef68 <ce303_voltage+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 800ef38:	8a3b      	ldrh	r3, [r7, #16]
 800ef3a:	3303      	adds	r3, #3
 800ef3c:	4a28      	ldr	r2, [pc, #160]	; (800efe0 <ce303_voltage+0x510>)
 800ef3e:	5cd3      	ldrb	r3, [r2, r3]
 800ef40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ef44:	4613      	mov	r3, r2
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	4413      	add	r3, r2
 800ef4a:	005b      	lsls	r3, r3, #1
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	8a3b      	ldrh	r3, [r7, #16]
 800ef50:	3304      	adds	r3, #4
 800ef52:	4a23      	ldr	r2, [pc, #140]	; (800efe0 <ce303_voltage+0x510>)
 800ef54:	5cd3      	ldrb	r3, [r2, r3]
 800ef56:	3b30      	subs	r3, #48	; 0x30
 800ef58:	440b      	add	r3, r1
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	0092      	lsls	r2, r2, #2
 800ef60:	4413      	add	r3, r2
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	82fb      	strh	r3, [r7, #22]
 800ef66:	e063      	b.n	800f030 <ce303_voltage+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 800ef68:	8a3b      	ldrh	r3, [r7, #16]
 800ef6a:	3306      	adds	r3, #6
 800ef6c:	4a1c      	ldr	r2, [pc, #112]	; (800efe0 <ce303_voltage+0x510>)
 800ef6e:	5cd3      	ldrb	r3, [r2, r3]
 800ef70:	2b29      	cmp	r3, #41	; 0x29
 800ef72:	d137      	bne.n	800efe4 <ce303_voltage+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 800ef74:	8a3b      	ldrh	r3, [r7, #16]
 800ef76:	3303      	adds	r3, #3
 800ef78:	4a19      	ldr	r2, [pc, #100]	; (800efe0 <ce303_voltage+0x510>)
 800ef7a:	5cd3      	ldrb	r3, [r2, r3]
 800ef7c:	3b30      	subs	r3, #48	; 0x30
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	461a      	mov	r2, r3
 800ef82:	0092      	lsls	r2, r2, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	461a      	mov	r2, r3
 800ef88:	0091      	lsls	r1, r2, #2
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	460b      	mov	r3, r1
 800ef8e:	4413      	add	r3, r2
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	8a3b      	ldrh	r3, [r7, #16]
 800ef96:	3304      	adds	r3, #4
 800ef98:	4911      	ldr	r1, [pc, #68]	; (800efe0 <ce303_voltage+0x510>)
 800ef9a:	5ccb      	ldrb	r3, [r1, r3]
 800ef9c:	3b30      	subs	r3, #48	; 0x30
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	4619      	mov	r1, r3
 800efa2:	0089      	lsls	r1, r1, #2
 800efa4:	440b      	add	r3, r1
 800efa6:	005b      	lsls	r3, r3, #1
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	4413      	add	r3, r2
 800efac:	b29a      	uxth	r2, r3
 800efae:	8a3b      	ldrh	r3, [r7, #16]
 800efb0:	3305      	adds	r3, #5
 800efb2:	490b      	ldr	r1, [pc, #44]	; (800efe0 <ce303_voltage+0x510>)
 800efb4:	5ccb      	ldrb	r3, [r1, r3]
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	4413      	add	r3, r2
 800efba:	b29b      	uxth	r3, r3
 800efbc:	3b30      	subs	r3, #48	; 0x30
 800efbe:	82fb      	strh	r3, [r7, #22]
 800efc0:	e036      	b.n	800f030 <ce303_voltage+0x560>
 800efc2:	bf00      	nop
 800efc4:	20000010 	.word	0x20000010
 800efc8:	cccccccd 	.word	0xcccccccd
 800efcc:	2000085d 	.word	0x2000085d
 800efd0:	40021800 	.word	0x40021800
 800efd4:	20009c70 	.word	0x20009c70
 800efd8:	20000018 	.word	0x20000018
 800efdc:	20000020 	.word	0x20000020
 800efe0:	200098e4 	.word	0x200098e4
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 800efe4:	8a3b      	ldrh	r3, [r7, #16]
 800efe6:	3303      	adds	r3, #3
 800efe8:	4a9b      	ldr	r2, [pc, #620]	; (800f258 <ce303_voltage+0x788>)
 800efea:	5cd3      	ldrb	r3, [r2, r3]
 800efec:	3b30      	subs	r3, #48	; 0x30
 800efee:	b29b      	uxth	r3, r3
 800eff0:	461a      	mov	r2, r3
 800eff2:	0092      	lsls	r2, r2, #2
 800eff4:	4413      	add	r3, r2
 800eff6:	461a      	mov	r2, r3
 800eff8:	0091      	lsls	r1, r2, #2
 800effa:	461a      	mov	r2, r3
 800effc:	460b      	mov	r3, r1
 800effe:	4413      	add	r3, r2
 800f000:	009b      	lsls	r3, r3, #2
 800f002:	b29a      	uxth	r2, r3
 800f004:	8a3b      	ldrh	r3, [r7, #16]
 800f006:	3304      	adds	r3, #4
 800f008:	4993      	ldr	r1, [pc, #588]	; (800f258 <ce303_voltage+0x788>)
 800f00a:	5ccb      	ldrb	r3, [r1, r3]
 800f00c:	3b30      	subs	r3, #48	; 0x30
 800f00e:	b29b      	uxth	r3, r3
 800f010:	4619      	mov	r1, r3
 800f012:	0089      	lsls	r1, r1, #2
 800f014:	440b      	add	r3, r1
 800f016:	005b      	lsls	r3, r3, #1
 800f018:	b29b      	uxth	r3, r3
 800f01a:	4413      	add	r3, r2
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	8a3b      	ldrh	r3, [r7, #16]
 800f020:	3305      	adds	r3, #5
 800f022:	498d      	ldr	r1, [pc, #564]	; (800f258 <ce303_voltage+0x788>)
 800f024:	5ccb      	ldrb	r3, [r1, r3]
 800f026:	b29b      	uxth	r3, r3
 800f028:	4413      	add	r3, r2
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	3b30      	subs	r3, #48	; 0x30
 800f02e:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f030:	4b8a      	ldr	r3, [pc, #552]	; (800f25c <ce303_voltage+0x78c>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f04f 31ff 	mov.w	r1, #4294967295
 800f038:	4618      	mov	r0, r3
 800f03a:	f7f7 fe7d 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 800f03e:	89fb      	ldrh	r3, [r7, #14]
 800f040:	0a1b      	lsrs	r3, r3, #8
 800f042:	b29b      	uxth	r3, r3
 800f044:	b2db      	uxtb	r3, r3
 800f046:	4619      	mov	r1, r3
 800f048:	f242 004a 	movw	r0, #8266	; 0x204a
 800f04c:	f006 fc08 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 800f050:	89fb      	ldrh	r3, [r7, #14]
 800f052:	b2db      	uxtb	r3, r3
 800f054:	4619      	mov	r1, r3
 800f056:	f242 004b 	movw	r0, #8267	; 0x204b
 800f05a:	f006 fc01 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 800f05e:	8afb      	ldrh	r3, [r7, #22]
 800f060:	0a1b      	lsrs	r3, r3, #8
 800f062:	b29b      	uxth	r3, r3
 800f064:	b2db      	uxtb	r3, r3
 800f066:	4619      	mov	r1, r3
 800f068:	f242 0050 	movw	r0, #8272	; 0x2050
 800f06c:	f006 fbf8 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 800f070:	8afb      	ldrh	r3, [r7, #22]
 800f072:	b2db      	uxtb	r3, r3
 800f074:	4619      	mov	r1, r3
 800f076:	f242 0051 	movw	r0, #8273	; 0x2051
 800f07a:	f006 fbf1 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f07e:	4b77      	ldr	r3, [pc, #476]	; (800f25c <ce303_voltage+0x78c>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4618      	mov	r0, r3
 800f084:	f7f7 fea6 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 800f088:	4a75      	ldr	r2, [pc, #468]	; (800f260 <ce303_voltage+0x790>)
 800f08a:	89fb      	ldrh	r3, [r7, #14]
 800f08c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg =  temp_mil;
 800f090:	4a73      	ldr	r2, [pc, #460]	; (800f260 <ce303_voltage+0x790>)
 800f092:	8afb      	ldrh	r3, [r7, #22]
 800f094:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 800f098:	2301      	movs	r3, #1
 800f09a:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800f09c:	f000 bf34 	b.w	800ff08 <ce303_voltage+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 800f0a0:	8a3b      	ldrh	r3, [r7, #16]
 800f0a2:	3303      	adds	r3, #3
 800f0a4:	4a6c      	ldr	r2, [pc, #432]	; (800f258 <ce303_voltage+0x788>)
 800f0a6:	5cd3      	ldrb	r3, [r2, r3]
 800f0a8:	2b2e      	cmp	r3, #46	; 0x2e
 800f0aa:	f040 80db 	bne.w	800f264 <ce303_voltage+0x794>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 800f0ae:	8a3b      	ldrh	r3, [r7, #16]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	4a69      	ldr	r2, [pc, #420]	; (800f258 <ce303_voltage+0x788>)
 800f0b4:	5cd3      	ldrb	r3, [r2, r3]
 800f0b6:	3b30      	subs	r3, #48	; 0x30
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	0092      	lsls	r2, r2, #2
 800f0be:	4413      	add	r3, r2
 800f0c0:	005b      	lsls	r3, r3, #1
 800f0c2:	b29a      	uxth	r2, r3
 800f0c4:	8a3b      	ldrh	r3, [r7, #16]
 800f0c6:	3302      	adds	r3, #2
 800f0c8:	4963      	ldr	r1, [pc, #396]	; (800f258 <ce303_voltage+0x788>)
 800f0ca:	5ccb      	ldrb	r3, [r1, r3]
 800f0cc:	b29b      	uxth	r3, r3
 800f0ce:	4413      	add	r3, r2
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	3b30      	subs	r3, #48	; 0x30
 800f0d4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 800f0d6:	8a3b      	ldrh	r3, [r7, #16]
 800f0d8:	3305      	adds	r3, #5
 800f0da:	4a5f      	ldr	r2, [pc, #380]	; (800f258 <ce303_voltage+0x788>)
 800f0dc:	5cd3      	ldrb	r3, [r2, r3]
 800f0de:	2b29      	cmp	r3, #41	; 0x29
 800f0e0:	d110      	bne.n	800f104 <ce303_voltage+0x634>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 800f0e2:	8a3b      	ldrh	r3, [r7, #16]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	4a5c      	ldr	r2, [pc, #368]	; (800f258 <ce303_voltage+0x788>)
 800f0e8:	5cd3      	ldrb	r3, [r2, r3]
 800f0ea:	3b30      	subs	r3, #48	; 0x30
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	0092      	lsls	r2, r2, #2
 800f0f2:	4413      	add	r3, r2
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	0091      	lsls	r1, r2, #2
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	4413      	add	r3, r2
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	82fb      	strh	r3, [r7, #22]
 800f102:	e070      	b.n	800f1e6 <ce303_voltage+0x716>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 800f104:	8a3b      	ldrh	r3, [r7, #16]
 800f106:	3306      	adds	r3, #6
 800f108:	4a53      	ldr	r2, [pc, #332]	; (800f258 <ce303_voltage+0x788>)
 800f10a:	5cd3      	ldrb	r3, [r2, r3]
 800f10c:	2b29      	cmp	r3, #41	; 0x29
 800f10e:	d117      	bne.n	800f140 <ce303_voltage+0x670>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 800f110:	8a3b      	ldrh	r3, [r7, #16]
 800f112:	3304      	adds	r3, #4
 800f114:	4a50      	ldr	r2, [pc, #320]	; (800f258 <ce303_voltage+0x788>)
 800f116:	5cd3      	ldrb	r3, [r2, r3]
 800f118:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f11c:	4613      	mov	r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4413      	add	r3, r2
 800f122:	005b      	lsls	r3, r3, #1
 800f124:	4619      	mov	r1, r3
 800f126:	8a3b      	ldrh	r3, [r7, #16]
 800f128:	3305      	adds	r3, #5
 800f12a:	4a4b      	ldr	r2, [pc, #300]	; (800f258 <ce303_voltage+0x788>)
 800f12c:	5cd3      	ldrb	r3, [r2, r3]
 800f12e:	3b30      	subs	r3, #48	; 0x30
 800f130:	440b      	add	r3, r1
 800f132:	b29b      	uxth	r3, r3
 800f134:	461a      	mov	r2, r3
 800f136:	0092      	lsls	r2, r2, #2
 800f138:	4413      	add	r3, r2
 800f13a:	005b      	lsls	r3, r3, #1
 800f13c:	82fb      	strh	r3, [r7, #22]
 800f13e:	e052      	b.n	800f1e6 <ce303_voltage+0x716>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 800f140:	8a3b      	ldrh	r3, [r7, #16]
 800f142:	3307      	adds	r3, #7
 800f144:	4a44      	ldr	r2, [pc, #272]	; (800f258 <ce303_voltage+0x788>)
 800f146:	5cd3      	ldrb	r3, [r2, r3]
 800f148:	2b29      	cmp	r3, #41	; 0x29
 800f14a:	d126      	bne.n	800f19a <ce303_voltage+0x6ca>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 800f14c:	8a3b      	ldrh	r3, [r7, #16]
 800f14e:	3304      	adds	r3, #4
 800f150:	4a41      	ldr	r2, [pc, #260]	; (800f258 <ce303_voltage+0x788>)
 800f152:	5cd3      	ldrb	r3, [r2, r3]
 800f154:	3b30      	subs	r3, #48	; 0x30
 800f156:	b29b      	uxth	r3, r3
 800f158:	461a      	mov	r2, r3
 800f15a:	0092      	lsls	r2, r2, #2
 800f15c:	4413      	add	r3, r2
 800f15e:	461a      	mov	r2, r3
 800f160:	0091      	lsls	r1, r2, #2
 800f162:	461a      	mov	r2, r3
 800f164:	460b      	mov	r3, r1
 800f166:	4413      	add	r3, r2
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	b29a      	uxth	r2, r3
 800f16c:	8a3b      	ldrh	r3, [r7, #16]
 800f16e:	3305      	adds	r3, #5
 800f170:	4939      	ldr	r1, [pc, #228]	; (800f258 <ce303_voltage+0x788>)
 800f172:	5ccb      	ldrb	r3, [r1, r3]
 800f174:	3b30      	subs	r3, #48	; 0x30
 800f176:	b29b      	uxth	r3, r3
 800f178:	4619      	mov	r1, r3
 800f17a:	0089      	lsls	r1, r1, #2
 800f17c:	440b      	add	r3, r1
 800f17e:	005b      	lsls	r3, r3, #1
 800f180:	b29b      	uxth	r3, r3
 800f182:	4413      	add	r3, r2
 800f184:	b29a      	uxth	r2, r3
 800f186:	8a3b      	ldrh	r3, [r7, #16]
 800f188:	3306      	adds	r3, #6
 800f18a:	4933      	ldr	r1, [pc, #204]	; (800f258 <ce303_voltage+0x788>)
 800f18c:	5ccb      	ldrb	r3, [r1, r3]
 800f18e:	b29b      	uxth	r3, r3
 800f190:	4413      	add	r3, r2
 800f192:	b29b      	uxth	r3, r3
 800f194:	3b30      	subs	r3, #48	; 0x30
 800f196:	82fb      	strh	r3, [r7, #22]
 800f198:	e025      	b.n	800f1e6 <ce303_voltage+0x716>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 800f19a:	8a3b      	ldrh	r3, [r7, #16]
 800f19c:	3304      	adds	r3, #4
 800f19e:	4a2e      	ldr	r2, [pc, #184]	; (800f258 <ce303_voltage+0x788>)
 800f1a0:	5cd3      	ldrb	r3, [r2, r3]
 800f1a2:	3b30      	subs	r3, #48	; 0x30
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	0092      	lsls	r2, r2, #2
 800f1aa:	4413      	add	r3, r2
 800f1ac:	461a      	mov	r2, r3
 800f1ae:	0091      	lsls	r1, r2, #2
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	4413      	add	r3, r2
 800f1b6:	009b      	lsls	r3, r3, #2
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	8a3b      	ldrh	r3, [r7, #16]
 800f1bc:	3305      	adds	r3, #5
 800f1be:	4926      	ldr	r1, [pc, #152]	; (800f258 <ce303_voltage+0x788>)
 800f1c0:	5ccb      	ldrb	r3, [r1, r3]
 800f1c2:	3b30      	subs	r3, #48	; 0x30
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	0089      	lsls	r1, r1, #2
 800f1ca:	440b      	add	r3, r1
 800f1cc:	005b      	lsls	r3, r3, #1
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	4413      	add	r3, r2
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	8a3b      	ldrh	r3, [r7, #16]
 800f1d6:	3306      	adds	r3, #6
 800f1d8:	491f      	ldr	r1, [pc, #124]	; (800f258 <ce303_voltage+0x788>)
 800f1da:	5ccb      	ldrb	r3, [r1, r3]
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	4413      	add	r3, r2
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	3b30      	subs	r3, #48	; 0x30
 800f1e4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f1e6:	4b1d      	ldr	r3, [pc, #116]	; (800f25c <ce303_voltage+0x78c>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f04f 31ff 	mov.w	r1, #4294967295
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7f7 fda2 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 800f1f4:	89fb      	ldrh	r3, [r7, #14]
 800f1f6:	0a1b      	lsrs	r3, r3, #8
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	f242 004a 	movw	r0, #8266	; 0x204a
 800f202:	f006 fb2d 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 800f206:	89fb      	ldrh	r3, [r7, #14]
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	4619      	mov	r1, r3
 800f20c:	f242 004b 	movw	r0, #8267	; 0x204b
 800f210:	f006 fb26 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 800f214:	8afb      	ldrh	r3, [r7, #22]
 800f216:	0a1b      	lsrs	r3, r3, #8
 800f218:	b29b      	uxth	r3, r3
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	4619      	mov	r1, r3
 800f21e:	f242 0050 	movw	r0, #8272	; 0x2050
 800f222:	f006 fb1d 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 800f226:	8afb      	ldrh	r3, [r7, #22]
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	4619      	mov	r1, r3
 800f22c:	f242 0051 	movw	r0, #8273	; 0x2051
 800f230:	f006 fb16 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f234:	4b09      	ldr	r3, [pc, #36]	; (800f25c <ce303_voltage+0x78c>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4618      	mov	r0, r3
 800f23a:	f7f7 fdcb 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 800f23e:	4a08      	ldr	r2, [pc, #32]	; (800f260 <ce303_voltage+0x790>)
 800f240:	89fb      	ldrh	r3, [r7, #14]
 800f242:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg = temp_mil;
 800f246:	4a06      	ldr	r2, [pc, #24]	; (800f260 <ce303_voltage+0x790>)
 800f248:	8afb      	ldrh	r3, [r7, #22]
 800f24a:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 800f24e:	2301      	movs	r3, #1
 800f250:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800f252:	f000 be59 	b.w	800ff08 <ce303_voltage+0x1438>
 800f256:	bf00      	nop
 800f258:	200098e4 	.word	0x200098e4
 800f25c:	20009a6c 	.word	0x20009a6c
 800f260:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 800f264:	8a3b      	ldrh	r3, [r7, #16]
 800f266:	3304      	adds	r3, #4
 800f268:	4a9f      	ldr	r2, [pc, #636]	; (800f4e8 <ce303_voltage+0xa18>)
 800f26a:	5cd3      	ldrb	r3, [r2, r3]
 800f26c:	2b2e      	cmp	r3, #46	; 0x2e
 800f26e:	f040 864b 	bne.w	800ff08 <ce303_voltage+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 800f272:	8a3b      	ldrh	r3, [r7, #16]
 800f274:	3301      	adds	r3, #1
 800f276:	4a9c      	ldr	r2, [pc, #624]	; (800f4e8 <ce303_voltage+0xa18>)
 800f278:	5cd3      	ldrb	r3, [r2, r3]
 800f27a:	3b30      	subs	r3, #48	; 0x30
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	461a      	mov	r2, r3
 800f280:	0092      	lsls	r2, r2, #2
 800f282:	4413      	add	r3, r2
 800f284:	461a      	mov	r2, r3
 800f286:	0091      	lsls	r1, r2, #2
 800f288:	461a      	mov	r2, r3
 800f28a:	460b      	mov	r3, r1
 800f28c:	4413      	add	r3, r2
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	b29a      	uxth	r2, r3
 800f292:	8a3b      	ldrh	r3, [r7, #16]
 800f294:	3302      	adds	r3, #2
 800f296:	4994      	ldr	r1, [pc, #592]	; (800f4e8 <ce303_voltage+0xa18>)
 800f298:	5ccb      	ldrb	r3, [r1, r3]
 800f29a:	3b30      	subs	r3, #48	; 0x30
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	4619      	mov	r1, r3
 800f2a0:	0089      	lsls	r1, r1, #2
 800f2a2:	440b      	add	r3, r1
 800f2a4:	005b      	lsls	r3, r3, #1
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	4413      	add	r3, r2
 800f2aa:	b29a      	uxth	r2, r3
 800f2ac:	8a3b      	ldrh	r3, [r7, #16]
 800f2ae:	3303      	adds	r3, #3
 800f2b0:	498d      	ldr	r1, [pc, #564]	; (800f4e8 <ce303_voltage+0xa18>)
 800f2b2:	5ccb      	ldrb	r3, [r1, r3]
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	4413      	add	r3, r2
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	3b30      	subs	r3, #48	; 0x30
 800f2bc:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 800f2be:	8a3b      	ldrh	r3, [r7, #16]
 800f2c0:	3306      	adds	r3, #6
 800f2c2:	4a89      	ldr	r2, [pc, #548]	; (800f4e8 <ce303_voltage+0xa18>)
 800f2c4:	5cd3      	ldrb	r3, [r2, r3]
 800f2c6:	2b29      	cmp	r3, #41	; 0x29
 800f2c8:	d110      	bne.n	800f2ec <ce303_voltage+0x81c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 800f2ca:	8a3b      	ldrh	r3, [r7, #16]
 800f2cc:	3305      	adds	r3, #5
 800f2ce:	4a86      	ldr	r2, [pc, #536]	; (800f4e8 <ce303_voltage+0xa18>)
 800f2d0:	5cd3      	ldrb	r3, [r2, r3]
 800f2d2:	3b30      	subs	r3, #48	; 0x30
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	0092      	lsls	r2, r2, #2
 800f2da:	4413      	add	r3, r2
 800f2dc:	461a      	mov	r2, r3
 800f2de:	0091      	lsls	r1, r2, #2
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	4413      	add	r3, r2
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	82fb      	strh	r3, [r7, #22]
 800f2ea:	e070      	b.n	800f3ce <ce303_voltage+0x8fe>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 800f2ec:	8a3b      	ldrh	r3, [r7, #16]
 800f2ee:	3307      	adds	r3, #7
 800f2f0:	4a7d      	ldr	r2, [pc, #500]	; (800f4e8 <ce303_voltage+0xa18>)
 800f2f2:	5cd3      	ldrb	r3, [r2, r3]
 800f2f4:	2b29      	cmp	r3, #41	; 0x29
 800f2f6:	d117      	bne.n	800f328 <ce303_voltage+0x858>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 800f2f8:	8a3b      	ldrh	r3, [r7, #16]
 800f2fa:	3305      	adds	r3, #5
 800f2fc:	4a7a      	ldr	r2, [pc, #488]	; (800f4e8 <ce303_voltage+0xa18>)
 800f2fe:	5cd3      	ldrb	r3, [r2, r3]
 800f300:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f304:	4613      	mov	r3, r2
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	4413      	add	r3, r2
 800f30a:	005b      	lsls	r3, r3, #1
 800f30c:	4619      	mov	r1, r3
 800f30e:	8a3b      	ldrh	r3, [r7, #16]
 800f310:	3306      	adds	r3, #6
 800f312:	4a75      	ldr	r2, [pc, #468]	; (800f4e8 <ce303_voltage+0xa18>)
 800f314:	5cd3      	ldrb	r3, [r2, r3]
 800f316:	3b30      	subs	r3, #48	; 0x30
 800f318:	440b      	add	r3, r1
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	461a      	mov	r2, r3
 800f31e:	0092      	lsls	r2, r2, #2
 800f320:	4413      	add	r3, r2
 800f322:	005b      	lsls	r3, r3, #1
 800f324:	82fb      	strh	r3, [r7, #22]
 800f326:	e052      	b.n	800f3ce <ce303_voltage+0x8fe>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 800f328:	8a3b      	ldrh	r3, [r7, #16]
 800f32a:	3308      	adds	r3, #8
 800f32c:	4a6e      	ldr	r2, [pc, #440]	; (800f4e8 <ce303_voltage+0xa18>)
 800f32e:	5cd3      	ldrb	r3, [r2, r3]
 800f330:	2b29      	cmp	r3, #41	; 0x29
 800f332:	d126      	bne.n	800f382 <ce303_voltage+0x8b2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 800f334:	8a3b      	ldrh	r3, [r7, #16]
 800f336:	3305      	adds	r3, #5
 800f338:	4a6b      	ldr	r2, [pc, #428]	; (800f4e8 <ce303_voltage+0xa18>)
 800f33a:	5cd3      	ldrb	r3, [r2, r3]
 800f33c:	3b30      	subs	r3, #48	; 0x30
 800f33e:	b29b      	uxth	r3, r3
 800f340:	461a      	mov	r2, r3
 800f342:	0092      	lsls	r2, r2, #2
 800f344:	4413      	add	r3, r2
 800f346:	461a      	mov	r2, r3
 800f348:	0091      	lsls	r1, r2, #2
 800f34a:	461a      	mov	r2, r3
 800f34c:	460b      	mov	r3, r1
 800f34e:	4413      	add	r3, r2
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	b29a      	uxth	r2, r3
 800f354:	8a3b      	ldrh	r3, [r7, #16]
 800f356:	3306      	adds	r3, #6
 800f358:	4963      	ldr	r1, [pc, #396]	; (800f4e8 <ce303_voltage+0xa18>)
 800f35a:	5ccb      	ldrb	r3, [r1, r3]
 800f35c:	3b30      	subs	r3, #48	; 0x30
 800f35e:	b29b      	uxth	r3, r3
 800f360:	4619      	mov	r1, r3
 800f362:	0089      	lsls	r1, r1, #2
 800f364:	440b      	add	r3, r1
 800f366:	005b      	lsls	r3, r3, #1
 800f368:	b29b      	uxth	r3, r3
 800f36a:	4413      	add	r3, r2
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	8a3b      	ldrh	r3, [r7, #16]
 800f370:	3307      	adds	r3, #7
 800f372:	495d      	ldr	r1, [pc, #372]	; (800f4e8 <ce303_voltage+0xa18>)
 800f374:	5ccb      	ldrb	r3, [r1, r3]
 800f376:	b29b      	uxth	r3, r3
 800f378:	4413      	add	r3, r2
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	3b30      	subs	r3, #48	; 0x30
 800f37e:	82fb      	strh	r3, [r7, #22]
 800f380:	e025      	b.n	800f3ce <ce303_voltage+0x8fe>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 800f382:	8a3b      	ldrh	r3, [r7, #16]
 800f384:	3305      	adds	r3, #5
 800f386:	4a58      	ldr	r2, [pc, #352]	; (800f4e8 <ce303_voltage+0xa18>)
 800f388:	5cd3      	ldrb	r3, [r2, r3]
 800f38a:	3b30      	subs	r3, #48	; 0x30
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	461a      	mov	r2, r3
 800f390:	0092      	lsls	r2, r2, #2
 800f392:	4413      	add	r3, r2
 800f394:	461a      	mov	r2, r3
 800f396:	0091      	lsls	r1, r2, #2
 800f398:	461a      	mov	r2, r3
 800f39a:	460b      	mov	r3, r1
 800f39c:	4413      	add	r3, r2
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	8a3b      	ldrh	r3, [r7, #16]
 800f3a4:	3306      	adds	r3, #6
 800f3a6:	4950      	ldr	r1, [pc, #320]	; (800f4e8 <ce303_voltage+0xa18>)
 800f3a8:	5ccb      	ldrb	r3, [r1, r3]
 800f3aa:	3b30      	subs	r3, #48	; 0x30
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	4619      	mov	r1, r3
 800f3b0:	0089      	lsls	r1, r1, #2
 800f3b2:	440b      	add	r3, r1
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	4413      	add	r3, r2
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	8a3b      	ldrh	r3, [r7, #16]
 800f3be:	3307      	adds	r3, #7
 800f3c0:	4949      	ldr	r1, [pc, #292]	; (800f4e8 <ce303_voltage+0xa18>)
 800f3c2:	5ccb      	ldrb	r3, [r1, r3]
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	4413      	add	r3, r2
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	3b30      	subs	r3, #48	; 0x30
 800f3cc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f3ce:	4b47      	ldr	r3, [pc, #284]	; (800f4ec <ce303_voltage+0xa1c>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f04f 31ff 	mov.w	r1, #4294967295
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7f7 fcae 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 800f3dc:	89fb      	ldrh	r3, [r7, #14]
 800f3de:	0a1b      	lsrs	r3, r3, #8
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	b2db      	uxtb	r3, r3
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	f242 004a 	movw	r0, #8266	; 0x204a
 800f3ea:	f006 fa39 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 800f3ee:	89fb      	ldrh	r3, [r7, #14]
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	f242 004b 	movw	r0, #8267	; 0x204b
 800f3f8:	f006 fa32 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 800f3fc:	8afb      	ldrh	r3, [r7, #22]
 800f3fe:	0a1b      	lsrs	r3, r3, #8
 800f400:	b29b      	uxth	r3, r3
 800f402:	b2db      	uxtb	r3, r3
 800f404:	4619      	mov	r1, r3
 800f406:	f242 0050 	movw	r0, #8272	; 0x2050
 800f40a:	f006 fa29 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 800f40e:	8afb      	ldrh	r3, [r7, #22]
 800f410:	b2db      	uxtb	r3, r3
 800f412:	4619      	mov	r1, r3
 800f414:	f242 0051 	movw	r0, #8273	; 0x2051
 800f418:	f006 fa22 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f41c:	4b33      	ldr	r3, [pc, #204]	; (800f4ec <ce303_voltage+0xa1c>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4618      	mov	r0, r3
 800f422:	f7f7 fcd7 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 800f426:	4a32      	ldr	r2, [pc, #200]	; (800f4f0 <ce303_voltage+0xa20>)
 800f428:	89fb      	ldrh	r3, [r7, #14]
 800f42a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg = temp_mil;
 800f42e:	4a30      	ldr	r2, [pc, #192]	; (800f4f0 <ce303_voltage+0xa20>)
 800f430:	8afb      	ldrh	r3, [r7, #22]
 800f432:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 800f436:	2301      	movs	r3, #1
 800f438:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800f43a:	f000 bd65 	b.w	800ff08 <ce303_voltage+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==1) && (voltage_b_state==0) && (voltage_c_state==0) )
 800f43e:	8a3b      	ldrh	r3, [r7, #16]
 800f440:	4a29      	ldr	r2, [pc, #164]	; (800f4e8 <ce303_voltage+0xa18>)
 800f442:	5cd3      	ldrb	r3, [r2, r3]
 800f444:	2b28      	cmp	r3, #40	; 0x28
 800f446:	f040 82ad 	bne.w	800f9a4 <ce303_voltage+0xed4>
 800f44a:	7d7b      	ldrb	r3, [r7, #21]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	f040 82a9 	bne.w	800f9a4 <ce303_voltage+0xed4>
 800f452:	7d3b      	ldrb	r3, [r7, #20]
 800f454:	2b00      	cmp	r3, #0
 800f456:	f040 82a5 	bne.w	800f9a4 <ce303_voltage+0xed4>
 800f45a:	7cfb      	ldrb	r3, [r7, #19]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f040 82a1 	bne.w	800f9a4 <ce303_voltage+0xed4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800f462:	8a3b      	ldrh	r3, [r7, #16]
 800f464:	3302      	adds	r3, #2
 800f466:	4a20      	ldr	r2, [pc, #128]	; (800f4e8 <ce303_voltage+0xa18>)
 800f468:	5cd3      	ldrb	r3, [r2, r3]
 800f46a:	2b2e      	cmp	r3, #46	; 0x2e
 800f46c:	f040 80cd 	bne.w	800f60a <ce303_voltage+0xb3a>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 800f470:	8a3b      	ldrh	r3, [r7, #16]
 800f472:	3301      	adds	r3, #1
 800f474:	4a1c      	ldr	r2, [pc, #112]	; (800f4e8 <ce303_voltage+0xa18>)
 800f476:	5cd3      	ldrb	r3, [r2, r3]
 800f478:	b29b      	uxth	r3, r3
 800f47a:	3b30      	subs	r3, #48	; 0x30
 800f47c:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 800f47e:	8a3b      	ldrh	r3, [r7, #16]
 800f480:	3304      	adds	r3, #4
 800f482:	4a19      	ldr	r2, [pc, #100]	; (800f4e8 <ce303_voltage+0xa18>)
 800f484:	5cd3      	ldrb	r3, [r2, r3]
 800f486:	2b29      	cmp	r3, #41	; 0x29
 800f488:	d110      	bne.n	800f4ac <ce303_voltage+0x9dc>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 800f48a:	8a3b      	ldrh	r3, [r7, #16]
 800f48c:	3303      	adds	r3, #3
 800f48e:	4a16      	ldr	r2, [pc, #88]	; (800f4e8 <ce303_voltage+0xa18>)
 800f490:	5cd3      	ldrb	r3, [r2, r3]
 800f492:	3b30      	subs	r3, #48	; 0x30
 800f494:	b29b      	uxth	r3, r3
 800f496:	461a      	mov	r2, r3
 800f498:	0092      	lsls	r2, r2, #2
 800f49a:	4413      	add	r3, r2
 800f49c:	461a      	mov	r2, r3
 800f49e:	0091      	lsls	r1, r2, #2
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	4413      	add	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	82fb      	strh	r3, [r7, #22]
 800f4aa:	e076      	b.n	800f59a <ce303_voltage+0xaca>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 800f4ac:	8a3b      	ldrh	r3, [r7, #16]
 800f4ae:	3305      	adds	r3, #5
 800f4b0:	4a0d      	ldr	r2, [pc, #52]	; (800f4e8 <ce303_voltage+0xa18>)
 800f4b2:	5cd3      	ldrb	r3, [r2, r3]
 800f4b4:	2b29      	cmp	r3, #41	; 0x29
 800f4b6:	d11d      	bne.n	800f4f4 <ce303_voltage+0xa24>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 800f4b8:	8a3b      	ldrh	r3, [r7, #16]
 800f4ba:	3303      	adds	r3, #3
 800f4bc:	4a0a      	ldr	r2, [pc, #40]	; (800f4e8 <ce303_voltage+0xa18>)
 800f4be:	5cd3      	ldrb	r3, [r2, r3]
 800f4c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	4413      	add	r3, r2
 800f4ca:	005b      	lsls	r3, r3, #1
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	8a3b      	ldrh	r3, [r7, #16]
 800f4d0:	3304      	adds	r3, #4
 800f4d2:	4a05      	ldr	r2, [pc, #20]	; (800f4e8 <ce303_voltage+0xa18>)
 800f4d4:	5cd3      	ldrb	r3, [r2, r3]
 800f4d6:	3b30      	subs	r3, #48	; 0x30
 800f4d8:	440b      	add	r3, r1
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	461a      	mov	r2, r3
 800f4de:	0092      	lsls	r2, r2, #2
 800f4e0:	4413      	add	r3, r2
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	82fb      	strh	r3, [r7, #22]
 800f4e6:	e058      	b.n	800f59a <ce303_voltage+0xaca>
 800f4e8:	200098e4 	.word	0x200098e4
 800f4ec:	20009a6c 	.word	0x20009a6c
 800f4f0:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 800f4f4:	8a3b      	ldrh	r3, [r7, #16]
 800f4f6:	3306      	adds	r3, #6
 800f4f8:	4ab1      	ldr	r2, [pc, #708]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f4fa:	5cd3      	ldrb	r3, [r2, r3]
 800f4fc:	2b29      	cmp	r3, #41	; 0x29
 800f4fe:	d126      	bne.n	800f54e <ce303_voltage+0xa7e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 800f500:	8a3b      	ldrh	r3, [r7, #16]
 800f502:	3303      	adds	r3, #3
 800f504:	4aae      	ldr	r2, [pc, #696]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f506:	5cd3      	ldrb	r3, [r2, r3]
 800f508:	3b30      	subs	r3, #48	; 0x30
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	461a      	mov	r2, r3
 800f50e:	0092      	lsls	r2, r2, #2
 800f510:	4413      	add	r3, r2
 800f512:	461a      	mov	r2, r3
 800f514:	0091      	lsls	r1, r2, #2
 800f516:	461a      	mov	r2, r3
 800f518:	460b      	mov	r3, r1
 800f51a:	4413      	add	r3, r2
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	b29a      	uxth	r2, r3
 800f520:	8a3b      	ldrh	r3, [r7, #16]
 800f522:	3304      	adds	r3, #4
 800f524:	49a6      	ldr	r1, [pc, #664]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f526:	5ccb      	ldrb	r3, [r1, r3]
 800f528:	3b30      	subs	r3, #48	; 0x30
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	4619      	mov	r1, r3
 800f52e:	0089      	lsls	r1, r1, #2
 800f530:	440b      	add	r3, r1
 800f532:	005b      	lsls	r3, r3, #1
 800f534:	b29b      	uxth	r3, r3
 800f536:	4413      	add	r3, r2
 800f538:	b29a      	uxth	r2, r3
 800f53a:	8a3b      	ldrh	r3, [r7, #16]
 800f53c:	3305      	adds	r3, #5
 800f53e:	49a0      	ldr	r1, [pc, #640]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f540:	5ccb      	ldrb	r3, [r1, r3]
 800f542:	b29b      	uxth	r3, r3
 800f544:	4413      	add	r3, r2
 800f546:	b29b      	uxth	r3, r3
 800f548:	3b30      	subs	r3, #48	; 0x30
 800f54a:	82fb      	strh	r3, [r7, #22]
 800f54c:	e025      	b.n	800f59a <ce303_voltage+0xaca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 800f54e:	8a3b      	ldrh	r3, [r7, #16]
 800f550:	3303      	adds	r3, #3
 800f552:	4a9b      	ldr	r2, [pc, #620]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f554:	5cd3      	ldrb	r3, [r2, r3]
 800f556:	3b30      	subs	r3, #48	; 0x30
 800f558:	b29b      	uxth	r3, r3
 800f55a:	461a      	mov	r2, r3
 800f55c:	0092      	lsls	r2, r2, #2
 800f55e:	4413      	add	r3, r2
 800f560:	461a      	mov	r2, r3
 800f562:	0091      	lsls	r1, r2, #2
 800f564:	461a      	mov	r2, r3
 800f566:	460b      	mov	r3, r1
 800f568:	4413      	add	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	8a3b      	ldrh	r3, [r7, #16]
 800f570:	3304      	adds	r3, #4
 800f572:	4993      	ldr	r1, [pc, #588]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f574:	5ccb      	ldrb	r3, [r1, r3]
 800f576:	3b30      	subs	r3, #48	; 0x30
 800f578:	b29b      	uxth	r3, r3
 800f57a:	4619      	mov	r1, r3
 800f57c:	0089      	lsls	r1, r1, #2
 800f57e:	440b      	add	r3, r1
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	b29b      	uxth	r3, r3
 800f584:	4413      	add	r3, r2
 800f586:	b29a      	uxth	r2, r3
 800f588:	8a3b      	ldrh	r3, [r7, #16]
 800f58a:	3305      	adds	r3, #5
 800f58c:	498c      	ldr	r1, [pc, #560]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f58e:	5ccb      	ldrb	r3, [r1, r3]
 800f590:	b29b      	uxth	r3, r3
 800f592:	4413      	add	r3, r2
 800f594:	b29b      	uxth	r3, r3
 800f596:	3b30      	subs	r3, #48	; 0x30
 800f598:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f59a:	4b8a      	ldr	r3, [pc, #552]	; (800f7c4 <ce303_voltage+0xcf4>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f04f 31ff 	mov.w	r1, #4294967295
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7f7 fbc8 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 800f5a8:	89fb      	ldrh	r3, [r7, #14]
 800f5aa:	0a1b      	lsrs	r3, r3, #8
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	f242 004c 	movw	r0, #8268	; 0x204c
 800f5b6:	f006 f953 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 800f5ba:	89fb      	ldrh	r3, [r7, #14]
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	4619      	mov	r1, r3
 800f5c0:	f242 004d 	movw	r0, #8269	; 0x204d
 800f5c4:	f006 f94c 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 800f5c8:	8afb      	ldrh	r3, [r7, #22]
 800f5ca:	0a1b      	lsrs	r3, r3, #8
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	b2db      	uxtb	r3, r3
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	f242 0052 	movw	r0, #8274	; 0x2052
 800f5d6:	f006 f943 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 800f5da:	8afb      	ldrh	r3, [r7, #22]
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	4619      	mov	r1, r3
 800f5e0:	f242 0053 	movw	r0, #8275	; 0x2053
 800f5e4:	f006 f93c 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f5e8:	4b76      	ldr	r3, [pc, #472]	; (800f7c4 <ce303_voltage+0xcf4>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7f7 fbf1 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 800f5f2:	4a75      	ldr	r2, [pc, #468]	; (800f7c8 <ce303_voltage+0xcf8>)
 800f5f4:	89fb      	ldrh	r3, [r7, #14]
 800f5f6:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg =  temp_mil;
 800f5fa:	4a73      	ldr	r2, [pc, #460]	; (800f7c8 <ce303_voltage+0xcf8>)
 800f5fc:	8afb      	ldrh	r3, [r7, #22]
 800f5fe:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 800f602:	2301      	movs	r3, #1
 800f604:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800f606:	f000 bc81 	b.w	800ff0c <ce303_voltage+0x143c>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 800f60a:	8a3b      	ldrh	r3, [r7, #16]
 800f60c:	3303      	adds	r3, #3
 800f60e:	4a6c      	ldr	r2, [pc, #432]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f610:	5cd3      	ldrb	r3, [r2, r3]
 800f612:	2b2e      	cmp	r3, #46	; 0x2e
 800f614:	f040 80da 	bne.w	800f7cc <ce303_voltage+0xcfc>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 800f618:	8a3b      	ldrh	r3, [r7, #16]
 800f61a:	3301      	adds	r3, #1
 800f61c:	4a68      	ldr	r2, [pc, #416]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f61e:	5cd3      	ldrb	r3, [r2, r3]
 800f620:	3b30      	subs	r3, #48	; 0x30
 800f622:	b29b      	uxth	r3, r3
 800f624:	461a      	mov	r2, r3
 800f626:	0092      	lsls	r2, r2, #2
 800f628:	4413      	add	r3, r2
 800f62a:	005b      	lsls	r3, r3, #1
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	8a3b      	ldrh	r3, [r7, #16]
 800f630:	3302      	adds	r3, #2
 800f632:	4963      	ldr	r1, [pc, #396]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f634:	5ccb      	ldrb	r3, [r1, r3]
 800f636:	b29b      	uxth	r3, r3
 800f638:	4413      	add	r3, r2
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	3b30      	subs	r3, #48	; 0x30
 800f63e:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 800f640:	8a3b      	ldrh	r3, [r7, #16]
 800f642:	3305      	adds	r3, #5
 800f644:	4a5e      	ldr	r2, [pc, #376]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f646:	5cd3      	ldrb	r3, [r2, r3]
 800f648:	2b29      	cmp	r3, #41	; 0x29
 800f64a:	d110      	bne.n	800f66e <ce303_voltage+0xb9e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 800f64c:	8a3b      	ldrh	r3, [r7, #16]
 800f64e:	3304      	adds	r3, #4
 800f650:	4a5b      	ldr	r2, [pc, #364]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f652:	5cd3      	ldrb	r3, [r2, r3]
 800f654:	3b30      	subs	r3, #48	; 0x30
 800f656:	b29b      	uxth	r3, r3
 800f658:	461a      	mov	r2, r3
 800f65a:	0092      	lsls	r2, r2, #2
 800f65c:	4413      	add	r3, r2
 800f65e:	461a      	mov	r2, r3
 800f660:	0091      	lsls	r1, r2, #2
 800f662:	461a      	mov	r2, r3
 800f664:	460b      	mov	r3, r1
 800f666:	4413      	add	r3, r2
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	82fb      	strh	r3, [r7, #22]
 800f66c:	e070      	b.n	800f750 <ce303_voltage+0xc80>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 800f66e:	8a3b      	ldrh	r3, [r7, #16]
 800f670:	3306      	adds	r3, #6
 800f672:	4a53      	ldr	r2, [pc, #332]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f674:	5cd3      	ldrb	r3, [r2, r3]
 800f676:	2b29      	cmp	r3, #41	; 0x29
 800f678:	d117      	bne.n	800f6aa <ce303_voltage+0xbda>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 800f67a:	8a3b      	ldrh	r3, [r7, #16]
 800f67c:	3304      	adds	r3, #4
 800f67e:	4a50      	ldr	r2, [pc, #320]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f680:	5cd3      	ldrb	r3, [r2, r3]
 800f682:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f686:	4613      	mov	r3, r2
 800f688:	009b      	lsls	r3, r3, #2
 800f68a:	4413      	add	r3, r2
 800f68c:	005b      	lsls	r3, r3, #1
 800f68e:	4619      	mov	r1, r3
 800f690:	8a3b      	ldrh	r3, [r7, #16]
 800f692:	3305      	adds	r3, #5
 800f694:	4a4a      	ldr	r2, [pc, #296]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f696:	5cd3      	ldrb	r3, [r2, r3]
 800f698:	3b30      	subs	r3, #48	; 0x30
 800f69a:	440b      	add	r3, r1
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	461a      	mov	r2, r3
 800f6a0:	0092      	lsls	r2, r2, #2
 800f6a2:	4413      	add	r3, r2
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	82fb      	strh	r3, [r7, #22]
 800f6a8:	e052      	b.n	800f750 <ce303_voltage+0xc80>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 800f6aa:	8a3b      	ldrh	r3, [r7, #16]
 800f6ac:	3307      	adds	r3, #7
 800f6ae:	4a44      	ldr	r2, [pc, #272]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f6b0:	5cd3      	ldrb	r3, [r2, r3]
 800f6b2:	2b29      	cmp	r3, #41	; 0x29
 800f6b4:	d126      	bne.n	800f704 <ce303_voltage+0xc34>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 800f6b6:	8a3b      	ldrh	r3, [r7, #16]
 800f6b8:	3304      	adds	r3, #4
 800f6ba:	4a41      	ldr	r2, [pc, #260]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f6bc:	5cd3      	ldrb	r3, [r2, r3]
 800f6be:	3b30      	subs	r3, #48	; 0x30
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	0092      	lsls	r2, r2, #2
 800f6c6:	4413      	add	r3, r2
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	0091      	lsls	r1, r2, #2
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	4413      	add	r3, r2
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	b29a      	uxth	r2, r3
 800f6d6:	8a3b      	ldrh	r3, [r7, #16]
 800f6d8:	3305      	adds	r3, #5
 800f6da:	4939      	ldr	r1, [pc, #228]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f6dc:	5ccb      	ldrb	r3, [r1, r3]
 800f6de:	3b30      	subs	r3, #48	; 0x30
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	0089      	lsls	r1, r1, #2
 800f6e6:	440b      	add	r3, r1
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	4413      	add	r3, r2
 800f6ee:	b29a      	uxth	r2, r3
 800f6f0:	8a3b      	ldrh	r3, [r7, #16]
 800f6f2:	3306      	adds	r3, #6
 800f6f4:	4932      	ldr	r1, [pc, #200]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f6f6:	5ccb      	ldrb	r3, [r1, r3]
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	4413      	add	r3, r2
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	3b30      	subs	r3, #48	; 0x30
 800f700:	82fb      	strh	r3, [r7, #22]
 800f702:	e025      	b.n	800f750 <ce303_voltage+0xc80>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 800f704:	8a3b      	ldrh	r3, [r7, #16]
 800f706:	3304      	adds	r3, #4
 800f708:	4a2d      	ldr	r2, [pc, #180]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f70a:	5cd3      	ldrb	r3, [r2, r3]
 800f70c:	3b30      	subs	r3, #48	; 0x30
 800f70e:	b29b      	uxth	r3, r3
 800f710:	461a      	mov	r2, r3
 800f712:	0092      	lsls	r2, r2, #2
 800f714:	4413      	add	r3, r2
 800f716:	461a      	mov	r2, r3
 800f718:	0091      	lsls	r1, r2, #2
 800f71a:	461a      	mov	r2, r3
 800f71c:	460b      	mov	r3, r1
 800f71e:	4413      	add	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	b29a      	uxth	r2, r3
 800f724:	8a3b      	ldrh	r3, [r7, #16]
 800f726:	3305      	adds	r3, #5
 800f728:	4925      	ldr	r1, [pc, #148]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f72a:	5ccb      	ldrb	r3, [r1, r3]
 800f72c:	3b30      	subs	r3, #48	; 0x30
 800f72e:	b29b      	uxth	r3, r3
 800f730:	4619      	mov	r1, r3
 800f732:	0089      	lsls	r1, r1, #2
 800f734:	440b      	add	r3, r1
 800f736:	005b      	lsls	r3, r3, #1
 800f738:	b29b      	uxth	r3, r3
 800f73a:	4413      	add	r3, r2
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	8a3b      	ldrh	r3, [r7, #16]
 800f740:	3306      	adds	r3, #6
 800f742:	491f      	ldr	r1, [pc, #124]	; (800f7c0 <ce303_voltage+0xcf0>)
 800f744:	5ccb      	ldrb	r3, [r1, r3]
 800f746:	b29b      	uxth	r3, r3
 800f748:	4413      	add	r3, r2
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	3b30      	subs	r3, #48	; 0x30
 800f74e:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f750:	4b1c      	ldr	r3, [pc, #112]	; (800f7c4 <ce303_voltage+0xcf4>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f04f 31ff 	mov.w	r1, #4294967295
 800f758:	4618      	mov	r0, r3
 800f75a:	f7f7 faed 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 800f75e:	89fb      	ldrh	r3, [r7, #14]
 800f760:	0a1b      	lsrs	r3, r3, #8
 800f762:	b29b      	uxth	r3, r3
 800f764:	b2db      	uxtb	r3, r3
 800f766:	4619      	mov	r1, r3
 800f768:	f242 004c 	movw	r0, #8268	; 0x204c
 800f76c:	f006 f878 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 800f770:	89fb      	ldrh	r3, [r7, #14]
 800f772:	b2db      	uxtb	r3, r3
 800f774:	4619      	mov	r1, r3
 800f776:	f242 004d 	movw	r0, #8269	; 0x204d
 800f77a:	f006 f871 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 800f77e:	8afb      	ldrh	r3, [r7, #22]
 800f780:	0a1b      	lsrs	r3, r3, #8
 800f782:	b29b      	uxth	r3, r3
 800f784:	b2db      	uxtb	r3, r3
 800f786:	4619      	mov	r1, r3
 800f788:	f242 0052 	movw	r0, #8274	; 0x2052
 800f78c:	f006 f868 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 800f790:	8afb      	ldrh	r3, [r7, #22]
 800f792:	b2db      	uxtb	r3, r3
 800f794:	4619      	mov	r1, r3
 800f796:	f242 0053 	movw	r0, #8275	; 0x2053
 800f79a:	f006 f861 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f79e:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <ce303_voltage+0xcf4>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7f7 fb16 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 800f7a8:	4a07      	ldr	r2, [pc, #28]	; (800f7c8 <ce303_voltage+0xcf8>)
 800f7aa:	89fb      	ldrh	r3, [r7, #14]
 800f7ac:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg = temp_mil;
 800f7b0:	4a05      	ldr	r2, [pc, #20]	; (800f7c8 <ce303_voltage+0xcf8>)
 800f7b2:	8afb      	ldrh	r3, [r7, #22]
 800f7b4:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800f7bc:	e3a6      	b.n	800ff0c <ce303_voltage+0x143c>
 800f7be:	bf00      	nop
 800f7c0:	200098e4 	.word	0x200098e4
 800f7c4:	20009a6c 	.word	0x20009a6c
 800f7c8:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 800f7cc:	8a3b      	ldrh	r3, [r7, #16]
 800f7ce:	3304      	adds	r3, #4
 800f7d0:	4a9f      	ldr	r2, [pc, #636]	; (800fa50 <ce303_voltage+0xf80>)
 800f7d2:	5cd3      	ldrb	r3, [r2, r3]
 800f7d4:	2b2e      	cmp	r3, #46	; 0x2e
 800f7d6:	f040 8399 	bne.w	800ff0c <ce303_voltage+0x143c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 800f7da:	8a3b      	ldrh	r3, [r7, #16]
 800f7dc:	3301      	adds	r3, #1
 800f7de:	4a9c      	ldr	r2, [pc, #624]	; (800fa50 <ce303_voltage+0xf80>)
 800f7e0:	5cd3      	ldrb	r3, [r2, r3]
 800f7e2:	3b30      	subs	r3, #48	; 0x30
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	0092      	lsls	r2, r2, #2
 800f7ea:	4413      	add	r3, r2
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	0091      	lsls	r1, r2, #2
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	4413      	add	r3, r2
 800f7f6:	009b      	lsls	r3, r3, #2
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	8a3b      	ldrh	r3, [r7, #16]
 800f7fc:	3302      	adds	r3, #2
 800f7fe:	4994      	ldr	r1, [pc, #592]	; (800fa50 <ce303_voltage+0xf80>)
 800f800:	5ccb      	ldrb	r3, [r1, r3]
 800f802:	3b30      	subs	r3, #48	; 0x30
 800f804:	b29b      	uxth	r3, r3
 800f806:	4619      	mov	r1, r3
 800f808:	0089      	lsls	r1, r1, #2
 800f80a:	440b      	add	r3, r1
 800f80c:	005b      	lsls	r3, r3, #1
 800f80e:	b29b      	uxth	r3, r3
 800f810:	4413      	add	r3, r2
 800f812:	b29a      	uxth	r2, r3
 800f814:	8a3b      	ldrh	r3, [r7, #16]
 800f816:	3303      	adds	r3, #3
 800f818:	498d      	ldr	r1, [pc, #564]	; (800fa50 <ce303_voltage+0xf80>)
 800f81a:	5ccb      	ldrb	r3, [r1, r3]
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	4413      	add	r3, r2
 800f820:	b29b      	uxth	r3, r3
 800f822:	3b30      	subs	r3, #48	; 0x30
 800f824:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 800f826:	8a3b      	ldrh	r3, [r7, #16]
 800f828:	3306      	adds	r3, #6
 800f82a:	4a89      	ldr	r2, [pc, #548]	; (800fa50 <ce303_voltage+0xf80>)
 800f82c:	5cd3      	ldrb	r3, [r2, r3]
 800f82e:	2b29      	cmp	r3, #41	; 0x29
 800f830:	d110      	bne.n	800f854 <ce303_voltage+0xd84>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 800f832:	8a3b      	ldrh	r3, [r7, #16]
 800f834:	3305      	adds	r3, #5
 800f836:	4a86      	ldr	r2, [pc, #536]	; (800fa50 <ce303_voltage+0xf80>)
 800f838:	5cd3      	ldrb	r3, [r2, r3]
 800f83a:	3b30      	subs	r3, #48	; 0x30
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	461a      	mov	r2, r3
 800f840:	0092      	lsls	r2, r2, #2
 800f842:	4413      	add	r3, r2
 800f844:	461a      	mov	r2, r3
 800f846:	0091      	lsls	r1, r2, #2
 800f848:	461a      	mov	r2, r3
 800f84a:	460b      	mov	r3, r1
 800f84c:	4413      	add	r3, r2
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	82fb      	strh	r3, [r7, #22]
 800f852:	e070      	b.n	800f936 <ce303_voltage+0xe66>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 800f854:	8a3b      	ldrh	r3, [r7, #16]
 800f856:	3307      	adds	r3, #7
 800f858:	4a7d      	ldr	r2, [pc, #500]	; (800fa50 <ce303_voltage+0xf80>)
 800f85a:	5cd3      	ldrb	r3, [r2, r3]
 800f85c:	2b29      	cmp	r3, #41	; 0x29
 800f85e:	d117      	bne.n	800f890 <ce303_voltage+0xdc0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 800f860:	8a3b      	ldrh	r3, [r7, #16]
 800f862:	3305      	adds	r3, #5
 800f864:	4a7a      	ldr	r2, [pc, #488]	; (800fa50 <ce303_voltage+0xf80>)
 800f866:	5cd3      	ldrb	r3, [r2, r3]
 800f868:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f86c:	4613      	mov	r3, r2
 800f86e:	009b      	lsls	r3, r3, #2
 800f870:	4413      	add	r3, r2
 800f872:	005b      	lsls	r3, r3, #1
 800f874:	4619      	mov	r1, r3
 800f876:	8a3b      	ldrh	r3, [r7, #16]
 800f878:	3306      	adds	r3, #6
 800f87a:	4a75      	ldr	r2, [pc, #468]	; (800fa50 <ce303_voltage+0xf80>)
 800f87c:	5cd3      	ldrb	r3, [r2, r3]
 800f87e:	3b30      	subs	r3, #48	; 0x30
 800f880:	440b      	add	r3, r1
 800f882:	b29b      	uxth	r3, r3
 800f884:	461a      	mov	r2, r3
 800f886:	0092      	lsls	r2, r2, #2
 800f888:	4413      	add	r3, r2
 800f88a:	005b      	lsls	r3, r3, #1
 800f88c:	82fb      	strh	r3, [r7, #22]
 800f88e:	e052      	b.n	800f936 <ce303_voltage+0xe66>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 800f890:	8a3b      	ldrh	r3, [r7, #16]
 800f892:	3308      	adds	r3, #8
 800f894:	4a6e      	ldr	r2, [pc, #440]	; (800fa50 <ce303_voltage+0xf80>)
 800f896:	5cd3      	ldrb	r3, [r2, r3]
 800f898:	2b29      	cmp	r3, #41	; 0x29
 800f89a:	d126      	bne.n	800f8ea <ce303_voltage+0xe1a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 800f89c:	8a3b      	ldrh	r3, [r7, #16]
 800f89e:	3305      	adds	r3, #5
 800f8a0:	4a6b      	ldr	r2, [pc, #428]	; (800fa50 <ce303_voltage+0xf80>)
 800f8a2:	5cd3      	ldrb	r3, [r2, r3]
 800f8a4:	3b30      	subs	r3, #48	; 0x30
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	0092      	lsls	r2, r2, #2
 800f8ac:	4413      	add	r3, r2
 800f8ae:	461a      	mov	r2, r3
 800f8b0:	0091      	lsls	r1, r2, #2
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	4413      	add	r3, r2
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	8a3b      	ldrh	r3, [r7, #16]
 800f8be:	3306      	adds	r3, #6
 800f8c0:	4963      	ldr	r1, [pc, #396]	; (800fa50 <ce303_voltage+0xf80>)
 800f8c2:	5ccb      	ldrb	r3, [r1, r3]
 800f8c4:	3b30      	subs	r3, #48	; 0x30
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	0089      	lsls	r1, r1, #2
 800f8cc:	440b      	add	r3, r1
 800f8ce:	005b      	lsls	r3, r3, #1
 800f8d0:	b29b      	uxth	r3, r3
 800f8d2:	4413      	add	r3, r2
 800f8d4:	b29a      	uxth	r2, r3
 800f8d6:	8a3b      	ldrh	r3, [r7, #16]
 800f8d8:	3307      	adds	r3, #7
 800f8da:	495d      	ldr	r1, [pc, #372]	; (800fa50 <ce303_voltage+0xf80>)
 800f8dc:	5ccb      	ldrb	r3, [r1, r3]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	4413      	add	r3, r2
 800f8e2:	b29b      	uxth	r3, r3
 800f8e4:	3b30      	subs	r3, #48	; 0x30
 800f8e6:	82fb      	strh	r3, [r7, #22]
 800f8e8:	e025      	b.n	800f936 <ce303_voltage+0xe66>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 800f8ea:	8a3b      	ldrh	r3, [r7, #16]
 800f8ec:	3305      	adds	r3, #5
 800f8ee:	4a58      	ldr	r2, [pc, #352]	; (800fa50 <ce303_voltage+0xf80>)
 800f8f0:	5cd3      	ldrb	r3, [r2, r3]
 800f8f2:	3b30      	subs	r3, #48	; 0x30
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	0092      	lsls	r2, r2, #2
 800f8fa:	4413      	add	r3, r2
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	0091      	lsls	r1, r2, #2
 800f900:	461a      	mov	r2, r3
 800f902:	460b      	mov	r3, r1
 800f904:	4413      	add	r3, r2
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	b29a      	uxth	r2, r3
 800f90a:	8a3b      	ldrh	r3, [r7, #16]
 800f90c:	3306      	adds	r3, #6
 800f90e:	4950      	ldr	r1, [pc, #320]	; (800fa50 <ce303_voltage+0xf80>)
 800f910:	5ccb      	ldrb	r3, [r1, r3]
 800f912:	3b30      	subs	r3, #48	; 0x30
 800f914:	b29b      	uxth	r3, r3
 800f916:	4619      	mov	r1, r3
 800f918:	0089      	lsls	r1, r1, #2
 800f91a:	440b      	add	r3, r1
 800f91c:	005b      	lsls	r3, r3, #1
 800f91e:	b29b      	uxth	r3, r3
 800f920:	4413      	add	r3, r2
 800f922:	b29a      	uxth	r2, r3
 800f924:	8a3b      	ldrh	r3, [r7, #16]
 800f926:	3307      	adds	r3, #7
 800f928:	4949      	ldr	r1, [pc, #292]	; (800fa50 <ce303_voltage+0xf80>)
 800f92a:	5ccb      	ldrb	r3, [r1, r3]
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	4413      	add	r3, r2
 800f930:	b29b      	uxth	r3, r3
 800f932:	3b30      	subs	r3, #48	; 0x30
 800f934:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f936:	4b47      	ldr	r3, [pc, #284]	; (800fa54 <ce303_voltage+0xf84>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	f04f 31ff 	mov.w	r1, #4294967295
 800f93e:	4618      	mov	r0, r3
 800f940:	f7f7 f9fa 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 800f944:	89fb      	ldrh	r3, [r7, #14]
 800f946:	0a1b      	lsrs	r3, r3, #8
 800f948:	b29b      	uxth	r3, r3
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	4619      	mov	r1, r3
 800f94e:	f242 004c 	movw	r0, #8268	; 0x204c
 800f952:	f005 ff85 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 800f956:	89fb      	ldrh	r3, [r7, #14]
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	4619      	mov	r1, r3
 800f95c:	f242 004d 	movw	r0, #8269	; 0x204d
 800f960:	f005 ff7e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 800f964:	8afb      	ldrh	r3, [r7, #22]
 800f966:	0a1b      	lsrs	r3, r3, #8
 800f968:	b29b      	uxth	r3, r3
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	4619      	mov	r1, r3
 800f96e:	f242 0052 	movw	r0, #8274	; 0x2052
 800f972:	f005 ff75 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 800f976:	8afb      	ldrh	r3, [r7, #22]
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	4619      	mov	r1, r3
 800f97c:	f242 0053 	movw	r0, #8275	; 0x2053
 800f980:	f005 ff6e 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f984:	4b33      	ldr	r3, [pc, #204]	; (800fa54 <ce303_voltage+0xf84>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4618      	mov	r0, r3
 800f98a:	f7f7 fa23 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 800f98e:	4a32      	ldr	r2, [pc, #200]	; (800fa58 <ce303_voltage+0xf88>)
 800f990:	89fb      	ldrh	r3, [r7, #14]
 800f992:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg = temp_mil;
 800f996:	4a30      	ldr	r2, [pc, #192]	; (800fa58 <ce303_voltage+0xf88>)
 800f998:	8afb      	ldrh	r3, [r7, #22]
 800f99a:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800f9a2:	e2b3      	b.n	800ff0c <ce303_voltage+0x143c>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==1) && (voltage_b_state==1) && (voltage_c_state==0) )
 800f9a4:	8a3b      	ldrh	r3, [r7, #16]
 800f9a6:	4a2a      	ldr	r2, [pc, #168]	; (800fa50 <ce303_voltage+0xf80>)
 800f9a8:	5cd3      	ldrb	r3, [r2, r3]
 800f9aa:	2b28      	cmp	r3, #40	; 0x28
 800f9ac:	f040 82af 	bne.w	800ff0e <ce303_voltage+0x143e>
 800f9b0:	7d7b      	ldrb	r3, [r7, #21]
 800f9b2:	2b01      	cmp	r3, #1
 800f9b4:	f040 82ab 	bne.w	800ff0e <ce303_voltage+0x143e>
 800f9b8:	7d3b      	ldrb	r3, [r7, #20]
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	f040 82a7 	bne.w	800ff0e <ce303_voltage+0x143e>
 800f9c0:	7cfb      	ldrb	r3, [r7, #19]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f040 82a3 	bne.w	800ff0e <ce303_voltage+0x143e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800f9c8:	8a3b      	ldrh	r3, [r7, #16]
 800f9ca:	3302      	adds	r3, #2
 800f9cc:	4a20      	ldr	r2, [pc, #128]	; (800fa50 <ce303_voltage+0xf80>)
 800f9ce:	5cd3      	ldrb	r3, [r2, r3]
 800f9d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f9d2:	f040 80cd 	bne.w	800fb70 <ce303_voltage+0x10a0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 800f9d6:	8a3b      	ldrh	r3, [r7, #16]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	4a1d      	ldr	r2, [pc, #116]	; (800fa50 <ce303_voltage+0xf80>)
 800f9dc:	5cd3      	ldrb	r3, [r2, r3]
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	3b30      	subs	r3, #48	; 0x30
 800f9e2:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 800f9e4:	8a3b      	ldrh	r3, [r7, #16]
 800f9e6:	3304      	adds	r3, #4
 800f9e8:	4a19      	ldr	r2, [pc, #100]	; (800fa50 <ce303_voltage+0xf80>)
 800f9ea:	5cd3      	ldrb	r3, [r2, r3]
 800f9ec:	2b29      	cmp	r3, #41	; 0x29
 800f9ee:	d110      	bne.n	800fa12 <ce303_voltage+0xf42>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 800f9f0:	8a3b      	ldrh	r3, [r7, #16]
 800f9f2:	3303      	adds	r3, #3
 800f9f4:	4a16      	ldr	r2, [pc, #88]	; (800fa50 <ce303_voltage+0xf80>)
 800f9f6:	5cd3      	ldrb	r3, [r2, r3]
 800f9f8:	3b30      	subs	r3, #48	; 0x30
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	0092      	lsls	r2, r2, #2
 800fa00:	4413      	add	r3, r2
 800fa02:	461a      	mov	r2, r3
 800fa04:	0091      	lsls	r1, r2, #2
 800fa06:	461a      	mov	r2, r3
 800fa08:	460b      	mov	r3, r1
 800fa0a:	4413      	add	r3, r2
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	82fb      	strh	r3, [r7, #22]
 800fa10:	e077      	b.n	800fb02 <ce303_voltage+0x1032>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 800fa12:	8a3b      	ldrh	r3, [r7, #16]
 800fa14:	3305      	adds	r3, #5
 800fa16:	4a0e      	ldr	r2, [pc, #56]	; (800fa50 <ce303_voltage+0xf80>)
 800fa18:	5cd3      	ldrb	r3, [r2, r3]
 800fa1a:	2b29      	cmp	r3, #41	; 0x29
 800fa1c:	d11e      	bne.n	800fa5c <ce303_voltage+0xf8c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 800fa1e:	8a3b      	ldrh	r3, [r7, #16]
 800fa20:	3303      	adds	r3, #3
 800fa22:	4a0b      	ldr	r2, [pc, #44]	; (800fa50 <ce303_voltage+0xf80>)
 800fa24:	5cd3      	ldrb	r3, [r2, r3]
 800fa26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fa2a:	4613      	mov	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4413      	add	r3, r2
 800fa30:	005b      	lsls	r3, r3, #1
 800fa32:	4619      	mov	r1, r3
 800fa34:	8a3b      	ldrh	r3, [r7, #16]
 800fa36:	3304      	adds	r3, #4
 800fa38:	4a05      	ldr	r2, [pc, #20]	; (800fa50 <ce303_voltage+0xf80>)
 800fa3a:	5cd3      	ldrb	r3, [r2, r3]
 800fa3c:	3b30      	subs	r3, #48	; 0x30
 800fa3e:	440b      	add	r3, r1
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	461a      	mov	r2, r3
 800fa44:	0092      	lsls	r2, r2, #2
 800fa46:	4413      	add	r3, r2
 800fa48:	005b      	lsls	r3, r3, #1
 800fa4a:	82fb      	strh	r3, [r7, #22]
 800fa4c:	e059      	b.n	800fb02 <ce303_voltage+0x1032>
 800fa4e:	bf00      	nop
 800fa50:	200098e4 	.word	0x200098e4
 800fa54:	20009a6c 	.word	0x20009a6c
 800fa58:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 800fa5c:	8a3b      	ldrh	r3, [r7, #16]
 800fa5e:	3306      	adds	r3, #6
 800fa60:	4ab0      	ldr	r2, [pc, #704]	; (800fd24 <ce303_voltage+0x1254>)
 800fa62:	5cd3      	ldrb	r3, [r2, r3]
 800fa64:	2b29      	cmp	r3, #41	; 0x29
 800fa66:	d126      	bne.n	800fab6 <ce303_voltage+0xfe6>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 800fa68:	8a3b      	ldrh	r3, [r7, #16]
 800fa6a:	3303      	adds	r3, #3
 800fa6c:	4aad      	ldr	r2, [pc, #692]	; (800fd24 <ce303_voltage+0x1254>)
 800fa6e:	5cd3      	ldrb	r3, [r2, r3]
 800fa70:	3b30      	subs	r3, #48	; 0x30
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	461a      	mov	r2, r3
 800fa76:	0092      	lsls	r2, r2, #2
 800fa78:	4413      	add	r3, r2
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	0091      	lsls	r1, r2, #2
 800fa7e:	461a      	mov	r2, r3
 800fa80:	460b      	mov	r3, r1
 800fa82:	4413      	add	r3, r2
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	8a3b      	ldrh	r3, [r7, #16]
 800fa8a:	3304      	adds	r3, #4
 800fa8c:	49a5      	ldr	r1, [pc, #660]	; (800fd24 <ce303_voltage+0x1254>)
 800fa8e:	5ccb      	ldrb	r3, [r1, r3]
 800fa90:	3b30      	subs	r3, #48	; 0x30
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	4619      	mov	r1, r3
 800fa96:	0089      	lsls	r1, r1, #2
 800fa98:	440b      	add	r3, r1
 800fa9a:	005b      	lsls	r3, r3, #1
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	4413      	add	r3, r2
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	8a3b      	ldrh	r3, [r7, #16]
 800faa4:	3305      	adds	r3, #5
 800faa6:	499f      	ldr	r1, [pc, #636]	; (800fd24 <ce303_voltage+0x1254>)
 800faa8:	5ccb      	ldrb	r3, [r1, r3]
 800faaa:	b29b      	uxth	r3, r3
 800faac:	4413      	add	r3, r2
 800faae:	b29b      	uxth	r3, r3
 800fab0:	3b30      	subs	r3, #48	; 0x30
 800fab2:	82fb      	strh	r3, [r7, #22]
 800fab4:	e025      	b.n	800fb02 <ce303_voltage+0x1032>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 800fab6:	8a3b      	ldrh	r3, [r7, #16]
 800fab8:	3303      	adds	r3, #3
 800faba:	4a9a      	ldr	r2, [pc, #616]	; (800fd24 <ce303_voltage+0x1254>)
 800fabc:	5cd3      	ldrb	r3, [r2, r3]
 800fabe:	3b30      	subs	r3, #48	; 0x30
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	461a      	mov	r2, r3
 800fac4:	0092      	lsls	r2, r2, #2
 800fac6:	4413      	add	r3, r2
 800fac8:	461a      	mov	r2, r3
 800faca:	0091      	lsls	r1, r2, #2
 800facc:	461a      	mov	r2, r3
 800face:	460b      	mov	r3, r1
 800fad0:	4413      	add	r3, r2
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	8a3b      	ldrh	r3, [r7, #16]
 800fad8:	3304      	adds	r3, #4
 800fada:	4992      	ldr	r1, [pc, #584]	; (800fd24 <ce303_voltage+0x1254>)
 800fadc:	5ccb      	ldrb	r3, [r1, r3]
 800fade:	3b30      	subs	r3, #48	; 0x30
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	4619      	mov	r1, r3
 800fae4:	0089      	lsls	r1, r1, #2
 800fae6:	440b      	add	r3, r1
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	b29b      	uxth	r3, r3
 800faec:	4413      	add	r3, r2
 800faee:	b29a      	uxth	r2, r3
 800faf0:	8a3b      	ldrh	r3, [r7, #16]
 800faf2:	3305      	adds	r3, #5
 800faf4:	498b      	ldr	r1, [pc, #556]	; (800fd24 <ce303_voltage+0x1254>)
 800faf6:	5ccb      	ldrb	r3, [r1, r3]
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	4413      	add	r3, r2
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	3b30      	subs	r3, #48	; 0x30
 800fb00:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800fb02:	4b89      	ldr	r3, [pc, #548]	; (800fd28 <ce303_voltage+0x1258>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	f04f 31ff 	mov.w	r1, #4294967295
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7f7 f914 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 800fb10:	89fb      	ldrh	r3, [r7, #14]
 800fb12:	0a1b      	lsrs	r3, r3, #8
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	b2db      	uxtb	r3, r3
 800fb18:	4619      	mov	r1, r3
 800fb1a:	f242 004e 	movw	r0, #8270	; 0x204e
 800fb1e:	f005 fe9f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 800fb22:	89fb      	ldrh	r3, [r7, #14]
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	4619      	mov	r1, r3
 800fb28:	f242 004f 	movw	r0, #8271	; 0x204f
 800fb2c:	f005 fe98 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 800fb30:	8afb      	ldrh	r3, [r7, #22]
 800fb32:	0a1b      	lsrs	r3, r3, #8
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	4619      	mov	r1, r3
 800fb3a:	f242 0054 	movw	r0, #8276	; 0x2054
 800fb3e:	f005 fe8f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 800fb42:	8afb      	ldrh	r3, [r7, #22]
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	4619      	mov	r1, r3
 800fb48:	f242 0055 	movw	r0, #8277	; 0x2055
 800fb4c:	f005 fe88 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800fb50:	4b75      	ldr	r3, [pc, #468]	; (800fd28 <ce303_voltage+0x1258>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7f7 f93d 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 800fb5a:	4a74      	ldr	r2, [pc, #464]	; (800fd2c <ce303_voltage+0x125c>)
 800fb5c:	89fb      	ldrh	r3, [r7, #14]
 800fb5e:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 800fb62:	4a72      	ldr	r2, [pc, #456]	; (800fd2c <ce303_voltage+0x125c>)
 800fb64:	8afb      	ldrh	r3, [r7, #22]
 800fb66:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	74fb      	strb	r3, [r7, #19]
 800fb6e:	e1ce      	b.n	800ff0e <ce303_voltage+0x143e>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 800fb70:	8a3b      	ldrh	r3, [r7, #16]
 800fb72:	3303      	adds	r3, #3
 800fb74:	4a6b      	ldr	r2, [pc, #428]	; (800fd24 <ce303_voltage+0x1254>)
 800fb76:	5cd3      	ldrb	r3, [r2, r3]
 800fb78:	2b2e      	cmp	r3, #46	; 0x2e
 800fb7a:	f040 80d9 	bne.w	800fd30 <ce303_voltage+0x1260>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 800fb7e:	8a3b      	ldrh	r3, [r7, #16]
 800fb80:	3301      	adds	r3, #1
 800fb82:	4a68      	ldr	r2, [pc, #416]	; (800fd24 <ce303_voltage+0x1254>)
 800fb84:	5cd3      	ldrb	r3, [r2, r3]
 800fb86:	3b30      	subs	r3, #48	; 0x30
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	0092      	lsls	r2, r2, #2
 800fb8e:	4413      	add	r3, r2
 800fb90:	005b      	lsls	r3, r3, #1
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	8a3b      	ldrh	r3, [r7, #16]
 800fb96:	3302      	adds	r3, #2
 800fb98:	4962      	ldr	r1, [pc, #392]	; (800fd24 <ce303_voltage+0x1254>)
 800fb9a:	5ccb      	ldrb	r3, [r1, r3]
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	4413      	add	r3, r2
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	3b30      	subs	r3, #48	; 0x30
 800fba4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 800fba6:	8a3b      	ldrh	r3, [r7, #16]
 800fba8:	3305      	adds	r3, #5
 800fbaa:	4a5e      	ldr	r2, [pc, #376]	; (800fd24 <ce303_voltage+0x1254>)
 800fbac:	5cd3      	ldrb	r3, [r2, r3]
 800fbae:	2b29      	cmp	r3, #41	; 0x29
 800fbb0:	d110      	bne.n	800fbd4 <ce303_voltage+0x1104>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 800fbb2:	8a3b      	ldrh	r3, [r7, #16]
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	4a5b      	ldr	r2, [pc, #364]	; (800fd24 <ce303_voltage+0x1254>)
 800fbb8:	5cd3      	ldrb	r3, [r2, r3]
 800fbba:	3b30      	subs	r3, #48	; 0x30
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	0092      	lsls	r2, r2, #2
 800fbc2:	4413      	add	r3, r2
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	0091      	lsls	r1, r2, #2
 800fbc8:	461a      	mov	r2, r3
 800fbca:	460b      	mov	r3, r1
 800fbcc:	4413      	add	r3, r2
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	82fb      	strh	r3, [r7, #22]
 800fbd2:	e070      	b.n	800fcb6 <ce303_voltage+0x11e6>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 800fbd4:	8a3b      	ldrh	r3, [r7, #16]
 800fbd6:	3306      	adds	r3, #6
 800fbd8:	4a52      	ldr	r2, [pc, #328]	; (800fd24 <ce303_voltage+0x1254>)
 800fbda:	5cd3      	ldrb	r3, [r2, r3]
 800fbdc:	2b29      	cmp	r3, #41	; 0x29
 800fbde:	d117      	bne.n	800fc10 <ce303_voltage+0x1140>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 800fbe0:	8a3b      	ldrh	r3, [r7, #16]
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	4a4f      	ldr	r2, [pc, #316]	; (800fd24 <ce303_voltage+0x1254>)
 800fbe6:	5cd3      	ldrb	r3, [r2, r3]
 800fbe8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fbec:	4613      	mov	r3, r2
 800fbee:	009b      	lsls	r3, r3, #2
 800fbf0:	4413      	add	r3, r2
 800fbf2:	005b      	lsls	r3, r3, #1
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	8a3b      	ldrh	r3, [r7, #16]
 800fbf8:	3305      	adds	r3, #5
 800fbfa:	4a4a      	ldr	r2, [pc, #296]	; (800fd24 <ce303_voltage+0x1254>)
 800fbfc:	5cd3      	ldrb	r3, [r2, r3]
 800fbfe:	3b30      	subs	r3, #48	; 0x30
 800fc00:	440b      	add	r3, r1
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	461a      	mov	r2, r3
 800fc06:	0092      	lsls	r2, r2, #2
 800fc08:	4413      	add	r3, r2
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	82fb      	strh	r3, [r7, #22]
 800fc0e:	e052      	b.n	800fcb6 <ce303_voltage+0x11e6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 800fc10:	8a3b      	ldrh	r3, [r7, #16]
 800fc12:	3307      	adds	r3, #7
 800fc14:	4a43      	ldr	r2, [pc, #268]	; (800fd24 <ce303_voltage+0x1254>)
 800fc16:	5cd3      	ldrb	r3, [r2, r3]
 800fc18:	2b29      	cmp	r3, #41	; 0x29
 800fc1a:	d126      	bne.n	800fc6a <ce303_voltage+0x119a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 800fc1c:	8a3b      	ldrh	r3, [r7, #16]
 800fc1e:	3304      	adds	r3, #4
 800fc20:	4a40      	ldr	r2, [pc, #256]	; (800fd24 <ce303_voltage+0x1254>)
 800fc22:	5cd3      	ldrb	r3, [r2, r3]
 800fc24:	3b30      	subs	r3, #48	; 0x30
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	461a      	mov	r2, r3
 800fc2a:	0092      	lsls	r2, r2, #2
 800fc2c:	4413      	add	r3, r2
 800fc2e:	461a      	mov	r2, r3
 800fc30:	0091      	lsls	r1, r2, #2
 800fc32:	461a      	mov	r2, r3
 800fc34:	460b      	mov	r3, r1
 800fc36:	4413      	add	r3, r2
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	8a3b      	ldrh	r3, [r7, #16]
 800fc3e:	3305      	adds	r3, #5
 800fc40:	4938      	ldr	r1, [pc, #224]	; (800fd24 <ce303_voltage+0x1254>)
 800fc42:	5ccb      	ldrb	r3, [r1, r3]
 800fc44:	3b30      	subs	r3, #48	; 0x30
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	4619      	mov	r1, r3
 800fc4a:	0089      	lsls	r1, r1, #2
 800fc4c:	440b      	add	r3, r1
 800fc4e:	005b      	lsls	r3, r3, #1
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	4413      	add	r3, r2
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	8a3b      	ldrh	r3, [r7, #16]
 800fc58:	3306      	adds	r3, #6
 800fc5a:	4932      	ldr	r1, [pc, #200]	; (800fd24 <ce303_voltage+0x1254>)
 800fc5c:	5ccb      	ldrb	r3, [r1, r3]
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	4413      	add	r3, r2
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	3b30      	subs	r3, #48	; 0x30
 800fc66:	82fb      	strh	r3, [r7, #22]
 800fc68:	e025      	b.n	800fcb6 <ce303_voltage+0x11e6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 800fc6a:	8a3b      	ldrh	r3, [r7, #16]
 800fc6c:	3304      	adds	r3, #4
 800fc6e:	4a2d      	ldr	r2, [pc, #180]	; (800fd24 <ce303_voltage+0x1254>)
 800fc70:	5cd3      	ldrb	r3, [r2, r3]
 800fc72:	3b30      	subs	r3, #48	; 0x30
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	461a      	mov	r2, r3
 800fc78:	0092      	lsls	r2, r2, #2
 800fc7a:	4413      	add	r3, r2
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	0091      	lsls	r1, r2, #2
 800fc80:	461a      	mov	r2, r3
 800fc82:	460b      	mov	r3, r1
 800fc84:	4413      	add	r3, r2
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	8a3b      	ldrh	r3, [r7, #16]
 800fc8c:	3305      	adds	r3, #5
 800fc8e:	4925      	ldr	r1, [pc, #148]	; (800fd24 <ce303_voltage+0x1254>)
 800fc90:	5ccb      	ldrb	r3, [r1, r3]
 800fc92:	3b30      	subs	r3, #48	; 0x30
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	4619      	mov	r1, r3
 800fc98:	0089      	lsls	r1, r1, #2
 800fc9a:	440b      	add	r3, r1
 800fc9c:	005b      	lsls	r3, r3, #1
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	4413      	add	r3, r2
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	8a3b      	ldrh	r3, [r7, #16]
 800fca6:	3306      	adds	r3, #6
 800fca8:	491e      	ldr	r1, [pc, #120]	; (800fd24 <ce303_voltage+0x1254>)
 800fcaa:	5ccb      	ldrb	r3, [r1, r3]
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	4413      	add	r3, r2
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	3b30      	subs	r3, #48	; 0x30
 800fcb4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800fcb6:	4b1c      	ldr	r3, [pc, #112]	; (800fd28 <ce303_voltage+0x1258>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f04f 31ff 	mov.w	r1, #4294967295
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7f7 f83a 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 800fcc4:	89fb      	ldrh	r3, [r7, #14]
 800fcc6:	0a1b      	lsrs	r3, r3, #8
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	4619      	mov	r1, r3
 800fcce:	f242 004e 	movw	r0, #8270	; 0x204e
 800fcd2:	f005 fdc5 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 800fcd6:	89fb      	ldrh	r3, [r7, #14]
 800fcd8:	b2db      	uxtb	r3, r3
 800fcda:	4619      	mov	r1, r3
 800fcdc:	f242 004f 	movw	r0, #8271	; 0x204f
 800fce0:	f005 fdbe 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 800fce4:	8afb      	ldrh	r3, [r7, #22]
 800fce6:	0a1b      	lsrs	r3, r3, #8
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	4619      	mov	r1, r3
 800fcee:	f242 0054 	movw	r0, #8276	; 0x2054
 800fcf2:	f005 fdb5 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 800fcf6:	8afb      	ldrh	r3, [r7, #22]
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	f242 0055 	movw	r0, #8277	; 0x2055
 800fd00:	f005 fdae 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800fd04:	4b08      	ldr	r3, [pc, #32]	; (800fd28 <ce303_voltage+0x1258>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7f7 f863 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 800fd0e:	4a07      	ldr	r2, [pc, #28]	; (800fd2c <ce303_voltage+0x125c>)
 800fd10:	89fb      	ldrh	r3, [r7, #14]
 800fd12:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 800fd16:	4a05      	ldr	r2, [pc, #20]	; (800fd2c <ce303_voltage+0x125c>)
 800fd18:	8afb      	ldrh	r3, [r7, #22]
 800fd1a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 800fd1e:	2301      	movs	r3, #1
 800fd20:	74fb      	strb	r3, [r7, #19]
 800fd22:	e0f4      	b.n	800ff0e <ce303_voltage+0x143e>
 800fd24:	200098e4 	.word	0x200098e4
 800fd28:	20009a6c 	.word	0x20009a6c
 800fd2c:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 800fd30:	8a3b      	ldrh	r3, [r7, #16]
 800fd32:	3304      	adds	r3, #4
 800fd34:	4a85      	ldr	r2, [pc, #532]	; (800ff4c <ce303_voltage+0x147c>)
 800fd36:	5cd3      	ldrb	r3, [r2, r3]
 800fd38:	2b2e      	cmp	r3, #46	; 0x2e
 800fd3a:	f040 80e8 	bne.w	800ff0e <ce303_voltage+0x143e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 800fd3e:	8a3b      	ldrh	r3, [r7, #16]
 800fd40:	3301      	adds	r3, #1
 800fd42:	4a82      	ldr	r2, [pc, #520]	; (800ff4c <ce303_voltage+0x147c>)
 800fd44:	5cd3      	ldrb	r3, [r2, r3]
 800fd46:	3b30      	subs	r3, #48	; 0x30
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	0092      	lsls	r2, r2, #2
 800fd4e:	4413      	add	r3, r2
 800fd50:	461a      	mov	r2, r3
 800fd52:	0091      	lsls	r1, r2, #2
 800fd54:	461a      	mov	r2, r3
 800fd56:	460b      	mov	r3, r1
 800fd58:	4413      	add	r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	8a3b      	ldrh	r3, [r7, #16]
 800fd60:	3302      	adds	r3, #2
 800fd62:	497a      	ldr	r1, [pc, #488]	; (800ff4c <ce303_voltage+0x147c>)
 800fd64:	5ccb      	ldrb	r3, [r1, r3]
 800fd66:	3b30      	subs	r3, #48	; 0x30
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	0089      	lsls	r1, r1, #2
 800fd6e:	440b      	add	r3, r1
 800fd70:	005b      	lsls	r3, r3, #1
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	4413      	add	r3, r2
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	8a3b      	ldrh	r3, [r7, #16]
 800fd7a:	3303      	adds	r3, #3
 800fd7c:	4973      	ldr	r1, [pc, #460]	; (800ff4c <ce303_voltage+0x147c>)
 800fd7e:	5ccb      	ldrb	r3, [r1, r3]
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	4413      	add	r3, r2
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	3b30      	subs	r3, #48	; 0x30
 800fd88:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 800fd8a:	8a3b      	ldrh	r3, [r7, #16]
 800fd8c:	3306      	adds	r3, #6
 800fd8e:	4a6f      	ldr	r2, [pc, #444]	; (800ff4c <ce303_voltage+0x147c>)
 800fd90:	5cd3      	ldrb	r3, [r2, r3]
 800fd92:	2b29      	cmp	r3, #41	; 0x29
 800fd94:	d110      	bne.n	800fdb8 <ce303_voltage+0x12e8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 800fd96:	8a3b      	ldrh	r3, [r7, #16]
 800fd98:	3305      	adds	r3, #5
 800fd9a:	4a6c      	ldr	r2, [pc, #432]	; (800ff4c <ce303_voltage+0x147c>)
 800fd9c:	5cd3      	ldrb	r3, [r2, r3]
 800fd9e:	3b30      	subs	r3, #48	; 0x30
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	461a      	mov	r2, r3
 800fda4:	0092      	lsls	r2, r2, #2
 800fda6:	4413      	add	r3, r2
 800fda8:	461a      	mov	r2, r3
 800fdaa:	0091      	lsls	r1, r2, #2
 800fdac:	461a      	mov	r2, r3
 800fdae:	460b      	mov	r3, r1
 800fdb0:	4413      	add	r3, r2
 800fdb2:	009b      	lsls	r3, r3, #2
 800fdb4:	82fb      	strh	r3, [r7, #22]
 800fdb6:	e070      	b.n	800fe9a <ce303_voltage+0x13ca>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 800fdb8:	8a3b      	ldrh	r3, [r7, #16]
 800fdba:	3307      	adds	r3, #7
 800fdbc:	4a63      	ldr	r2, [pc, #396]	; (800ff4c <ce303_voltage+0x147c>)
 800fdbe:	5cd3      	ldrb	r3, [r2, r3]
 800fdc0:	2b29      	cmp	r3, #41	; 0x29
 800fdc2:	d117      	bne.n	800fdf4 <ce303_voltage+0x1324>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 800fdc4:	8a3b      	ldrh	r3, [r7, #16]
 800fdc6:	3305      	adds	r3, #5
 800fdc8:	4a60      	ldr	r2, [pc, #384]	; (800ff4c <ce303_voltage+0x147c>)
 800fdca:	5cd3      	ldrb	r3, [r2, r3]
 800fdcc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fdd0:	4613      	mov	r3, r2
 800fdd2:	009b      	lsls	r3, r3, #2
 800fdd4:	4413      	add	r3, r2
 800fdd6:	005b      	lsls	r3, r3, #1
 800fdd8:	4619      	mov	r1, r3
 800fdda:	8a3b      	ldrh	r3, [r7, #16]
 800fddc:	3306      	adds	r3, #6
 800fdde:	4a5b      	ldr	r2, [pc, #364]	; (800ff4c <ce303_voltage+0x147c>)
 800fde0:	5cd3      	ldrb	r3, [r2, r3]
 800fde2:	3b30      	subs	r3, #48	; 0x30
 800fde4:	440b      	add	r3, r1
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	461a      	mov	r2, r3
 800fdea:	0092      	lsls	r2, r2, #2
 800fdec:	4413      	add	r3, r2
 800fdee:	005b      	lsls	r3, r3, #1
 800fdf0:	82fb      	strh	r3, [r7, #22]
 800fdf2:	e052      	b.n	800fe9a <ce303_voltage+0x13ca>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 800fdf4:	8a3b      	ldrh	r3, [r7, #16]
 800fdf6:	3308      	adds	r3, #8
 800fdf8:	4a54      	ldr	r2, [pc, #336]	; (800ff4c <ce303_voltage+0x147c>)
 800fdfa:	5cd3      	ldrb	r3, [r2, r3]
 800fdfc:	2b29      	cmp	r3, #41	; 0x29
 800fdfe:	d126      	bne.n	800fe4e <ce303_voltage+0x137e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 800fe00:	8a3b      	ldrh	r3, [r7, #16]
 800fe02:	3305      	adds	r3, #5
 800fe04:	4a51      	ldr	r2, [pc, #324]	; (800ff4c <ce303_voltage+0x147c>)
 800fe06:	5cd3      	ldrb	r3, [r2, r3]
 800fe08:	3b30      	subs	r3, #48	; 0x30
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	0092      	lsls	r2, r2, #2
 800fe10:	4413      	add	r3, r2
 800fe12:	461a      	mov	r2, r3
 800fe14:	0091      	lsls	r1, r2, #2
 800fe16:	461a      	mov	r2, r3
 800fe18:	460b      	mov	r3, r1
 800fe1a:	4413      	add	r3, r2
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	8a3b      	ldrh	r3, [r7, #16]
 800fe22:	3306      	adds	r3, #6
 800fe24:	4949      	ldr	r1, [pc, #292]	; (800ff4c <ce303_voltage+0x147c>)
 800fe26:	5ccb      	ldrb	r3, [r1, r3]
 800fe28:	3b30      	subs	r3, #48	; 0x30
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	0089      	lsls	r1, r1, #2
 800fe30:	440b      	add	r3, r1
 800fe32:	005b      	lsls	r3, r3, #1
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	4413      	add	r3, r2
 800fe38:	b29a      	uxth	r2, r3
 800fe3a:	8a3b      	ldrh	r3, [r7, #16]
 800fe3c:	3307      	adds	r3, #7
 800fe3e:	4943      	ldr	r1, [pc, #268]	; (800ff4c <ce303_voltage+0x147c>)
 800fe40:	5ccb      	ldrb	r3, [r1, r3]
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	4413      	add	r3, r2
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	3b30      	subs	r3, #48	; 0x30
 800fe4a:	82fb      	strh	r3, [r7, #22]
 800fe4c:	e025      	b.n	800fe9a <ce303_voltage+0x13ca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 800fe4e:	8a3b      	ldrh	r3, [r7, #16]
 800fe50:	3305      	adds	r3, #5
 800fe52:	4a3e      	ldr	r2, [pc, #248]	; (800ff4c <ce303_voltage+0x147c>)
 800fe54:	5cd3      	ldrb	r3, [r2, r3]
 800fe56:	3b30      	subs	r3, #48	; 0x30
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	0092      	lsls	r2, r2, #2
 800fe5e:	4413      	add	r3, r2
 800fe60:	461a      	mov	r2, r3
 800fe62:	0091      	lsls	r1, r2, #2
 800fe64:	461a      	mov	r2, r3
 800fe66:	460b      	mov	r3, r1
 800fe68:	4413      	add	r3, r2
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	b29a      	uxth	r2, r3
 800fe6e:	8a3b      	ldrh	r3, [r7, #16]
 800fe70:	3306      	adds	r3, #6
 800fe72:	4936      	ldr	r1, [pc, #216]	; (800ff4c <ce303_voltage+0x147c>)
 800fe74:	5ccb      	ldrb	r3, [r1, r3]
 800fe76:	3b30      	subs	r3, #48	; 0x30
 800fe78:	b29b      	uxth	r3, r3
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	0089      	lsls	r1, r1, #2
 800fe7e:	440b      	add	r3, r1
 800fe80:	005b      	lsls	r3, r3, #1
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	4413      	add	r3, r2
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	8a3b      	ldrh	r3, [r7, #16]
 800fe8a:	3307      	adds	r3, #7
 800fe8c:	492f      	ldr	r1, [pc, #188]	; (800ff4c <ce303_voltage+0x147c>)
 800fe8e:	5ccb      	ldrb	r3, [r1, r3]
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	4413      	add	r3, r2
 800fe94:	b29b      	uxth	r3, r3
 800fe96:	3b30      	subs	r3, #48	; 0x30
 800fe98:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800fe9a:	4b2d      	ldr	r3, [pc, #180]	; (800ff50 <ce303_voltage+0x1480>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f04f 31ff 	mov.w	r1, #4294967295
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7f6 ff48 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 800fea8:	89fb      	ldrh	r3, [r7, #14]
 800feaa:	0a1b      	lsrs	r3, r3, #8
 800feac:	b29b      	uxth	r3, r3
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	4619      	mov	r1, r3
 800feb2:	f242 004e 	movw	r0, #8270	; 0x204e
 800feb6:	f005 fcd3 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 800feba:	89fb      	ldrh	r3, [r7, #14]
 800febc:	b2db      	uxtb	r3, r3
 800febe:	4619      	mov	r1, r3
 800fec0:	f242 004f 	movw	r0, #8271	; 0x204f
 800fec4:	f005 fccc 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 800fec8:	8afb      	ldrh	r3, [r7, #22]
 800feca:	0a1b      	lsrs	r3, r3, #8
 800fecc:	b29b      	uxth	r3, r3
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	4619      	mov	r1, r3
 800fed2:	f242 0054 	movw	r0, #8276	; 0x2054
 800fed6:	f005 fcc3 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 800feda:	8afb      	ldrh	r3, [r7, #22]
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	4619      	mov	r1, r3
 800fee0:	f242 0055 	movw	r0, #8277	; 0x2055
 800fee4:	f005 fcbc 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800fee8:	4b19      	ldr	r3, [pc, #100]	; (800ff50 <ce303_voltage+0x1480>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	4618      	mov	r0, r3
 800feee:	f7f6 ff71 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 800fef2:	4a18      	ldr	r2, [pc, #96]	; (800ff54 <ce303_voltage+0x1484>)
 800fef4:	89fb      	ldrh	r3, [r7, #14]
 800fef6:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 800fefa:	4a16      	ldr	r2, [pc, #88]	; (800ff54 <ce303_voltage+0x1484>)
 800fefc:	8afb      	ldrh	r3, [r7, #22]
 800fefe:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 800ff02:	2301      	movs	r3, #1
 800ff04:	74fb      	strb	r3, [r7, #19]
 800ff06:	e002      	b.n	800ff0e <ce303_voltage+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800ff08:	bf00      	nop
 800ff0a:	e000      	b.n	800ff0e <ce303_voltage+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 800ff0c:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 800ff0e:	8a3b      	ldrh	r3, [r7, #16]
 800ff10:	3301      	adds	r3, #1
 800ff12:	823b      	strh	r3, [r7, #16]
 800ff14:	8a3b      	ldrh	r3, [r7, #16]
 800ff16:	2bff      	cmp	r3, #255	; 0xff
 800ff18:	f67e afd1 	bls.w	800eebe <ce303_voltage+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 800ff1c:	4b0e      	ldr	r3, [pc, #56]	; (800ff58 <ce303_voltage+0x1488>)
 800ff1e:	2200      	movs	r2, #0
 800ff20:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 800ff22:	f7fe fdbb 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 800ff26:	2201      	movs	r2, #1
 800ff28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ff2c:	480b      	ldr	r0, [pc, #44]	; (800ff5c <ce303_voltage+0x148c>)
 800ff2e:	f7f3 f99d 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 800ff32:	2205      	movs	r2, #5
 800ff34:	490a      	ldr	r1, [pc, #40]	; (800ff60 <ce303_voltage+0x1490>)
 800ff36:	480b      	ldr	r0, [pc, #44]	; (800ff64 <ce303_voltage+0x1494>)
 800ff38:	f7f5 fc50 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 800ff3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ff40:	f7f1 fee0 	bl	8001d04 <HAL_Delay>

}
 800ff44:	bf00      	nop
 800ff46:	3718      	adds	r7, #24
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	200098e4 	.word	0x200098e4
 800ff50:	20009a6c 	.word	0x20009a6c
 800ff54:	2000a10c 	.word	0x2000a10c
 800ff58:	2000085d 	.word	0x2000085d
 800ff5c:	40021800 	.word	0x40021800
 800ff60:	20000030 	.word	0x20000030
 800ff64:	20009c70 	.word	0x20009c70

0800ff68 <ce303_current>:

void ce303_current (uint8_t meter_id) // функция чтения тока из счетчика СЕ303
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b086      	sub	sp, #24
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	4603      	mov	r3, r0
 800ff70:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t current_a_state; // переменные состояния прочтения значений тока ( если переменная равна 0, то значение тока не прочитано, если 1 - значение прочитанно )
	uint8_t current_b_state;
	uint8_t current_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 800ff72:	79fb      	ldrb	r3, [r7, #7]
 800ff74:	2b63      	cmp	r3, #99	; 0x63
 800ff76:	d962      	bls.n	801003e <ce303_current+0xd6>
	{
		start_buf[0] = 0x2F;
 800ff78:	4b9d      	ldr	r3, [pc, #628]	; (80101f0 <ce303_current+0x288>)
 800ff7a:	222f      	movs	r2, #47	; 0x2f
 800ff7c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 800ff7e:	4b9c      	ldr	r3, [pc, #624]	; (80101f0 <ce303_current+0x288>)
 800ff80:	223f      	movs	r2, #63	; 0x3f
 800ff82:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 800ff84:	79fb      	ldrb	r3, [r7, #7]
 800ff86:	4a9b      	ldr	r2, [pc, #620]	; (80101f4 <ce303_current+0x28c>)
 800ff88:	fba2 2303 	umull	r2, r3, r2, r3
 800ff8c:	095b      	lsrs	r3, r3, #5
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	3330      	adds	r3, #48	; 0x30
 800ff92:	b2da      	uxtb	r2, r3
 800ff94:	4b96      	ldr	r3, [pc, #600]	; (80101f0 <ce303_current+0x288>)
 800ff96:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 800ff98:	79fa      	ldrb	r2, [r7, #7]
 800ff9a:	79fb      	ldrb	r3, [r7, #7]
 800ff9c:	4995      	ldr	r1, [pc, #596]	; (80101f4 <ce303_current+0x28c>)
 800ff9e:	fba1 1303 	umull	r1, r3, r1, r3
 800ffa2:	095b      	lsrs	r3, r3, #5
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800ffac:	fb03 f301 	mul.w	r3, r3, r1
 800ffb0:	4413      	add	r3, r2
 800ffb2:	4a91      	ldr	r2, [pc, #580]	; (80101f8 <ce303_current+0x290>)
 800ffb4:	fb82 1203 	smull	r1, r2, r2, r3
 800ffb8:	1092      	asrs	r2, r2, #2
 800ffba:	17db      	asrs	r3, r3, #31
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	3330      	adds	r3, #48	; 0x30
 800ffc2:	b2da      	uxtb	r2, r3
 800ffc4:	4b8a      	ldr	r3, [pc, #552]	; (80101f0 <ce303_current+0x288>)
 800ffc6:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 800ffc8:	79fa      	ldrb	r2, [r7, #7]
 800ffca:	79fb      	ldrb	r3, [r7, #7]
 800ffcc:	4989      	ldr	r1, [pc, #548]	; (80101f4 <ce303_current+0x28c>)
 800ffce:	fba1 1303 	umull	r1, r3, r1, r3
 800ffd2:	095b      	lsrs	r3, r3, #5
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800ffdc:	fb03 f301 	mul.w	r3, r3, r1
 800ffe0:	441a      	add	r2, r3
 800ffe2:	4b85      	ldr	r3, [pc, #532]	; (80101f8 <ce303_current+0x290>)
 800ffe4:	fb83 1302 	smull	r1, r3, r3, r2
 800ffe8:	1099      	asrs	r1, r3, #2
 800ffea:	17d3      	asrs	r3, r2, #31
 800ffec:	1ac9      	subs	r1, r1, r3
 800ffee:	460b      	mov	r3, r1
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	440b      	add	r3, r1
 800fff4:	005b      	lsls	r3, r3, #1
 800fff6:	1ad1      	subs	r1, r2, r3
 800fff8:	b2cb      	uxtb	r3, r1
 800fffa:	3330      	adds	r3, #48	; 0x30
 800fffc:	b2da      	uxtb	r2, r3
 800fffe:	4b7c      	ldr	r3, [pc, #496]	; (80101f0 <ce303_current+0x288>)
 8010000:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8010002:	4b7b      	ldr	r3, [pc, #492]	; (80101f0 <ce303_current+0x288>)
 8010004:	2221      	movs	r2, #33	; 0x21
 8010006:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8010008:	4b79      	ldr	r3, [pc, #484]	; (80101f0 <ce303_current+0x288>)
 801000a:	220d      	movs	r2, #13
 801000c:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 801000e:	4b78      	ldr	r3, [pc, #480]	; (80101f0 <ce303_current+0x288>)
 8010010:	220a      	movs	r2, #10
 8010012:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8010014:	4b79      	ldr	r3, [pc, #484]	; (80101fc <ce303_current+0x294>)
 8010016:	2200      	movs	r2, #0
 8010018:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801001a:	f7fe fd3f 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801001e:	2201      	movs	r2, #1
 8010020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010024:	4876      	ldr	r0, [pc, #472]	; (8010200 <ce303_current+0x298>)
 8010026:	f7f3 f921 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 801002a:	2208      	movs	r2, #8
 801002c:	4970      	ldr	r1, [pc, #448]	; (80101f0 <ce303_current+0x288>)
 801002e:	4875      	ldr	r0, [pc, #468]	; (8010204 <ce303_current+0x29c>)
 8010030:	f7f5 fbd4 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8010034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010038:	f7f1 fe64 	bl	8001d04 <HAL_Delay>
 801003c:	e072      	b.n	8010124 <ce303_current+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 801003e:	79fb      	ldrb	r3, [r7, #7]
 8010040:	2b09      	cmp	r3, #9
 8010042:	d944      	bls.n	80100ce <ce303_current+0x166>
 8010044:	79fb      	ldrb	r3, [r7, #7]
 8010046:	2b63      	cmp	r3, #99	; 0x63
 8010048:	d841      	bhi.n	80100ce <ce303_current+0x166>
	{
		start_buf[0] = 0x2F;
 801004a:	4b69      	ldr	r3, [pc, #420]	; (80101f0 <ce303_current+0x288>)
 801004c:	222f      	movs	r2, #47	; 0x2f
 801004e:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8010050:	4b67      	ldr	r3, [pc, #412]	; (80101f0 <ce303_current+0x288>)
 8010052:	223f      	movs	r2, #63	; 0x3f
 8010054:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8010056:	79fb      	ldrb	r3, [r7, #7]
 8010058:	4a6b      	ldr	r2, [pc, #428]	; (8010208 <ce303_current+0x2a0>)
 801005a:	fba2 2303 	umull	r2, r3, r2, r3
 801005e:	08db      	lsrs	r3, r3, #3
 8010060:	b2db      	uxtb	r3, r3
 8010062:	3330      	adds	r3, #48	; 0x30
 8010064:	b2da      	uxtb	r2, r3
 8010066:	4b62      	ldr	r3, [pc, #392]	; (80101f0 <ce303_current+0x288>)
 8010068:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 801006a:	79fb      	ldrb	r3, [r7, #7]
 801006c:	4a66      	ldr	r2, [pc, #408]	; (8010208 <ce303_current+0x2a0>)
 801006e:	fba2 2303 	umull	r2, r3, r2, r3
 8010072:	08db      	lsrs	r3, r3, #3
 8010074:	b2db      	uxtb	r3, r3
 8010076:	461a      	mov	r2, r3
 8010078:	0152      	lsls	r2, r2, #5
 801007a:	1ad2      	subs	r2, r2, r3
 801007c:	0092      	lsls	r2, r2, #2
 801007e:	1ad3      	subs	r3, r2, r3
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	b2da      	uxtb	r2, r3
 8010084:	79fb      	ldrb	r3, [r7, #7]
 8010086:	4413      	add	r3, r2
 8010088:	b2db      	uxtb	r3, r3
 801008a:	3330      	adds	r3, #48	; 0x30
 801008c:	b2da      	uxtb	r2, r3
 801008e:	4b58      	ldr	r3, [pc, #352]	; (80101f0 <ce303_current+0x288>)
 8010090:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8010092:	4b57      	ldr	r3, [pc, #348]	; (80101f0 <ce303_current+0x288>)
 8010094:	2221      	movs	r2, #33	; 0x21
 8010096:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8010098:	4b55      	ldr	r3, [pc, #340]	; (80101f0 <ce303_current+0x288>)
 801009a:	220d      	movs	r2, #13
 801009c:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 801009e:	4b54      	ldr	r3, [pc, #336]	; (80101f0 <ce303_current+0x288>)
 80100a0:	220a      	movs	r2, #10
 80100a2:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 80100a4:	4b55      	ldr	r3, [pc, #340]	; (80101fc <ce303_current+0x294>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80100aa:	f7fe fcf7 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80100ae:	2201      	movs	r2, #1
 80100b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80100b4:	4852      	ldr	r0, [pc, #328]	; (8010200 <ce303_current+0x298>)
 80100b6:	f7f3 f8d9 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 80100ba:	2207      	movs	r2, #7
 80100bc:	494c      	ldr	r1, [pc, #304]	; (80101f0 <ce303_current+0x288>)
 80100be:	4851      	ldr	r0, [pc, #324]	; (8010204 <ce303_current+0x29c>)
 80100c0:	f7f5 fb8c 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80100c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80100c8:	f7f1 fe1c 	bl	8001d04 <HAL_Delay>
 80100cc:	e02a      	b.n	8010124 <ce303_current+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 80100ce:	79fb      	ldrb	r3, [r7, #7]
 80100d0:	2b09      	cmp	r3, #9
 80100d2:	d827      	bhi.n	8010124 <ce303_current+0x1bc>
	{
		start_buf[0] = 0x2F;
 80100d4:	4b46      	ldr	r3, [pc, #280]	; (80101f0 <ce303_current+0x288>)
 80100d6:	222f      	movs	r2, #47	; 0x2f
 80100d8:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80100da:	4b45      	ldr	r3, [pc, #276]	; (80101f0 <ce303_current+0x288>)
 80100dc:	223f      	movs	r2, #63	; 0x3f
 80100de:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 80100e0:	79fb      	ldrb	r3, [r7, #7]
 80100e2:	3330      	adds	r3, #48	; 0x30
 80100e4:	b2da      	uxtb	r2, r3
 80100e6:	4b42      	ldr	r3, [pc, #264]	; (80101f0 <ce303_current+0x288>)
 80100e8:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 80100ea:	4b41      	ldr	r3, [pc, #260]	; (80101f0 <ce303_current+0x288>)
 80100ec:	2221      	movs	r2, #33	; 0x21
 80100ee:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 80100f0:	4b3f      	ldr	r3, [pc, #252]	; (80101f0 <ce303_current+0x288>)
 80100f2:	220d      	movs	r2, #13
 80100f4:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 80100f6:	4b3e      	ldr	r3, [pc, #248]	; (80101f0 <ce303_current+0x288>)
 80100f8:	220a      	movs	r2, #10
 80100fa:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 80100fc:	4b3f      	ldr	r3, [pc, #252]	; (80101fc <ce303_current+0x294>)
 80100fe:	2200      	movs	r2, #0
 8010100:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010102:	f7fe fccb 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010106:	2201      	movs	r2, #1
 8010108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801010c:	483c      	ldr	r0, [pc, #240]	; (8010200 <ce303_current+0x298>)
 801010e:	f7f3 f8ad 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8010112:	2206      	movs	r2, #6
 8010114:	4936      	ldr	r1, [pc, #216]	; (80101f0 <ce303_current+0x288>)
 8010116:	483b      	ldr	r0, [pc, #236]	; (8010204 <ce303_current+0x29c>)
 8010118:	f7f5 fb60 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801011c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010120:	f7f1 fdf0 	bl	8001d04 <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 8010124:	79fb      	ldrb	r3, [r7, #7]
 8010126:	2b63      	cmp	r3, #99	; 0x63
 8010128:	d970      	bls.n	801020c <ce303_current+0x2a4>
	{
		start_buf[0] = 0x2F;
 801012a:	4b31      	ldr	r3, [pc, #196]	; (80101f0 <ce303_current+0x288>)
 801012c:	222f      	movs	r2, #47	; 0x2f
 801012e:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8010130:	4b2f      	ldr	r3, [pc, #188]	; (80101f0 <ce303_current+0x288>)
 8010132:	223f      	movs	r2, #63	; 0x3f
 8010134:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8010136:	79fb      	ldrb	r3, [r7, #7]
 8010138:	4a2e      	ldr	r2, [pc, #184]	; (80101f4 <ce303_current+0x28c>)
 801013a:	fba2 2303 	umull	r2, r3, r2, r3
 801013e:	095b      	lsrs	r3, r3, #5
 8010140:	b2db      	uxtb	r3, r3
 8010142:	3330      	adds	r3, #48	; 0x30
 8010144:	b2da      	uxtb	r2, r3
 8010146:	4b2a      	ldr	r3, [pc, #168]	; (80101f0 <ce303_current+0x288>)
 8010148:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 801014a:	79fa      	ldrb	r2, [r7, #7]
 801014c:	79fb      	ldrb	r3, [r7, #7]
 801014e:	4929      	ldr	r1, [pc, #164]	; (80101f4 <ce303_current+0x28c>)
 8010150:	fba1 1303 	umull	r1, r3, r1, r3
 8010154:	095b      	lsrs	r3, r3, #5
 8010156:	b2db      	uxtb	r3, r3
 8010158:	4619      	mov	r1, r3
 801015a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801015e:	fb03 f301 	mul.w	r3, r3, r1
 8010162:	4413      	add	r3, r2
 8010164:	4a24      	ldr	r2, [pc, #144]	; (80101f8 <ce303_current+0x290>)
 8010166:	fb82 1203 	smull	r1, r2, r2, r3
 801016a:	1092      	asrs	r2, r2, #2
 801016c:	17db      	asrs	r3, r3, #31
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	b2db      	uxtb	r3, r3
 8010172:	3330      	adds	r3, #48	; 0x30
 8010174:	b2da      	uxtb	r2, r3
 8010176:	4b1e      	ldr	r3, [pc, #120]	; (80101f0 <ce303_current+0x288>)
 8010178:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801017a:	79fa      	ldrb	r2, [r7, #7]
 801017c:	79fb      	ldrb	r3, [r7, #7]
 801017e:	491d      	ldr	r1, [pc, #116]	; (80101f4 <ce303_current+0x28c>)
 8010180:	fba1 1303 	umull	r1, r3, r1, r3
 8010184:	095b      	lsrs	r3, r3, #5
 8010186:	b2db      	uxtb	r3, r3
 8010188:	4619      	mov	r1, r3
 801018a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801018e:	fb03 f301 	mul.w	r3, r3, r1
 8010192:	441a      	add	r2, r3
 8010194:	4b18      	ldr	r3, [pc, #96]	; (80101f8 <ce303_current+0x290>)
 8010196:	fb83 1302 	smull	r1, r3, r3, r2
 801019a:	1099      	asrs	r1, r3, #2
 801019c:	17d3      	asrs	r3, r2, #31
 801019e:	1ac9      	subs	r1, r1, r3
 80101a0:	460b      	mov	r3, r1
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	440b      	add	r3, r1
 80101a6:	005b      	lsls	r3, r3, #1
 80101a8:	1ad1      	subs	r1, r2, r3
 80101aa:	b2cb      	uxtb	r3, r1
 80101ac:	3330      	adds	r3, #48	; 0x30
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	4b0f      	ldr	r3, [pc, #60]	; (80101f0 <ce303_current+0x288>)
 80101b2:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 80101b4:	4b0e      	ldr	r3, [pc, #56]	; (80101f0 <ce303_current+0x288>)
 80101b6:	2221      	movs	r2, #33	; 0x21
 80101b8:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 80101ba:	4b0d      	ldr	r3, [pc, #52]	; (80101f0 <ce303_current+0x288>)
 80101bc:	220d      	movs	r2, #13
 80101be:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 80101c0:	4b0b      	ldr	r3, [pc, #44]	; (80101f0 <ce303_current+0x288>)
 80101c2:	220a      	movs	r2, #10
 80101c4:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 80101c6:	4b0d      	ldr	r3, [pc, #52]	; (80101fc <ce303_current+0x294>)
 80101c8:	2200      	movs	r2, #0
 80101ca:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80101cc:	f7fe fc66 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80101d0:	2201      	movs	r2, #1
 80101d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80101d6:	480a      	ldr	r0, [pc, #40]	; (8010200 <ce303_current+0x298>)
 80101d8:	f7f3 f848 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 80101dc:	2208      	movs	r2, #8
 80101de:	4904      	ldr	r1, [pc, #16]	; (80101f0 <ce303_current+0x288>)
 80101e0:	4808      	ldr	r0, [pc, #32]	; (8010204 <ce303_current+0x29c>)
 80101e2:	f7f5 fafb 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80101e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80101ea:	f7f1 fd8b 	bl	8001d04 <HAL_Delay>
 80101ee:	e080      	b.n	80102f2 <ce303_current+0x38a>
 80101f0:	20000010 	.word	0x20000010
 80101f4:	51eb851f 	.word	0x51eb851f
 80101f8:	66666667 	.word	0x66666667
 80101fc:	2000085d 	.word	0x2000085d
 8010200:	40021800 	.word	0x40021800
 8010204:	20009c70 	.word	0x20009c70
 8010208:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 801020c:	79fb      	ldrb	r3, [r7, #7]
 801020e:	2b09      	cmp	r3, #9
 8010210:	d944      	bls.n	801029c <ce303_current+0x334>
 8010212:	79fb      	ldrb	r3, [r7, #7]
 8010214:	2b63      	cmp	r3, #99	; 0x63
 8010216:	d841      	bhi.n	801029c <ce303_current+0x334>
	{
		start_buf[0] = 0x2F;
 8010218:	4b90      	ldr	r3, [pc, #576]	; (801045c <ce303_current+0x4f4>)
 801021a:	222f      	movs	r2, #47	; 0x2f
 801021c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801021e:	4b8f      	ldr	r3, [pc, #572]	; (801045c <ce303_current+0x4f4>)
 8010220:	223f      	movs	r2, #63	; 0x3f
 8010222:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	4a8e      	ldr	r2, [pc, #568]	; (8010460 <ce303_current+0x4f8>)
 8010228:	fba2 2303 	umull	r2, r3, r2, r3
 801022c:	08db      	lsrs	r3, r3, #3
 801022e:	b2db      	uxtb	r3, r3
 8010230:	3330      	adds	r3, #48	; 0x30
 8010232:	b2da      	uxtb	r2, r3
 8010234:	4b89      	ldr	r3, [pc, #548]	; (801045c <ce303_current+0x4f4>)
 8010236:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8010238:	79fb      	ldrb	r3, [r7, #7]
 801023a:	4a89      	ldr	r2, [pc, #548]	; (8010460 <ce303_current+0x4f8>)
 801023c:	fba2 2303 	umull	r2, r3, r2, r3
 8010240:	08db      	lsrs	r3, r3, #3
 8010242:	b2db      	uxtb	r3, r3
 8010244:	461a      	mov	r2, r3
 8010246:	0152      	lsls	r2, r2, #5
 8010248:	1ad2      	subs	r2, r2, r3
 801024a:	0092      	lsls	r2, r2, #2
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	005b      	lsls	r3, r3, #1
 8010250:	b2da      	uxtb	r2, r3
 8010252:	79fb      	ldrb	r3, [r7, #7]
 8010254:	4413      	add	r3, r2
 8010256:	b2db      	uxtb	r3, r3
 8010258:	3330      	adds	r3, #48	; 0x30
 801025a:	b2da      	uxtb	r2, r3
 801025c:	4b7f      	ldr	r3, [pc, #508]	; (801045c <ce303_current+0x4f4>)
 801025e:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8010260:	4b7e      	ldr	r3, [pc, #504]	; (801045c <ce303_current+0x4f4>)
 8010262:	2221      	movs	r2, #33	; 0x21
 8010264:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8010266:	4b7d      	ldr	r3, [pc, #500]	; (801045c <ce303_current+0x4f4>)
 8010268:	220d      	movs	r2, #13
 801026a:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 801026c:	4b7b      	ldr	r3, [pc, #492]	; (801045c <ce303_current+0x4f4>)
 801026e:	220a      	movs	r2, #10
 8010270:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8010272:	4b7c      	ldr	r3, [pc, #496]	; (8010464 <ce303_current+0x4fc>)
 8010274:	2200      	movs	r2, #0
 8010276:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010278:	f7fe fc10 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801027c:	2201      	movs	r2, #1
 801027e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010282:	4879      	ldr	r0, [pc, #484]	; (8010468 <ce303_current+0x500>)
 8010284:	f7f2 fff2 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8010288:	2207      	movs	r2, #7
 801028a:	4974      	ldr	r1, [pc, #464]	; (801045c <ce303_current+0x4f4>)
 801028c:	4877      	ldr	r0, [pc, #476]	; (801046c <ce303_current+0x504>)
 801028e:	f7f5 faa5 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8010292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010296:	f7f1 fd35 	bl	8001d04 <HAL_Delay>
 801029a:	e02a      	b.n	80102f2 <ce303_current+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 801029c:	79fb      	ldrb	r3, [r7, #7]
 801029e:	2b09      	cmp	r3, #9
 80102a0:	d827      	bhi.n	80102f2 <ce303_current+0x38a>
	{
		start_buf[0] = 0x2F;
 80102a2:	4b6e      	ldr	r3, [pc, #440]	; (801045c <ce303_current+0x4f4>)
 80102a4:	222f      	movs	r2, #47	; 0x2f
 80102a6:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80102a8:	4b6c      	ldr	r3, [pc, #432]	; (801045c <ce303_current+0x4f4>)
 80102aa:	223f      	movs	r2, #63	; 0x3f
 80102ac:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	3330      	adds	r3, #48	; 0x30
 80102b2:	b2da      	uxtb	r2, r3
 80102b4:	4b69      	ldr	r3, [pc, #420]	; (801045c <ce303_current+0x4f4>)
 80102b6:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 80102b8:	4b68      	ldr	r3, [pc, #416]	; (801045c <ce303_current+0x4f4>)
 80102ba:	2221      	movs	r2, #33	; 0x21
 80102bc:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 80102be:	4b67      	ldr	r3, [pc, #412]	; (801045c <ce303_current+0x4f4>)
 80102c0:	220d      	movs	r2, #13
 80102c2:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 80102c4:	4b65      	ldr	r3, [pc, #404]	; (801045c <ce303_current+0x4f4>)
 80102c6:	220a      	movs	r2, #10
 80102c8:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 80102ca:	4b66      	ldr	r3, [pc, #408]	; (8010464 <ce303_current+0x4fc>)
 80102cc:	2200      	movs	r2, #0
 80102ce:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80102d0:	f7fe fbe4 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80102d4:	2201      	movs	r2, #1
 80102d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80102da:	4863      	ldr	r0, [pc, #396]	; (8010468 <ce303_current+0x500>)
 80102dc:	f7f2 ffc6 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 80102e0:	2206      	movs	r2, #6
 80102e2:	495e      	ldr	r1, [pc, #376]	; (801045c <ce303_current+0x4f4>)
 80102e4:	4861      	ldr	r0, [pc, #388]	; (801046c <ce303_current+0x504>)
 80102e6:	f7f5 fa79 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80102ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80102ee:	f7f1 fd09 	bl	8001d04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 80102f2:	4b5c      	ldr	r3, [pc, #368]	; (8010464 <ce303_current+0x4fc>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80102f8:	f7fe fbd0 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80102fc:	2201      	movs	r2, #1
 80102fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010302:	4859      	ldr	r0, [pc, #356]	; (8010468 <ce303_current+0x500>)
 8010304:	f7f2 ffb2 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8010308:	2206      	movs	r2, #6
 801030a:	4959      	ldr	r1, [pc, #356]	; (8010470 <ce303_current+0x508>)
 801030c:	4857      	ldr	r0, [pc, #348]	; (801046c <ce303_current+0x504>)
 801030e:	f7f5 fa65 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8010312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010316:	f7f1 fcf5 	bl	8001d04 <HAL_Delay>

	meter_rx_number = 0;
 801031a:	4b52      	ldr	r3, [pc, #328]	; (8010464 <ce303_current+0x4fc>)
 801031c:	2200      	movs	r2, #0
 801031e:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010320:	f7fe fbbc 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010324:	2201      	movs	r2, #1
 8010326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801032a:	484f      	ldr	r0, [pc, #316]	; (8010468 <ce303_current+0x500>)
 801032c:	f7f2 ff9e 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &current_buf[0], 13); // передаем команду
 8010330:	220d      	movs	r2, #13
 8010332:	4950      	ldr	r1, [pc, #320]	; (8010474 <ce303_current+0x50c>)
 8010334:	484d      	ldr	r0, [pc, #308]	; (801046c <ce303_current+0x504>)
 8010336:	f7f5 fa51 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 801033a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801033e:	f7f1 fce1 	bl	8001d04 <HAL_Delay>

	current_a_state = 0; // обнуляем переменные состояния прочтения тока перед их прочтением
 8010342:	2300      	movs	r3, #0
 8010344:	757b      	strb	r3, [r7, #21]
	current_b_state = 0;
 8010346:	2300      	movs	r3, #0
 8010348:	753b      	strb	r3, [r7, #20]
	current_c_state = 0;
 801034a:	2300      	movs	r3, #0
 801034c:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 801034e:	2300      	movs	r3, #0
 8010350:	823b      	strh	r3, [r7, #16]
 8010352:	f001 b829 	b.w	80113a8 <ce303_current+0x1440>
	{

		if( (meter_rx_buffer[i] == 0x28) && (current_a_state==0) && (current_b_state==0) && (current_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8010356:	8a3b      	ldrh	r3, [r7, #16]
 8010358:	4a47      	ldr	r2, [pc, #284]	; (8010478 <ce303_current+0x510>)
 801035a:	5cd3      	ldrb	r3, [r2, r3]
 801035c:	2b28      	cmp	r3, #40	; 0x28
 801035e:	f040 82b7 	bne.w	80108d0 <ce303_current+0x968>
 8010362:	7d7b      	ldrb	r3, [r7, #21]
 8010364:	2b00      	cmp	r3, #0
 8010366:	f040 82b3 	bne.w	80108d0 <ce303_current+0x968>
 801036a:	7d3b      	ldrb	r3, [r7, #20]
 801036c:	2b00      	cmp	r3, #0
 801036e:	f040 82af 	bne.w	80108d0 <ce303_current+0x968>
 8010372:	7cfb      	ldrb	r3, [r7, #19]
 8010374:	2b00      	cmp	r3, #0
 8010376:	f040 82ab 	bne.w	80108d0 <ce303_current+0x968>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801037a:	8a3b      	ldrh	r3, [r7, #16]
 801037c:	3302      	adds	r3, #2
 801037e:	4a3e      	ldr	r2, [pc, #248]	; (8010478 <ce303_current+0x510>)
 8010380:	5cd3      	ldrb	r3, [r2, r3]
 8010382:	2b2e      	cmp	r3, #46	; 0x2e
 8010384:	f040 80d7 	bne.w	8010536 <ce303_current+0x5ce>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8010388:	8a3b      	ldrh	r3, [r7, #16]
 801038a:	3301      	adds	r3, #1
 801038c:	4a3a      	ldr	r2, [pc, #232]	; (8010478 <ce303_current+0x510>)
 801038e:	5cd3      	ldrb	r3, [r2, r3]
 8010390:	b29b      	uxth	r3, r3
 8010392:	3b30      	subs	r3, #48	; 0x30
 8010394:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8010396:	8a3b      	ldrh	r3, [r7, #16]
 8010398:	3304      	adds	r3, #4
 801039a:	4a37      	ldr	r2, [pc, #220]	; (8010478 <ce303_current+0x510>)
 801039c:	5cd3      	ldrb	r3, [r2, r3]
 801039e:	2b29      	cmp	r3, #41	; 0x29
 80103a0:	d110      	bne.n	80103c4 <ce303_current+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 80103a2:	8a3b      	ldrh	r3, [r7, #16]
 80103a4:	3303      	adds	r3, #3
 80103a6:	4a34      	ldr	r2, [pc, #208]	; (8010478 <ce303_current+0x510>)
 80103a8:	5cd3      	ldrb	r3, [r2, r3]
 80103aa:	3b30      	subs	r3, #48	; 0x30
 80103ac:	b29b      	uxth	r3, r3
 80103ae:	461a      	mov	r2, r3
 80103b0:	0092      	lsls	r2, r2, #2
 80103b2:	4413      	add	r3, r2
 80103b4:	461a      	mov	r2, r3
 80103b6:	0091      	lsls	r1, r2, #2
 80103b8:	461a      	mov	r2, r3
 80103ba:	460b      	mov	r3, r1
 80103bc:	4413      	add	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	82fb      	strh	r3, [r7, #22]
 80103c2:	e081      	b.n	80104c8 <ce303_current+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 80103c4:	8a3b      	ldrh	r3, [r7, #16]
 80103c6:	3305      	adds	r3, #5
 80103c8:	4a2b      	ldr	r2, [pc, #172]	; (8010478 <ce303_current+0x510>)
 80103ca:	5cd3      	ldrb	r3, [r2, r3]
 80103cc:	2b29      	cmp	r3, #41	; 0x29
 80103ce:	d117      	bne.n	8010400 <ce303_current+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 80103d0:	8a3b      	ldrh	r3, [r7, #16]
 80103d2:	3303      	adds	r3, #3
 80103d4:	4a28      	ldr	r2, [pc, #160]	; (8010478 <ce303_current+0x510>)
 80103d6:	5cd3      	ldrb	r3, [r2, r3]
 80103d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80103dc:	4613      	mov	r3, r2
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	4413      	add	r3, r2
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	4619      	mov	r1, r3
 80103e6:	8a3b      	ldrh	r3, [r7, #16]
 80103e8:	3304      	adds	r3, #4
 80103ea:	4a23      	ldr	r2, [pc, #140]	; (8010478 <ce303_current+0x510>)
 80103ec:	5cd3      	ldrb	r3, [r2, r3]
 80103ee:	3b30      	subs	r3, #48	; 0x30
 80103f0:	440b      	add	r3, r1
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	461a      	mov	r2, r3
 80103f6:	0092      	lsls	r2, r2, #2
 80103f8:	4413      	add	r3, r2
 80103fa:	005b      	lsls	r3, r3, #1
 80103fc:	82fb      	strh	r3, [r7, #22]
 80103fe:	e063      	b.n	80104c8 <ce303_current+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8010400:	8a3b      	ldrh	r3, [r7, #16]
 8010402:	3306      	adds	r3, #6
 8010404:	4a1c      	ldr	r2, [pc, #112]	; (8010478 <ce303_current+0x510>)
 8010406:	5cd3      	ldrb	r3, [r2, r3]
 8010408:	2b29      	cmp	r3, #41	; 0x29
 801040a:	d137      	bne.n	801047c <ce303_current+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801040c:	8a3b      	ldrh	r3, [r7, #16]
 801040e:	3303      	adds	r3, #3
 8010410:	4a19      	ldr	r2, [pc, #100]	; (8010478 <ce303_current+0x510>)
 8010412:	5cd3      	ldrb	r3, [r2, r3]
 8010414:	3b30      	subs	r3, #48	; 0x30
 8010416:	b29b      	uxth	r3, r3
 8010418:	461a      	mov	r2, r3
 801041a:	0092      	lsls	r2, r2, #2
 801041c:	4413      	add	r3, r2
 801041e:	461a      	mov	r2, r3
 8010420:	0091      	lsls	r1, r2, #2
 8010422:	461a      	mov	r2, r3
 8010424:	460b      	mov	r3, r1
 8010426:	4413      	add	r3, r2
 8010428:	009b      	lsls	r3, r3, #2
 801042a:	b29a      	uxth	r2, r3
 801042c:	8a3b      	ldrh	r3, [r7, #16]
 801042e:	3304      	adds	r3, #4
 8010430:	4911      	ldr	r1, [pc, #68]	; (8010478 <ce303_current+0x510>)
 8010432:	5ccb      	ldrb	r3, [r1, r3]
 8010434:	3b30      	subs	r3, #48	; 0x30
 8010436:	b29b      	uxth	r3, r3
 8010438:	4619      	mov	r1, r3
 801043a:	0089      	lsls	r1, r1, #2
 801043c:	440b      	add	r3, r1
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	b29b      	uxth	r3, r3
 8010442:	4413      	add	r3, r2
 8010444:	b29a      	uxth	r2, r3
 8010446:	8a3b      	ldrh	r3, [r7, #16]
 8010448:	3305      	adds	r3, #5
 801044a:	490b      	ldr	r1, [pc, #44]	; (8010478 <ce303_current+0x510>)
 801044c:	5ccb      	ldrb	r3, [r1, r3]
 801044e:	b29b      	uxth	r3, r3
 8010450:	4413      	add	r3, r2
 8010452:	b29b      	uxth	r3, r3
 8010454:	3b30      	subs	r3, #48	; 0x30
 8010456:	82fb      	strh	r3, [r7, #22]
 8010458:	e036      	b.n	80104c8 <ce303_current+0x560>
 801045a:	bf00      	nop
 801045c:	20000010 	.word	0x20000010
 8010460:	cccccccd 	.word	0xcccccccd
 8010464:	2000085d 	.word	0x2000085d
 8010468:	40021800 	.word	0x40021800
 801046c:	20009c70 	.word	0x20009c70
 8010470:	20000018 	.word	0x20000018
 8010474:	20000038 	.word	0x20000038
 8010478:	200098e4 	.word	0x200098e4
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801047c:	8a3b      	ldrh	r3, [r7, #16]
 801047e:	3303      	adds	r3, #3
 8010480:	4a9a      	ldr	r2, [pc, #616]	; (80106ec <ce303_current+0x784>)
 8010482:	5cd3      	ldrb	r3, [r2, r3]
 8010484:	3b30      	subs	r3, #48	; 0x30
 8010486:	b29b      	uxth	r3, r3
 8010488:	461a      	mov	r2, r3
 801048a:	0092      	lsls	r2, r2, #2
 801048c:	4413      	add	r3, r2
 801048e:	461a      	mov	r2, r3
 8010490:	0091      	lsls	r1, r2, #2
 8010492:	461a      	mov	r2, r3
 8010494:	460b      	mov	r3, r1
 8010496:	4413      	add	r3, r2
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	b29a      	uxth	r2, r3
 801049c:	8a3b      	ldrh	r3, [r7, #16]
 801049e:	3304      	adds	r3, #4
 80104a0:	4992      	ldr	r1, [pc, #584]	; (80106ec <ce303_current+0x784>)
 80104a2:	5ccb      	ldrb	r3, [r1, r3]
 80104a4:	3b30      	subs	r3, #48	; 0x30
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	4619      	mov	r1, r3
 80104aa:	0089      	lsls	r1, r1, #2
 80104ac:	440b      	add	r3, r1
 80104ae:	005b      	lsls	r3, r3, #1
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	4413      	add	r3, r2
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	8a3b      	ldrh	r3, [r7, #16]
 80104b8:	3305      	adds	r3, #5
 80104ba:	498c      	ldr	r1, [pc, #560]	; (80106ec <ce303_current+0x784>)
 80104bc:	5ccb      	ldrb	r3, [r1, r3]
 80104be:	b29b      	uxth	r3, r3
 80104c0:	4413      	add	r3, r2
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	3b30      	subs	r3, #48	; 0x30
 80104c6:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80104c8:	4b89      	ldr	r3, [pc, #548]	; (80106f0 <ce303_current+0x788>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	f04f 31ff 	mov.w	r1, #4294967295
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7f6 fc31 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 80104d6:	89fb      	ldrh	r3, [r7, #14]
 80104d8:	0a1b      	lsrs	r3, r3, #8
 80104da:	b29b      	uxth	r3, r3
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	4619      	mov	r1, r3
 80104e0:	f242 003e 	movw	r0, #8254	; 0x203e
 80104e4:	f005 f9bc 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 80104e8:	89fb      	ldrh	r3, [r7, #14]
 80104ea:	b2db      	uxtb	r3, r3
 80104ec:	4619      	mov	r1, r3
 80104ee:	f242 003f 	movw	r0, #8255	; 0x203f
 80104f2:	f005 f9b5 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 80104f6:	8afb      	ldrh	r3, [r7, #22]
 80104f8:	0a1b      	lsrs	r3, r3, #8
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	4619      	mov	r1, r3
 8010500:	f242 0044 	movw	r0, #8260	; 0x2044
 8010504:	f005 f9ac 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8010508:	8afb      	ldrh	r3, [r7, #22]
 801050a:	b2db      	uxtb	r3, r3
 801050c:	4619      	mov	r1, r3
 801050e:	f242 0045 	movw	r0, #8261	; 0x2045
 8010512:	f005 f9a5 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8010516:	4b76      	ldr	r3, [pc, #472]	; (80106f0 <ce303_current+0x788>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4618      	mov	r0, r3
 801051c:	f7f6 fc5a 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 8010520:	4a74      	ldr	r2, [pc, #464]	; (80106f4 <ce303_current+0x78c>)
 8010522:	89fb      	ldrh	r3, [r7, #14]
 8010524:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg =  temp_mil;
 8010526:	4a73      	ldr	r2, [pc, #460]	; (80106f4 <ce303_current+0x78c>)
 8010528:	8afb      	ldrh	r3, [r7, #22]
 801052a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 801052e:	2301      	movs	r3, #1
 8010530:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8010532:	f000 bf33 	b.w	801139c <ce303_current+0x1434>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8010536:	8a3b      	ldrh	r3, [r7, #16]
 8010538:	3303      	adds	r3, #3
 801053a:	4a6c      	ldr	r2, [pc, #432]	; (80106ec <ce303_current+0x784>)
 801053c:	5cd3      	ldrb	r3, [r2, r3]
 801053e:	2b2e      	cmp	r3, #46	; 0x2e
 8010540:	f040 80da 	bne.w	80106f8 <ce303_current+0x790>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8010544:	8a3b      	ldrh	r3, [r7, #16]
 8010546:	3301      	adds	r3, #1
 8010548:	4a68      	ldr	r2, [pc, #416]	; (80106ec <ce303_current+0x784>)
 801054a:	5cd3      	ldrb	r3, [r2, r3]
 801054c:	3b30      	subs	r3, #48	; 0x30
 801054e:	b29b      	uxth	r3, r3
 8010550:	461a      	mov	r2, r3
 8010552:	0092      	lsls	r2, r2, #2
 8010554:	4413      	add	r3, r2
 8010556:	005b      	lsls	r3, r3, #1
 8010558:	b29a      	uxth	r2, r3
 801055a:	8a3b      	ldrh	r3, [r7, #16]
 801055c:	3302      	adds	r3, #2
 801055e:	4963      	ldr	r1, [pc, #396]	; (80106ec <ce303_current+0x784>)
 8010560:	5ccb      	ldrb	r3, [r1, r3]
 8010562:	b29b      	uxth	r3, r3
 8010564:	4413      	add	r3, r2
 8010566:	b29b      	uxth	r3, r3
 8010568:	3b30      	subs	r3, #48	; 0x30
 801056a:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 801056c:	8a3b      	ldrh	r3, [r7, #16]
 801056e:	3305      	adds	r3, #5
 8010570:	4a5e      	ldr	r2, [pc, #376]	; (80106ec <ce303_current+0x784>)
 8010572:	5cd3      	ldrb	r3, [r2, r3]
 8010574:	2b29      	cmp	r3, #41	; 0x29
 8010576:	d110      	bne.n	801059a <ce303_current+0x632>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8010578:	8a3b      	ldrh	r3, [r7, #16]
 801057a:	3304      	adds	r3, #4
 801057c:	4a5b      	ldr	r2, [pc, #364]	; (80106ec <ce303_current+0x784>)
 801057e:	5cd3      	ldrb	r3, [r2, r3]
 8010580:	3b30      	subs	r3, #48	; 0x30
 8010582:	b29b      	uxth	r3, r3
 8010584:	461a      	mov	r2, r3
 8010586:	0092      	lsls	r2, r2, #2
 8010588:	4413      	add	r3, r2
 801058a:	461a      	mov	r2, r3
 801058c:	0091      	lsls	r1, r2, #2
 801058e:	461a      	mov	r2, r3
 8010590:	460b      	mov	r3, r1
 8010592:	4413      	add	r3, r2
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	82fb      	strh	r3, [r7, #22]
 8010598:	e070      	b.n	801067c <ce303_current+0x714>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 801059a:	8a3b      	ldrh	r3, [r7, #16]
 801059c:	3306      	adds	r3, #6
 801059e:	4a53      	ldr	r2, [pc, #332]	; (80106ec <ce303_current+0x784>)
 80105a0:	5cd3      	ldrb	r3, [r2, r3]
 80105a2:	2b29      	cmp	r3, #41	; 0x29
 80105a4:	d117      	bne.n	80105d6 <ce303_current+0x66e>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 80105a6:	8a3b      	ldrh	r3, [r7, #16]
 80105a8:	3304      	adds	r3, #4
 80105aa:	4a50      	ldr	r2, [pc, #320]	; (80106ec <ce303_current+0x784>)
 80105ac:	5cd3      	ldrb	r3, [r2, r3]
 80105ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80105b2:	4613      	mov	r3, r2
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	4413      	add	r3, r2
 80105b8:	005b      	lsls	r3, r3, #1
 80105ba:	4619      	mov	r1, r3
 80105bc:	8a3b      	ldrh	r3, [r7, #16]
 80105be:	3305      	adds	r3, #5
 80105c0:	4a4a      	ldr	r2, [pc, #296]	; (80106ec <ce303_current+0x784>)
 80105c2:	5cd3      	ldrb	r3, [r2, r3]
 80105c4:	3b30      	subs	r3, #48	; 0x30
 80105c6:	440b      	add	r3, r1
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	461a      	mov	r2, r3
 80105cc:	0092      	lsls	r2, r2, #2
 80105ce:	4413      	add	r3, r2
 80105d0:	005b      	lsls	r3, r3, #1
 80105d2:	82fb      	strh	r3, [r7, #22]
 80105d4:	e052      	b.n	801067c <ce303_current+0x714>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80105d6:	8a3b      	ldrh	r3, [r7, #16]
 80105d8:	3307      	adds	r3, #7
 80105da:	4a44      	ldr	r2, [pc, #272]	; (80106ec <ce303_current+0x784>)
 80105dc:	5cd3      	ldrb	r3, [r2, r3]
 80105de:	2b29      	cmp	r3, #41	; 0x29
 80105e0:	d126      	bne.n	8010630 <ce303_current+0x6c8>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80105e2:	8a3b      	ldrh	r3, [r7, #16]
 80105e4:	3304      	adds	r3, #4
 80105e6:	4a41      	ldr	r2, [pc, #260]	; (80106ec <ce303_current+0x784>)
 80105e8:	5cd3      	ldrb	r3, [r2, r3]
 80105ea:	3b30      	subs	r3, #48	; 0x30
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	461a      	mov	r2, r3
 80105f0:	0092      	lsls	r2, r2, #2
 80105f2:	4413      	add	r3, r2
 80105f4:	461a      	mov	r2, r3
 80105f6:	0091      	lsls	r1, r2, #2
 80105f8:	461a      	mov	r2, r3
 80105fa:	460b      	mov	r3, r1
 80105fc:	4413      	add	r3, r2
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	b29a      	uxth	r2, r3
 8010602:	8a3b      	ldrh	r3, [r7, #16]
 8010604:	3305      	adds	r3, #5
 8010606:	4939      	ldr	r1, [pc, #228]	; (80106ec <ce303_current+0x784>)
 8010608:	5ccb      	ldrb	r3, [r1, r3]
 801060a:	3b30      	subs	r3, #48	; 0x30
 801060c:	b29b      	uxth	r3, r3
 801060e:	4619      	mov	r1, r3
 8010610:	0089      	lsls	r1, r1, #2
 8010612:	440b      	add	r3, r1
 8010614:	005b      	lsls	r3, r3, #1
 8010616:	b29b      	uxth	r3, r3
 8010618:	4413      	add	r3, r2
 801061a:	b29a      	uxth	r2, r3
 801061c:	8a3b      	ldrh	r3, [r7, #16]
 801061e:	3306      	adds	r3, #6
 8010620:	4932      	ldr	r1, [pc, #200]	; (80106ec <ce303_current+0x784>)
 8010622:	5ccb      	ldrb	r3, [r1, r3]
 8010624:	b29b      	uxth	r3, r3
 8010626:	4413      	add	r3, r2
 8010628:	b29b      	uxth	r3, r3
 801062a:	3b30      	subs	r3, #48	; 0x30
 801062c:	82fb      	strh	r3, [r7, #22]
 801062e:	e025      	b.n	801067c <ce303_current+0x714>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8010630:	8a3b      	ldrh	r3, [r7, #16]
 8010632:	3304      	adds	r3, #4
 8010634:	4a2d      	ldr	r2, [pc, #180]	; (80106ec <ce303_current+0x784>)
 8010636:	5cd3      	ldrb	r3, [r2, r3]
 8010638:	3b30      	subs	r3, #48	; 0x30
 801063a:	b29b      	uxth	r3, r3
 801063c:	461a      	mov	r2, r3
 801063e:	0092      	lsls	r2, r2, #2
 8010640:	4413      	add	r3, r2
 8010642:	461a      	mov	r2, r3
 8010644:	0091      	lsls	r1, r2, #2
 8010646:	461a      	mov	r2, r3
 8010648:	460b      	mov	r3, r1
 801064a:	4413      	add	r3, r2
 801064c:	009b      	lsls	r3, r3, #2
 801064e:	b29a      	uxth	r2, r3
 8010650:	8a3b      	ldrh	r3, [r7, #16]
 8010652:	3305      	adds	r3, #5
 8010654:	4925      	ldr	r1, [pc, #148]	; (80106ec <ce303_current+0x784>)
 8010656:	5ccb      	ldrb	r3, [r1, r3]
 8010658:	3b30      	subs	r3, #48	; 0x30
 801065a:	b29b      	uxth	r3, r3
 801065c:	4619      	mov	r1, r3
 801065e:	0089      	lsls	r1, r1, #2
 8010660:	440b      	add	r3, r1
 8010662:	005b      	lsls	r3, r3, #1
 8010664:	b29b      	uxth	r3, r3
 8010666:	4413      	add	r3, r2
 8010668:	b29a      	uxth	r2, r3
 801066a:	8a3b      	ldrh	r3, [r7, #16]
 801066c:	3306      	adds	r3, #6
 801066e:	491f      	ldr	r1, [pc, #124]	; (80106ec <ce303_current+0x784>)
 8010670:	5ccb      	ldrb	r3, [r1, r3]
 8010672:	b29b      	uxth	r3, r3
 8010674:	4413      	add	r3, r2
 8010676:	b29b      	uxth	r3, r3
 8010678:	3b30      	subs	r3, #48	; 0x30
 801067a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801067c:	4b1c      	ldr	r3, [pc, #112]	; (80106f0 <ce303_current+0x788>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f04f 31ff 	mov.w	r1, #4294967295
 8010684:	4618      	mov	r0, r3
 8010686:	f7f6 fb57 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 801068a:	89fb      	ldrh	r3, [r7, #14]
 801068c:	0a1b      	lsrs	r3, r3, #8
 801068e:	b29b      	uxth	r3, r3
 8010690:	b2db      	uxtb	r3, r3
 8010692:	4619      	mov	r1, r3
 8010694:	f242 003e 	movw	r0, #8254	; 0x203e
 8010698:	f005 f8e2 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 801069c:	89fb      	ldrh	r3, [r7, #14]
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	4619      	mov	r1, r3
 80106a2:	f242 003f 	movw	r0, #8255	; 0x203f
 80106a6:	f005 f8db 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 80106aa:	8afb      	ldrh	r3, [r7, #22]
 80106ac:	0a1b      	lsrs	r3, r3, #8
 80106ae:	b29b      	uxth	r3, r3
 80106b0:	b2db      	uxtb	r3, r3
 80106b2:	4619      	mov	r1, r3
 80106b4:	f242 0044 	movw	r0, #8260	; 0x2044
 80106b8:	f005 f8d2 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80106bc:	8afb      	ldrh	r3, [r7, #22]
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	4619      	mov	r1, r3
 80106c2:	f242 0045 	movw	r0, #8261	; 0x2045
 80106c6:	f005 f8cb 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80106ca:	4b09      	ldr	r3, [pc, #36]	; (80106f0 <ce303_current+0x788>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	4618      	mov	r0, r3
 80106d0:	f7f6 fb80 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 80106d4:	4a07      	ldr	r2, [pc, #28]	; (80106f4 <ce303_current+0x78c>)
 80106d6:	89fb      	ldrh	r3, [r7, #14]
 80106d8:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg = temp_mil;
 80106da:	4a06      	ldr	r2, [pc, #24]	; (80106f4 <ce303_current+0x78c>)
 80106dc:	8afb      	ldrh	r3, [r7, #22]
 80106de:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 80106e2:	2301      	movs	r3, #1
 80106e4:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80106e6:	f000 be59 	b.w	801139c <ce303_current+0x1434>
 80106ea:	bf00      	nop
 80106ec:	200098e4 	.word	0x200098e4
 80106f0:	20009a6c 	.word	0x20009a6c
 80106f4:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 80106f8:	8a3b      	ldrh	r3, [r7, #16]
 80106fa:	3304      	adds	r3, #4
 80106fc:	4a9f      	ldr	r2, [pc, #636]	; (801097c <ce303_current+0xa14>)
 80106fe:	5cd3      	ldrb	r3, [r2, r3]
 8010700:	2b2e      	cmp	r3, #46	; 0x2e
 8010702:	f040 864b 	bne.w	801139c <ce303_current+0x1434>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8010706:	8a3b      	ldrh	r3, [r7, #16]
 8010708:	3301      	adds	r3, #1
 801070a:	4a9c      	ldr	r2, [pc, #624]	; (801097c <ce303_current+0xa14>)
 801070c:	5cd3      	ldrb	r3, [r2, r3]
 801070e:	3b30      	subs	r3, #48	; 0x30
 8010710:	b29b      	uxth	r3, r3
 8010712:	461a      	mov	r2, r3
 8010714:	0092      	lsls	r2, r2, #2
 8010716:	4413      	add	r3, r2
 8010718:	461a      	mov	r2, r3
 801071a:	0091      	lsls	r1, r2, #2
 801071c:	461a      	mov	r2, r3
 801071e:	460b      	mov	r3, r1
 8010720:	4413      	add	r3, r2
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	b29a      	uxth	r2, r3
 8010726:	8a3b      	ldrh	r3, [r7, #16]
 8010728:	3302      	adds	r3, #2
 801072a:	4994      	ldr	r1, [pc, #592]	; (801097c <ce303_current+0xa14>)
 801072c:	5ccb      	ldrb	r3, [r1, r3]
 801072e:	3b30      	subs	r3, #48	; 0x30
 8010730:	b29b      	uxth	r3, r3
 8010732:	4619      	mov	r1, r3
 8010734:	0089      	lsls	r1, r1, #2
 8010736:	440b      	add	r3, r1
 8010738:	005b      	lsls	r3, r3, #1
 801073a:	b29b      	uxth	r3, r3
 801073c:	4413      	add	r3, r2
 801073e:	b29a      	uxth	r2, r3
 8010740:	8a3b      	ldrh	r3, [r7, #16]
 8010742:	3303      	adds	r3, #3
 8010744:	498d      	ldr	r1, [pc, #564]	; (801097c <ce303_current+0xa14>)
 8010746:	5ccb      	ldrb	r3, [r1, r3]
 8010748:	b29b      	uxth	r3, r3
 801074a:	4413      	add	r3, r2
 801074c:	b29b      	uxth	r3, r3
 801074e:	3b30      	subs	r3, #48	; 0x30
 8010750:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8010752:	8a3b      	ldrh	r3, [r7, #16]
 8010754:	3306      	adds	r3, #6
 8010756:	4a89      	ldr	r2, [pc, #548]	; (801097c <ce303_current+0xa14>)
 8010758:	5cd3      	ldrb	r3, [r2, r3]
 801075a:	2b29      	cmp	r3, #41	; 0x29
 801075c:	d110      	bne.n	8010780 <ce303_current+0x818>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801075e:	8a3b      	ldrh	r3, [r7, #16]
 8010760:	3305      	adds	r3, #5
 8010762:	4a86      	ldr	r2, [pc, #536]	; (801097c <ce303_current+0xa14>)
 8010764:	5cd3      	ldrb	r3, [r2, r3]
 8010766:	3b30      	subs	r3, #48	; 0x30
 8010768:	b29b      	uxth	r3, r3
 801076a:	461a      	mov	r2, r3
 801076c:	0092      	lsls	r2, r2, #2
 801076e:	4413      	add	r3, r2
 8010770:	461a      	mov	r2, r3
 8010772:	0091      	lsls	r1, r2, #2
 8010774:	461a      	mov	r2, r3
 8010776:	460b      	mov	r3, r1
 8010778:	4413      	add	r3, r2
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	82fb      	strh	r3, [r7, #22]
 801077e:	e070      	b.n	8010862 <ce303_current+0x8fa>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8010780:	8a3b      	ldrh	r3, [r7, #16]
 8010782:	3307      	adds	r3, #7
 8010784:	4a7d      	ldr	r2, [pc, #500]	; (801097c <ce303_current+0xa14>)
 8010786:	5cd3      	ldrb	r3, [r2, r3]
 8010788:	2b29      	cmp	r3, #41	; 0x29
 801078a:	d117      	bne.n	80107bc <ce303_current+0x854>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 801078c:	8a3b      	ldrh	r3, [r7, #16]
 801078e:	3305      	adds	r3, #5
 8010790:	4a7a      	ldr	r2, [pc, #488]	; (801097c <ce303_current+0xa14>)
 8010792:	5cd3      	ldrb	r3, [r2, r3]
 8010794:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010798:	4613      	mov	r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	4413      	add	r3, r2
 801079e:	005b      	lsls	r3, r3, #1
 80107a0:	4619      	mov	r1, r3
 80107a2:	8a3b      	ldrh	r3, [r7, #16]
 80107a4:	3306      	adds	r3, #6
 80107a6:	4a75      	ldr	r2, [pc, #468]	; (801097c <ce303_current+0xa14>)
 80107a8:	5cd3      	ldrb	r3, [r2, r3]
 80107aa:	3b30      	subs	r3, #48	; 0x30
 80107ac:	440b      	add	r3, r1
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	461a      	mov	r2, r3
 80107b2:	0092      	lsls	r2, r2, #2
 80107b4:	4413      	add	r3, r2
 80107b6:	005b      	lsls	r3, r3, #1
 80107b8:	82fb      	strh	r3, [r7, #22]
 80107ba:	e052      	b.n	8010862 <ce303_current+0x8fa>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80107bc:	8a3b      	ldrh	r3, [r7, #16]
 80107be:	3308      	adds	r3, #8
 80107c0:	4a6e      	ldr	r2, [pc, #440]	; (801097c <ce303_current+0xa14>)
 80107c2:	5cd3      	ldrb	r3, [r2, r3]
 80107c4:	2b29      	cmp	r3, #41	; 0x29
 80107c6:	d126      	bne.n	8010816 <ce303_current+0x8ae>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80107c8:	8a3b      	ldrh	r3, [r7, #16]
 80107ca:	3305      	adds	r3, #5
 80107cc:	4a6b      	ldr	r2, [pc, #428]	; (801097c <ce303_current+0xa14>)
 80107ce:	5cd3      	ldrb	r3, [r2, r3]
 80107d0:	3b30      	subs	r3, #48	; 0x30
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	461a      	mov	r2, r3
 80107d6:	0092      	lsls	r2, r2, #2
 80107d8:	4413      	add	r3, r2
 80107da:	461a      	mov	r2, r3
 80107dc:	0091      	lsls	r1, r2, #2
 80107de:	461a      	mov	r2, r3
 80107e0:	460b      	mov	r3, r1
 80107e2:	4413      	add	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	8a3b      	ldrh	r3, [r7, #16]
 80107ea:	3306      	adds	r3, #6
 80107ec:	4963      	ldr	r1, [pc, #396]	; (801097c <ce303_current+0xa14>)
 80107ee:	5ccb      	ldrb	r3, [r1, r3]
 80107f0:	3b30      	subs	r3, #48	; 0x30
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	4619      	mov	r1, r3
 80107f6:	0089      	lsls	r1, r1, #2
 80107f8:	440b      	add	r3, r1
 80107fa:	005b      	lsls	r3, r3, #1
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	4413      	add	r3, r2
 8010800:	b29a      	uxth	r2, r3
 8010802:	8a3b      	ldrh	r3, [r7, #16]
 8010804:	3307      	adds	r3, #7
 8010806:	495d      	ldr	r1, [pc, #372]	; (801097c <ce303_current+0xa14>)
 8010808:	5ccb      	ldrb	r3, [r1, r3]
 801080a:	b29b      	uxth	r3, r3
 801080c:	4413      	add	r3, r2
 801080e:	b29b      	uxth	r3, r3
 8010810:	3b30      	subs	r3, #48	; 0x30
 8010812:	82fb      	strh	r3, [r7, #22]
 8010814:	e025      	b.n	8010862 <ce303_current+0x8fa>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8010816:	8a3b      	ldrh	r3, [r7, #16]
 8010818:	3305      	adds	r3, #5
 801081a:	4a58      	ldr	r2, [pc, #352]	; (801097c <ce303_current+0xa14>)
 801081c:	5cd3      	ldrb	r3, [r2, r3]
 801081e:	3b30      	subs	r3, #48	; 0x30
 8010820:	b29b      	uxth	r3, r3
 8010822:	461a      	mov	r2, r3
 8010824:	0092      	lsls	r2, r2, #2
 8010826:	4413      	add	r3, r2
 8010828:	461a      	mov	r2, r3
 801082a:	0091      	lsls	r1, r2, #2
 801082c:	461a      	mov	r2, r3
 801082e:	460b      	mov	r3, r1
 8010830:	4413      	add	r3, r2
 8010832:	009b      	lsls	r3, r3, #2
 8010834:	b29a      	uxth	r2, r3
 8010836:	8a3b      	ldrh	r3, [r7, #16]
 8010838:	3306      	adds	r3, #6
 801083a:	4950      	ldr	r1, [pc, #320]	; (801097c <ce303_current+0xa14>)
 801083c:	5ccb      	ldrb	r3, [r1, r3]
 801083e:	3b30      	subs	r3, #48	; 0x30
 8010840:	b29b      	uxth	r3, r3
 8010842:	4619      	mov	r1, r3
 8010844:	0089      	lsls	r1, r1, #2
 8010846:	440b      	add	r3, r1
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	b29b      	uxth	r3, r3
 801084c:	4413      	add	r3, r2
 801084e:	b29a      	uxth	r2, r3
 8010850:	8a3b      	ldrh	r3, [r7, #16]
 8010852:	3307      	adds	r3, #7
 8010854:	4949      	ldr	r1, [pc, #292]	; (801097c <ce303_current+0xa14>)
 8010856:	5ccb      	ldrb	r3, [r1, r3]
 8010858:	b29b      	uxth	r3, r3
 801085a:	4413      	add	r3, r2
 801085c:	b29b      	uxth	r3, r3
 801085e:	3b30      	subs	r3, #48	; 0x30
 8010860:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8010862:	4b47      	ldr	r3, [pc, #284]	; (8010980 <ce303_current+0xa18>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f04f 31ff 	mov.w	r1, #4294967295
 801086a:	4618      	mov	r0, r3
 801086c:	f7f6 fa64 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 8010870:	89fb      	ldrh	r3, [r7, #14]
 8010872:	0a1b      	lsrs	r3, r3, #8
 8010874:	b29b      	uxth	r3, r3
 8010876:	b2db      	uxtb	r3, r3
 8010878:	4619      	mov	r1, r3
 801087a:	f242 003e 	movw	r0, #8254	; 0x203e
 801087e:	f004 ffef 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8010882:	89fb      	ldrh	r3, [r7, #14]
 8010884:	b2db      	uxtb	r3, r3
 8010886:	4619      	mov	r1, r3
 8010888:	f242 003f 	movw	r0, #8255	; 0x203f
 801088c:	f004 ffe8 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8010890:	8afb      	ldrh	r3, [r7, #22]
 8010892:	0a1b      	lsrs	r3, r3, #8
 8010894:	b29b      	uxth	r3, r3
 8010896:	b2db      	uxtb	r3, r3
 8010898:	4619      	mov	r1, r3
 801089a:	f242 0044 	movw	r0, #8260	; 0x2044
 801089e:	f004 ffdf 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80108a2:	8afb      	ldrh	r3, [r7, #22]
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	4619      	mov	r1, r3
 80108a8:	f242 0045 	movw	r0, #8261	; 0x2045
 80108ac:	f004 ffd8 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80108b0:	4b33      	ldr	r3, [pc, #204]	; (8010980 <ce303_current+0xa18>)
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7f6 fa8d 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 80108ba:	4a32      	ldr	r2, [pc, #200]	; (8010984 <ce303_current+0xa1c>)
 80108bc:	89fb      	ldrh	r3, [r7, #14]
 80108be:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg = temp_mil;
 80108c0:	4a30      	ldr	r2, [pc, #192]	; (8010984 <ce303_current+0xa1c>)
 80108c2:	8afb      	ldrh	r3, [r7, #22]
 80108c4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 80108c8:	2301      	movs	r3, #1
 80108ca:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80108cc:	f000 bd66 	b.w	801139c <ce303_current+0x1434>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (current_a_state==1) && (current_b_state==0) && (current_c_state==0) )
 80108d0:	8a3b      	ldrh	r3, [r7, #16]
 80108d2:	4a2a      	ldr	r2, [pc, #168]	; (801097c <ce303_current+0xa14>)
 80108d4:	5cd3      	ldrb	r3, [r2, r3]
 80108d6:	2b28      	cmp	r3, #40	; 0x28
 80108d8:	f040 82ae 	bne.w	8010e38 <ce303_current+0xed0>
 80108dc:	7d7b      	ldrb	r3, [r7, #21]
 80108de:	2b01      	cmp	r3, #1
 80108e0:	f040 82aa 	bne.w	8010e38 <ce303_current+0xed0>
 80108e4:	7d3b      	ldrb	r3, [r7, #20]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	f040 82a6 	bne.w	8010e38 <ce303_current+0xed0>
 80108ec:	7cfb      	ldrb	r3, [r7, #19]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	f040 82a2 	bne.w	8010e38 <ce303_current+0xed0>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80108f4:	8a3b      	ldrh	r3, [r7, #16]
 80108f6:	3302      	adds	r3, #2
 80108f8:	4a20      	ldr	r2, [pc, #128]	; (801097c <ce303_current+0xa14>)
 80108fa:	5cd3      	ldrb	r3, [r2, r3]
 80108fc:	2b2e      	cmp	r3, #46	; 0x2e
 80108fe:	f040 80ce 	bne.w	8010a9e <ce303_current+0xb36>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8010902:	8a3b      	ldrh	r3, [r7, #16]
 8010904:	3301      	adds	r3, #1
 8010906:	4a1d      	ldr	r2, [pc, #116]	; (801097c <ce303_current+0xa14>)
 8010908:	5cd3      	ldrb	r3, [r2, r3]
 801090a:	b29b      	uxth	r3, r3
 801090c:	3b30      	subs	r3, #48	; 0x30
 801090e:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8010910:	8a3b      	ldrh	r3, [r7, #16]
 8010912:	3304      	adds	r3, #4
 8010914:	4a19      	ldr	r2, [pc, #100]	; (801097c <ce303_current+0xa14>)
 8010916:	5cd3      	ldrb	r3, [r2, r3]
 8010918:	2b29      	cmp	r3, #41	; 0x29
 801091a:	d110      	bne.n	801093e <ce303_current+0x9d6>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 801091c:	8a3b      	ldrh	r3, [r7, #16]
 801091e:	3303      	adds	r3, #3
 8010920:	4a16      	ldr	r2, [pc, #88]	; (801097c <ce303_current+0xa14>)
 8010922:	5cd3      	ldrb	r3, [r2, r3]
 8010924:	3b30      	subs	r3, #48	; 0x30
 8010926:	b29b      	uxth	r3, r3
 8010928:	461a      	mov	r2, r3
 801092a:	0092      	lsls	r2, r2, #2
 801092c:	4413      	add	r3, r2
 801092e:	461a      	mov	r2, r3
 8010930:	0091      	lsls	r1, r2, #2
 8010932:	461a      	mov	r2, r3
 8010934:	460b      	mov	r3, r1
 8010936:	4413      	add	r3, r2
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	82fb      	strh	r3, [r7, #22]
 801093c:	e077      	b.n	8010a2e <ce303_current+0xac6>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801093e:	8a3b      	ldrh	r3, [r7, #16]
 8010940:	3305      	adds	r3, #5
 8010942:	4a0e      	ldr	r2, [pc, #56]	; (801097c <ce303_current+0xa14>)
 8010944:	5cd3      	ldrb	r3, [r2, r3]
 8010946:	2b29      	cmp	r3, #41	; 0x29
 8010948:	d11e      	bne.n	8010988 <ce303_current+0xa20>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801094a:	8a3b      	ldrh	r3, [r7, #16]
 801094c:	3303      	adds	r3, #3
 801094e:	4a0b      	ldr	r2, [pc, #44]	; (801097c <ce303_current+0xa14>)
 8010950:	5cd3      	ldrb	r3, [r2, r3]
 8010952:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010956:	4613      	mov	r3, r2
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	4413      	add	r3, r2
 801095c:	005b      	lsls	r3, r3, #1
 801095e:	4619      	mov	r1, r3
 8010960:	8a3b      	ldrh	r3, [r7, #16]
 8010962:	3304      	adds	r3, #4
 8010964:	4a05      	ldr	r2, [pc, #20]	; (801097c <ce303_current+0xa14>)
 8010966:	5cd3      	ldrb	r3, [r2, r3]
 8010968:	3b30      	subs	r3, #48	; 0x30
 801096a:	440b      	add	r3, r1
 801096c:	b29b      	uxth	r3, r3
 801096e:	461a      	mov	r2, r3
 8010970:	0092      	lsls	r2, r2, #2
 8010972:	4413      	add	r3, r2
 8010974:	005b      	lsls	r3, r3, #1
 8010976:	82fb      	strh	r3, [r7, #22]
 8010978:	e059      	b.n	8010a2e <ce303_current+0xac6>
 801097a:	bf00      	nop
 801097c:	200098e4 	.word	0x200098e4
 8010980:	20009a6c 	.word	0x20009a6c
 8010984:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8010988:	8a3b      	ldrh	r3, [r7, #16]
 801098a:	3306      	adds	r3, #6
 801098c:	4ab1      	ldr	r2, [pc, #708]	; (8010c54 <ce303_current+0xcec>)
 801098e:	5cd3      	ldrb	r3, [r2, r3]
 8010990:	2b29      	cmp	r3, #41	; 0x29
 8010992:	d126      	bne.n	80109e2 <ce303_current+0xa7a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8010994:	8a3b      	ldrh	r3, [r7, #16]
 8010996:	3303      	adds	r3, #3
 8010998:	4aae      	ldr	r2, [pc, #696]	; (8010c54 <ce303_current+0xcec>)
 801099a:	5cd3      	ldrb	r3, [r2, r3]
 801099c:	3b30      	subs	r3, #48	; 0x30
 801099e:	b29b      	uxth	r3, r3
 80109a0:	461a      	mov	r2, r3
 80109a2:	0092      	lsls	r2, r2, #2
 80109a4:	4413      	add	r3, r2
 80109a6:	461a      	mov	r2, r3
 80109a8:	0091      	lsls	r1, r2, #2
 80109aa:	461a      	mov	r2, r3
 80109ac:	460b      	mov	r3, r1
 80109ae:	4413      	add	r3, r2
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	b29a      	uxth	r2, r3
 80109b4:	8a3b      	ldrh	r3, [r7, #16]
 80109b6:	3304      	adds	r3, #4
 80109b8:	49a6      	ldr	r1, [pc, #664]	; (8010c54 <ce303_current+0xcec>)
 80109ba:	5ccb      	ldrb	r3, [r1, r3]
 80109bc:	3b30      	subs	r3, #48	; 0x30
 80109be:	b29b      	uxth	r3, r3
 80109c0:	4619      	mov	r1, r3
 80109c2:	0089      	lsls	r1, r1, #2
 80109c4:	440b      	add	r3, r1
 80109c6:	005b      	lsls	r3, r3, #1
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	4413      	add	r3, r2
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	8a3b      	ldrh	r3, [r7, #16]
 80109d0:	3305      	adds	r3, #5
 80109d2:	49a0      	ldr	r1, [pc, #640]	; (8010c54 <ce303_current+0xcec>)
 80109d4:	5ccb      	ldrb	r3, [r1, r3]
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	4413      	add	r3, r2
 80109da:	b29b      	uxth	r3, r3
 80109dc:	3b30      	subs	r3, #48	; 0x30
 80109de:	82fb      	strh	r3, [r7, #22]
 80109e0:	e025      	b.n	8010a2e <ce303_current+0xac6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80109e2:	8a3b      	ldrh	r3, [r7, #16]
 80109e4:	3303      	adds	r3, #3
 80109e6:	4a9b      	ldr	r2, [pc, #620]	; (8010c54 <ce303_current+0xcec>)
 80109e8:	5cd3      	ldrb	r3, [r2, r3]
 80109ea:	3b30      	subs	r3, #48	; 0x30
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	461a      	mov	r2, r3
 80109f0:	0092      	lsls	r2, r2, #2
 80109f2:	4413      	add	r3, r2
 80109f4:	461a      	mov	r2, r3
 80109f6:	0091      	lsls	r1, r2, #2
 80109f8:	461a      	mov	r2, r3
 80109fa:	460b      	mov	r3, r1
 80109fc:	4413      	add	r3, r2
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	8a3b      	ldrh	r3, [r7, #16]
 8010a04:	3304      	adds	r3, #4
 8010a06:	4993      	ldr	r1, [pc, #588]	; (8010c54 <ce303_current+0xcec>)
 8010a08:	5ccb      	ldrb	r3, [r1, r3]
 8010a0a:	3b30      	subs	r3, #48	; 0x30
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	4619      	mov	r1, r3
 8010a10:	0089      	lsls	r1, r1, #2
 8010a12:	440b      	add	r3, r1
 8010a14:	005b      	lsls	r3, r3, #1
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	4413      	add	r3, r2
 8010a1a:	b29a      	uxth	r2, r3
 8010a1c:	8a3b      	ldrh	r3, [r7, #16]
 8010a1e:	3305      	adds	r3, #5
 8010a20:	498c      	ldr	r1, [pc, #560]	; (8010c54 <ce303_current+0xcec>)
 8010a22:	5ccb      	ldrb	r3, [r1, r3]
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	4413      	add	r3, r2
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	3b30      	subs	r3, #48	; 0x30
 8010a2c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8010a2e:	4b8a      	ldr	r3, [pc, #552]	; (8010c58 <ce303_current+0xcf0>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f04f 31ff 	mov.w	r1, #4294967295
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7f6 f97e 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8010a3c:	89fb      	ldrh	r3, [r7, #14]
 8010a3e:	0a1b      	lsrs	r3, r3, #8
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	b2db      	uxtb	r3, r3
 8010a44:	4619      	mov	r1, r3
 8010a46:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8010a4a:	f004 ff09 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8010a4e:	89fb      	ldrh	r3, [r7, #14]
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	4619      	mov	r1, r3
 8010a54:	f242 0041 	movw	r0, #8257	; 0x2041
 8010a58:	f004 ff02 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8010a5c:	8afb      	ldrh	r3, [r7, #22]
 8010a5e:	0a1b      	lsrs	r3, r3, #8
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	b2db      	uxtb	r3, r3
 8010a64:	4619      	mov	r1, r3
 8010a66:	f242 0046 	movw	r0, #8262	; 0x2046
 8010a6a:	f004 fef9 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8010a6e:	8afb      	ldrh	r3, [r7, #22]
 8010a70:	b2db      	uxtb	r3, r3
 8010a72:	4619      	mov	r1, r3
 8010a74:	f242 0047 	movw	r0, #8263	; 0x2047
 8010a78:	f004 fef2 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8010a7c:	4b76      	ldr	r3, [pc, #472]	; (8010c58 <ce303_current+0xcf0>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7f6 f9a7 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 8010a86:	4a75      	ldr	r2, [pc, #468]	; (8010c5c <ce303_current+0xcf4>)
 8010a88:	89fb      	ldrh	r3, [r7, #14]
 8010a8a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg =  temp_mil;
 8010a8e:	4a73      	ldr	r2, [pc, #460]	; (8010c5c <ce303_current+0xcf4>)
 8010a90:	8afb      	ldrh	r3, [r7, #22]
 8010a92:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 8010a96:	2301      	movs	r3, #1
 8010a98:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8010a9a:	f000 bc81 	b.w	80113a0 <ce303_current+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8010a9e:	8a3b      	ldrh	r3, [r7, #16]
 8010aa0:	3303      	adds	r3, #3
 8010aa2:	4a6c      	ldr	r2, [pc, #432]	; (8010c54 <ce303_current+0xcec>)
 8010aa4:	5cd3      	ldrb	r3, [r2, r3]
 8010aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8010aa8:	f040 80da 	bne.w	8010c60 <ce303_current+0xcf8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8010aac:	8a3b      	ldrh	r3, [r7, #16]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	4a68      	ldr	r2, [pc, #416]	; (8010c54 <ce303_current+0xcec>)
 8010ab2:	5cd3      	ldrb	r3, [r2, r3]
 8010ab4:	3b30      	subs	r3, #48	; 0x30
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	461a      	mov	r2, r3
 8010aba:	0092      	lsls	r2, r2, #2
 8010abc:	4413      	add	r3, r2
 8010abe:	005b      	lsls	r3, r3, #1
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	8a3b      	ldrh	r3, [r7, #16]
 8010ac4:	3302      	adds	r3, #2
 8010ac6:	4963      	ldr	r1, [pc, #396]	; (8010c54 <ce303_current+0xcec>)
 8010ac8:	5ccb      	ldrb	r3, [r1, r3]
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	4413      	add	r3, r2
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	3b30      	subs	r3, #48	; 0x30
 8010ad2:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8010ad4:	8a3b      	ldrh	r3, [r7, #16]
 8010ad6:	3305      	adds	r3, #5
 8010ad8:	4a5e      	ldr	r2, [pc, #376]	; (8010c54 <ce303_current+0xcec>)
 8010ada:	5cd3      	ldrb	r3, [r2, r3]
 8010adc:	2b29      	cmp	r3, #41	; 0x29
 8010ade:	d110      	bne.n	8010b02 <ce303_current+0xb9a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8010ae0:	8a3b      	ldrh	r3, [r7, #16]
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	4a5b      	ldr	r2, [pc, #364]	; (8010c54 <ce303_current+0xcec>)
 8010ae6:	5cd3      	ldrb	r3, [r2, r3]
 8010ae8:	3b30      	subs	r3, #48	; 0x30
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	461a      	mov	r2, r3
 8010aee:	0092      	lsls	r2, r2, #2
 8010af0:	4413      	add	r3, r2
 8010af2:	461a      	mov	r2, r3
 8010af4:	0091      	lsls	r1, r2, #2
 8010af6:	461a      	mov	r2, r3
 8010af8:	460b      	mov	r3, r1
 8010afa:	4413      	add	r3, r2
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	82fb      	strh	r3, [r7, #22]
 8010b00:	e070      	b.n	8010be4 <ce303_current+0xc7c>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8010b02:	8a3b      	ldrh	r3, [r7, #16]
 8010b04:	3306      	adds	r3, #6
 8010b06:	4a53      	ldr	r2, [pc, #332]	; (8010c54 <ce303_current+0xcec>)
 8010b08:	5cd3      	ldrb	r3, [r2, r3]
 8010b0a:	2b29      	cmp	r3, #41	; 0x29
 8010b0c:	d117      	bne.n	8010b3e <ce303_current+0xbd6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8010b0e:	8a3b      	ldrh	r3, [r7, #16]
 8010b10:	3304      	adds	r3, #4
 8010b12:	4a50      	ldr	r2, [pc, #320]	; (8010c54 <ce303_current+0xcec>)
 8010b14:	5cd3      	ldrb	r3, [r2, r3]
 8010b16:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	4413      	add	r3, r2
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	4619      	mov	r1, r3
 8010b24:	8a3b      	ldrh	r3, [r7, #16]
 8010b26:	3305      	adds	r3, #5
 8010b28:	4a4a      	ldr	r2, [pc, #296]	; (8010c54 <ce303_current+0xcec>)
 8010b2a:	5cd3      	ldrb	r3, [r2, r3]
 8010b2c:	3b30      	subs	r3, #48	; 0x30
 8010b2e:	440b      	add	r3, r1
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	461a      	mov	r2, r3
 8010b34:	0092      	lsls	r2, r2, #2
 8010b36:	4413      	add	r3, r2
 8010b38:	005b      	lsls	r3, r3, #1
 8010b3a:	82fb      	strh	r3, [r7, #22]
 8010b3c:	e052      	b.n	8010be4 <ce303_current+0xc7c>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8010b3e:	8a3b      	ldrh	r3, [r7, #16]
 8010b40:	3307      	adds	r3, #7
 8010b42:	4a44      	ldr	r2, [pc, #272]	; (8010c54 <ce303_current+0xcec>)
 8010b44:	5cd3      	ldrb	r3, [r2, r3]
 8010b46:	2b29      	cmp	r3, #41	; 0x29
 8010b48:	d126      	bne.n	8010b98 <ce303_current+0xc30>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8010b4a:	8a3b      	ldrh	r3, [r7, #16]
 8010b4c:	3304      	adds	r3, #4
 8010b4e:	4a41      	ldr	r2, [pc, #260]	; (8010c54 <ce303_current+0xcec>)
 8010b50:	5cd3      	ldrb	r3, [r2, r3]
 8010b52:	3b30      	subs	r3, #48	; 0x30
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	461a      	mov	r2, r3
 8010b58:	0092      	lsls	r2, r2, #2
 8010b5a:	4413      	add	r3, r2
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	0091      	lsls	r1, r2, #2
 8010b60:	461a      	mov	r2, r3
 8010b62:	460b      	mov	r3, r1
 8010b64:	4413      	add	r3, r2
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	b29a      	uxth	r2, r3
 8010b6a:	8a3b      	ldrh	r3, [r7, #16]
 8010b6c:	3305      	adds	r3, #5
 8010b6e:	4939      	ldr	r1, [pc, #228]	; (8010c54 <ce303_current+0xcec>)
 8010b70:	5ccb      	ldrb	r3, [r1, r3]
 8010b72:	3b30      	subs	r3, #48	; 0x30
 8010b74:	b29b      	uxth	r3, r3
 8010b76:	4619      	mov	r1, r3
 8010b78:	0089      	lsls	r1, r1, #2
 8010b7a:	440b      	add	r3, r1
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	b29b      	uxth	r3, r3
 8010b80:	4413      	add	r3, r2
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	8a3b      	ldrh	r3, [r7, #16]
 8010b86:	3306      	adds	r3, #6
 8010b88:	4932      	ldr	r1, [pc, #200]	; (8010c54 <ce303_current+0xcec>)
 8010b8a:	5ccb      	ldrb	r3, [r1, r3]
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	4413      	add	r3, r2
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	3b30      	subs	r3, #48	; 0x30
 8010b94:	82fb      	strh	r3, [r7, #22]
 8010b96:	e025      	b.n	8010be4 <ce303_current+0xc7c>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8010b98:	8a3b      	ldrh	r3, [r7, #16]
 8010b9a:	3304      	adds	r3, #4
 8010b9c:	4a2d      	ldr	r2, [pc, #180]	; (8010c54 <ce303_current+0xcec>)
 8010b9e:	5cd3      	ldrb	r3, [r2, r3]
 8010ba0:	3b30      	subs	r3, #48	; 0x30
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	0092      	lsls	r2, r2, #2
 8010ba8:	4413      	add	r3, r2
 8010baa:	461a      	mov	r2, r3
 8010bac:	0091      	lsls	r1, r2, #2
 8010bae:	461a      	mov	r2, r3
 8010bb0:	460b      	mov	r3, r1
 8010bb2:	4413      	add	r3, r2
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	b29a      	uxth	r2, r3
 8010bb8:	8a3b      	ldrh	r3, [r7, #16]
 8010bba:	3305      	adds	r3, #5
 8010bbc:	4925      	ldr	r1, [pc, #148]	; (8010c54 <ce303_current+0xcec>)
 8010bbe:	5ccb      	ldrb	r3, [r1, r3]
 8010bc0:	3b30      	subs	r3, #48	; 0x30
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	0089      	lsls	r1, r1, #2
 8010bc8:	440b      	add	r3, r1
 8010bca:	005b      	lsls	r3, r3, #1
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	4413      	add	r3, r2
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	8a3b      	ldrh	r3, [r7, #16]
 8010bd4:	3306      	adds	r3, #6
 8010bd6:	491f      	ldr	r1, [pc, #124]	; (8010c54 <ce303_current+0xcec>)
 8010bd8:	5ccb      	ldrb	r3, [r1, r3]
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	4413      	add	r3, r2
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	3b30      	subs	r3, #48	; 0x30
 8010be2:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8010be4:	4b1c      	ldr	r3, [pc, #112]	; (8010c58 <ce303_current+0xcf0>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f04f 31ff 	mov.w	r1, #4294967295
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7f6 f8a3 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8010bf2:	89fb      	ldrh	r3, [r7, #14]
 8010bf4:	0a1b      	lsrs	r3, r3, #8
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8010c00:	f004 fe2e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8010c04:	89fb      	ldrh	r3, [r7, #14]
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	4619      	mov	r1, r3
 8010c0a:	f242 0041 	movw	r0, #8257	; 0x2041
 8010c0e:	f004 fe27 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8010c12:	8afb      	ldrh	r3, [r7, #22]
 8010c14:	0a1b      	lsrs	r3, r3, #8
 8010c16:	b29b      	uxth	r3, r3
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	f242 0046 	movw	r0, #8262	; 0x2046
 8010c20:	f004 fe1e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8010c24:	8afb      	ldrh	r3, [r7, #22]
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	4619      	mov	r1, r3
 8010c2a:	f242 0047 	movw	r0, #8263	; 0x2047
 8010c2e:	f004 fe17 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8010c32:	4b09      	ldr	r3, [pc, #36]	; (8010c58 <ce303_current+0xcf0>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f6 f8cc 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 8010c3c:	4a07      	ldr	r2, [pc, #28]	; (8010c5c <ce303_current+0xcf4>)
 8010c3e:	89fb      	ldrh	r3, [r7, #14]
 8010c40:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg = temp_mil;
 8010c44:	4a05      	ldr	r2, [pc, #20]	; (8010c5c <ce303_current+0xcf4>)
 8010c46:	8afb      	ldrh	r3, [r7, #22]
 8010c48:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8010c50:	e3a6      	b.n	80113a0 <ce303_current+0x1438>
 8010c52:	bf00      	nop
 8010c54:	200098e4 	.word	0x200098e4
 8010c58:	20009a6c 	.word	0x20009a6c
 8010c5c:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8010c60:	8a3b      	ldrh	r3, [r7, #16]
 8010c62:	3304      	adds	r3, #4
 8010c64:	4a9f      	ldr	r2, [pc, #636]	; (8010ee4 <ce303_current+0xf7c>)
 8010c66:	5cd3      	ldrb	r3, [r2, r3]
 8010c68:	2b2e      	cmp	r3, #46	; 0x2e
 8010c6a:	f040 8399 	bne.w	80113a0 <ce303_current+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8010c6e:	8a3b      	ldrh	r3, [r7, #16]
 8010c70:	3301      	adds	r3, #1
 8010c72:	4a9c      	ldr	r2, [pc, #624]	; (8010ee4 <ce303_current+0xf7c>)
 8010c74:	5cd3      	ldrb	r3, [r2, r3]
 8010c76:	3b30      	subs	r3, #48	; 0x30
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	0092      	lsls	r2, r2, #2
 8010c7e:	4413      	add	r3, r2
 8010c80:	461a      	mov	r2, r3
 8010c82:	0091      	lsls	r1, r2, #2
 8010c84:	461a      	mov	r2, r3
 8010c86:	460b      	mov	r3, r1
 8010c88:	4413      	add	r3, r2
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	8a3b      	ldrh	r3, [r7, #16]
 8010c90:	3302      	adds	r3, #2
 8010c92:	4994      	ldr	r1, [pc, #592]	; (8010ee4 <ce303_current+0xf7c>)
 8010c94:	5ccb      	ldrb	r3, [r1, r3]
 8010c96:	3b30      	subs	r3, #48	; 0x30
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	0089      	lsls	r1, r1, #2
 8010c9e:	440b      	add	r3, r1
 8010ca0:	005b      	lsls	r3, r3, #1
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	4413      	add	r3, r2
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	8a3b      	ldrh	r3, [r7, #16]
 8010caa:	3303      	adds	r3, #3
 8010cac:	498d      	ldr	r1, [pc, #564]	; (8010ee4 <ce303_current+0xf7c>)
 8010cae:	5ccb      	ldrb	r3, [r1, r3]
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	4413      	add	r3, r2
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	3b30      	subs	r3, #48	; 0x30
 8010cb8:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8010cba:	8a3b      	ldrh	r3, [r7, #16]
 8010cbc:	3306      	adds	r3, #6
 8010cbe:	4a89      	ldr	r2, [pc, #548]	; (8010ee4 <ce303_current+0xf7c>)
 8010cc0:	5cd3      	ldrb	r3, [r2, r3]
 8010cc2:	2b29      	cmp	r3, #41	; 0x29
 8010cc4:	d110      	bne.n	8010ce8 <ce303_current+0xd80>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8010cc6:	8a3b      	ldrh	r3, [r7, #16]
 8010cc8:	3305      	adds	r3, #5
 8010cca:	4a86      	ldr	r2, [pc, #536]	; (8010ee4 <ce303_current+0xf7c>)
 8010ccc:	5cd3      	ldrb	r3, [r2, r3]
 8010cce:	3b30      	subs	r3, #48	; 0x30
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	0092      	lsls	r2, r2, #2
 8010cd6:	4413      	add	r3, r2
 8010cd8:	461a      	mov	r2, r3
 8010cda:	0091      	lsls	r1, r2, #2
 8010cdc:	461a      	mov	r2, r3
 8010cde:	460b      	mov	r3, r1
 8010ce0:	4413      	add	r3, r2
 8010ce2:	009b      	lsls	r3, r3, #2
 8010ce4:	82fb      	strh	r3, [r7, #22]
 8010ce6:	e070      	b.n	8010dca <ce303_current+0xe62>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8010ce8:	8a3b      	ldrh	r3, [r7, #16]
 8010cea:	3307      	adds	r3, #7
 8010cec:	4a7d      	ldr	r2, [pc, #500]	; (8010ee4 <ce303_current+0xf7c>)
 8010cee:	5cd3      	ldrb	r3, [r2, r3]
 8010cf0:	2b29      	cmp	r3, #41	; 0x29
 8010cf2:	d117      	bne.n	8010d24 <ce303_current+0xdbc>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8010cf4:	8a3b      	ldrh	r3, [r7, #16]
 8010cf6:	3305      	adds	r3, #5
 8010cf8:	4a7a      	ldr	r2, [pc, #488]	; (8010ee4 <ce303_current+0xf7c>)
 8010cfa:	5cd3      	ldrb	r3, [r2, r3]
 8010cfc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010d00:	4613      	mov	r3, r2
 8010d02:	009b      	lsls	r3, r3, #2
 8010d04:	4413      	add	r3, r2
 8010d06:	005b      	lsls	r3, r3, #1
 8010d08:	4619      	mov	r1, r3
 8010d0a:	8a3b      	ldrh	r3, [r7, #16]
 8010d0c:	3306      	adds	r3, #6
 8010d0e:	4a75      	ldr	r2, [pc, #468]	; (8010ee4 <ce303_current+0xf7c>)
 8010d10:	5cd3      	ldrb	r3, [r2, r3]
 8010d12:	3b30      	subs	r3, #48	; 0x30
 8010d14:	440b      	add	r3, r1
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	461a      	mov	r2, r3
 8010d1a:	0092      	lsls	r2, r2, #2
 8010d1c:	4413      	add	r3, r2
 8010d1e:	005b      	lsls	r3, r3, #1
 8010d20:	82fb      	strh	r3, [r7, #22]
 8010d22:	e052      	b.n	8010dca <ce303_current+0xe62>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8010d24:	8a3b      	ldrh	r3, [r7, #16]
 8010d26:	3308      	adds	r3, #8
 8010d28:	4a6e      	ldr	r2, [pc, #440]	; (8010ee4 <ce303_current+0xf7c>)
 8010d2a:	5cd3      	ldrb	r3, [r2, r3]
 8010d2c:	2b29      	cmp	r3, #41	; 0x29
 8010d2e:	d126      	bne.n	8010d7e <ce303_current+0xe16>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8010d30:	8a3b      	ldrh	r3, [r7, #16]
 8010d32:	3305      	adds	r3, #5
 8010d34:	4a6b      	ldr	r2, [pc, #428]	; (8010ee4 <ce303_current+0xf7c>)
 8010d36:	5cd3      	ldrb	r3, [r2, r3]
 8010d38:	3b30      	subs	r3, #48	; 0x30
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	0092      	lsls	r2, r2, #2
 8010d40:	4413      	add	r3, r2
 8010d42:	461a      	mov	r2, r3
 8010d44:	0091      	lsls	r1, r2, #2
 8010d46:	461a      	mov	r2, r3
 8010d48:	460b      	mov	r3, r1
 8010d4a:	4413      	add	r3, r2
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	8a3b      	ldrh	r3, [r7, #16]
 8010d52:	3306      	adds	r3, #6
 8010d54:	4963      	ldr	r1, [pc, #396]	; (8010ee4 <ce303_current+0xf7c>)
 8010d56:	5ccb      	ldrb	r3, [r1, r3]
 8010d58:	3b30      	subs	r3, #48	; 0x30
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	4619      	mov	r1, r3
 8010d5e:	0089      	lsls	r1, r1, #2
 8010d60:	440b      	add	r3, r1
 8010d62:	005b      	lsls	r3, r3, #1
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	4413      	add	r3, r2
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	8a3b      	ldrh	r3, [r7, #16]
 8010d6c:	3307      	adds	r3, #7
 8010d6e:	495d      	ldr	r1, [pc, #372]	; (8010ee4 <ce303_current+0xf7c>)
 8010d70:	5ccb      	ldrb	r3, [r1, r3]
 8010d72:	b29b      	uxth	r3, r3
 8010d74:	4413      	add	r3, r2
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	3b30      	subs	r3, #48	; 0x30
 8010d7a:	82fb      	strh	r3, [r7, #22]
 8010d7c:	e025      	b.n	8010dca <ce303_current+0xe62>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8010d7e:	8a3b      	ldrh	r3, [r7, #16]
 8010d80:	3305      	adds	r3, #5
 8010d82:	4a58      	ldr	r2, [pc, #352]	; (8010ee4 <ce303_current+0xf7c>)
 8010d84:	5cd3      	ldrb	r3, [r2, r3]
 8010d86:	3b30      	subs	r3, #48	; 0x30
 8010d88:	b29b      	uxth	r3, r3
 8010d8a:	461a      	mov	r2, r3
 8010d8c:	0092      	lsls	r2, r2, #2
 8010d8e:	4413      	add	r3, r2
 8010d90:	461a      	mov	r2, r3
 8010d92:	0091      	lsls	r1, r2, #2
 8010d94:	461a      	mov	r2, r3
 8010d96:	460b      	mov	r3, r1
 8010d98:	4413      	add	r3, r2
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	b29a      	uxth	r2, r3
 8010d9e:	8a3b      	ldrh	r3, [r7, #16]
 8010da0:	3306      	adds	r3, #6
 8010da2:	4950      	ldr	r1, [pc, #320]	; (8010ee4 <ce303_current+0xf7c>)
 8010da4:	5ccb      	ldrb	r3, [r1, r3]
 8010da6:	3b30      	subs	r3, #48	; 0x30
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	4619      	mov	r1, r3
 8010dac:	0089      	lsls	r1, r1, #2
 8010dae:	440b      	add	r3, r1
 8010db0:	005b      	lsls	r3, r3, #1
 8010db2:	b29b      	uxth	r3, r3
 8010db4:	4413      	add	r3, r2
 8010db6:	b29a      	uxth	r2, r3
 8010db8:	8a3b      	ldrh	r3, [r7, #16]
 8010dba:	3307      	adds	r3, #7
 8010dbc:	4949      	ldr	r1, [pc, #292]	; (8010ee4 <ce303_current+0xf7c>)
 8010dbe:	5ccb      	ldrb	r3, [r1, r3]
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	4413      	add	r3, r2
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	3b30      	subs	r3, #48	; 0x30
 8010dc8:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8010dca:	4b47      	ldr	r3, [pc, #284]	; (8010ee8 <ce303_current+0xf80>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	f04f 31ff 	mov.w	r1, #4294967295
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7f5 ffb0 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8010dd8:	89fb      	ldrh	r3, [r7, #14]
 8010dda:	0a1b      	lsrs	r3, r3, #8
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	4619      	mov	r1, r3
 8010de2:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8010de6:	f004 fd3b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8010dea:	89fb      	ldrh	r3, [r7, #14]
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	4619      	mov	r1, r3
 8010df0:	f242 0041 	movw	r0, #8257	; 0x2041
 8010df4:	f004 fd34 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8010df8:	8afb      	ldrh	r3, [r7, #22]
 8010dfa:	0a1b      	lsrs	r3, r3, #8
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	4619      	mov	r1, r3
 8010e02:	f242 0046 	movw	r0, #8262	; 0x2046
 8010e06:	f004 fd2b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8010e0a:	8afb      	ldrh	r3, [r7, #22]
 8010e0c:	b2db      	uxtb	r3, r3
 8010e0e:	4619      	mov	r1, r3
 8010e10:	f242 0047 	movw	r0, #8263	; 0x2047
 8010e14:	f004 fd24 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8010e18:	4b33      	ldr	r3, [pc, #204]	; (8010ee8 <ce303_current+0xf80>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7f5 ffd9 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 8010e22:	4a32      	ldr	r2, [pc, #200]	; (8010eec <ce303_current+0xf84>)
 8010e24:	89fb      	ldrh	r3, [r7, #14]
 8010e26:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg = temp_mil;
 8010e2a:	4a30      	ldr	r2, [pc, #192]	; (8010eec <ce303_current+0xf84>)
 8010e2c:	8afb      	ldrh	r3, [r7, #22]
 8010e2e:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 8010e32:	2301      	movs	r3, #1
 8010e34:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8010e36:	e2b3      	b.n	80113a0 <ce303_current+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (current_a_state==1) && (current_b_state==1) && (current_c_state==0) )
 8010e38:	8a3b      	ldrh	r3, [r7, #16]
 8010e3a:	4a2a      	ldr	r2, [pc, #168]	; (8010ee4 <ce303_current+0xf7c>)
 8010e3c:	5cd3      	ldrb	r3, [r2, r3]
 8010e3e:	2b28      	cmp	r3, #40	; 0x28
 8010e40:	f040 82af 	bne.w	80113a2 <ce303_current+0x143a>
 8010e44:	7d7b      	ldrb	r3, [r7, #21]
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	f040 82ab 	bne.w	80113a2 <ce303_current+0x143a>
 8010e4c:	7d3b      	ldrb	r3, [r7, #20]
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	f040 82a7 	bne.w	80113a2 <ce303_current+0x143a>
 8010e54:	7cfb      	ldrb	r3, [r7, #19]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f040 82a3 	bne.w	80113a2 <ce303_current+0x143a>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8010e5c:	8a3b      	ldrh	r3, [r7, #16]
 8010e5e:	3302      	adds	r3, #2
 8010e60:	4a20      	ldr	r2, [pc, #128]	; (8010ee4 <ce303_current+0xf7c>)
 8010e62:	5cd3      	ldrb	r3, [r2, r3]
 8010e64:	2b2e      	cmp	r3, #46	; 0x2e
 8010e66:	f040 80cd 	bne.w	8011004 <ce303_current+0x109c>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8010e6a:	8a3b      	ldrh	r3, [r7, #16]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	4a1d      	ldr	r2, [pc, #116]	; (8010ee4 <ce303_current+0xf7c>)
 8010e70:	5cd3      	ldrb	r3, [r2, r3]
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	3b30      	subs	r3, #48	; 0x30
 8010e76:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8010e78:	8a3b      	ldrh	r3, [r7, #16]
 8010e7a:	3304      	adds	r3, #4
 8010e7c:	4a19      	ldr	r2, [pc, #100]	; (8010ee4 <ce303_current+0xf7c>)
 8010e7e:	5cd3      	ldrb	r3, [r2, r3]
 8010e80:	2b29      	cmp	r3, #41	; 0x29
 8010e82:	d110      	bne.n	8010ea6 <ce303_current+0xf3e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8010e84:	8a3b      	ldrh	r3, [r7, #16]
 8010e86:	3303      	adds	r3, #3
 8010e88:	4a16      	ldr	r2, [pc, #88]	; (8010ee4 <ce303_current+0xf7c>)
 8010e8a:	5cd3      	ldrb	r3, [r2, r3]
 8010e8c:	3b30      	subs	r3, #48	; 0x30
 8010e8e:	b29b      	uxth	r3, r3
 8010e90:	461a      	mov	r2, r3
 8010e92:	0092      	lsls	r2, r2, #2
 8010e94:	4413      	add	r3, r2
 8010e96:	461a      	mov	r2, r3
 8010e98:	0091      	lsls	r1, r2, #2
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	4413      	add	r3, r2
 8010ea0:	009b      	lsls	r3, r3, #2
 8010ea2:	82fb      	strh	r3, [r7, #22]
 8010ea4:	e077      	b.n	8010f96 <ce303_current+0x102e>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8010ea6:	8a3b      	ldrh	r3, [r7, #16]
 8010ea8:	3305      	adds	r3, #5
 8010eaa:	4a0e      	ldr	r2, [pc, #56]	; (8010ee4 <ce303_current+0xf7c>)
 8010eac:	5cd3      	ldrb	r3, [r2, r3]
 8010eae:	2b29      	cmp	r3, #41	; 0x29
 8010eb0:	d11e      	bne.n	8010ef0 <ce303_current+0xf88>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8010eb2:	8a3b      	ldrh	r3, [r7, #16]
 8010eb4:	3303      	adds	r3, #3
 8010eb6:	4a0b      	ldr	r2, [pc, #44]	; (8010ee4 <ce303_current+0xf7c>)
 8010eb8:	5cd3      	ldrb	r3, [r2, r3]
 8010eba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	4413      	add	r3, r2
 8010ec4:	005b      	lsls	r3, r3, #1
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	8a3b      	ldrh	r3, [r7, #16]
 8010eca:	3304      	adds	r3, #4
 8010ecc:	4a05      	ldr	r2, [pc, #20]	; (8010ee4 <ce303_current+0xf7c>)
 8010ece:	5cd3      	ldrb	r3, [r2, r3]
 8010ed0:	3b30      	subs	r3, #48	; 0x30
 8010ed2:	440b      	add	r3, r1
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	0092      	lsls	r2, r2, #2
 8010eda:	4413      	add	r3, r2
 8010edc:	005b      	lsls	r3, r3, #1
 8010ede:	82fb      	strh	r3, [r7, #22]
 8010ee0:	e059      	b.n	8010f96 <ce303_current+0x102e>
 8010ee2:	bf00      	nop
 8010ee4:	200098e4 	.word	0x200098e4
 8010ee8:	20009a6c 	.word	0x20009a6c
 8010eec:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8010ef0:	8a3b      	ldrh	r3, [r7, #16]
 8010ef2:	3306      	adds	r3, #6
 8010ef4:	4ab0      	ldr	r2, [pc, #704]	; (80111b8 <ce303_current+0x1250>)
 8010ef6:	5cd3      	ldrb	r3, [r2, r3]
 8010ef8:	2b29      	cmp	r3, #41	; 0x29
 8010efa:	d126      	bne.n	8010f4a <ce303_current+0xfe2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8010efc:	8a3b      	ldrh	r3, [r7, #16]
 8010efe:	3303      	adds	r3, #3
 8010f00:	4aad      	ldr	r2, [pc, #692]	; (80111b8 <ce303_current+0x1250>)
 8010f02:	5cd3      	ldrb	r3, [r2, r3]
 8010f04:	3b30      	subs	r3, #48	; 0x30
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	461a      	mov	r2, r3
 8010f0a:	0092      	lsls	r2, r2, #2
 8010f0c:	4413      	add	r3, r2
 8010f0e:	461a      	mov	r2, r3
 8010f10:	0091      	lsls	r1, r2, #2
 8010f12:	461a      	mov	r2, r3
 8010f14:	460b      	mov	r3, r1
 8010f16:	4413      	add	r3, r2
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	8a3b      	ldrh	r3, [r7, #16]
 8010f1e:	3304      	adds	r3, #4
 8010f20:	49a5      	ldr	r1, [pc, #660]	; (80111b8 <ce303_current+0x1250>)
 8010f22:	5ccb      	ldrb	r3, [r1, r3]
 8010f24:	3b30      	subs	r3, #48	; 0x30
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	4619      	mov	r1, r3
 8010f2a:	0089      	lsls	r1, r1, #2
 8010f2c:	440b      	add	r3, r1
 8010f2e:	005b      	lsls	r3, r3, #1
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	4413      	add	r3, r2
 8010f34:	b29a      	uxth	r2, r3
 8010f36:	8a3b      	ldrh	r3, [r7, #16]
 8010f38:	3305      	adds	r3, #5
 8010f3a:	499f      	ldr	r1, [pc, #636]	; (80111b8 <ce303_current+0x1250>)
 8010f3c:	5ccb      	ldrb	r3, [r1, r3]
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	4413      	add	r3, r2
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	3b30      	subs	r3, #48	; 0x30
 8010f46:	82fb      	strh	r3, [r7, #22]
 8010f48:	e025      	b.n	8010f96 <ce303_current+0x102e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8010f4a:	8a3b      	ldrh	r3, [r7, #16]
 8010f4c:	3303      	adds	r3, #3
 8010f4e:	4a9a      	ldr	r2, [pc, #616]	; (80111b8 <ce303_current+0x1250>)
 8010f50:	5cd3      	ldrb	r3, [r2, r3]
 8010f52:	3b30      	subs	r3, #48	; 0x30
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	461a      	mov	r2, r3
 8010f58:	0092      	lsls	r2, r2, #2
 8010f5a:	4413      	add	r3, r2
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	0091      	lsls	r1, r2, #2
 8010f60:	461a      	mov	r2, r3
 8010f62:	460b      	mov	r3, r1
 8010f64:	4413      	add	r3, r2
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	8a3b      	ldrh	r3, [r7, #16]
 8010f6c:	3304      	adds	r3, #4
 8010f6e:	4992      	ldr	r1, [pc, #584]	; (80111b8 <ce303_current+0x1250>)
 8010f70:	5ccb      	ldrb	r3, [r1, r3]
 8010f72:	3b30      	subs	r3, #48	; 0x30
 8010f74:	b29b      	uxth	r3, r3
 8010f76:	4619      	mov	r1, r3
 8010f78:	0089      	lsls	r1, r1, #2
 8010f7a:	440b      	add	r3, r1
 8010f7c:	005b      	lsls	r3, r3, #1
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	4413      	add	r3, r2
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	8a3b      	ldrh	r3, [r7, #16]
 8010f86:	3305      	adds	r3, #5
 8010f88:	498b      	ldr	r1, [pc, #556]	; (80111b8 <ce303_current+0x1250>)
 8010f8a:	5ccb      	ldrb	r3, [r1, r3]
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	4413      	add	r3, r2
 8010f90:	b29b      	uxth	r3, r3
 8010f92:	3b30      	subs	r3, #48	; 0x30
 8010f94:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8010f96:	4b89      	ldr	r3, [pc, #548]	; (80111bc <ce303_current+0x1254>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7f5 feca 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 8010fa4:	89fb      	ldrh	r3, [r7, #14]
 8010fa6:	0a1b      	lsrs	r3, r3, #8
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	4619      	mov	r1, r3
 8010fae:	f242 0042 	movw	r0, #8258	; 0x2042
 8010fb2:	f004 fc55 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8010fb6:	89fb      	ldrh	r3, [r7, #14]
 8010fb8:	b2db      	uxtb	r3, r3
 8010fba:	4619      	mov	r1, r3
 8010fbc:	f242 0043 	movw	r0, #8259	; 0x2043
 8010fc0:	f004 fc4e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8010fc4:	8afb      	ldrh	r3, [r7, #22]
 8010fc6:	0a1b      	lsrs	r3, r3, #8
 8010fc8:	b29b      	uxth	r3, r3
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	4619      	mov	r1, r3
 8010fce:	f242 0048 	movw	r0, #8264	; 0x2048
 8010fd2:	f004 fc45 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8010fd6:	8afb      	ldrh	r3, [r7, #22]
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	4619      	mov	r1, r3
 8010fdc:	f242 0049 	movw	r0, #8265	; 0x2049
 8010fe0:	f004 fc3e 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8010fe4:	4b75      	ldr	r3, [pc, #468]	; (80111bc <ce303_current+0x1254>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7f5 fef3 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 8010fee:	4a74      	ldr	r2, [pc, #464]	; (80111c0 <ce303_current+0x1258>)
 8010ff0:	89fb      	ldrh	r3, [r7, #14]
 8010ff2:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 8010ff6:	4a72      	ldr	r2, [pc, #456]	; (80111c0 <ce303_current+0x1258>)
 8010ff8:	8afb      	ldrh	r3, [r7, #22]
 8010ffa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 8010ffe:	2301      	movs	r3, #1
 8011000:	74fb      	strb	r3, [r7, #19]
 8011002:	e1ce      	b.n	80113a2 <ce303_current+0x143a>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8011004:	8a3b      	ldrh	r3, [r7, #16]
 8011006:	3303      	adds	r3, #3
 8011008:	4a6b      	ldr	r2, [pc, #428]	; (80111b8 <ce303_current+0x1250>)
 801100a:	5cd3      	ldrb	r3, [r2, r3]
 801100c:	2b2e      	cmp	r3, #46	; 0x2e
 801100e:	f040 80d9 	bne.w	80111c4 <ce303_current+0x125c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8011012:	8a3b      	ldrh	r3, [r7, #16]
 8011014:	3301      	adds	r3, #1
 8011016:	4a68      	ldr	r2, [pc, #416]	; (80111b8 <ce303_current+0x1250>)
 8011018:	5cd3      	ldrb	r3, [r2, r3]
 801101a:	3b30      	subs	r3, #48	; 0x30
 801101c:	b29b      	uxth	r3, r3
 801101e:	461a      	mov	r2, r3
 8011020:	0092      	lsls	r2, r2, #2
 8011022:	4413      	add	r3, r2
 8011024:	005b      	lsls	r3, r3, #1
 8011026:	b29a      	uxth	r2, r3
 8011028:	8a3b      	ldrh	r3, [r7, #16]
 801102a:	3302      	adds	r3, #2
 801102c:	4962      	ldr	r1, [pc, #392]	; (80111b8 <ce303_current+0x1250>)
 801102e:	5ccb      	ldrb	r3, [r1, r3]
 8011030:	b29b      	uxth	r3, r3
 8011032:	4413      	add	r3, r2
 8011034:	b29b      	uxth	r3, r3
 8011036:	3b30      	subs	r3, #48	; 0x30
 8011038:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 801103a:	8a3b      	ldrh	r3, [r7, #16]
 801103c:	3305      	adds	r3, #5
 801103e:	4a5e      	ldr	r2, [pc, #376]	; (80111b8 <ce303_current+0x1250>)
 8011040:	5cd3      	ldrb	r3, [r2, r3]
 8011042:	2b29      	cmp	r3, #41	; 0x29
 8011044:	d110      	bne.n	8011068 <ce303_current+0x1100>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8011046:	8a3b      	ldrh	r3, [r7, #16]
 8011048:	3304      	adds	r3, #4
 801104a:	4a5b      	ldr	r2, [pc, #364]	; (80111b8 <ce303_current+0x1250>)
 801104c:	5cd3      	ldrb	r3, [r2, r3]
 801104e:	3b30      	subs	r3, #48	; 0x30
 8011050:	b29b      	uxth	r3, r3
 8011052:	461a      	mov	r2, r3
 8011054:	0092      	lsls	r2, r2, #2
 8011056:	4413      	add	r3, r2
 8011058:	461a      	mov	r2, r3
 801105a:	0091      	lsls	r1, r2, #2
 801105c:	461a      	mov	r2, r3
 801105e:	460b      	mov	r3, r1
 8011060:	4413      	add	r3, r2
 8011062:	009b      	lsls	r3, r3, #2
 8011064:	82fb      	strh	r3, [r7, #22]
 8011066:	e070      	b.n	801114a <ce303_current+0x11e2>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8011068:	8a3b      	ldrh	r3, [r7, #16]
 801106a:	3306      	adds	r3, #6
 801106c:	4a52      	ldr	r2, [pc, #328]	; (80111b8 <ce303_current+0x1250>)
 801106e:	5cd3      	ldrb	r3, [r2, r3]
 8011070:	2b29      	cmp	r3, #41	; 0x29
 8011072:	d117      	bne.n	80110a4 <ce303_current+0x113c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8011074:	8a3b      	ldrh	r3, [r7, #16]
 8011076:	3304      	adds	r3, #4
 8011078:	4a4f      	ldr	r2, [pc, #316]	; (80111b8 <ce303_current+0x1250>)
 801107a:	5cd3      	ldrb	r3, [r2, r3]
 801107c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011080:	4613      	mov	r3, r2
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	4413      	add	r3, r2
 8011086:	005b      	lsls	r3, r3, #1
 8011088:	4619      	mov	r1, r3
 801108a:	8a3b      	ldrh	r3, [r7, #16]
 801108c:	3305      	adds	r3, #5
 801108e:	4a4a      	ldr	r2, [pc, #296]	; (80111b8 <ce303_current+0x1250>)
 8011090:	5cd3      	ldrb	r3, [r2, r3]
 8011092:	3b30      	subs	r3, #48	; 0x30
 8011094:	440b      	add	r3, r1
 8011096:	b29b      	uxth	r3, r3
 8011098:	461a      	mov	r2, r3
 801109a:	0092      	lsls	r2, r2, #2
 801109c:	4413      	add	r3, r2
 801109e:	005b      	lsls	r3, r3, #1
 80110a0:	82fb      	strh	r3, [r7, #22]
 80110a2:	e052      	b.n	801114a <ce303_current+0x11e2>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80110a4:	8a3b      	ldrh	r3, [r7, #16]
 80110a6:	3307      	adds	r3, #7
 80110a8:	4a43      	ldr	r2, [pc, #268]	; (80111b8 <ce303_current+0x1250>)
 80110aa:	5cd3      	ldrb	r3, [r2, r3]
 80110ac:	2b29      	cmp	r3, #41	; 0x29
 80110ae:	d126      	bne.n	80110fe <ce303_current+0x1196>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80110b0:	8a3b      	ldrh	r3, [r7, #16]
 80110b2:	3304      	adds	r3, #4
 80110b4:	4a40      	ldr	r2, [pc, #256]	; (80111b8 <ce303_current+0x1250>)
 80110b6:	5cd3      	ldrb	r3, [r2, r3]
 80110b8:	3b30      	subs	r3, #48	; 0x30
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	461a      	mov	r2, r3
 80110be:	0092      	lsls	r2, r2, #2
 80110c0:	4413      	add	r3, r2
 80110c2:	461a      	mov	r2, r3
 80110c4:	0091      	lsls	r1, r2, #2
 80110c6:	461a      	mov	r2, r3
 80110c8:	460b      	mov	r3, r1
 80110ca:	4413      	add	r3, r2
 80110cc:	009b      	lsls	r3, r3, #2
 80110ce:	b29a      	uxth	r2, r3
 80110d0:	8a3b      	ldrh	r3, [r7, #16]
 80110d2:	3305      	adds	r3, #5
 80110d4:	4938      	ldr	r1, [pc, #224]	; (80111b8 <ce303_current+0x1250>)
 80110d6:	5ccb      	ldrb	r3, [r1, r3]
 80110d8:	3b30      	subs	r3, #48	; 0x30
 80110da:	b29b      	uxth	r3, r3
 80110dc:	4619      	mov	r1, r3
 80110de:	0089      	lsls	r1, r1, #2
 80110e0:	440b      	add	r3, r1
 80110e2:	005b      	lsls	r3, r3, #1
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	4413      	add	r3, r2
 80110e8:	b29a      	uxth	r2, r3
 80110ea:	8a3b      	ldrh	r3, [r7, #16]
 80110ec:	3306      	adds	r3, #6
 80110ee:	4932      	ldr	r1, [pc, #200]	; (80111b8 <ce303_current+0x1250>)
 80110f0:	5ccb      	ldrb	r3, [r1, r3]
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	4413      	add	r3, r2
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	3b30      	subs	r3, #48	; 0x30
 80110fa:	82fb      	strh	r3, [r7, #22]
 80110fc:	e025      	b.n	801114a <ce303_current+0x11e2>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80110fe:	8a3b      	ldrh	r3, [r7, #16]
 8011100:	3304      	adds	r3, #4
 8011102:	4a2d      	ldr	r2, [pc, #180]	; (80111b8 <ce303_current+0x1250>)
 8011104:	5cd3      	ldrb	r3, [r2, r3]
 8011106:	3b30      	subs	r3, #48	; 0x30
 8011108:	b29b      	uxth	r3, r3
 801110a:	461a      	mov	r2, r3
 801110c:	0092      	lsls	r2, r2, #2
 801110e:	4413      	add	r3, r2
 8011110:	461a      	mov	r2, r3
 8011112:	0091      	lsls	r1, r2, #2
 8011114:	461a      	mov	r2, r3
 8011116:	460b      	mov	r3, r1
 8011118:	4413      	add	r3, r2
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	b29a      	uxth	r2, r3
 801111e:	8a3b      	ldrh	r3, [r7, #16]
 8011120:	3305      	adds	r3, #5
 8011122:	4925      	ldr	r1, [pc, #148]	; (80111b8 <ce303_current+0x1250>)
 8011124:	5ccb      	ldrb	r3, [r1, r3]
 8011126:	3b30      	subs	r3, #48	; 0x30
 8011128:	b29b      	uxth	r3, r3
 801112a:	4619      	mov	r1, r3
 801112c:	0089      	lsls	r1, r1, #2
 801112e:	440b      	add	r3, r1
 8011130:	005b      	lsls	r3, r3, #1
 8011132:	b29b      	uxth	r3, r3
 8011134:	4413      	add	r3, r2
 8011136:	b29a      	uxth	r2, r3
 8011138:	8a3b      	ldrh	r3, [r7, #16]
 801113a:	3306      	adds	r3, #6
 801113c:	491e      	ldr	r1, [pc, #120]	; (80111b8 <ce303_current+0x1250>)
 801113e:	5ccb      	ldrb	r3, [r1, r3]
 8011140:	b29b      	uxth	r3, r3
 8011142:	4413      	add	r3, r2
 8011144:	b29b      	uxth	r3, r3
 8011146:	3b30      	subs	r3, #48	; 0x30
 8011148:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801114a:	4b1c      	ldr	r3, [pc, #112]	; (80111bc <ce303_current+0x1254>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f04f 31ff 	mov.w	r1, #4294967295
 8011152:	4618      	mov	r0, r3
 8011154:	f7f5 fdf0 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 8011158:	89fb      	ldrh	r3, [r7, #14]
 801115a:	0a1b      	lsrs	r3, r3, #8
 801115c:	b29b      	uxth	r3, r3
 801115e:	b2db      	uxtb	r3, r3
 8011160:	4619      	mov	r1, r3
 8011162:	f242 0042 	movw	r0, #8258	; 0x2042
 8011166:	f004 fb7b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 801116a:	89fb      	ldrh	r3, [r7, #14]
 801116c:	b2db      	uxtb	r3, r3
 801116e:	4619      	mov	r1, r3
 8011170:	f242 0043 	movw	r0, #8259	; 0x2043
 8011174:	f004 fb74 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8011178:	8afb      	ldrh	r3, [r7, #22]
 801117a:	0a1b      	lsrs	r3, r3, #8
 801117c:	b29b      	uxth	r3, r3
 801117e:	b2db      	uxtb	r3, r3
 8011180:	4619      	mov	r1, r3
 8011182:	f242 0048 	movw	r0, #8264	; 0x2048
 8011186:	f004 fb6b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801118a:	8afb      	ldrh	r3, [r7, #22]
 801118c:	b2db      	uxtb	r3, r3
 801118e:	4619      	mov	r1, r3
 8011190:	f242 0049 	movw	r0, #8265	; 0x2049
 8011194:	f004 fb64 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8011198:	4b08      	ldr	r3, [pc, #32]	; (80111bc <ce303_current+0x1254>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	4618      	mov	r0, r3
 801119e:	f7f5 fe19 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 80111a2:	4a07      	ldr	r2, [pc, #28]	; (80111c0 <ce303_current+0x1258>)
 80111a4:	89fb      	ldrh	r3, [r7, #14]
 80111a6:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 80111aa:	4a05      	ldr	r2, [pc, #20]	; (80111c0 <ce303_current+0x1258>)
 80111ac:	8afb      	ldrh	r3, [r7, #22]
 80111ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 80111b2:	2301      	movs	r3, #1
 80111b4:	74fb      	strb	r3, [r7, #19]
 80111b6:	e0f4      	b.n	80113a2 <ce303_current+0x143a>
 80111b8:	200098e4 	.word	0x200098e4
 80111bc:	20009a6c 	.word	0x20009a6c
 80111c0:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 80111c4:	8a3b      	ldrh	r3, [r7, #16]
 80111c6:	3304      	adds	r3, #4
 80111c8:	4a85      	ldr	r2, [pc, #532]	; (80113e0 <ce303_current+0x1478>)
 80111ca:	5cd3      	ldrb	r3, [r2, r3]
 80111cc:	2b2e      	cmp	r3, #46	; 0x2e
 80111ce:	f040 80e8 	bne.w	80113a2 <ce303_current+0x143a>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80111d2:	8a3b      	ldrh	r3, [r7, #16]
 80111d4:	3301      	adds	r3, #1
 80111d6:	4a82      	ldr	r2, [pc, #520]	; (80113e0 <ce303_current+0x1478>)
 80111d8:	5cd3      	ldrb	r3, [r2, r3]
 80111da:	3b30      	subs	r3, #48	; 0x30
 80111dc:	b29b      	uxth	r3, r3
 80111de:	461a      	mov	r2, r3
 80111e0:	0092      	lsls	r2, r2, #2
 80111e2:	4413      	add	r3, r2
 80111e4:	461a      	mov	r2, r3
 80111e6:	0091      	lsls	r1, r2, #2
 80111e8:	461a      	mov	r2, r3
 80111ea:	460b      	mov	r3, r1
 80111ec:	4413      	add	r3, r2
 80111ee:	009b      	lsls	r3, r3, #2
 80111f0:	b29a      	uxth	r2, r3
 80111f2:	8a3b      	ldrh	r3, [r7, #16]
 80111f4:	3302      	adds	r3, #2
 80111f6:	497a      	ldr	r1, [pc, #488]	; (80113e0 <ce303_current+0x1478>)
 80111f8:	5ccb      	ldrb	r3, [r1, r3]
 80111fa:	3b30      	subs	r3, #48	; 0x30
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	4619      	mov	r1, r3
 8011200:	0089      	lsls	r1, r1, #2
 8011202:	440b      	add	r3, r1
 8011204:	005b      	lsls	r3, r3, #1
 8011206:	b29b      	uxth	r3, r3
 8011208:	4413      	add	r3, r2
 801120a:	b29a      	uxth	r2, r3
 801120c:	8a3b      	ldrh	r3, [r7, #16]
 801120e:	3303      	adds	r3, #3
 8011210:	4973      	ldr	r1, [pc, #460]	; (80113e0 <ce303_current+0x1478>)
 8011212:	5ccb      	ldrb	r3, [r1, r3]
 8011214:	b29b      	uxth	r3, r3
 8011216:	4413      	add	r3, r2
 8011218:	b29b      	uxth	r3, r3
 801121a:	3b30      	subs	r3, #48	; 0x30
 801121c:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 801121e:	8a3b      	ldrh	r3, [r7, #16]
 8011220:	3306      	adds	r3, #6
 8011222:	4a6f      	ldr	r2, [pc, #444]	; (80113e0 <ce303_current+0x1478>)
 8011224:	5cd3      	ldrb	r3, [r2, r3]
 8011226:	2b29      	cmp	r3, #41	; 0x29
 8011228:	d110      	bne.n	801124c <ce303_current+0x12e4>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801122a:	8a3b      	ldrh	r3, [r7, #16]
 801122c:	3305      	adds	r3, #5
 801122e:	4a6c      	ldr	r2, [pc, #432]	; (80113e0 <ce303_current+0x1478>)
 8011230:	5cd3      	ldrb	r3, [r2, r3]
 8011232:	3b30      	subs	r3, #48	; 0x30
 8011234:	b29b      	uxth	r3, r3
 8011236:	461a      	mov	r2, r3
 8011238:	0092      	lsls	r2, r2, #2
 801123a:	4413      	add	r3, r2
 801123c:	461a      	mov	r2, r3
 801123e:	0091      	lsls	r1, r2, #2
 8011240:	461a      	mov	r2, r3
 8011242:	460b      	mov	r3, r1
 8011244:	4413      	add	r3, r2
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	82fb      	strh	r3, [r7, #22]
 801124a:	e070      	b.n	801132e <ce303_current+0x13c6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 801124c:	8a3b      	ldrh	r3, [r7, #16]
 801124e:	3307      	adds	r3, #7
 8011250:	4a63      	ldr	r2, [pc, #396]	; (80113e0 <ce303_current+0x1478>)
 8011252:	5cd3      	ldrb	r3, [r2, r3]
 8011254:	2b29      	cmp	r3, #41	; 0x29
 8011256:	d117      	bne.n	8011288 <ce303_current+0x1320>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8011258:	8a3b      	ldrh	r3, [r7, #16]
 801125a:	3305      	adds	r3, #5
 801125c:	4a60      	ldr	r2, [pc, #384]	; (80113e0 <ce303_current+0x1478>)
 801125e:	5cd3      	ldrb	r3, [r2, r3]
 8011260:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011264:	4613      	mov	r3, r2
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	4413      	add	r3, r2
 801126a:	005b      	lsls	r3, r3, #1
 801126c:	4619      	mov	r1, r3
 801126e:	8a3b      	ldrh	r3, [r7, #16]
 8011270:	3306      	adds	r3, #6
 8011272:	4a5b      	ldr	r2, [pc, #364]	; (80113e0 <ce303_current+0x1478>)
 8011274:	5cd3      	ldrb	r3, [r2, r3]
 8011276:	3b30      	subs	r3, #48	; 0x30
 8011278:	440b      	add	r3, r1
 801127a:	b29b      	uxth	r3, r3
 801127c:	461a      	mov	r2, r3
 801127e:	0092      	lsls	r2, r2, #2
 8011280:	4413      	add	r3, r2
 8011282:	005b      	lsls	r3, r3, #1
 8011284:	82fb      	strh	r3, [r7, #22]
 8011286:	e052      	b.n	801132e <ce303_current+0x13c6>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8011288:	8a3b      	ldrh	r3, [r7, #16]
 801128a:	3308      	adds	r3, #8
 801128c:	4a54      	ldr	r2, [pc, #336]	; (80113e0 <ce303_current+0x1478>)
 801128e:	5cd3      	ldrb	r3, [r2, r3]
 8011290:	2b29      	cmp	r3, #41	; 0x29
 8011292:	d126      	bne.n	80112e2 <ce303_current+0x137a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8011294:	8a3b      	ldrh	r3, [r7, #16]
 8011296:	3305      	adds	r3, #5
 8011298:	4a51      	ldr	r2, [pc, #324]	; (80113e0 <ce303_current+0x1478>)
 801129a:	5cd3      	ldrb	r3, [r2, r3]
 801129c:	3b30      	subs	r3, #48	; 0x30
 801129e:	b29b      	uxth	r3, r3
 80112a0:	461a      	mov	r2, r3
 80112a2:	0092      	lsls	r2, r2, #2
 80112a4:	4413      	add	r3, r2
 80112a6:	461a      	mov	r2, r3
 80112a8:	0091      	lsls	r1, r2, #2
 80112aa:	461a      	mov	r2, r3
 80112ac:	460b      	mov	r3, r1
 80112ae:	4413      	add	r3, r2
 80112b0:	009b      	lsls	r3, r3, #2
 80112b2:	b29a      	uxth	r2, r3
 80112b4:	8a3b      	ldrh	r3, [r7, #16]
 80112b6:	3306      	adds	r3, #6
 80112b8:	4949      	ldr	r1, [pc, #292]	; (80113e0 <ce303_current+0x1478>)
 80112ba:	5ccb      	ldrb	r3, [r1, r3]
 80112bc:	3b30      	subs	r3, #48	; 0x30
 80112be:	b29b      	uxth	r3, r3
 80112c0:	4619      	mov	r1, r3
 80112c2:	0089      	lsls	r1, r1, #2
 80112c4:	440b      	add	r3, r1
 80112c6:	005b      	lsls	r3, r3, #1
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	4413      	add	r3, r2
 80112cc:	b29a      	uxth	r2, r3
 80112ce:	8a3b      	ldrh	r3, [r7, #16]
 80112d0:	3307      	adds	r3, #7
 80112d2:	4943      	ldr	r1, [pc, #268]	; (80113e0 <ce303_current+0x1478>)
 80112d4:	5ccb      	ldrb	r3, [r1, r3]
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	4413      	add	r3, r2
 80112da:	b29b      	uxth	r3, r3
 80112dc:	3b30      	subs	r3, #48	; 0x30
 80112de:	82fb      	strh	r3, [r7, #22]
 80112e0:	e025      	b.n	801132e <ce303_current+0x13c6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80112e2:	8a3b      	ldrh	r3, [r7, #16]
 80112e4:	3305      	adds	r3, #5
 80112e6:	4a3e      	ldr	r2, [pc, #248]	; (80113e0 <ce303_current+0x1478>)
 80112e8:	5cd3      	ldrb	r3, [r2, r3]
 80112ea:	3b30      	subs	r3, #48	; 0x30
 80112ec:	b29b      	uxth	r3, r3
 80112ee:	461a      	mov	r2, r3
 80112f0:	0092      	lsls	r2, r2, #2
 80112f2:	4413      	add	r3, r2
 80112f4:	461a      	mov	r2, r3
 80112f6:	0091      	lsls	r1, r2, #2
 80112f8:	461a      	mov	r2, r3
 80112fa:	460b      	mov	r3, r1
 80112fc:	4413      	add	r3, r2
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	b29a      	uxth	r2, r3
 8011302:	8a3b      	ldrh	r3, [r7, #16]
 8011304:	3306      	adds	r3, #6
 8011306:	4936      	ldr	r1, [pc, #216]	; (80113e0 <ce303_current+0x1478>)
 8011308:	5ccb      	ldrb	r3, [r1, r3]
 801130a:	3b30      	subs	r3, #48	; 0x30
 801130c:	b29b      	uxth	r3, r3
 801130e:	4619      	mov	r1, r3
 8011310:	0089      	lsls	r1, r1, #2
 8011312:	440b      	add	r3, r1
 8011314:	005b      	lsls	r3, r3, #1
 8011316:	b29b      	uxth	r3, r3
 8011318:	4413      	add	r3, r2
 801131a:	b29a      	uxth	r2, r3
 801131c:	8a3b      	ldrh	r3, [r7, #16]
 801131e:	3307      	adds	r3, #7
 8011320:	492f      	ldr	r1, [pc, #188]	; (80113e0 <ce303_current+0x1478>)
 8011322:	5ccb      	ldrb	r3, [r1, r3]
 8011324:	b29b      	uxth	r3, r3
 8011326:	4413      	add	r3, r2
 8011328:	b29b      	uxth	r3, r3
 801132a:	3b30      	subs	r3, #48	; 0x30
 801132c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801132e:	4b2d      	ldr	r3, [pc, #180]	; (80113e4 <ce303_current+0x147c>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f04f 31ff 	mov.w	r1, #4294967295
 8011336:	4618      	mov	r0, r3
 8011338:	f7f5 fcfe 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 801133c:	89fb      	ldrh	r3, [r7, #14]
 801133e:	0a1b      	lsrs	r3, r3, #8
 8011340:	b29b      	uxth	r3, r3
 8011342:	b2db      	uxtb	r3, r3
 8011344:	4619      	mov	r1, r3
 8011346:	f242 0042 	movw	r0, #8258	; 0x2042
 801134a:	f004 fa89 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 801134e:	89fb      	ldrh	r3, [r7, #14]
 8011350:	b2db      	uxtb	r3, r3
 8011352:	4619      	mov	r1, r3
 8011354:	f242 0043 	movw	r0, #8259	; 0x2043
 8011358:	f004 fa82 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 801135c:	8afb      	ldrh	r3, [r7, #22]
 801135e:	0a1b      	lsrs	r3, r3, #8
 8011360:	b29b      	uxth	r3, r3
 8011362:	b2db      	uxtb	r3, r3
 8011364:	4619      	mov	r1, r3
 8011366:	f242 0048 	movw	r0, #8264	; 0x2048
 801136a:	f004 fa79 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801136e:	8afb      	ldrh	r3, [r7, #22]
 8011370:	b2db      	uxtb	r3, r3
 8011372:	4619      	mov	r1, r3
 8011374:	f242 0049 	movw	r0, #8265	; 0x2049
 8011378:	f004 fa72 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801137c:	4b19      	ldr	r3, [pc, #100]	; (80113e4 <ce303_current+0x147c>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4618      	mov	r0, r3
 8011382:	f7f5 fd27 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 8011386:	4a18      	ldr	r2, [pc, #96]	; (80113e8 <ce303_current+0x1480>)
 8011388:	89fb      	ldrh	r3, [r7, #14]
 801138a:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 801138e:	4a16      	ldr	r2, [pc, #88]	; (80113e8 <ce303_current+0x1480>)
 8011390:	8afb      	ldrh	r3, [r7, #22]
 8011392:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 8011396:	2301      	movs	r3, #1
 8011398:	74fb      	strb	r3, [r7, #19]
 801139a:	e002      	b.n	80113a2 <ce303_current+0x143a>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801139c:	bf00      	nop
 801139e:	e000      	b.n	80113a2 <ce303_current+0x143a>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80113a0:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 80113a2:	8a3b      	ldrh	r3, [r7, #16]
 80113a4:	3301      	adds	r3, #1
 80113a6:	823b      	strh	r3, [r7, #16]
 80113a8:	8a3b      	ldrh	r3, [r7, #16]
 80113aa:	2bff      	cmp	r3, #255	; 0xff
 80113ac:	f67e afd3 	bls.w	8010356 <ce303_current+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 80113b0:	4b0e      	ldr	r3, [pc, #56]	; (80113ec <ce303_current+0x1484>)
 80113b2:	2200      	movs	r2, #0
 80113b4:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80113b6:	f7fd fb71 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80113ba:	2201      	movs	r2, #1
 80113bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80113c0:	480b      	ldr	r0, [pc, #44]	; (80113f0 <ce303_current+0x1488>)
 80113c2:	f7f1 ff53 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 80113c6:	2205      	movs	r2, #5
 80113c8:	490a      	ldr	r1, [pc, #40]	; (80113f4 <ce303_current+0x148c>)
 80113ca:	480b      	ldr	r0, [pc, #44]	; (80113f8 <ce303_current+0x1490>)
 80113cc:	f7f4 fa06 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80113d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80113d4:	f7f0 fc96 	bl	8001d04 <HAL_Delay>

}
 80113d8:	bf00      	nop
 80113da:	3718      	adds	r7, #24
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	200098e4 	.word	0x200098e4
 80113e4:	20009a6c 	.word	0x20009a6c
 80113e8:	2000a10c 	.word	0x2000a10c
 80113ec:	2000085d 	.word	0x2000085d
 80113f0:	40021800 	.word	0x40021800
 80113f4:	20000030 	.word	0x20000030
 80113f8:	20009c70 	.word	0x20009c70

080113fc <ce303_power>:

void ce303_power (uint8_t meter_id)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b086      	sub	sp, #24
 8011400:	af00      	add	r7, sp, #0
 8011402:	4603      	mov	r3, r0
 8011404:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t power_a_state; // переменные состояния прочтения значений мощности ( если переменная равна 0, то значение мощности не прочитано, если 1 - значение прочитанно )
	uint8_t power_b_state;
	uint8_t power_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 8011406:	79fb      	ldrb	r3, [r7, #7]
 8011408:	2b63      	cmp	r3, #99	; 0x63
 801140a:	d962      	bls.n	80114d2 <ce303_power+0xd6>
	{
		start_buf[0] = 0x2F;
 801140c:	4b9d      	ldr	r3, [pc, #628]	; (8011684 <ce303_power+0x288>)
 801140e:	222f      	movs	r2, #47	; 0x2f
 8011410:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8011412:	4b9c      	ldr	r3, [pc, #624]	; (8011684 <ce303_power+0x288>)
 8011414:	223f      	movs	r2, #63	; 0x3f
 8011416:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8011418:	79fb      	ldrb	r3, [r7, #7]
 801141a:	4a9b      	ldr	r2, [pc, #620]	; (8011688 <ce303_power+0x28c>)
 801141c:	fba2 2303 	umull	r2, r3, r2, r3
 8011420:	095b      	lsrs	r3, r3, #5
 8011422:	b2db      	uxtb	r3, r3
 8011424:	3330      	adds	r3, #48	; 0x30
 8011426:	b2da      	uxtb	r2, r3
 8011428:	4b96      	ldr	r3, [pc, #600]	; (8011684 <ce303_power+0x288>)
 801142a:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 801142c:	79fa      	ldrb	r2, [r7, #7]
 801142e:	79fb      	ldrb	r3, [r7, #7]
 8011430:	4995      	ldr	r1, [pc, #596]	; (8011688 <ce303_power+0x28c>)
 8011432:	fba1 1303 	umull	r1, r3, r1, r3
 8011436:	095b      	lsrs	r3, r3, #5
 8011438:	b2db      	uxtb	r3, r3
 801143a:	4619      	mov	r1, r3
 801143c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8011440:	fb03 f301 	mul.w	r3, r3, r1
 8011444:	4413      	add	r3, r2
 8011446:	4a91      	ldr	r2, [pc, #580]	; (801168c <ce303_power+0x290>)
 8011448:	fb82 1203 	smull	r1, r2, r2, r3
 801144c:	1092      	asrs	r2, r2, #2
 801144e:	17db      	asrs	r3, r3, #31
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	b2db      	uxtb	r3, r3
 8011454:	3330      	adds	r3, #48	; 0x30
 8011456:	b2da      	uxtb	r2, r3
 8011458:	4b8a      	ldr	r3, [pc, #552]	; (8011684 <ce303_power+0x288>)
 801145a:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801145c:	79fa      	ldrb	r2, [r7, #7]
 801145e:	79fb      	ldrb	r3, [r7, #7]
 8011460:	4989      	ldr	r1, [pc, #548]	; (8011688 <ce303_power+0x28c>)
 8011462:	fba1 1303 	umull	r1, r3, r1, r3
 8011466:	095b      	lsrs	r3, r3, #5
 8011468:	b2db      	uxtb	r3, r3
 801146a:	4619      	mov	r1, r3
 801146c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8011470:	fb03 f301 	mul.w	r3, r3, r1
 8011474:	441a      	add	r2, r3
 8011476:	4b85      	ldr	r3, [pc, #532]	; (801168c <ce303_power+0x290>)
 8011478:	fb83 1302 	smull	r1, r3, r3, r2
 801147c:	1099      	asrs	r1, r3, #2
 801147e:	17d3      	asrs	r3, r2, #31
 8011480:	1ac9      	subs	r1, r1, r3
 8011482:	460b      	mov	r3, r1
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	440b      	add	r3, r1
 8011488:	005b      	lsls	r3, r3, #1
 801148a:	1ad1      	subs	r1, r2, r3
 801148c:	b2cb      	uxtb	r3, r1
 801148e:	3330      	adds	r3, #48	; 0x30
 8011490:	b2da      	uxtb	r2, r3
 8011492:	4b7c      	ldr	r3, [pc, #496]	; (8011684 <ce303_power+0x288>)
 8011494:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8011496:	4b7b      	ldr	r3, [pc, #492]	; (8011684 <ce303_power+0x288>)
 8011498:	2221      	movs	r2, #33	; 0x21
 801149a:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 801149c:	4b79      	ldr	r3, [pc, #484]	; (8011684 <ce303_power+0x288>)
 801149e:	220d      	movs	r2, #13
 80114a0:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 80114a2:	4b78      	ldr	r3, [pc, #480]	; (8011684 <ce303_power+0x288>)
 80114a4:	220a      	movs	r2, #10
 80114a6:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 80114a8:	4b79      	ldr	r3, [pc, #484]	; (8011690 <ce303_power+0x294>)
 80114aa:	2200      	movs	r2, #0
 80114ac:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80114ae:	f7fd faf5 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80114b2:	2201      	movs	r2, #1
 80114b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80114b8:	4876      	ldr	r0, [pc, #472]	; (8011694 <ce303_power+0x298>)
 80114ba:	f7f1 fed7 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 80114be:	2208      	movs	r2, #8
 80114c0:	4970      	ldr	r1, [pc, #448]	; (8011684 <ce303_power+0x288>)
 80114c2:	4875      	ldr	r0, [pc, #468]	; (8011698 <ce303_power+0x29c>)
 80114c4:	f7f4 f98a 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80114c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80114cc:	f7f0 fc1a 	bl	8001d04 <HAL_Delay>
 80114d0:	e072      	b.n	80115b8 <ce303_power+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 80114d2:	79fb      	ldrb	r3, [r7, #7]
 80114d4:	2b09      	cmp	r3, #9
 80114d6:	d944      	bls.n	8011562 <ce303_power+0x166>
 80114d8:	79fb      	ldrb	r3, [r7, #7]
 80114da:	2b63      	cmp	r3, #99	; 0x63
 80114dc:	d841      	bhi.n	8011562 <ce303_power+0x166>
	{
		start_buf[0] = 0x2F;
 80114de:	4b69      	ldr	r3, [pc, #420]	; (8011684 <ce303_power+0x288>)
 80114e0:	222f      	movs	r2, #47	; 0x2f
 80114e2:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80114e4:	4b67      	ldr	r3, [pc, #412]	; (8011684 <ce303_power+0x288>)
 80114e6:	223f      	movs	r2, #63	; 0x3f
 80114e8:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 80114ea:	79fb      	ldrb	r3, [r7, #7]
 80114ec:	4a6b      	ldr	r2, [pc, #428]	; (801169c <ce303_power+0x2a0>)
 80114ee:	fba2 2303 	umull	r2, r3, r2, r3
 80114f2:	08db      	lsrs	r3, r3, #3
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	3330      	adds	r3, #48	; 0x30
 80114f8:	b2da      	uxtb	r2, r3
 80114fa:	4b62      	ldr	r3, [pc, #392]	; (8011684 <ce303_power+0x288>)
 80114fc:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 80114fe:	79fb      	ldrb	r3, [r7, #7]
 8011500:	4a66      	ldr	r2, [pc, #408]	; (801169c <ce303_power+0x2a0>)
 8011502:	fba2 2303 	umull	r2, r3, r2, r3
 8011506:	08db      	lsrs	r3, r3, #3
 8011508:	b2db      	uxtb	r3, r3
 801150a:	461a      	mov	r2, r3
 801150c:	0152      	lsls	r2, r2, #5
 801150e:	1ad2      	subs	r2, r2, r3
 8011510:	0092      	lsls	r2, r2, #2
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	005b      	lsls	r3, r3, #1
 8011516:	b2da      	uxtb	r2, r3
 8011518:	79fb      	ldrb	r3, [r7, #7]
 801151a:	4413      	add	r3, r2
 801151c:	b2db      	uxtb	r3, r3
 801151e:	3330      	adds	r3, #48	; 0x30
 8011520:	b2da      	uxtb	r2, r3
 8011522:	4b58      	ldr	r3, [pc, #352]	; (8011684 <ce303_power+0x288>)
 8011524:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8011526:	4b57      	ldr	r3, [pc, #348]	; (8011684 <ce303_power+0x288>)
 8011528:	2221      	movs	r2, #33	; 0x21
 801152a:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 801152c:	4b55      	ldr	r3, [pc, #340]	; (8011684 <ce303_power+0x288>)
 801152e:	220d      	movs	r2, #13
 8011530:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8011532:	4b54      	ldr	r3, [pc, #336]	; (8011684 <ce303_power+0x288>)
 8011534:	220a      	movs	r2, #10
 8011536:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8011538:	4b55      	ldr	r3, [pc, #340]	; (8011690 <ce303_power+0x294>)
 801153a:	2200      	movs	r2, #0
 801153c:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801153e:	f7fd faad 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8011542:	2201      	movs	r2, #1
 8011544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011548:	4852      	ldr	r0, [pc, #328]	; (8011694 <ce303_power+0x298>)
 801154a:	f7f1 fe8f 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 801154e:	2207      	movs	r2, #7
 8011550:	494c      	ldr	r1, [pc, #304]	; (8011684 <ce303_power+0x288>)
 8011552:	4851      	ldr	r0, [pc, #324]	; (8011698 <ce303_power+0x29c>)
 8011554:	f7f4 f942 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8011558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801155c:	f7f0 fbd2 	bl	8001d04 <HAL_Delay>
 8011560:	e02a      	b.n	80115b8 <ce303_power+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8011562:	79fb      	ldrb	r3, [r7, #7]
 8011564:	2b09      	cmp	r3, #9
 8011566:	d827      	bhi.n	80115b8 <ce303_power+0x1bc>
	{
		start_buf[0] = 0x2F;
 8011568:	4b46      	ldr	r3, [pc, #280]	; (8011684 <ce303_power+0x288>)
 801156a:	222f      	movs	r2, #47	; 0x2f
 801156c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801156e:	4b45      	ldr	r3, [pc, #276]	; (8011684 <ce303_power+0x288>)
 8011570:	223f      	movs	r2, #63	; 0x3f
 8011572:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8011574:	79fb      	ldrb	r3, [r7, #7]
 8011576:	3330      	adds	r3, #48	; 0x30
 8011578:	b2da      	uxtb	r2, r3
 801157a:	4b42      	ldr	r3, [pc, #264]	; (8011684 <ce303_power+0x288>)
 801157c:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 801157e:	4b41      	ldr	r3, [pc, #260]	; (8011684 <ce303_power+0x288>)
 8011580:	2221      	movs	r2, #33	; 0x21
 8011582:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8011584:	4b3f      	ldr	r3, [pc, #252]	; (8011684 <ce303_power+0x288>)
 8011586:	220d      	movs	r2, #13
 8011588:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 801158a:	4b3e      	ldr	r3, [pc, #248]	; (8011684 <ce303_power+0x288>)
 801158c:	220a      	movs	r2, #10
 801158e:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8011590:	4b3f      	ldr	r3, [pc, #252]	; (8011690 <ce303_power+0x294>)
 8011592:	2200      	movs	r2, #0
 8011594:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8011596:	f7fd fa81 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801159a:	2201      	movs	r2, #1
 801159c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80115a0:	483c      	ldr	r0, [pc, #240]	; (8011694 <ce303_power+0x298>)
 80115a2:	f7f1 fe63 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 80115a6:	2206      	movs	r2, #6
 80115a8:	4936      	ldr	r1, [pc, #216]	; (8011684 <ce303_power+0x288>)
 80115aa:	483b      	ldr	r0, [pc, #236]	; (8011698 <ce303_power+0x29c>)
 80115ac:	f7f4 f916 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80115b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80115b4:	f7f0 fba6 	bl	8001d04 <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 80115b8:	79fb      	ldrb	r3, [r7, #7]
 80115ba:	2b63      	cmp	r3, #99	; 0x63
 80115bc:	d970      	bls.n	80116a0 <ce303_power+0x2a4>
	{
		start_buf[0] = 0x2F;
 80115be:	4b31      	ldr	r3, [pc, #196]	; (8011684 <ce303_power+0x288>)
 80115c0:	222f      	movs	r2, #47	; 0x2f
 80115c2:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80115c4:	4b2f      	ldr	r3, [pc, #188]	; (8011684 <ce303_power+0x288>)
 80115c6:	223f      	movs	r2, #63	; 0x3f
 80115c8:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 80115ca:	79fb      	ldrb	r3, [r7, #7]
 80115cc:	4a2e      	ldr	r2, [pc, #184]	; (8011688 <ce303_power+0x28c>)
 80115ce:	fba2 2303 	umull	r2, r3, r2, r3
 80115d2:	095b      	lsrs	r3, r3, #5
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	3330      	adds	r3, #48	; 0x30
 80115d8:	b2da      	uxtb	r2, r3
 80115da:	4b2a      	ldr	r3, [pc, #168]	; (8011684 <ce303_power+0x288>)
 80115dc:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 80115de:	79fa      	ldrb	r2, [r7, #7]
 80115e0:	79fb      	ldrb	r3, [r7, #7]
 80115e2:	4929      	ldr	r1, [pc, #164]	; (8011688 <ce303_power+0x28c>)
 80115e4:	fba1 1303 	umull	r1, r3, r1, r3
 80115e8:	095b      	lsrs	r3, r3, #5
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	4619      	mov	r1, r3
 80115ee:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80115f2:	fb03 f301 	mul.w	r3, r3, r1
 80115f6:	4413      	add	r3, r2
 80115f8:	4a24      	ldr	r2, [pc, #144]	; (801168c <ce303_power+0x290>)
 80115fa:	fb82 1203 	smull	r1, r2, r2, r3
 80115fe:	1092      	asrs	r2, r2, #2
 8011600:	17db      	asrs	r3, r3, #31
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	b2db      	uxtb	r3, r3
 8011606:	3330      	adds	r3, #48	; 0x30
 8011608:	b2da      	uxtb	r2, r3
 801160a:	4b1e      	ldr	r3, [pc, #120]	; (8011684 <ce303_power+0x288>)
 801160c:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801160e:	79fa      	ldrb	r2, [r7, #7]
 8011610:	79fb      	ldrb	r3, [r7, #7]
 8011612:	491d      	ldr	r1, [pc, #116]	; (8011688 <ce303_power+0x28c>)
 8011614:	fba1 1303 	umull	r1, r3, r1, r3
 8011618:	095b      	lsrs	r3, r3, #5
 801161a:	b2db      	uxtb	r3, r3
 801161c:	4619      	mov	r1, r3
 801161e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8011622:	fb03 f301 	mul.w	r3, r3, r1
 8011626:	441a      	add	r2, r3
 8011628:	4b18      	ldr	r3, [pc, #96]	; (801168c <ce303_power+0x290>)
 801162a:	fb83 1302 	smull	r1, r3, r3, r2
 801162e:	1099      	asrs	r1, r3, #2
 8011630:	17d3      	asrs	r3, r2, #31
 8011632:	1ac9      	subs	r1, r1, r3
 8011634:	460b      	mov	r3, r1
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	440b      	add	r3, r1
 801163a:	005b      	lsls	r3, r3, #1
 801163c:	1ad1      	subs	r1, r2, r3
 801163e:	b2cb      	uxtb	r3, r1
 8011640:	3330      	adds	r3, #48	; 0x30
 8011642:	b2da      	uxtb	r2, r3
 8011644:	4b0f      	ldr	r3, [pc, #60]	; (8011684 <ce303_power+0x288>)
 8011646:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8011648:	4b0e      	ldr	r3, [pc, #56]	; (8011684 <ce303_power+0x288>)
 801164a:	2221      	movs	r2, #33	; 0x21
 801164c:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 801164e:	4b0d      	ldr	r3, [pc, #52]	; (8011684 <ce303_power+0x288>)
 8011650:	220d      	movs	r2, #13
 8011652:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8011654:	4b0b      	ldr	r3, [pc, #44]	; (8011684 <ce303_power+0x288>)
 8011656:	220a      	movs	r2, #10
 8011658:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 801165a:	4b0d      	ldr	r3, [pc, #52]	; (8011690 <ce303_power+0x294>)
 801165c:	2200      	movs	r2, #0
 801165e:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8011660:	f7fd fa1c 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8011664:	2201      	movs	r2, #1
 8011666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801166a:	480a      	ldr	r0, [pc, #40]	; (8011694 <ce303_power+0x298>)
 801166c:	f7f1 fdfe 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8011670:	2208      	movs	r2, #8
 8011672:	4904      	ldr	r1, [pc, #16]	; (8011684 <ce303_power+0x288>)
 8011674:	4808      	ldr	r0, [pc, #32]	; (8011698 <ce303_power+0x29c>)
 8011676:	f7f4 f8b1 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801167a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801167e:	f7f0 fb41 	bl	8001d04 <HAL_Delay>
 8011682:	e080      	b.n	8011786 <ce303_power+0x38a>
 8011684:	20000010 	.word	0x20000010
 8011688:	51eb851f 	.word	0x51eb851f
 801168c:	66666667 	.word	0x66666667
 8011690:	2000085d 	.word	0x2000085d
 8011694:	40021800 	.word	0x40021800
 8011698:	20009c70 	.word	0x20009c70
 801169c:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 80116a0:	79fb      	ldrb	r3, [r7, #7]
 80116a2:	2b09      	cmp	r3, #9
 80116a4:	d944      	bls.n	8011730 <ce303_power+0x334>
 80116a6:	79fb      	ldrb	r3, [r7, #7]
 80116a8:	2b63      	cmp	r3, #99	; 0x63
 80116aa:	d841      	bhi.n	8011730 <ce303_power+0x334>
	{
		start_buf[0] = 0x2F;
 80116ac:	4b90      	ldr	r3, [pc, #576]	; (80118f0 <ce303_power+0x4f4>)
 80116ae:	222f      	movs	r2, #47	; 0x2f
 80116b0:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80116b2:	4b8f      	ldr	r3, [pc, #572]	; (80118f0 <ce303_power+0x4f4>)
 80116b4:	223f      	movs	r2, #63	; 0x3f
 80116b6:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 80116b8:	79fb      	ldrb	r3, [r7, #7]
 80116ba:	4a8e      	ldr	r2, [pc, #568]	; (80118f4 <ce303_power+0x4f8>)
 80116bc:	fba2 2303 	umull	r2, r3, r2, r3
 80116c0:	08db      	lsrs	r3, r3, #3
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	3330      	adds	r3, #48	; 0x30
 80116c6:	b2da      	uxtb	r2, r3
 80116c8:	4b89      	ldr	r3, [pc, #548]	; (80118f0 <ce303_power+0x4f4>)
 80116ca:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 80116cc:	79fb      	ldrb	r3, [r7, #7]
 80116ce:	4a89      	ldr	r2, [pc, #548]	; (80118f4 <ce303_power+0x4f8>)
 80116d0:	fba2 2303 	umull	r2, r3, r2, r3
 80116d4:	08db      	lsrs	r3, r3, #3
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	461a      	mov	r2, r3
 80116da:	0152      	lsls	r2, r2, #5
 80116dc:	1ad2      	subs	r2, r2, r3
 80116de:	0092      	lsls	r2, r2, #2
 80116e0:	1ad3      	subs	r3, r2, r3
 80116e2:	005b      	lsls	r3, r3, #1
 80116e4:	b2da      	uxtb	r2, r3
 80116e6:	79fb      	ldrb	r3, [r7, #7]
 80116e8:	4413      	add	r3, r2
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	3330      	adds	r3, #48	; 0x30
 80116ee:	b2da      	uxtb	r2, r3
 80116f0:	4b7f      	ldr	r3, [pc, #508]	; (80118f0 <ce303_power+0x4f4>)
 80116f2:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 80116f4:	4b7e      	ldr	r3, [pc, #504]	; (80118f0 <ce303_power+0x4f4>)
 80116f6:	2221      	movs	r2, #33	; 0x21
 80116f8:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 80116fa:	4b7d      	ldr	r3, [pc, #500]	; (80118f0 <ce303_power+0x4f4>)
 80116fc:	220d      	movs	r2, #13
 80116fe:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8011700:	4b7b      	ldr	r3, [pc, #492]	; (80118f0 <ce303_power+0x4f4>)
 8011702:	220a      	movs	r2, #10
 8011704:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8011706:	4b7c      	ldr	r3, [pc, #496]	; (80118f8 <ce303_power+0x4fc>)
 8011708:	2200      	movs	r2, #0
 801170a:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801170c:	f7fd f9c6 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8011710:	2201      	movs	r2, #1
 8011712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011716:	4879      	ldr	r0, [pc, #484]	; (80118fc <ce303_power+0x500>)
 8011718:	f7f1 fda8 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 801171c:	2207      	movs	r2, #7
 801171e:	4974      	ldr	r1, [pc, #464]	; (80118f0 <ce303_power+0x4f4>)
 8011720:	4877      	ldr	r0, [pc, #476]	; (8011900 <ce303_power+0x504>)
 8011722:	f7f4 f85b 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8011726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801172a:	f7f0 faeb 	bl	8001d04 <HAL_Delay>
 801172e:	e02a      	b.n	8011786 <ce303_power+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8011730:	79fb      	ldrb	r3, [r7, #7]
 8011732:	2b09      	cmp	r3, #9
 8011734:	d827      	bhi.n	8011786 <ce303_power+0x38a>
	{
		start_buf[0] = 0x2F;
 8011736:	4b6e      	ldr	r3, [pc, #440]	; (80118f0 <ce303_power+0x4f4>)
 8011738:	222f      	movs	r2, #47	; 0x2f
 801173a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801173c:	4b6c      	ldr	r3, [pc, #432]	; (80118f0 <ce303_power+0x4f4>)
 801173e:	223f      	movs	r2, #63	; 0x3f
 8011740:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8011742:	79fb      	ldrb	r3, [r7, #7]
 8011744:	3330      	adds	r3, #48	; 0x30
 8011746:	b2da      	uxtb	r2, r3
 8011748:	4b69      	ldr	r3, [pc, #420]	; (80118f0 <ce303_power+0x4f4>)
 801174a:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 801174c:	4b68      	ldr	r3, [pc, #416]	; (80118f0 <ce303_power+0x4f4>)
 801174e:	2221      	movs	r2, #33	; 0x21
 8011750:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8011752:	4b67      	ldr	r3, [pc, #412]	; (80118f0 <ce303_power+0x4f4>)
 8011754:	220d      	movs	r2, #13
 8011756:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8011758:	4b65      	ldr	r3, [pc, #404]	; (80118f0 <ce303_power+0x4f4>)
 801175a:	220a      	movs	r2, #10
 801175c:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 801175e:	4b66      	ldr	r3, [pc, #408]	; (80118f8 <ce303_power+0x4fc>)
 8011760:	2200      	movs	r2, #0
 8011762:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8011764:	f7fd f99a 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8011768:	2201      	movs	r2, #1
 801176a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801176e:	4863      	ldr	r0, [pc, #396]	; (80118fc <ce303_power+0x500>)
 8011770:	f7f1 fd7c 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8011774:	2206      	movs	r2, #6
 8011776:	495e      	ldr	r1, [pc, #376]	; (80118f0 <ce303_power+0x4f4>)
 8011778:	4861      	ldr	r0, [pc, #388]	; (8011900 <ce303_power+0x504>)
 801177a:	f7f4 f82f 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801177e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011782:	f7f0 fabf 	bl	8001d04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 8011786:	4b5c      	ldr	r3, [pc, #368]	; (80118f8 <ce303_power+0x4fc>)
 8011788:	2200      	movs	r2, #0
 801178a:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801178c:	f7fd f986 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8011790:	2201      	movs	r2, #1
 8011792:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011796:	4859      	ldr	r0, [pc, #356]	; (80118fc <ce303_power+0x500>)
 8011798:	f7f1 fd68 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 801179c:	2206      	movs	r2, #6
 801179e:	4959      	ldr	r1, [pc, #356]	; (8011904 <ce303_power+0x508>)
 80117a0:	4857      	ldr	r0, [pc, #348]	; (8011900 <ce303_power+0x504>)
 80117a2:	f7f4 f81b 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80117a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80117aa:	f7f0 faab 	bl	8001d04 <HAL_Delay>

	meter_rx_number = 0;
 80117ae:	4b52      	ldr	r3, [pc, #328]	; (80118f8 <ce303_power+0x4fc>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80117b4:	f7fd f972 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80117b8:	2201      	movs	r2, #1
 80117ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80117be:	484f      	ldr	r0, [pc, #316]	; (80118fc <ce303_power+0x500>)
 80117c0:	f7f1 fd54 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &power_buf[0], 13); // передаем команду
 80117c4:	220d      	movs	r2, #13
 80117c6:	4950      	ldr	r1, [pc, #320]	; (8011908 <ce303_power+0x50c>)
 80117c8:	484d      	ldr	r0, [pc, #308]	; (8011900 <ce303_power+0x504>)
 80117ca:	f7f4 f807 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80117ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80117d2:	f7f0 fa97 	bl	8001d04 <HAL_Delay>

	power_a_state = 0; // обнуляем переменные состояния прочтения мощщности перед их прочтением
 80117d6:	2300      	movs	r3, #0
 80117d8:	757b      	strb	r3, [r7, #21]
	power_b_state = 0;
 80117da:	2300      	movs	r3, #0
 80117dc:	753b      	strb	r3, [r7, #20]
	power_c_state = 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 80117e2:	2300      	movs	r3, #0
 80117e4:	823b      	strh	r3, [r7, #16]
 80117e6:	f001 b82b 	b.w	8012840 <ce303_power+0x1444>
	{

		if( (meter_rx_buffer[i] == 0x28) && (power_a_state==0) && (power_b_state==0) && (power_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 80117ea:	8a3b      	ldrh	r3, [r7, #16]
 80117ec:	4a47      	ldr	r2, [pc, #284]	; (801190c <ce303_power+0x510>)
 80117ee:	5cd3      	ldrb	r3, [r2, r3]
 80117f0:	2b28      	cmp	r3, #40	; 0x28
 80117f2:	f040 82ba 	bne.w	8011d6a <ce303_power+0x96e>
 80117f6:	7d7b      	ldrb	r3, [r7, #21]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	f040 82b6 	bne.w	8011d6a <ce303_power+0x96e>
 80117fe:	7d3b      	ldrb	r3, [r7, #20]
 8011800:	2b00      	cmp	r3, #0
 8011802:	f040 82b2 	bne.w	8011d6a <ce303_power+0x96e>
 8011806:	7cfb      	ldrb	r3, [r7, #19]
 8011808:	2b00      	cmp	r3, #0
 801180a:	f040 82ae 	bne.w	8011d6a <ce303_power+0x96e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801180e:	8a3b      	ldrh	r3, [r7, #16]
 8011810:	3302      	adds	r3, #2
 8011812:	4a3e      	ldr	r2, [pc, #248]	; (801190c <ce303_power+0x510>)
 8011814:	5cd3      	ldrb	r3, [r2, r3]
 8011816:	2b2e      	cmp	r3, #46	; 0x2e
 8011818:	f040 80d8 	bne.w	80119cc <ce303_power+0x5d0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 801181c:	8a3b      	ldrh	r3, [r7, #16]
 801181e:	3301      	adds	r3, #1
 8011820:	4a3a      	ldr	r2, [pc, #232]	; (801190c <ce303_power+0x510>)
 8011822:	5cd3      	ldrb	r3, [r2, r3]
 8011824:	b29b      	uxth	r3, r3
 8011826:	3b30      	subs	r3, #48	; 0x30
 8011828:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 801182a:	8a3b      	ldrh	r3, [r7, #16]
 801182c:	3304      	adds	r3, #4
 801182e:	4a37      	ldr	r2, [pc, #220]	; (801190c <ce303_power+0x510>)
 8011830:	5cd3      	ldrb	r3, [r2, r3]
 8011832:	2b29      	cmp	r3, #41	; 0x29
 8011834:	d110      	bne.n	8011858 <ce303_power+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8011836:	8a3b      	ldrh	r3, [r7, #16]
 8011838:	3303      	adds	r3, #3
 801183a:	4a34      	ldr	r2, [pc, #208]	; (801190c <ce303_power+0x510>)
 801183c:	5cd3      	ldrb	r3, [r2, r3]
 801183e:	3b30      	subs	r3, #48	; 0x30
 8011840:	b29b      	uxth	r3, r3
 8011842:	461a      	mov	r2, r3
 8011844:	0092      	lsls	r2, r2, #2
 8011846:	4413      	add	r3, r2
 8011848:	461a      	mov	r2, r3
 801184a:	0091      	lsls	r1, r2, #2
 801184c:	461a      	mov	r2, r3
 801184e:	460b      	mov	r3, r1
 8011850:	4413      	add	r3, r2
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	82fb      	strh	r3, [r7, #22]
 8011856:	e081      	b.n	801195c <ce303_power+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8011858:	8a3b      	ldrh	r3, [r7, #16]
 801185a:	3305      	adds	r3, #5
 801185c:	4a2b      	ldr	r2, [pc, #172]	; (801190c <ce303_power+0x510>)
 801185e:	5cd3      	ldrb	r3, [r2, r3]
 8011860:	2b29      	cmp	r3, #41	; 0x29
 8011862:	d117      	bne.n	8011894 <ce303_power+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8011864:	8a3b      	ldrh	r3, [r7, #16]
 8011866:	3303      	adds	r3, #3
 8011868:	4a28      	ldr	r2, [pc, #160]	; (801190c <ce303_power+0x510>)
 801186a:	5cd3      	ldrb	r3, [r2, r3]
 801186c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011870:	4613      	mov	r3, r2
 8011872:	009b      	lsls	r3, r3, #2
 8011874:	4413      	add	r3, r2
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	4619      	mov	r1, r3
 801187a:	8a3b      	ldrh	r3, [r7, #16]
 801187c:	3304      	adds	r3, #4
 801187e:	4a23      	ldr	r2, [pc, #140]	; (801190c <ce303_power+0x510>)
 8011880:	5cd3      	ldrb	r3, [r2, r3]
 8011882:	3b30      	subs	r3, #48	; 0x30
 8011884:	440b      	add	r3, r1
 8011886:	b29b      	uxth	r3, r3
 8011888:	461a      	mov	r2, r3
 801188a:	0092      	lsls	r2, r2, #2
 801188c:	4413      	add	r3, r2
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	82fb      	strh	r3, [r7, #22]
 8011892:	e063      	b.n	801195c <ce303_power+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8011894:	8a3b      	ldrh	r3, [r7, #16]
 8011896:	3306      	adds	r3, #6
 8011898:	4a1c      	ldr	r2, [pc, #112]	; (801190c <ce303_power+0x510>)
 801189a:	5cd3      	ldrb	r3, [r2, r3]
 801189c:	2b29      	cmp	r3, #41	; 0x29
 801189e:	d137      	bne.n	8011910 <ce303_power+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80118a0:	8a3b      	ldrh	r3, [r7, #16]
 80118a2:	3303      	adds	r3, #3
 80118a4:	4a19      	ldr	r2, [pc, #100]	; (801190c <ce303_power+0x510>)
 80118a6:	5cd3      	ldrb	r3, [r2, r3]
 80118a8:	3b30      	subs	r3, #48	; 0x30
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	461a      	mov	r2, r3
 80118ae:	0092      	lsls	r2, r2, #2
 80118b0:	4413      	add	r3, r2
 80118b2:	461a      	mov	r2, r3
 80118b4:	0091      	lsls	r1, r2, #2
 80118b6:	461a      	mov	r2, r3
 80118b8:	460b      	mov	r3, r1
 80118ba:	4413      	add	r3, r2
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	b29a      	uxth	r2, r3
 80118c0:	8a3b      	ldrh	r3, [r7, #16]
 80118c2:	3304      	adds	r3, #4
 80118c4:	4911      	ldr	r1, [pc, #68]	; (801190c <ce303_power+0x510>)
 80118c6:	5ccb      	ldrb	r3, [r1, r3]
 80118c8:	3b30      	subs	r3, #48	; 0x30
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	4619      	mov	r1, r3
 80118ce:	0089      	lsls	r1, r1, #2
 80118d0:	440b      	add	r3, r1
 80118d2:	005b      	lsls	r3, r3, #1
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	4413      	add	r3, r2
 80118d8:	b29a      	uxth	r2, r3
 80118da:	8a3b      	ldrh	r3, [r7, #16]
 80118dc:	3305      	adds	r3, #5
 80118de:	490b      	ldr	r1, [pc, #44]	; (801190c <ce303_power+0x510>)
 80118e0:	5ccb      	ldrb	r3, [r1, r3]
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	4413      	add	r3, r2
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	3b30      	subs	r3, #48	; 0x30
 80118ea:	82fb      	strh	r3, [r7, #22]
 80118ec:	e036      	b.n	801195c <ce303_power+0x560>
 80118ee:	bf00      	nop
 80118f0:	20000010 	.word	0x20000010
 80118f4:	cccccccd 	.word	0xcccccccd
 80118f8:	2000085d 	.word	0x2000085d
 80118fc:	40021800 	.word	0x40021800
 8011900:	20009c70 	.word	0x20009c70
 8011904:	20000018 	.word	0x20000018
 8011908:	20000048 	.word	0x20000048
 801190c:	200098e4 	.word	0x200098e4
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8011910:	8a3b      	ldrh	r3, [r7, #16]
 8011912:	3303      	adds	r3, #3
 8011914:	4a9b      	ldr	r2, [pc, #620]	; (8011b84 <ce303_power+0x788>)
 8011916:	5cd3      	ldrb	r3, [r2, r3]
 8011918:	3b30      	subs	r3, #48	; 0x30
 801191a:	b29b      	uxth	r3, r3
 801191c:	461a      	mov	r2, r3
 801191e:	0092      	lsls	r2, r2, #2
 8011920:	4413      	add	r3, r2
 8011922:	461a      	mov	r2, r3
 8011924:	0091      	lsls	r1, r2, #2
 8011926:	461a      	mov	r2, r3
 8011928:	460b      	mov	r3, r1
 801192a:	4413      	add	r3, r2
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	b29a      	uxth	r2, r3
 8011930:	8a3b      	ldrh	r3, [r7, #16]
 8011932:	3304      	adds	r3, #4
 8011934:	4993      	ldr	r1, [pc, #588]	; (8011b84 <ce303_power+0x788>)
 8011936:	5ccb      	ldrb	r3, [r1, r3]
 8011938:	3b30      	subs	r3, #48	; 0x30
 801193a:	b29b      	uxth	r3, r3
 801193c:	4619      	mov	r1, r3
 801193e:	0089      	lsls	r1, r1, #2
 8011940:	440b      	add	r3, r1
 8011942:	005b      	lsls	r3, r3, #1
 8011944:	b29b      	uxth	r3, r3
 8011946:	4413      	add	r3, r2
 8011948:	b29a      	uxth	r2, r3
 801194a:	8a3b      	ldrh	r3, [r7, #16]
 801194c:	3305      	adds	r3, #5
 801194e:	498d      	ldr	r1, [pc, #564]	; (8011b84 <ce303_power+0x788>)
 8011950:	5ccb      	ldrb	r3, [r1, r3]
 8011952:	b29b      	uxth	r3, r3
 8011954:	4413      	add	r3, r2
 8011956:	b29b      	uxth	r3, r3
 8011958:	3b30      	subs	r3, #48	; 0x30
 801195a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801195c:	4b8a      	ldr	r3, [pc, #552]	; (8011b88 <ce303_power+0x78c>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f04f 31ff 	mov.w	r1, #4294967295
 8011964:	4618      	mov	r0, r3
 8011966:	f7f5 f9e7 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 801196a:	89fb      	ldrh	r3, [r7, #14]
 801196c:	0a1b      	lsrs	r3, r3, #8
 801196e:	b29b      	uxth	r3, r3
 8011970:	b2db      	uxtb	r3, r3
 8011972:	4619      	mov	r1, r3
 8011974:	f242 0056 	movw	r0, #8278	; 0x2056
 8011978:	f003 ff72 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 801197c:	89fb      	ldrh	r3, [r7, #14]
 801197e:	b2db      	uxtb	r3, r3
 8011980:	4619      	mov	r1, r3
 8011982:	f242 0057 	movw	r0, #8279	; 0x2057
 8011986:	f003 ff6b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 801198a:	8afb      	ldrh	r3, [r7, #22]
 801198c:	0a1b      	lsrs	r3, r3, #8
 801198e:	b29b      	uxth	r3, r3
 8011990:	b2db      	uxtb	r3, r3
 8011992:	4619      	mov	r1, r3
 8011994:	f242 005c 	movw	r0, #8284	; 0x205c
 8011998:	f003 ff62 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801199c:	8afb      	ldrh	r3, [r7, #22]
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	4619      	mov	r1, r3
 80119a2:	f242 005d 	movw	r0, #8285	; 0x205d
 80119a6:	f003 ff5b 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80119aa:	4b77      	ldr	r3, [pc, #476]	; (8011b88 <ce303_power+0x78c>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7f5 fa10 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 80119b4:	4a75      	ldr	r2, [pc, #468]	; (8011b8c <ce303_power+0x790>)
 80119b6:	89fb      	ldrh	r3, [r7, #14]
 80119b8:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg =  temp_mil;
 80119bc:	4a73      	ldr	r2, [pc, #460]	; (8011b8c <ce303_power+0x790>)
 80119be:	8afb      	ldrh	r3, [r7, #22]
 80119c0:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 80119c4:	2301      	movs	r3, #1
 80119c6:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80119c8:	f000 bf34 	b.w	8012834 <ce303_power+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 80119cc:	8a3b      	ldrh	r3, [r7, #16]
 80119ce:	3303      	adds	r3, #3
 80119d0:	4a6c      	ldr	r2, [pc, #432]	; (8011b84 <ce303_power+0x788>)
 80119d2:	5cd3      	ldrb	r3, [r2, r3]
 80119d4:	2b2e      	cmp	r3, #46	; 0x2e
 80119d6:	f040 80db 	bne.w	8011b90 <ce303_power+0x794>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80119da:	8a3b      	ldrh	r3, [r7, #16]
 80119dc:	3301      	adds	r3, #1
 80119de:	4a69      	ldr	r2, [pc, #420]	; (8011b84 <ce303_power+0x788>)
 80119e0:	5cd3      	ldrb	r3, [r2, r3]
 80119e2:	3b30      	subs	r3, #48	; 0x30
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	461a      	mov	r2, r3
 80119e8:	0092      	lsls	r2, r2, #2
 80119ea:	4413      	add	r3, r2
 80119ec:	005b      	lsls	r3, r3, #1
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	8a3b      	ldrh	r3, [r7, #16]
 80119f2:	3302      	adds	r3, #2
 80119f4:	4963      	ldr	r1, [pc, #396]	; (8011b84 <ce303_power+0x788>)
 80119f6:	5ccb      	ldrb	r3, [r1, r3]
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	4413      	add	r3, r2
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	3b30      	subs	r3, #48	; 0x30
 8011a00:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8011a02:	8a3b      	ldrh	r3, [r7, #16]
 8011a04:	3305      	adds	r3, #5
 8011a06:	4a5f      	ldr	r2, [pc, #380]	; (8011b84 <ce303_power+0x788>)
 8011a08:	5cd3      	ldrb	r3, [r2, r3]
 8011a0a:	2b29      	cmp	r3, #41	; 0x29
 8011a0c:	d110      	bne.n	8011a30 <ce303_power+0x634>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8011a0e:	8a3b      	ldrh	r3, [r7, #16]
 8011a10:	3304      	adds	r3, #4
 8011a12:	4a5c      	ldr	r2, [pc, #368]	; (8011b84 <ce303_power+0x788>)
 8011a14:	5cd3      	ldrb	r3, [r2, r3]
 8011a16:	3b30      	subs	r3, #48	; 0x30
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	0092      	lsls	r2, r2, #2
 8011a1e:	4413      	add	r3, r2
 8011a20:	461a      	mov	r2, r3
 8011a22:	0091      	lsls	r1, r2, #2
 8011a24:	461a      	mov	r2, r3
 8011a26:	460b      	mov	r3, r1
 8011a28:	4413      	add	r3, r2
 8011a2a:	009b      	lsls	r3, r3, #2
 8011a2c:	82fb      	strh	r3, [r7, #22]
 8011a2e:	e070      	b.n	8011b12 <ce303_power+0x716>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8011a30:	8a3b      	ldrh	r3, [r7, #16]
 8011a32:	3306      	adds	r3, #6
 8011a34:	4a53      	ldr	r2, [pc, #332]	; (8011b84 <ce303_power+0x788>)
 8011a36:	5cd3      	ldrb	r3, [r2, r3]
 8011a38:	2b29      	cmp	r3, #41	; 0x29
 8011a3a:	d117      	bne.n	8011a6c <ce303_power+0x670>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8011a3c:	8a3b      	ldrh	r3, [r7, #16]
 8011a3e:	3304      	adds	r3, #4
 8011a40:	4a50      	ldr	r2, [pc, #320]	; (8011b84 <ce303_power+0x788>)
 8011a42:	5cd3      	ldrb	r3, [r2, r3]
 8011a44:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011a48:	4613      	mov	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4413      	add	r3, r2
 8011a4e:	005b      	lsls	r3, r3, #1
 8011a50:	4619      	mov	r1, r3
 8011a52:	8a3b      	ldrh	r3, [r7, #16]
 8011a54:	3305      	adds	r3, #5
 8011a56:	4a4b      	ldr	r2, [pc, #300]	; (8011b84 <ce303_power+0x788>)
 8011a58:	5cd3      	ldrb	r3, [r2, r3]
 8011a5a:	3b30      	subs	r3, #48	; 0x30
 8011a5c:	440b      	add	r3, r1
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	461a      	mov	r2, r3
 8011a62:	0092      	lsls	r2, r2, #2
 8011a64:	4413      	add	r3, r2
 8011a66:	005b      	lsls	r3, r3, #1
 8011a68:	82fb      	strh	r3, [r7, #22]
 8011a6a:	e052      	b.n	8011b12 <ce303_power+0x716>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8011a6c:	8a3b      	ldrh	r3, [r7, #16]
 8011a6e:	3307      	adds	r3, #7
 8011a70:	4a44      	ldr	r2, [pc, #272]	; (8011b84 <ce303_power+0x788>)
 8011a72:	5cd3      	ldrb	r3, [r2, r3]
 8011a74:	2b29      	cmp	r3, #41	; 0x29
 8011a76:	d126      	bne.n	8011ac6 <ce303_power+0x6ca>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8011a78:	8a3b      	ldrh	r3, [r7, #16]
 8011a7a:	3304      	adds	r3, #4
 8011a7c:	4a41      	ldr	r2, [pc, #260]	; (8011b84 <ce303_power+0x788>)
 8011a7e:	5cd3      	ldrb	r3, [r2, r3]
 8011a80:	3b30      	subs	r3, #48	; 0x30
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	461a      	mov	r2, r3
 8011a86:	0092      	lsls	r2, r2, #2
 8011a88:	4413      	add	r3, r2
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	0091      	lsls	r1, r2, #2
 8011a8e:	461a      	mov	r2, r3
 8011a90:	460b      	mov	r3, r1
 8011a92:	4413      	add	r3, r2
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	8a3b      	ldrh	r3, [r7, #16]
 8011a9a:	3305      	adds	r3, #5
 8011a9c:	4939      	ldr	r1, [pc, #228]	; (8011b84 <ce303_power+0x788>)
 8011a9e:	5ccb      	ldrb	r3, [r1, r3]
 8011aa0:	3b30      	subs	r3, #48	; 0x30
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	0089      	lsls	r1, r1, #2
 8011aa8:	440b      	add	r3, r1
 8011aaa:	005b      	lsls	r3, r3, #1
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	4413      	add	r3, r2
 8011ab0:	b29a      	uxth	r2, r3
 8011ab2:	8a3b      	ldrh	r3, [r7, #16]
 8011ab4:	3306      	adds	r3, #6
 8011ab6:	4933      	ldr	r1, [pc, #204]	; (8011b84 <ce303_power+0x788>)
 8011ab8:	5ccb      	ldrb	r3, [r1, r3]
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	4413      	add	r3, r2
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	3b30      	subs	r3, #48	; 0x30
 8011ac2:	82fb      	strh	r3, [r7, #22]
 8011ac4:	e025      	b.n	8011b12 <ce303_power+0x716>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8011ac6:	8a3b      	ldrh	r3, [r7, #16]
 8011ac8:	3304      	adds	r3, #4
 8011aca:	4a2e      	ldr	r2, [pc, #184]	; (8011b84 <ce303_power+0x788>)
 8011acc:	5cd3      	ldrb	r3, [r2, r3]
 8011ace:	3b30      	subs	r3, #48	; 0x30
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	0092      	lsls	r2, r2, #2
 8011ad6:	4413      	add	r3, r2
 8011ad8:	461a      	mov	r2, r3
 8011ada:	0091      	lsls	r1, r2, #2
 8011adc:	461a      	mov	r2, r3
 8011ade:	460b      	mov	r3, r1
 8011ae0:	4413      	add	r3, r2
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	8a3b      	ldrh	r3, [r7, #16]
 8011ae8:	3305      	adds	r3, #5
 8011aea:	4926      	ldr	r1, [pc, #152]	; (8011b84 <ce303_power+0x788>)
 8011aec:	5ccb      	ldrb	r3, [r1, r3]
 8011aee:	3b30      	subs	r3, #48	; 0x30
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	4619      	mov	r1, r3
 8011af4:	0089      	lsls	r1, r1, #2
 8011af6:	440b      	add	r3, r1
 8011af8:	005b      	lsls	r3, r3, #1
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	4413      	add	r3, r2
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	8a3b      	ldrh	r3, [r7, #16]
 8011b02:	3306      	adds	r3, #6
 8011b04:	491f      	ldr	r1, [pc, #124]	; (8011b84 <ce303_power+0x788>)
 8011b06:	5ccb      	ldrb	r3, [r1, r3]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	4413      	add	r3, r2
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	3b30      	subs	r3, #48	; 0x30
 8011b10:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011b12:	4b1d      	ldr	r3, [pc, #116]	; (8011b88 <ce303_power+0x78c>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f04f 31ff 	mov.w	r1, #4294967295
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7f5 f90c 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 8011b20:	89fb      	ldrh	r3, [r7, #14]
 8011b22:	0a1b      	lsrs	r3, r3, #8
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	4619      	mov	r1, r3
 8011b2a:	f242 0056 	movw	r0, #8278	; 0x2056
 8011b2e:	f003 fe97 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8011b32:	89fb      	ldrh	r3, [r7, #14]
 8011b34:	b2db      	uxtb	r3, r3
 8011b36:	4619      	mov	r1, r3
 8011b38:	f242 0057 	movw	r0, #8279	; 0x2057
 8011b3c:	f003 fe90 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8011b40:	8afb      	ldrh	r3, [r7, #22]
 8011b42:	0a1b      	lsrs	r3, r3, #8
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	4619      	mov	r1, r3
 8011b4a:	f242 005c 	movw	r0, #8284	; 0x205c
 8011b4e:	f003 fe87 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8011b52:	8afb      	ldrh	r3, [r7, #22]
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	4619      	mov	r1, r3
 8011b58:	f242 005d 	movw	r0, #8285	; 0x205d
 8011b5c:	f003 fe80 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8011b60:	4b09      	ldr	r3, [pc, #36]	; (8011b88 <ce303_power+0x78c>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7f5 f935 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 8011b6a:	4a08      	ldr	r2, [pc, #32]	; (8011b8c <ce303_power+0x790>)
 8011b6c:	89fb      	ldrh	r3, [r7, #14]
 8011b6e:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg = temp_mil;
 8011b72:	4a06      	ldr	r2, [pc, #24]	; (8011b8c <ce303_power+0x790>)
 8011b74:	8afb      	ldrh	r3, [r7, #22]
 8011b76:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8011b7e:	f000 be59 	b.w	8012834 <ce303_power+0x1438>
 8011b82:	bf00      	nop
 8011b84:	200098e4 	.word	0x200098e4
 8011b88:	20009a6c 	.word	0x20009a6c
 8011b8c:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8011b90:	8a3b      	ldrh	r3, [r7, #16]
 8011b92:	3304      	adds	r3, #4
 8011b94:	4a9f      	ldr	r2, [pc, #636]	; (8011e14 <ce303_power+0xa18>)
 8011b96:	5cd3      	ldrb	r3, [r2, r3]
 8011b98:	2b2e      	cmp	r3, #46	; 0x2e
 8011b9a:	f040 864b 	bne.w	8012834 <ce303_power+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8011b9e:	8a3b      	ldrh	r3, [r7, #16]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	4a9c      	ldr	r2, [pc, #624]	; (8011e14 <ce303_power+0xa18>)
 8011ba4:	5cd3      	ldrb	r3, [r2, r3]
 8011ba6:	3b30      	subs	r3, #48	; 0x30
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	461a      	mov	r2, r3
 8011bac:	0092      	lsls	r2, r2, #2
 8011bae:	4413      	add	r3, r2
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	0091      	lsls	r1, r2, #2
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	4413      	add	r3, r2
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	b29a      	uxth	r2, r3
 8011bbe:	8a3b      	ldrh	r3, [r7, #16]
 8011bc0:	3302      	adds	r3, #2
 8011bc2:	4994      	ldr	r1, [pc, #592]	; (8011e14 <ce303_power+0xa18>)
 8011bc4:	5ccb      	ldrb	r3, [r1, r3]
 8011bc6:	3b30      	subs	r3, #48	; 0x30
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	4619      	mov	r1, r3
 8011bcc:	0089      	lsls	r1, r1, #2
 8011bce:	440b      	add	r3, r1
 8011bd0:	005b      	lsls	r3, r3, #1
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	4413      	add	r3, r2
 8011bd6:	b29a      	uxth	r2, r3
 8011bd8:	8a3b      	ldrh	r3, [r7, #16]
 8011bda:	3303      	adds	r3, #3
 8011bdc:	498d      	ldr	r1, [pc, #564]	; (8011e14 <ce303_power+0xa18>)
 8011bde:	5ccb      	ldrb	r3, [r1, r3]
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	4413      	add	r3, r2
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	3b30      	subs	r3, #48	; 0x30
 8011be8:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8011bea:	8a3b      	ldrh	r3, [r7, #16]
 8011bec:	3306      	adds	r3, #6
 8011bee:	4a89      	ldr	r2, [pc, #548]	; (8011e14 <ce303_power+0xa18>)
 8011bf0:	5cd3      	ldrb	r3, [r2, r3]
 8011bf2:	2b29      	cmp	r3, #41	; 0x29
 8011bf4:	d110      	bne.n	8011c18 <ce303_power+0x81c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8011bf6:	8a3b      	ldrh	r3, [r7, #16]
 8011bf8:	3305      	adds	r3, #5
 8011bfa:	4a86      	ldr	r2, [pc, #536]	; (8011e14 <ce303_power+0xa18>)
 8011bfc:	5cd3      	ldrb	r3, [r2, r3]
 8011bfe:	3b30      	subs	r3, #48	; 0x30
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	461a      	mov	r2, r3
 8011c04:	0092      	lsls	r2, r2, #2
 8011c06:	4413      	add	r3, r2
 8011c08:	461a      	mov	r2, r3
 8011c0a:	0091      	lsls	r1, r2, #2
 8011c0c:	461a      	mov	r2, r3
 8011c0e:	460b      	mov	r3, r1
 8011c10:	4413      	add	r3, r2
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	82fb      	strh	r3, [r7, #22]
 8011c16:	e070      	b.n	8011cfa <ce303_power+0x8fe>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8011c18:	8a3b      	ldrh	r3, [r7, #16]
 8011c1a:	3307      	adds	r3, #7
 8011c1c:	4a7d      	ldr	r2, [pc, #500]	; (8011e14 <ce303_power+0xa18>)
 8011c1e:	5cd3      	ldrb	r3, [r2, r3]
 8011c20:	2b29      	cmp	r3, #41	; 0x29
 8011c22:	d117      	bne.n	8011c54 <ce303_power+0x858>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8011c24:	8a3b      	ldrh	r3, [r7, #16]
 8011c26:	3305      	adds	r3, #5
 8011c28:	4a7a      	ldr	r2, [pc, #488]	; (8011e14 <ce303_power+0xa18>)
 8011c2a:	5cd3      	ldrb	r3, [r2, r3]
 8011c2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011c30:	4613      	mov	r3, r2
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	4413      	add	r3, r2
 8011c36:	005b      	lsls	r3, r3, #1
 8011c38:	4619      	mov	r1, r3
 8011c3a:	8a3b      	ldrh	r3, [r7, #16]
 8011c3c:	3306      	adds	r3, #6
 8011c3e:	4a75      	ldr	r2, [pc, #468]	; (8011e14 <ce303_power+0xa18>)
 8011c40:	5cd3      	ldrb	r3, [r2, r3]
 8011c42:	3b30      	subs	r3, #48	; 0x30
 8011c44:	440b      	add	r3, r1
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	461a      	mov	r2, r3
 8011c4a:	0092      	lsls	r2, r2, #2
 8011c4c:	4413      	add	r3, r2
 8011c4e:	005b      	lsls	r3, r3, #1
 8011c50:	82fb      	strh	r3, [r7, #22]
 8011c52:	e052      	b.n	8011cfa <ce303_power+0x8fe>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8011c54:	8a3b      	ldrh	r3, [r7, #16]
 8011c56:	3308      	adds	r3, #8
 8011c58:	4a6e      	ldr	r2, [pc, #440]	; (8011e14 <ce303_power+0xa18>)
 8011c5a:	5cd3      	ldrb	r3, [r2, r3]
 8011c5c:	2b29      	cmp	r3, #41	; 0x29
 8011c5e:	d126      	bne.n	8011cae <ce303_power+0x8b2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8011c60:	8a3b      	ldrh	r3, [r7, #16]
 8011c62:	3305      	adds	r3, #5
 8011c64:	4a6b      	ldr	r2, [pc, #428]	; (8011e14 <ce303_power+0xa18>)
 8011c66:	5cd3      	ldrb	r3, [r2, r3]
 8011c68:	3b30      	subs	r3, #48	; 0x30
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	0092      	lsls	r2, r2, #2
 8011c70:	4413      	add	r3, r2
 8011c72:	461a      	mov	r2, r3
 8011c74:	0091      	lsls	r1, r2, #2
 8011c76:	461a      	mov	r2, r3
 8011c78:	460b      	mov	r3, r1
 8011c7a:	4413      	add	r3, r2
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	b29a      	uxth	r2, r3
 8011c80:	8a3b      	ldrh	r3, [r7, #16]
 8011c82:	3306      	adds	r3, #6
 8011c84:	4963      	ldr	r1, [pc, #396]	; (8011e14 <ce303_power+0xa18>)
 8011c86:	5ccb      	ldrb	r3, [r1, r3]
 8011c88:	3b30      	subs	r3, #48	; 0x30
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	0089      	lsls	r1, r1, #2
 8011c90:	440b      	add	r3, r1
 8011c92:	005b      	lsls	r3, r3, #1
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	4413      	add	r3, r2
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	8a3b      	ldrh	r3, [r7, #16]
 8011c9c:	3307      	adds	r3, #7
 8011c9e:	495d      	ldr	r1, [pc, #372]	; (8011e14 <ce303_power+0xa18>)
 8011ca0:	5ccb      	ldrb	r3, [r1, r3]
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	4413      	add	r3, r2
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	3b30      	subs	r3, #48	; 0x30
 8011caa:	82fb      	strh	r3, [r7, #22]
 8011cac:	e025      	b.n	8011cfa <ce303_power+0x8fe>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8011cae:	8a3b      	ldrh	r3, [r7, #16]
 8011cb0:	3305      	adds	r3, #5
 8011cb2:	4a58      	ldr	r2, [pc, #352]	; (8011e14 <ce303_power+0xa18>)
 8011cb4:	5cd3      	ldrb	r3, [r2, r3]
 8011cb6:	3b30      	subs	r3, #48	; 0x30
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	461a      	mov	r2, r3
 8011cbc:	0092      	lsls	r2, r2, #2
 8011cbe:	4413      	add	r3, r2
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	0091      	lsls	r1, r2, #2
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	4413      	add	r3, r2
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	8a3b      	ldrh	r3, [r7, #16]
 8011cd0:	3306      	adds	r3, #6
 8011cd2:	4950      	ldr	r1, [pc, #320]	; (8011e14 <ce303_power+0xa18>)
 8011cd4:	5ccb      	ldrb	r3, [r1, r3]
 8011cd6:	3b30      	subs	r3, #48	; 0x30
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	4619      	mov	r1, r3
 8011cdc:	0089      	lsls	r1, r1, #2
 8011cde:	440b      	add	r3, r1
 8011ce0:	005b      	lsls	r3, r3, #1
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	4413      	add	r3, r2
 8011ce6:	b29a      	uxth	r2, r3
 8011ce8:	8a3b      	ldrh	r3, [r7, #16]
 8011cea:	3307      	adds	r3, #7
 8011cec:	4949      	ldr	r1, [pc, #292]	; (8011e14 <ce303_power+0xa18>)
 8011cee:	5ccb      	ldrb	r3, [r1, r3]
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	4413      	add	r3, r2
 8011cf4:	b29b      	uxth	r3, r3
 8011cf6:	3b30      	subs	r3, #48	; 0x30
 8011cf8:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011cfa:	4b47      	ldr	r3, [pc, #284]	; (8011e18 <ce303_power+0xa1c>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7f5 f818 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 8011d08:	89fb      	ldrh	r3, [r7, #14]
 8011d0a:	0a1b      	lsrs	r3, r3, #8
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	4619      	mov	r1, r3
 8011d12:	f242 0056 	movw	r0, #8278	; 0x2056
 8011d16:	f003 fda3 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8011d1a:	89fb      	ldrh	r3, [r7, #14]
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	4619      	mov	r1, r3
 8011d20:	f242 0057 	movw	r0, #8279	; 0x2057
 8011d24:	f003 fd9c 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8011d28:	8afb      	ldrh	r3, [r7, #22]
 8011d2a:	0a1b      	lsrs	r3, r3, #8
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	4619      	mov	r1, r3
 8011d32:	f242 005c 	movw	r0, #8284	; 0x205c
 8011d36:	f003 fd93 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8011d3a:	8afb      	ldrh	r3, [r7, #22]
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	4619      	mov	r1, r3
 8011d40:	f242 005d 	movw	r0, #8285	; 0x205d
 8011d44:	f003 fd8c 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8011d48:	4b33      	ldr	r3, [pc, #204]	; (8011e18 <ce303_power+0xa1c>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7f5 f841 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 8011d52:	4a32      	ldr	r2, [pc, #200]	; (8011e1c <ce303_power+0xa20>)
 8011d54:	89fb      	ldrh	r3, [r7, #14]
 8011d56:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg = temp_mil;
 8011d5a:	4a30      	ldr	r2, [pc, #192]	; (8011e1c <ce303_power+0xa20>)
 8011d5c:	8afb      	ldrh	r3, [r7, #22]
 8011d5e:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 8011d62:	2301      	movs	r3, #1
 8011d64:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8011d66:	f000 bd65 	b.w	8012834 <ce303_power+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (power_a_state==1) && (power_b_state==0) && (power_c_state==0) )
 8011d6a:	8a3b      	ldrh	r3, [r7, #16]
 8011d6c:	4a29      	ldr	r2, [pc, #164]	; (8011e14 <ce303_power+0xa18>)
 8011d6e:	5cd3      	ldrb	r3, [r2, r3]
 8011d70:	2b28      	cmp	r3, #40	; 0x28
 8011d72:	f040 82ad 	bne.w	80122d0 <ce303_power+0xed4>
 8011d76:	7d7b      	ldrb	r3, [r7, #21]
 8011d78:	2b01      	cmp	r3, #1
 8011d7a:	f040 82a9 	bne.w	80122d0 <ce303_power+0xed4>
 8011d7e:	7d3b      	ldrb	r3, [r7, #20]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	f040 82a5 	bne.w	80122d0 <ce303_power+0xed4>
 8011d86:	7cfb      	ldrb	r3, [r7, #19]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	f040 82a1 	bne.w	80122d0 <ce303_power+0xed4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8011d8e:	8a3b      	ldrh	r3, [r7, #16]
 8011d90:	3302      	adds	r3, #2
 8011d92:	4a20      	ldr	r2, [pc, #128]	; (8011e14 <ce303_power+0xa18>)
 8011d94:	5cd3      	ldrb	r3, [r2, r3]
 8011d96:	2b2e      	cmp	r3, #46	; 0x2e
 8011d98:	f040 80cd 	bne.w	8011f36 <ce303_power+0xb3a>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8011d9c:	8a3b      	ldrh	r3, [r7, #16]
 8011d9e:	3301      	adds	r3, #1
 8011da0:	4a1c      	ldr	r2, [pc, #112]	; (8011e14 <ce303_power+0xa18>)
 8011da2:	5cd3      	ldrb	r3, [r2, r3]
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	3b30      	subs	r3, #48	; 0x30
 8011da8:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8011daa:	8a3b      	ldrh	r3, [r7, #16]
 8011dac:	3304      	adds	r3, #4
 8011dae:	4a19      	ldr	r2, [pc, #100]	; (8011e14 <ce303_power+0xa18>)
 8011db0:	5cd3      	ldrb	r3, [r2, r3]
 8011db2:	2b29      	cmp	r3, #41	; 0x29
 8011db4:	d110      	bne.n	8011dd8 <ce303_power+0x9dc>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8011db6:	8a3b      	ldrh	r3, [r7, #16]
 8011db8:	3303      	adds	r3, #3
 8011dba:	4a16      	ldr	r2, [pc, #88]	; (8011e14 <ce303_power+0xa18>)
 8011dbc:	5cd3      	ldrb	r3, [r2, r3]
 8011dbe:	3b30      	subs	r3, #48	; 0x30
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	0092      	lsls	r2, r2, #2
 8011dc6:	4413      	add	r3, r2
 8011dc8:	461a      	mov	r2, r3
 8011dca:	0091      	lsls	r1, r2, #2
 8011dcc:	461a      	mov	r2, r3
 8011dce:	460b      	mov	r3, r1
 8011dd0:	4413      	add	r3, r2
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	82fb      	strh	r3, [r7, #22]
 8011dd6:	e076      	b.n	8011ec6 <ce303_power+0xaca>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8011dd8:	8a3b      	ldrh	r3, [r7, #16]
 8011dda:	3305      	adds	r3, #5
 8011ddc:	4a0d      	ldr	r2, [pc, #52]	; (8011e14 <ce303_power+0xa18>)
 8011dde:	5cd3      	ldrb	r3, [r2, r3]
 8011de0:	2b29      	cmp	r3, #41	; 0x29
 8011de2:	d11d      	bne.n	8011e20 <ce303_power+0xa24>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8011de4:	8a3b      	ldrh	r3, [r7, #16]
 8011de6:	3303      	adds	r3, #3
 8011de8:	4a0a      	ldr	r2, [pc, #40]	; (8011e14 <ce303_power+0xa18>)
 8011dea:	5cd3      	ldrb	r3, [r2, r3]
 8011dec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011df0:	4613      	mov	r3, r2
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4413      	add	r3, r2
 8011df6:	005b      	lsls	r3, r3, #1
 8011df8:	4619      	mov	r1, r3
 8011dfa:	8a3b      	ldrh	r3, [r7, #16]
 8011dfc:	3304      	adds	r3, #4
 8011dfe:	4a05      	ldr	r2, [pc, #20]	; (8011e14 <ce303_power+0xa18>)
 8011e00:	5cd3      	ldrb	r3, [r2, r3]
 8011e02:	3b30      	subs	r3, #48	; 0x30
 8011e04:	440b      	add	r3, r1
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	461a      	mov	r2, r3
 8011e0a:	0092      	lsls	r2, r2, #2
 8011e0c:	4413      	add	r3, r2
 8011e0e:	005b      	lsls	r3, r3, #1
 8011e10:	82fb      	strh	r3, [r7, #22]
 8011e12:	e058      	b.n	8011ec6 <ce303_power+0xaca>
 8011e14:	200098e4 	.word	0x200098e4
 8011e18:	20009a6c 	.word	0x20009a6c
 8011e1c:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8011e20:	8a3b      	ldrh	r3, [r7, #16]
 8011e22:	3306      	adds	r3, #6
 8011e24:	4ab1      	ldr	r2, [pc, #708]	; (80120ec <ce303_power+0xcf0>)
 8011e26:	5cd3      	ldrb	r3, [r2, r3]
 8011e28:	2b29      	cmp	r3, #41	; 0x29
 8011e2a:	d126      	bne.n	8011e7a <ce303_power+0xa7e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8011e2c:	8a3b      	ldrh	r3, [r7, #16]
 8011e2e:	3303      	adds	r3, #3
 8011e30:	4aae      	ldr	r2, [pc, #696]	; (80120ec <ce303_power+0xcf0>)
 8011e32:	5cd3      	ldrb	r3, [r2, r3]
 8011e34:	3b30      	subs	r3, #48	; 0x30
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	461a      	mov	r2, r3
 8011e3a:	0092      	lsls	r2, r2, #2
 8011e3c:	4413      	add	r3, r2
 8011e3e:	461a      	mov	r2, r3
 8011e40:	0091      	lsls	r1, r2, #2
 8011e42:	461a      	mov	r2, r3
 8011e44:	460b      	mov	r3, r1
 8011e46:	4413      	add	r3, r2
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	8a3b      	ldrh	r3, [r7, #16]
 8011e4e:	3304      	adds	r3, #4
 8011e50:	49a6      	ldr	r1, [pc, #664]	; (80120ec <ce303_power+0xcf0>)
 8011e52:	5ccb      	ldrb	r3, [r1, r3]
 8011e54:	3b30      	subs	r3, #48	; 0x30
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	4619      	mov	r1, r3
 8011e5a:	0089      	lsls	r1, r1, #2
 8011e5c:	440b      	add	r3, r1
 8011e5e:	005b      	lsls	r3, r3, #1
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	4413      	add	r3, r2
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	8a3b      	ldrh	r3, [r7, #16]
 8011e68:	3305      	adds	r3, #5
 8011e6a:	49a0      	ldr	r1, [pc, #640]	; (80120ec <ce303_power+0xcf0>)
 8011e6c:	5ccb      	ldrb	r3, [r1, r3]
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	4413      	add	r3, r2
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	3b30      	subs	r3, #48	; 0x30
 8011e76:	82fb      	strh	r3, [r7, #22]
 8011e78:	e025      	b.n	8011ec6 <ce303_power+0xaca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8011e7a:	8a3b      	ldrh	r3, [r7, #16]
 8011e7c:	3303      	adds	r3, #3
 8011e7e:	4a9b      	ldr	r2, [pc, #620]	; (80120ec <ce303_power+0xcf0>)
 8011e80:	5cd3      	ldrb	r3, [r2, r3]
 8011e82:	3b30      	subs	r3, #48	; 0x30
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	461a      	mov	r2, r3
 8011e88:	0092      	lsls	r2, r2, #2
 8011e8a:	4413      	add	r3, r2
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	0091      	lsls	r1, r2, #2
 8011e90:	461a      	mov	r2, r3
 8011e92:	460b      	mov	r3, r1
 8011e94:	4413      	add	r3, r2
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	b29a      	uxth	r2, r3
 8011e9a:	8a3b      	ldrh	r3, [r7, #16]
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	4993      	ldr	r1, [pc, #588]	; (80120ec <ce303_power+0xcf0>)
 8011ea0:	5ccb      	ldrb	r3, [r1, r3]
 8011ea2:	3b30      	subs	r3, #48	; 0x30
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	0089      	lsls	r1, r1, #2
 8011eaa:	440b      	add	r3, r1
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	4413      	add	r3, r2
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	8a3b      	ldrh	r3, [r7, #16]
 8011eb6:	3305      	adds	r3, #5
 8011eb8:	498c      	ldr	r1, [pc, #560]	; (80120ec <ce303_power+0xcf0>)
 8011eba:	5ccb      	ldrb	r3, [r1, r3]
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	4413      	add	r3, r2
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	3b30      	subs	r3, #48	; 0x30
 8011ec4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011ec6:	4b8a      	ldr	r3, [pc, #552]	; (80120f0 <ce303_power+0xcf4>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	f04f 31ff 	mov.w	r1, #4294967295
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7f4 ff32 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 8011ed4:	89fb      	ldrh	r3, [r7, #14]
 8011ed6:	0a1b      	lsrs	r3, r3, #8
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	b2db      	uxtb	r3, r3
 8011edc:	4619      	mov	r1, r3
 8011ede:	f242 0058 	movw	r0, #8280	; 0x2058
 8011ee2:	f003 fcbd 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8011ee6:	89fb      	ldrh	r3, [r7, #14]
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	4619      	mov	r1, r3
 8011eec:	f242 0059 	movw	r0, #8281	; 0x2059
 8011ef0:	f003 fcb6 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8011ef4:	8afb      	ldrh	r3, [r7, #22]
 8011ef6:	0a1b      	lsrs	r3, r3, #8
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	4619      	mov	r1, r3
 8011efe:	f242 005e 	movw	r0, #8286	; 0x205e
 8011f02:	f003 fcad 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8011f06:	8afb      	ldrh	r3, [r7, #22]
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	f242 005f 	movw	r0, #8287	; 0x205f
 8011f10:	f003 fca6 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8011f14:	4b76      	ldr	r3, [pc, #472]	; (80120f0 <ce303_power+0xcf4>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7f4 ff5b 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 8011f1e:	4a75      	ldr	r2, [pc, #468]	; (80120f4 <ce303_power+0xcf8>)
 8011f20:	89fb      	ldrh	r3, [r7, #14]
 8011f22:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg =  temp_mil;
 8011f26:	4a73      	ldr	r2, [pc, #460]	; (80120f4 <ce303_power+0xcf8>)
 8011f28:	8afb      	ldrh	r3, [r7, #22]
 8011f2a:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 8011f2e:	2301      	movs	r3, #1
 8011f30:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8011f32:	f000 bc81 	b.w	8012838 <ce303_power+0x143c>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8011f36:	8a3b      	ldrh	r3, [r7, #16]
 8011f38:	3303      	adds	r3, #3
 8011f3a:	4a6c      	ldr	r2, [pc, #432]	; (80120ec <ce303_power+0xcf0>)
 8011f3c:	5cd3      	ldrb	r3, [r2, r3]
 8011f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8011f40:	f040 80da 	bne.w	80120f8 <ce303_power+0xcfc>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8011f44:	8a3b      	ldrh	r3, [r7, #16]
 8011f46:	3301      	adds	r3, #1
 8011f48:	4a68      	ldr	r2, [pc, #416]	; (80120ec <ce303_power+0xcf0>)
 8011f4a:	5cd3      	ldrb	r3, [r2, r3]
 8011f4c:	3b30      	subs	r3, #48	; 0x30
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	461a      	mov	r2, r3
 8011f52:	0092      	lsls	r2, r2, #2
 8011f54:	4413      	add	r3, r2
 8011f56:	005b      	lsls	r3, r3, #1
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	8a3b      	ldrh	r3, [r7, #16]
 8011f5c:	3302      	adds	r3, #2
 8011f5e:	4963      	ldr	r1, [pc, #396]	; (80120ec <ce303_power+0xcf0>)
 8011f60:	5ccb      	ldrb	r3, [r1, r3]
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	4413      	add	r3, r2
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	3b30      	subs	r3, #48	; 0x30
 8011f6a:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8011f6c:	8a3b      	ldrh	r3, [r7, #16]
 8011f6e:	3305      	adds	r3, #5
 8011f70:	4a5e      	ldr	r2, [pc, #376]	; (80120ec <ce303_power+0xcf0>)
 8011f72:	5cd3      	ldrb	r3, [r2, r3]
 8011f74:	2b29      	cmp	r3, #41	; 0x29
 8011f76:	d110      	bne.n	8011f9a <ce303_power+0xb9e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8011f78:	8a3b      	ldrh	r3, [r7, #16]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	4a5b      	ldr	r2, [pc, #364]	; (80120ec <ce303_power+0xcf0>)
 8011f7e:	5cd3      	ldrb	r3, [r2, r3]
 8011f80:	3b30      	subs	r3, #48	; 0x30
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	461a      	mov	r2, r3
 8011f86:	0092      	lsls	r2, r2, #2
 8011f88:	4413      	add	r3, r2
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	0091      	lsls	r1, r2, #2
 8011f8e:	461a      	mov	r2, r3
 8011f90:	460b      	mov	r3, r1
 8011f92:	4413      	add	r3, r2
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	82fb      	strh	r3, [r7, #22]
 8011f98:	e070      	b.n	801207c <ce303_power+0xc80>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8011f9a:	8a3b      	ldrh	r3, [r7, #16]
 8011f9c:	3306      	adds	r3, #6
 8011f9e:	4a53      	ldr	r2, [pc, #332]	; (80120ec <ce303_power+0xcf0>)
 8011fa0:	5cd3      	ldrb	r3, [r2, r3]
 8011fa2:	2b29      	cmp	r3, #41	; 0x29
 8011fa4:	d117      	bne.n	8011fd6 <ce303_power+0xbda>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8011fa6:	8a3b      	ldrh	r3, [r7, #16]
 8011fa8:	3304      	adds	r3, #4
 8011faa:	4a50      	ldr	r2, [pc, #320]	; (80120ec <ce303_power+0xcf0>)
 8011fac:	5cd3      	ldrb	r3, [r2, r3]
 8011fae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	4413      	add	r3, r2
 8011fb8:	005b      	lsls	r3, r3, #1
 8011fba:	4619      	mov	r1, r3
 8011fbc:	8a3b      	ldrh	r3, [r7, #16]
 8011fbe:	3305      	adds	r3, #5
 8011fc0:	4a4a      	ldr	r2, [pc, #296]	; (80120ec <ce303_power+0xcf0>)
 8011fc2:	5cd3      	ldrb	r3, [r2, r3]
 8011fc4:	3b30      	subs	r3, #48	; 0x30
 8011fc6:	440b      	add	r3, r1
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	461a      	mov	r2, r3
 8011fcc:	0092      	lsls	r2, r2, #2
 8011fce:	4413      	add	r3, r2
 8011fd0:	005b      	lsls	r3, r3, #1
 8011fd2:	82fb      	strh	r3, [r7, #22]
 8011fd4:	e052      	b.n	801207c <ce303_power+0xc80>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8011fd6:	8a3b      	ldrh	r3, [r7, #16]
 8011fd8:	3307      	adds	r3, #7
 8011fda:	4a44      	ldr	r2, [pc, #272]	; (80120ec <ce303_power+0xcf0>)
 8011fdc:	5cd3      	ldrb	r3, [r2, r3]
 8011fde:	2b29      	cmp	r3, #41	; 0x29
 8011fe0:	d126      	bne.n	8012030 <ce303_power+0xc34>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8011fe2:	8a3b      	ldrh	r3, [r7, #16]
 8011fe4:	3304      	adds	r3, #4
 8011fe6:	4a41      	ldr	r2, [pc, #260]	; (80120ec <ce303_power+0xcf0>)
 8011fe8:	5cd3      	ldrb	r3, [r2, r3]
 8011fea:	3b30      	subs	r3, #48	; 0x30
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	461a      	mov	r2, r3
 8011ff0:	0092      	lsls	r2, r2, #2
 8011ff2:	4413      	add	r3, r2
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	0091      	lsls	r1, r2, #2
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	460b      	mov	r3, r1
 8011ffc:	4413      	add	r3, r2
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	b29a      	uxth	r2, r3
 8012002:	8a3b      	ldrh	r3, [r7, #16]
 8012004:	3305      	adds	r3, #5
 8012006:	4939      	ldr	r1, [pc, #228]	; (80120ec <ce303_power+0xcf0>)
 8012008:	5ccb      	ldrb	r3, [r1, r3]
 801200a:	3b30      	subs	r3, #48	; 0x30
 801200c:	b29b      	uxth	r3, r3
 801200e:	4619      	mov	r1, r3
 8012010:	0089      	lsls	r1, r1, #2
 8012012:	440b      	add	r3, r1
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	b29b      	uxth	r3, r3
 8012018:	4413      	add	r3, r2
 801201a:	b29a      	uxth	r2, r3
 801201c:	8a3b      	ldrh	r3, [r7, #16]
 801201e:	3306      	adds	r3, #6
 8012020:	4932      	ldr	r1, [pc, #200]	; (80120ec <ce303_power+0xcf0>)
 8012022:	5ccb      	ldrb	r3, [r1, r3]
 8012024:	b29b      	uxth	r3, r3
 8012026:	4413      	add	r3, r2
 8012028:	b29b      	uxth	r3, r3
 801202a:	3b30      	subs	r3, #48	; 0x30
 801202c:	82fb      	strh	r3, [r7, #22]
 801202e:	e025      	b.n	801207c <ce303_power+0xc80>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012030:	8a3b      	ldrh	r3, [r7, #16]
 8012032:	3304      	adds	r3, #4
 8012034:	4a2d      	ldr	r2, [pc, #180]	; (80120ec <ce303_power+0xcf0>)
 8012036:	5cd3      	ldrb	r3, [r2, r3]
 8012038:	3b30      	subs	r3, #48	; 0x30
 801203a:	b29b      	uxth	r3, r3
 801203c:	461a      	mov	r2, r3
 801203e:	0092      	lsls	r2, r2, #2
 8012040:	4413      	add	r3, r2
 8012042:	461a      	mov	r2, r3
 8012044:	0091      	lsls	r1, r2, #2
 8012046:	461a      	mov	r2, r3
 8012048:	460b      	mov	r3, r1
 801204a:	4413      	add	r3, r2
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	b29a      	uxth	r2, r3
 8012050:	8a3b      	ldrh	r3, [r7, #16]
 8012052:	3305      	adds	r3, #5
 8012054:	4925      	ldr	r1, [pc, #148]	; (80120ec <ce303_power+0xcf0>)
 8012056:	5ccb      	ldrb	r3, [r1, r3]
 8012058:	3b30      	subs	r3, #48	; 0x30
 801205a:	b29b      	uxth	r3, r3
 801205c:	4619      	mov	r1, r3
 801205e:	0089      	lsls	r1, r1, #2
 8012060:	440b      	add	r3, r1
 8012062:	005b      	lsls	r3, r3, #1
 8012064:	b29b      	uxth	r3, r3
 8012066:	4413      	add	r3, r2
 8012068:	b29a      	uxth	r2, r3
 801206a:	8a3b      	ldrh	r3, [r7, #16]
 801206c:	3306      	adds	r3, #6
 801206e:	491f      	ldr	r1, [pc, #124]	; (80120ec <ce303_power+0xcf0>)
 8012070:	5ccb      	ldrb	r3, [r1, r3]
 8012072:	b29b      	uxth	r3, r3
 8012074:	4413      	add	r3, r2
 8012076:	b29b      	uxth	r3, r3
 8012078:	3b30      	subs	r3, #48	; 0x30
 801207a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801207c:	4b1c      	ldr	r3, [pc, #112]	; (80120f0 <ce303_power+0xcf4>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	f04f 31ff 	mov.w	r1, #4294967295
 8012084:	4618      	mov	r0, r3
 8012086:	f7f4 fe57 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 801208a:	89fb      	ldrh	r3, [r7, #14]
 801208c:	0a1b      	lsrs	r3, r3, #8
 801208e:	b29b      	uxth	r3, r3
 8012090:	b2db      	uxtb	r3, r3
 8012092:	4619      	mov	r1, r3
 8012094:	f242 0058 	movw	r0, #8280	; 0x2058
 8012098:	f003 fbe2 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 801209c:	89fb      	ldrh	r3, [r7, #14]
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	4619      	mov	r1, r3
 80120a2:	f242 0059 	movw	r0, #8281	; 0x2059
 80120a6:	f003 fbdb 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 80120aa:	8afb      	ldrh	r3, [r7, #22]
 80120ac:	0a1b      	lsrs	r3, r3, #8
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	b2db      	uxtb	r3, r3
 80120b2:	4619      	mov	r1, r3
 80120b4:	f242 005e 	movw	r0, #8286	; 0x205e
 80120b8:	f003 fbd2 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80120bc:	8afb      	ldrh	r3, [r7, #22]
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	4619      	mov	r1, r3
 80120c2:	f242 005f 	movw	r0, #8287	; 0x205f
 80120c6:	f003 fbcb 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80120ca:	4b09      	ldr	r3, [pc, #36]	; (80120f0 <ce303_power+0xcf4>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7f4 fe80 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 80120d4:	4a07      	ldr	r2, [pc, #28]	; (80120f4 <ce303_power+0xcf8>)
 80120d6:	89fb      	ldrh	r3, [r7, #14]
 80120d8:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg = temp_mil;
 80120dc:	4a05      	ldr	r2, [pc, #20]	; (80120f4 <ce303_power+0xcf8>)
 80120de:	8afb      	ldrh	r3, [r7, #22]
 80120e0:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 80120e4:	2301      	movs	r3, #1
 80120e6:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80120e8:	e3a6      	b.n	8012838 <ce303_power+0x143c>
 80120ea:	bf00      	nop
 80120ec:	200098e4 	.word	0x200098e4
 80120f0:	20009a6c 	.word	0x20009a6c
 80120f4:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 80120f8:	8a3b      	ldrh	r3, [r7, #16]
 80120fa:	3304      	adds	r3, #4
 80120fc:	4a9f      	ldr	r2, [pc, #636]	; (801237c <ce303_power+0xf80>)
 80120fe:	5cd3      	ldrb	r3, [r2, r3]
 8012100:	2b2e      	cmp	r3, #46	; 0x2e
 8012102:	f040 8399 	bne.w	8012838 <ce303_power+0x143c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8012106:	8a3b      	ldrh	r3, [r7, #16]
 8012108:	3301      	adds	r3, #1
 801210a:	4a9c      	ldr	r2, [pc, #624]	; (801237c <ce303_power+0xf80>)
 801210c:	5cd3      	ldrb	r3, [r2, r3]
 801210e:	3b30      	subs	r3, #48	; 0x30
 8012110:	b29b      	uxth	r3, r3
 8012112:	461a      	mov	r2, r3
 8012114:	0092      	lsls	r2, r2, #2
 8012116:	4413      	add	r3, r2
 8012118:	461a      	mov	r2, r3
 801211a:	0091      	lsls	r1, r2, #2
 801211c:	461a      	mov	r2, r3
 801211e:	460b      	mov	r3, r1
 8012120:	4413      	add	r3, r2
 8012122:	009b      	lsls	r3, r3, #2
 8012124:	b29a      	uxth	r2, r3
 8012126:	8a3b      	ldrh	r3, [r7, #16]
 8012128:	3302      	adds	r3, #2
 801212a:	4994      	ldr	r1, [pc, #592]	; (801237c <ce303_power+0xf80>)
 801212c:	5ccb      	ldrb	r3, [r1, r3]
 801212e:	3b30      	subs	r3, #48	; 0x30
 8012130:	b29b      	uxth	r3, r3
 8012132:	4619      	mov	r1, r3
 8012134:	0089      	lsls	r1, r1, #2
 8012136:	440b      	add	r3, r1
 8012138:	005b      	lsls	r3, r3, #1
 801213a:	b29b      	uxth	r3, r3
 801213c:	4413      	add	r3, r2
 801213e:	b29a      	uxth	r2, r3
 8012140:	8a3b      	ldrh	r3, [r7, #16]
 8012142:	3303      	adds	r3, #3
 8012144:	498d      	ldr	r1, [pc, #564]	; (801237c <ce303_power+0xf80>)
 8012146:	5ccb      	ldrb	r3, [r1, r3]
 8012148:	b29b      	uxth	r3, r3
 801214a:	4413      	add	r3, r2
 801214c:	b29b      	uxth	r3, r3
 801214e:	3b30      	subs	r3, #48	; 0x30
 8012150:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8012152:	8a3b      	ldrh	r3, [r7, #16]
 8012154:	3306      	adds	r3, #6
 8012156:	4a89      	ldr	r2, [pc, #548]	; (801237c <ce303_power+0xf80>)
 8012158:	5cd3      	ldrb	r3, [r2, r3]
 801215a:	2b29      	cmp	r3, #41	; 0x29
 801215c:	d110      	bne.n	8012180 <ce303_power+0xd84>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801215e:	8a3b      	ldrh	r3, [r7, #16]
 8012160:	3305      	adds	r3, #5
 8012162:	4a86      	ldr	r2, [pc, #536]	; (801237c <ce303_power+0xf80>)
 8012164:	5cd3      	ldrb	r3, [r2, r3]
 8012166:	3b30      	subs	r3, #48	; 0x30
 8012168:	b29b      	uxth	r3, r3
 801216a:	461a      	mov	r2, r3
 801216c:	0092      	lsls	r2, r2, #2
 801216e:	4413      	add	r3, r2
 8012170:	461a      	mov	r2, r3
 8012172:	0091      	lsls	r1, r2, #2
 8012174:	461a      	mov	r2, r3
 8012176:	460b      	mov	r3, r1
 8012178:	4413      	add	r3, r2
 801217a:	009b      	lsls	r3, r3, #2
 801217c:	82fb      	strh	r3, [r7, #22]
 801217e:	e070      	b.n	8012262 <ce303_power+0xe66>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8012180:	8a3b      	ldrh	r3, [r7, #16]
 8012182:	3307      	adds	r3, #7
 8012184:	4a7d      	ldr	r2, [pc, #500]	; (801237c <ce303_power+0xf80>)
 8012186:	5cd3      	ldrb	r3, [r2, r3]
 8012188:	2b29      	cmp	r3, #41	; 0x29
 801218a:	d117      	bne.n	80121bc <ce303_power+0xdc0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 801218c:	8a3b      	ldrh	r3, [r7, #16]
 801218e:	3305      	adds	r3, #5
 8012190:	4a7a      	ldr	r2, [pc, #488]	; (801237c <ce303_power+0xf80>)
 8012192:	5cd3      	ldrb	r3, [r2, r3]
 8012194:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012198:	4613      	mov	r3, r2
 801219a:	009b      	lsls	r3, r3, #2
 801219c:	4413      	add	r3, r2
 801219e:	005b      	lsls	r3, r3, #1
 80121a0:	4619      	mov	r1, r3
 80121a2:	8a3b      	ldrh	r3, [r7, #16]
 80121a4:	3306      	adds	r3, #6
 80121a6:	4a75      	ldr	r2, [pc, #468]	; (801237c <ce303_power+0xf80>)
 80121a8:	5cd3      	ldrb	r3, [r2, r3]
 80121aa:	3b30      	subs	r3, #48	; 0x30
 80121ac:	440b      	add	r3, r1
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	461a      	mov	r2, r3
 80121b2:	0092      	lsls	r2, r2, #2
 80121b4:	4413      	add	r3, r2
 80121b6:	005b      	lsls	r3, r3, #1
 80121b8:	82fb      	strh	r3, [r7, #22]
 80121ba:	e052      	b.n	8012262 <ce303_power+0xe66>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80121bc:	8a3b      	ldrh	r3, [r7, #16]
 80121be:	3308      	adds	r3, #8
 80121c0:	4a6e      	ldr	r2, [pc, #440]	; (801237c <ce303_power+0xf80>)
 80121c2:	5cd3      	ldrb	r3, [r2, r3]
 80121c4:	2b29      	cmp	r3, #41	; 0x29
 80121c6:	d126      	bne.n	8012216 <ce303_power+0xe1a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80121c8:	8a3b      	ldrh	r3, [r7, #16]
 80121ca:	3305      	adds	r3, #5
 80121cc:	4a6b      	ldr	r2, [pc, #428]	; (801237c <ce303_power+0xf80>)
 80121ce:	5cd3      	ldrb	r3, [r2, r3]
 80121d0:	3b30      	subs	r3, #48	; 0x30
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	461a      	mov	r2, r3
 80121d6:	0092      	lsls	r2, r2, #2
 80121d8:	4413      	add	r3, r2
 80121da:	461a      	mov	r2, r3
 80121dc:	0091      	lsls	r1, r2, #2
 80121de:	461a      	mov	r2, r3
 80121e0:	460b      	mov	r3, r1
 80121e2:	4413      	add	r3, r2
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	8a3b      	ldrh	r3, [r7, #16]
 80121ea:	3306      	adds	r3, #6
 80121ec:	4963      	ldr	r1, [pc, #396]	; (801237c <ce303_power+0xf80>)
 80121ee:	5ccb      	ldrb	r3, [r1, r3]
 80121f0:	3b30      	subs	r3, #48	; 0x30
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	4619      	mov	r1, r3
 80121f6:	0089      	lsls	r1, r1, #2
 80121f8:	440b      	add	r3, r1
 80121fa:	005b      	lsls	r3, r3, #1
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	4413      	add	r3, r2
 8012200:	b29a      	uxth	r2, r3
 8012202:	8a3b      	ldrh	r3, [r7, #16]
 8012204:	3307      	adds	r3, #7
 8012206:	495d      	ldr	r1, [pc, #372]	; (801237c <ce303_power+0xf80>)
 8012208:	5ccb      	ldrb	r3, [r1, r3]
 801220a:	b29b      	uxth	r3, r3
 801220c:	4413      	add	r3, r2
 801220e:	b29b      	uxth	r3, r3
 8012210:	3b30      	subs	r3, #48	; 0x30
 8012212:	82fb      	strh	r3, [r7, #22]
 8012214:	e025      	b.n	8012262 <ce303_power+0xe66>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8012216:	8a3b      	ldrh	r3, [r7, #16]
 8012218:	3305      	adds	r3, #5
 801221a:	4a58      	ldr	r2, [pc, #352]	; (801237c <ce303_power+0xf80>)
 801221c:	5cd3      	ldrb	r3, [r2, r3]
 801221e:	3b30      	subs	r3, #48	; 0x30
 8012220:	b29b      	uxth	r3, r3
 8012222:	461a      	mov	r2, r3
 8012224:	0092      	lsls	r2, r2, #2
 8012226:	4413      	add	r3, r2
 8012228:	461a      	mov	r2, r3
 801222a:	0091      	lsls	r1, r2, #2
 801222c:	461a      	mov	r2, r3
 801222e:	460b      	mov	r3, r1
 8012230:	4413      	add	r3, r2
 8012232:	009b      	lsls	r3, r3, #2
 8012234:	b29a      	uxth	r2, r3
 8012236:	8a3b      	ldrh	r3, [r7, #16]
 8012238:	3306      	adds	r3, #6
 801223a:	4950      	ldr	r1, [pc, #320]	; (801237c <ce303_power+0xf80>)
 801223c:	5ccb      	ldrb	r3, [r1, r3]
 801223e:	3b30      	subs	r3, #48	; 0x30
 8012240:	b29b      	uxth	r3, r3
 8012242:	4619      	mov	r1, r3
 8012244:	0089      	lsls	r1, r1, #2
 8012246:	440b      	add	r3, r1
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	b29b      	uxth	r3, r3
 801224c:	4413      	add	r3, r2
 801224e:	b29a      	uxth	r2, r3
 8012250:	8a3b      	ldrh	r3, [r7, #16]
 8012252:	3307      	adds	r3, #7
 8012254:	4949      	ldr	r1, [pc, #292]	; (801237c <ce303_power+0xf80>)
 8012256:	5ccb      	ldrb	r3, [r1, r3]
 8012258:	b29b      	uxth	r3, r3
 801225a:	4413      	add	r3, r2
 801225c:	b29b      	uxth	r3, r3
 801225e:	3b30      	subs	r3, #48	; 0x30
 8012260:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8012262:	4b47      	ldr	r3, [pc, #284]	; (8012380 <ce303_power+0xf84>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f04f 31ff 	mov.w	r1, #4294967295
 801226a:	4618      	mov	r0, r3
 801226c:	f7f4 fd64 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 8012270:	89fb      	ldrh	r3, [r7, #14]
 8012272:	0a1b      	lsrs	r3, r3, #8
 8012274:	b29b      	uxth	r3, r3
 8012276:	b2db      	uxtb	r3, r3
 8012278:	4619      	mov	r1, r3
 801227a:	f242 0058 	movw	r0, #8280	; 0x2058
 801227e:	f003 faef 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8012282:	89fb      	ldrh	r3, [r7, #14]
 8012284:	b2db      	uxtb	r3, r3
 8012286:	4619      	mov	r1, r3
 8012288:	f242 0059 	movw	r0, #8281	; 0x2059
 801228c:	f003 fae8 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8012290:	8afb      	ldrh	r3, [r7, #22]
 8012292:	0a1b      	lsrs	r3, r3, #8
 8012294:	b29b      	uxth	r3, r3
 8012296:	b2db      	uxtb	r3, r3
 8012298:	4619      	mov	r1, r3
 801229a:	f242 005e 	movw	r0, #8286	; 0x205e
 801229e:	f003 fadf 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80122a2:	8afb      	ldrh	r3, [r7, #22]
 80122a4:	b2db      	uxtb	r3, r3
 80122a6:	4619      	mov	r1, r3
 80122a8:	f242 005f 	movw	r0, #8287	; 0x205f
 80122ac:	f003 fad8 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80122b0:	4b33      	ldr	r3, [pc, #204]	; (8012380 <ce303_power+0xf84>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7f4 fd8d 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 80122ba:	4a32      	ldr	r2, [pc, #200]	; (8012384 <ce303_power+0xf88>)
 80122bc:	89fb      	ldrh	r3, [r7, #14]
 80122be:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg = temp_mil;
 80122c2:	4a30      	ldr	r2, [pc, #192]	; (8012384 <ce303_power+0xf88>)
 80122c4:	8afb      	ldrh	r3, [r7, #22]
 80122c6:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 80122ca:	2301      	movs	r3, #1
 80122cc:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80122ce:	e2b3      	b.n	8012838 <ce303_power+0x143c>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (power_a_state==1) && (power_b_state==1) && (power_c_state==0) )
 80122d0:	8a3b      	ldrh	r3, [r7, #16]
 80122d2:	4a2a      	ldr	r2, [pc, #168]	; (801237c <ce303_power+0xf80>)
 80122d4:	5cd3      	ldrb	r3, [r2, r3]
 80122d6:	2b28      	cmp	r3, #40	; 0x28
 80122d8:	f040 82af 	bne.w	801283a <ce303_power+0x143e>
 80122dc:	7d7b      	ldrb	r3, [r7, #21]
 80122de:	2b01      	cmp	r3, #1
 80122e0:	f040 82ab 	bne.w	801283a <ce303_power+0x143e>
 80122e4:	7d3b      	ldrb	r3, [r7, #20]
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	f040 82a7 	bne.w	801283a <ce303_power+0x143e>
 80122ec:	7cfb      	ldrb	r3, [r7, #19]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f040 82a3 	bne.w	801283a <ce303_power+0x143e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80122f4:	8a3b      	ldrh	r3, [r7, #16]
 80122f6:	3302      	adds	r3, #2
 80122f8:	4a20      	ldr	r2, [pc, #128]	; (801237c <ce303_power+0xf80>)
 80122fa:	5cd3      	ldrb	r3, [r2, r3]
 80122fc:	2b2e      	cmp	r3, #46	; 0x2e
 80122fe:	f040 80cd 	bne.w	801249c <ce303_power+0x10a0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8012302:	8a3b      	ldrh	r3, [r7, #16]
 8012304:	3301      	adds	r3, #1
 8012306:	4a1d      	ldr	r2, [pc, #116]	; (801237c <ce303_power+0xf80>)
 8012308:	5cd3      	ldrb	r3, [r2, r3]
 801230a:	b29b      	uxth	r3, r3
 801230c:	3b30      	subs	r3, #48	; 0x30
 801230e:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8012310:	8a3b      	ldrh	r3, [r7, #16]
 8012312:	3304      	adds	r3, #4
 8012314:	4a19      	ldr	r2, [pc, #100]	; (801237c <ce303_power+0xf80>)
 8012316:	5cd3      	ldrb	r3, [r2, r3]
 8012318:	2b29      	cmp	r3, #41	; 0x29
 801231a:	d110      	bne.n	801233e <ce303_power+0xf42>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 801231c:	8a3b      	ldrh	r3, [r7, #16]
 801231e:	3303      	adds	r3, #3
 8012320:	4a16      	ldr	r2, [pc, #88]	; (801237c <ce303_power+0xf80>)
 8012322:	5cd3      	ldrb	r3, [r2, r3]
 8012324:	3b30      	subs	r3, #48	; 0x30
 8012326:	b29b      	uxth	r3, r3
 8012328:	461a      	mov	r2, r3
 801232a:	0092      	lsls	r2, r2, #2
 801232c:	4413      	add	r3, r2
 801232e:	461a      	mov	r2, r3
 8012330:	0091      	lsls	r1, r2, #2
 8012332:	461a      	mov	r2, r3
 8012334:	460b      	mov	r3, r1
 8012336:	4413      	add	r3, r2
 8012338:	009b      	lsls	r3, r3, #2
 801233a:	82fb      	strh	r3, [r7, #22]
 801233c:	e077      	b.n	801242e <ce303_power+0x1032>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801233e:	8a3b      	ldrh	r3, [r7, #16]
 8012340:	3305      	adds	r3, #5
 8012342:	4a0e      	ldr	r2, [pc, #56]	; (801237c <ce303_power+0xf80>)
 8012344:	5cd3      	ldrb	r3, [r2, r3]
 8012346:	2b29      	cmp	r3, #41	; 0x29
 8012348:	d11e      	bne.n	8012388 <ce303_power+0xf8c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801234a:	8a3b      	ldrh	r3, [r7, #16]
 801234c:	3303      	adds	r3, #3
 801234e:	4a0b      	ldr	r2, [pc, #44]	; (801237c <ce303_power+0xf80>)
 8012350:	5cd3      	ldrb	r3, [r2, r3]
 8012352:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012356:	4613      	mov	r3, r2
 8012358:	009b      	lsls	r3, r3, #2
 801235a:	4413      	add	r3, r2
 801235c:	005b      	lsls	r3, r3, #1
 801235e:	4619      	mov	r1, r3
 8012360:	8a3b      	ldrh	r3, [r7, #16]
 8012362:	3304      	adds	r3, #4
 8012364:	4a05      	ldr	r2, [pc, #20]	; (801237c <ce303_power+0xf80>)
 8012366:	5cd3      	ldrb	r3, [r2, r3]
 8012368:	3b30      	subs	r3, #48	; 0x30
 801236a:	440b      	add	r3, r1
 801236c:	b29b      	uxth	r3, r3
 801236e:	461a      	mov	r2, r3
 8012370:	0092      	lsls	r2, r2, #2
 8012372:	4413      	add	r3, r2
 8012374:	005b      	lsls	r3, r3, #1
 8012376:	82fb      	strh	r3, [r7, #22]
 8012378:	e059      	b.n	801242e <ce303_power+0x1032>
 801237a:	bf00      	nop
 801237c:	200098e4 	.word	0x200098e4
 8012380:	20009a6c 	.word	0x20009a6c
 8012384:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8012388:	8a3b      	ldrh	r3, [r7, #16]
 801238a:	3306      	adds	r3, #6
 801238c:	4ab0      	ldr	r2, [pc, #704]	; (8012650 <ce303_power+0x1254>)
 801238e:	5cd3      	ldrb	r3, [r2, r3]
 8012390:	2b29      	cmp	r3, #41	; 0x29
 8012392:	d126      	bne.n	80123e2 <ce303_power+0xfe6>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8012394:	8a3b      	ldrh	r3, [r7, #16]
 8012396:	3303      	adds	r3, #3
 8012398:	4aad      	ldr	r2, [pc, #692]	; (8012650 <ce303_power+0x1254>)
 801239a:	5cd3      	ldrb	r3, [r2, r3]
 801239c:	3b30      	subs	r3, #48	; 0x30
 801239e:	b29b      	uxth	r3, r3
 80123a0:	461a      	mov	r2, r3
 80123a2:	0092      	lsls	r2, r2, #2
 80123a4:	4413      	add	r3, r2
 80123a6:	461a      	mov	r2, r3
 80123a8:	0091      	lsls	r1, r2, #2
 80123aa:	461a      	mov	r2, r3
 80123ac:	460b      	mov	r3, r1
 80123ae:	4413      	add	r3, r2
 80123b0:	009b      	lsls	r3, r3, #2
 80123b2:	b29a      	uxth	r2, r3
 80123b4:	8a3b      	ldrh	r3, [r7, #16]
 80123b6:	3304      	adds	r3, #4
 80123b8:	49a5      	ldr	r1, [pc, #660]	; (8012650 <ce303_power+0x1254>)
 80123ba:	5ccb      	ldrb	r3, [r1, r3]
 80123bc:	3b30      	subs	r3, #48	; 0x30
 80123be:	b29b      	uxth	r3, r3
 80123c0:	4619      	mov	r1, r3
 80123c2:	0089      	lsls	r1, r1, #2
 80123c4:	440b      	add	r3, r1
 80123c6:	005b      	lsls	r3, r3, #1
 80123c8:	b29b      	uxth	r3, r3
 80123ca:	4413      	add	r3, r2
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	8a3b      	ldrh	r3, [r7, #16]
 80123d0:	3305      	adds	r3, #5
 80123d2:	499f      	ldr	r1, [pc, #636]	; (8012650 <ce303_power+0x1254>)
 80123d4:	5ccb      	ldrb	r3, [r1, r3]
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4413      	add	r3, r2
 80123da:	b29b      	uxth	r3, r3
 80123dc:	3b30      	subs	r3, #48	; 0x30
 80123de:	82fb      	strh	r3, [r7, #22]
 80123e0:	e025      	b.n	801242e <ce303_power+0x1032>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80123e2:	8a3b      	ldrh	r3, [r7, #16]
 80123e4:	3303      	adds	r3, #3
 80123e6:	4a9a      	ldr	r2, [pc, #616]	; (8012650 <ce303_power+0x1254>)
 80123e8:	5cd3      	ldrb	r3, [r2, r3]
 80123ea:	3b30      	subs	r3, #48	; 0x30
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	461a      	mov	r2, r3
 80123f0:	0092      	lsls	r2, r2, #2
 80123f2:	4413      	add	r3, r2
 80123f4:	461a      	mov	r2, r3
 80123f6:	0091      	lsls	r1, r2, #2
 80123f8:	461a      	mov	r2, r3
 80123fa:	460b      	mov	r3, r1
 80123fc:	4413      	add	r3, r2
 80123fe:	009b      	lsls	r3, r3, #2
 8012400:	b29a      	uxth	r2, r3
 8012402:	8a3b      	ldrh	r3, [r7, #16]
 8012404:	3304      	adds	r3, #4
 8012406:	4992      	ldr	r1, [pc, #584]	; (8012650 <ce303_power+0x1254>)
 8012408:	5ccb      	ldrb	r3, [r1, r3]
 801240a:	3b30      	subs	r3, #48	; 0x30
 801240c:	b29b      	uxth	r3, r3
 801240e:	4619      	mov	r1, r3
 8012410:	0089      	lsls	r1, r1, #2
 8012412:	440b      	add	r3, r1
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	b29b      	uxth	r3, r3
 8012418:	4413      	add	r3, r2
 801241a:	b29a      	uxth	r2, r3
 801241c:	8a3b      	ldrh	r3, [r7, #16]
 801241e:	3305      	adds	r3, #5
 8012420:	498b      	ldr	r1, [pc, #556]	; (8012650 <ce303_power+0x1254>)
 8012422:	5ccb      	ldrb	r3, [r1, r3]
 8012424:	b29b      	uxth	r3, r3
 8012426:	4413      	add	r3, r2
 8012428:	b29b      	uxth	r3, r3
 801242a:	3b30      	subs	r3, #48	; 0x30
 801242c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801242e:	4b89      	ldr	r3, [pc, #548]	; (8012654 <ce303_power+0x1258>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f04f 31ff 	mov.w	r1, #4294967295
 8012436:	4618      	mov	r0, r3
 8012438:	f7f4 fc7e 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 801243c:	89fb      	ldrh	r3, [r7, #14]
 801243e:	0a1b      	lsrs	r3, r3, #8
 8012440:	b29b      	uxth	r3, r3
 8012442:	b2db      	uxtb	r3, r3
 8012444:	4619      	mov	r1, r3
 8012446:	f242 005a 	movw	r0, #8282	; 0x205a
 801244a:	f003 fa09 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 801244e:	89fb      	ldrh	r3, [r7, #14]
 8012450:	b2db      	uxtb	r3, r3
 8012452:	4619      	mov	r1, r3
 8012454:	f242 005b 	movw	r0, #8283	; 0x205b
 8012458:	f003 fa02 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 801245c:	8afb      	ldrh	r3, [r7, #22]
 801245e:	0a1b      	lsrs	r3, r3, #8
 8012460:	b29b      	uxth	r3, r3
 8012462:	b2db      	uxtb	r3, r3
 8012464:	4619      	mov	r1, r3
 8012466:	f242 0060 	movw	r0, #8288	; 0x2060
 801246a:	f003 f9f9 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801246e:	8afb      	ldrh	r3, [r7, #22]
 8012470:	b2db      	uxtb	r3, r3
 8012472:	4619      	mov	r1, r3
 8012474:	f242 0061 	movw	r0, #8289	; 0x2061
 8012478:	f003 f9f2 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801247c:	4b75      	ldr	r3, [pc, #468]	; (8012654 <ce303_power+0x1258>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4618      	mov	r0, r3
 8012482:	f7f4 fca7 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 8012486:	4a74      	ldr	r2, [pc, #464]	; (8012658 <ce303_power+0x125c>)
 8012488:	89fb      	ldrh	r3, [r7, #14]
 801248a:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 801248e:	4a72      	ldr	r2, [pc, #456]	; (8012658 <ce303_power+0x125c>)
 8012490:	8afb      	ldrh	r3, [r7, #22]
 8012492:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 8012496:	2301      	movs	r3, #1
 8012498:	74fb      	strb	r3, [r7, #19]
 801249a:	e1ce      	b.n	801283a <ce303_power+0x143e>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 801249c:	8a3b      	ldrh	r3, [r7, #16]
 801249e:	3303      	adds	r3, #3
 80124a0:	4a6b      	ldr	r2, [pc, #428]	; (8012650 <ce303_power+0x1254>)
 80124a2:	5cd3      	ldrb	r3, [r2, r3]
 80124a4:	2b2e      	cmp	r3, #46	; 0x2e
 80124a6:	f040 80d9 	bne.w	801265c <ce303_power+0x1260>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80124aa:	8a3b      	ldrh	r3, [r7, #16]
 80124ac:	3301      	adds	r3, #1
 80124ae:	4a68      	ldr	r2, [pc, #416]	; (8012650 <ce303_power+0x1254>)
 80124b0:	5cd3      	ldrb	r3, [r2, r3]
 80124b2:	3b30      	subs	r3, #48	; 0x30
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	461a      	mov	r2, r3
 80124b8:	0092      	lsls	r2, r2, #2
 80124ba:	4413      	add	r3, r2
 80124bc:	005b      	lsls	r3, r3, #1
 80124be:	b29a      	uxth	r2, r3
 80124c0:	8a3b      	ldrh	r3, [r7, #16]
 80124c2:	3302      	adds	r3, #2
 80124c4:	4962      	ldr	r1, [pc, #392]	; (8012650 <ce303_power+0x1254>)
 80124c6:	5ccb      	ldrb	r3, [r1, r3]
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	4413      	add	r3, r2
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	3b30      	subs	r3, #48	; 0x30
 80124d0:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80124d2:	8a3b      	ldrh	r3, [r7, #16]
 80124d4:	3305      	adds	r3, #5
 80124d6:	4a5e      	ldr	r2, [pc, #376]	; (8012650 <ce303_power+0x1254>)
 80124d8:	5cd3      	ldrb	r3, [r2, r3]
 80124da:	2b29      	cmp	r3, #41	; 0x29
 80124dc:	d110      	bne.n	8012500 <ce303_power+0x1104>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80124de:	8a3b      	ldrh	r3, [r7, #16]
 80124e0:	3304      	adds	r3, #4
 80124e2:	4a5b      	ldr	r2, [pc, #364]	; (8012650 <ce303_power+0x1254>)
 80124e4:	5cd3      	ldrb	r3, [r2, r3]
 80124e6:	3b30      	subs	r3, #48	; 0x30
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	461a      	mov	r2, r3
 80124ec:	0092      	lsls	r2, r2, #2
 80124ee:	4413      	add	r3, r2
 80124f0:	461a      	mov	r2, r3
 80124f2:	0091      	lsls	r1, r2, #2
 80124f4:	461a      	mov	r2, r3
 80124f6:	460b      	mov	r3, r1
 80124f8:	4413      	add	r3, r2
 80124fa:	009b      	lsls	r3, r3, #2
 80124fc:	82fb      	strh	r3, [r7, #22]
 80124fe:	e070      	b.n	80125e2 <ce303_power+0x11e6>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8012500:	8a3b      	ldrh	r3, [r7, #16]
 8012502:	3306      	adds	r3, #6
 8012504:	4a52      	ldr	r2, [pc, #328]	; (8012650 <ce303_power+0x1254>)
 8012506:	5cd3      	ldrb	r3, [r2, r3]
 8012508:	2b29      	cmp	r3, #41	; 0x29
 801250a:	d117      	bne.n	801253c <ce303_power+0x1140>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 801250c:	8a3b      	ldrh	r3, [r7, #16]
 801250e:	3304      	adds	r3, #4
 8012510:	4a4f      	ldr	r2, [pc, #316]	; (8012650 <ce303_power+0x1254>)
 8012512:	5cd3      	ldrb	r3, [r2, r3]
 8012514:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012518:	4613      	mov	r3, r2
 801251a:	009b      	lsls	r3, r3, #2
 801251c:	4413      	add	r3, r2
 801251e:	005b      	lsls	r3, r3, #1
 8012520:	4619      	mov	r1, r3
 8012522:	8a3b      	ldrh	r3, [r7, #16]
 8012524:	3305      	adds	r3, #5
 8012526:	4a4a      	ldr	r2, [pc, #296]	; (8012650 <ce303_power+0x1254>)
 8012528:	5cd3      	ldrb	r3, [r2, r3]
 801252a:	3b30      	subs	r3, #48	; 0x30
 801252c:	440b      	add	r3, r1
 801252e:	b29b      	uxth	r3, r3
 8012530:	461a      	mov	r2, r3
 8012532:	0092      	lsls	r2, r2, #2
 8012534:	4413      	add	r3, r2
 8012536:	005b      	lsls	r3, r3, #1
 8012538:	82fb      	strh	r3, [r7, #22]
 801253a:	e052      	b.n	80125e2 <ce303_power+0x11e6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 801253c:	8a3b      	ldrh	r3, [r7, #16]
 801253e:	3307      	adds	r3, #7
 8012540:	4a43      	ldr	r2, [pc, #268]	; (8012650 <ce303_power+0x1254>)
 8012542:	5cd3      	ldrb	r3, [r2, r3]
 8012544:	2b29      	cmp	r3, #41	; 0x29
 8012546:	d126      	bne.n	8012596 <ce303_power+0x119a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012548:	8a3b      	ldrh	r3, [r7, #16]
 801254a:	3304      	adds	r3, #4
 801254c:	4a40      	ldr	r2, [pc, #256]	; (8012650 <ce303_power+0x1254>)
 801254e:	5cd3      	ldrb	r3, [r2, r3]
 8012550:	3b30      	subs	r3, #48	; 0x30
 8012552:	b29b      	uxth	r3, r3
 8012554:	461a      	mov	r2, r3
 8012556:	0092      	lsls	r2, r2, #2
 8012558:	4413      	add	r3, r2
 801255a:	461a      	mov	r2, r3
 801255c:	0091      	lsls	r1, r2, #2
 801255e:	461a      	mov	r2, r3
 8012560:	460b      	mov	r3, r1
 8012562:	4413      	add	r3, r2
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	b29a      	uxth	r2, r3
 8012568:	8a3b      	ldrh	r3, [r7, #16]
 801256a:	3305      	adds	r3, #5
 801256c:	4938      	ldr	r1, [pc, #224]	; (8012650 <ce303_power+0x1254>)
 801256e:	5ccb      	ldrb	r3, [r1, r3]
 8012570:	3b30      	subs	r3, #48	; 0x30
 8012572:	b29b      	uxth	r3, r3
 8012574:	4619      	mov	r1, r3
 8012576:	0089      	lsls	r1, r1, #2
 8012578:	440b      	add	r3, r1
 801257a:	005b      	lsls	r3, r3, #1
 801257c:	b29b      	uxth	r3, r3
 801257e:	4413      	add	r3, r2
 8012580:	b29a      	uxth	r2, r3
 8012582:	8a3b      	ldrh	r3, [r7, #16]
 8012584:	3306      	adds	r3, #6
 8012586:	4932      	ldr	r1, [pc, #200]	; (8012650 <ce303_power+0x1254>)
 8012588:	5ccb      	ldrb	r3, [r1, r3]
 801258a:	b29b      	uxth	r3, r3
 801258c:	4413      	add	r3, r2
 801258e:	b29b      	uxth	r3, r3
 8012590:	3b30      	subs	r3, #48	; 0x30
 8012592:	82fb      	strh	r3, [r7, #22]
 8012594:	e025      	b.n	80125e2 <ce303_power+0x11e6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012596:	8a3b      	ldrh	r3, [r7, #16]
 8012598:	3304      	adds	r3, #4
 801259a:	4a2d      	ldr	r2, [pc, #180]	; (8012650 <ce303_power+0x1254>)
 801259c:	5cd3      	ldrb	r3, [r2, r3]
 801259e:	3b30      	subs	r3, #48	; 0x30
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	461a      	mov	r2, r3
 80125a4:	0092      	lsls	r2, r2, #2
 80125a6:	4413      	add	r3, r2
 80125a8:	461a      	mov	r2, r3
 80125aa:	0091      	lsls	r1, r2, #2
 80125ac:	461a      	mov	r2, r3
 80125ae:	460b      	mov	r3, r1
 80125b0:	4413      	add	r3, r2
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	b29a      	uxth	r2, r3
 80125b6:	8a3b      	ldrh	r3, [r7, #16]
 80125b8:	3305      	adds	r3, #5
 80125ba:	4925      	ldr	r1, [pc, #148]	; (8012650 <ce303_power+0x1254>)
 80125bc:	5ccb      	ldrb	r3, [r1, r3]
 80125be:	3b30      	subs	r3, #48	; 0x30
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	4619      	mov	r1, r3
 80125c4:	0089      	lsls	r1, r1, #2
 80125c6:	440b      	add	r3, r1
 80125c8:	005b      	lsls	r3, r3, #1
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	4413      	add	r3, r2
 80125ce:	b29a      	uxth	r2, r3
 80125d0:	8a3b      	ldrh	r3, [r7, #16]
 80125d2:	3306      	adds	r3, #6
 80125d4:	491e      	ldr	r1, [pc, #120]	; (8012650 <ce303_power+0x1254>)
 80125d6:	5ccb      	ldrb	r3, [r1, r3]
 80125d8:	b29b      	uxth	r3, r3
 80125da:	4413      	add	r3, r2
 80125dc:	b29b      	uxth	r3, r3
 80125de:	3b30      	subs	r3, #48	; 0x30
 80125e0:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80125e2:	4b1c      	ldr	r3, [pc, #112]	; (8012654 <ce303_power+0x1258>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	f04f 31ff 	mov.w	r1, #4294967295
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7f4 fba4 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 80125f0:	89fb      	ldrh	r3, [r7, #14]
 80125f2:	0a1b      	lsrs	r3, r3, #8
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	4619      	mov	r1, r3
 80125fa:	f242 005a 	movw	r0, #8282	; 0x205a
 80125fe:	f003 f92f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8012602:	89fb      	ldrh	r3, [r7, #14]
 8012604:	b2db      	uxtb	r3, r3
 8012606:	4619      	mov	r1, r3
 8012608:	f242 005b 	movw	r0, #8283	; 0x205b
 801260c:	f003 f928 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8012610:	8afb      	ldrh	r3, [r7, #22]
 8012612:	0a1b      	lsrs	r3, r3, #8
 8012614:	b29b      	uxth	r3, r3
 8012616:	b2db      	uxtb	r3, r3
 8012618:	4619      	mov	r1, r3
 801261a:	f242 0060 	movw	r0, #8288	; 0x2060
 801261e:	f003 f91f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8012622:	8afb      	ldrh	r3, [r7, #22]
 8012624:	b2db      	uxtb	r3, r3
 8012626:	4619      	mov	r1, r3
 8012628:	f242 0061 	movw	r0, #8289	; 0x2061
 801262c:	f003 f918 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8012630:	4b08      	ldr	r3, [pc, #32]	; (8012654 <ce303_power+0x1258>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	4618      	mov	r0, r3
 8012636:	f7f4 fbcd 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 801263a:	4a07      	ldr	r2, [pc, #28]	; (8012658 <ce303_power+0x125c>)
 801263c:	89fb      	ldrh	r3, [r7, #14]
 801263e:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 8012642:	4a05      	ldr	r2, [pc, #20]	; (8012658 <ce303_power+0x125c>)
 8012644:	8afb      	ldrh	r3, [r7, #22]
 8012646:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 801264a:	2301      	movs	r3, #1
 801264c:	74fb      	strb	r3, [r7, #19]
 801264e:	e0f4      	b.n	801283a <ce303_power+0x143e>
 8012650:	200098e4 	.word	0x200098e4
 8012654:	20009a6c 	.word	0x20009a6c
 8012658:	2000a10c 	.word	0x2000a10c
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 801265c:	8a3b      	ldrh	r3, [r7, #16]
 801265e:	3304      	adds	r3, #4
 8012660:	4a85      	ldr	r2, [pc, #532]	; (8012878 <ce303_power+0x147c>)
 8012662:	5cd3      	ldrb	r3, [r2, r3]
 8012664:	2b2e      	cmp	r3, #46	; 0x2e
 8012666:	f040 80e8 	bne.w	801283a <ce303_power+0x143e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 801266a:	8a3b      	ldrh	r3, [r7, #16]
 801266c:	3301      	adds	r3, #1
 801266e:	4a82      	ldr	r2, [pc, #520]	; (8012878 <ce303_power+0x147c>)
 8012670:	5cd3      	ldrb	r3, [r2, r3]
 8012672:	3b30      	subs	r3, #48	; 0x30
 8012674:	b29b      	uxth	r3, r3
 8012676:	461a      	mov	r2, r3
 8012678:	0092      	lsls	r2, r2, #2
 801267a:	4413      	add	r3, r2
 801267c:	461a      	mov	r2, r3
 801267e:	0091      	lsls	r1, r2, #2
 8012680:	461a      	mov	r2, r3
 8012682:	460b      	mov	r3, r1
 8012684:	4413      	add	r3, r2
 8012686:	009b      	lsls	r3, r3, #2
 8012688:	b29a      	uxth	r2, r3
 801268a:	8a3b      	ldrh	r3, [r7, #16]
 801268c:	3302      	adds	r3, #2
 801268e:	497a      	ldr	r1, [pc, #488]	; (8012878 <ce303_power+0x147c>)
 8012690:	5ccb      	ldrb	r3, [r1, r3]
 8012692:	3b30      	subs	r3, #48	; 0x30
 8012694:	b29b      	uxth	r3, r3
 8012696:	4619      	mov	r1, r3
 8012698:	0089      	lsls	r1, r1, #2
 801269a:	440b      	add	r3, r1
 801269c:	005b      	lsls	r3, r3, #1
 801269e:	b29b      	uxth	r3, r3
 80126a0:	4413      	add	r3, r2
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	8a3b      	ldrh	r3, [r7, #16]
 80126a6:	3303      	adds	r3, #3
 80126a8:	4973      	ldr	r1, [pc, #460]	; (8012878 <ce303_power+0x147c>)
 80126aa:	5ccb      	ldrb	r3, [r1, r3]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	4413      	add	r3, r2
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	3b30      	subs	r3, #48	; 0x30
 80126b4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80126b6:	8a3b      	ldrh	r3, [r7, #16]
 80126b8:	3306      	adds	r3, #6
 80126ba:	4a6f      	ldr	r2, [pc, #444]	; (8012878 <ce303_power+0x147c>)
 80126bc:	5cd3      	ldrb	r3, [r2, r3]
 80126be:	2b29      	cmp	r3, #41	; 0x29
 80126c0:	d110      	bne.n	80126e4 <ce303_power+0x12e8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80126c2:	8a3b      	ldrh	r3, [r7, #16]
 80126c4:	3305      	adds	r3, #5
 80126c6:	4a6c      	ldr	r2, [pc, #432]	; (8012878 <ce303_power+0x147c>)
 80126c8:	5cd3      	ldrb	r3, [r2, r3]
 80126ca:	3b30      	subs	r3, #48	; 0x30
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	461a      	mov	r2, r3
 80126d0:	0092      	lsls	r2, r2, #2
 80126d2:	4413      	add	r3, r2
 80126d4:	461a      	mov	r2, r3
 80126d6:	0091      	lsls	r1, r2, #2
 80126d8:	461a      	mov	r2, r3
 80126da:	460b      	mov	r3, r1
 80126dc:	4413      	add	r3, r2
 80126de:	009b      	lsls	r3, r3, #2
 80126e0:	82fb      	strh	r3, [r7, #22]
 80126e2:	e070      	b.n	80127c6 <ce303_power+0x13ca>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 80126e4:	8a3b      	ldrh	r3, [r7, #16]
 80126e6:	3307      	adds	r3, #7
 80126e8:	4a63      	ldr	r2, [pc, #396]	; (8012878 <ce303_power+0x147c>)
 80126ea:	5cd3      	ldrb	r3, [r2, r3]
 80126ec:	2b29      	cmp	r3, #41	; 0x29
 80126ee:	d117      	bne.n	8012720 <ce303_power+0x1324>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 80126f0:	8a3b      	ldrh	r3, [r7, #16]
 80126f2:	3305      	adds	r3, #5
 80126f4:	4a60      	ldr	r2, [pc, #384]	; (8012878 <ce303_power+0x147c>)
 80126f6:	5cd3      	ldrb	r3, [r2, r3]
 80126f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80126fc:	4613      	mov	r3, r2
 80126fe:	009b      	lsls	r3, r3, #2
 8012700:	4413      	add	r3, r2
 8012702:	005b      	lsls	r3, r3, #1
 8012704:	4619      	mov	r1, r3
 8012706:	8a3b      	ldrh	r3, [r7, #16]
 8012708:	3306      	adds	r3, #6
 801270a:	4a5b      	ldr	r2, [pc, #364]	; (8012878 <ce303_power+0x147c>)
 801270c:	5cd3      	ldrb	r3, [r2, r3]
 801270e:	3b30      	subs	r3, #48	; 0x30
 8012710:	440b      	add	r3, r1
 8012712:	b29b      	uxth	r3, r3
 8012714:	461a      	mov	r2, r3
 8012716:	0092      	lsls	r2, r2, #2
 8012718:	4413      	add	r3, r2
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	82fb      	strh	r3, [r7, #22]
 801271e:	e052      	b.n	80127c6 <ce303_power+0x13ca>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8012720:	8a3b      	ldrh	r3, [r7, #16]
 8012722:	3308      	adds	r3, #8
 8012724:	4a54      	ldr	r2, [pc, #336]	; (8012878 <ce303_power+0x147c>)
 8012726:	5cd3      	ldrb	r3, [r2, r3]
 8012728:	2b29      	cmp	r3, #41	; 0x29
 801272a:	d126      	bne.n	801277a <ce303_power+0x137e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801272c:	8a3b      	ldrh	r3, [r7, #16]
 801272e:	3305      	adds	r3, #5
 8012730:	4a51      	ldr	r2, [pc, #324]	; (8012878 <ce303_power+0x147c>)
 8012732:	5cd3      	ldrb	r3, [r2, r3]
 8012734:	3b30      	subs	r3, #48	; 0x30
 8012736:	b29b      	uxth	r3, r3
 8012738:	461a      	mov	r2, r3
 801273a:	0092      	lsls	r2, r2, #2
 801273c:	4413      	add	r3, r2
 801273e:	461a      	mov	r2, r3
 8012740:	0091      	lsls	r1, r2, #2
 8012742:	461a      	mov	r2, r3
 8012744:	460b      	mov	r3, r1
 8012746:	4413      	add	r3, r2
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	b29a      	uxth	r2, r3
 801274c:	8a3b      	ldrh	r3, [r7, #16]
 801274e:	3306      	adds	r3, #6
 8012750:	4949      	ldr	r1, [pc, #292]	; (8012878 <ce303_power+0x147c>)
 8012752:	5ccb      	ldrb	r3, [r1, r3]
 8012754:	3b30      	subs	r3, #48	; 0x30
 8012756:	b29b      	uxth	r3, r3
 8012758:	4619      	mov	r1, r3
 801275a:	0089      	lsls	r1, r1, #2
 801275c:	440b      	add	r3, r1
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	b29b      	uxth	r3, r3
 8012762:	4413      	add	r3, r2
 8012764:	b29a      	uxth	r2, r3
 8012766:	8a3b      	ldrh	r3, [r7, #16]
 8012768:	3307      	adds	r3, #7
 801276a:	4943      	ldr	r1, [pc, #268]	; (8012878 <ce303_power+0x147c>)
 801276c:	5ccb      	ldrb	r3, [r1, r3]
 801276e:	b29b      	uxth	r3, r3
 8012770:	4413      	add	r3, r2
 8012772:	b29b      	uxth	r3, r3
 8012774:	3b30      	subs	r3, #48	; 0x30
 8012776:	82fb      	strh	r3, [r7, #22]
 8012778:	e025      	b.n	80127c6 <ce303_power+0x13ca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801277a:	8a3b      	ldrh	r3, [r7, #16]
 801277c:	3305      	adds	r3, #5
 801277e:	4a3e      	ldr	r2, [pc, #248]	; (8012878 <ce303_power+0x147c>)
 8012780:	5cd3      	ldrb	r3, [r2, r3]
 8012782:	3b30      	subs	r3, #48	; 0x30
 8012784:	b29b      	uxth	r3, r3
 8012786:	461a      	mov	r2, r3
 8012788:	0092      	lsls	r2, r2, #2
 801278a:	4413      	add	r3, r2
 801278c:	461a      	mov	r2, r3
 801278e:	0091      	lsls	r1, r2, #2
 8012790:	461a      	mov	r2, r3
 8012792:	460b      	mov	r3, r1
 8012794:	4413      	add	r3, r2
 8012796:	009b      	lsls	r3, r3, #2
 8012798:	b29a      	uxth	r2, r3
 801279a:	8a3b      	ldrh	r3, [r7, #16]
 801279c:	3306      	adds	r3, #6
 801279e:	4936      	ldr	r1, [pc, #216]	; (8012878 <ce303_power+0x147c>)
 80127a0:	5ccb      	ldrb	r3, [r1, r3]
 80127a2:	3b30      	subs	r3, #48	; 0x30
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	4619      	mov	r1, r3
 80127a8:	0089      	lsls	r1, r1, #2
 80127aa:	440b      	add	r3, r1
 80127ac:	005b      	lsls	r3, r3, #1
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	4413      	add	r3, r2
 80127b2:	b29a      	uxth	r2, r3
 80127b4:	8a3b      	ldrh	r3, [r7, #16]
 80127b6:	3307      	adds	r3, #7
 80127b8:	492f      	ldr	r1, [pc, #188]	; (8012878 <ce303_power+0x147c>)
 80127ba:	5ccb      	ldrb	r3, [r1, r3]
 80127bc:	b29b      	uxth	r3, r3
 80127be:	4413      	add	r3, r2
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	3b30      	subs	r3, #48	; 0x30
 80127c4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80127c6:	4b2d      	ldr	r3, [pc, #180]	; (801287c <ce303_power+0x1480>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	f04f 31ff 	mov.w	r1, #4294967295
 80127ce:	4618      	mov	r0, r3
 80127d0:	f7f4 fab2 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 80127d4:	89fb      	ldrh	r3, [r7, #14]
 80127d6:	0a1b      	lsrs	r3, r3, #8
 80127d8:	b29b      	uxth	r3, r3
 80127da:	b2db      	uxtb	r3, r3
 80127dc:	4619      	mov	r1, r3
 80127de:	f242 005a 	movw	r0, #8282	; 0x205a
 80127e2:	f003 f83d 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 80127e6:	89fb      	ldrh	r3, [r7, #14]
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	4619      	mov	r1, r3
 80127ec:	f242 005b 	movw	r0, #8283	; 0x205b
 80127f0:	f003 f836 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 80127f4:	8afb      	ldrh	r3, [r7, #22]
 80127f6:	0a1b      	lsrs	r3, r3, #8
 80127f8:	b29b      	uxth	r3, r3
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	4619      	mov	r1, r3
 80127fe:	f242 0060 	movw	r0, #8288	; 0x2060
 8012802:	f003 f82d 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8012806:	8afb      	ldrh	r3, [r7, #22]
 8012808:	b2db      	uxtb	r3, r3
 801280a:	4619      	mov	r1, r3
 801280c:	f242 0061 	movw	r0, #8289	; 0x2061
 8012810:	f003 f826 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8012814:	4b19      	ldr	r3, [pc, #100]	; (801287c <ce303_power+0x1480>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	4618      	mov	r0, r3
 801281a:	f7f4 fadb 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 801281e:	4a18      	ldr	r2, [pc, #96]	; (8012880 <ce303_power+0x1484>)
 8012820:	89fb      	ldrh	r3, [r7, #14]
 8012822:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 8012826:	4a16      	ldr	r2, [pc, #88]	; (8012880 <ce303_power+0x1484>)
 8012828:	8afb      	ldrh	r3, [r7, #22]
 801282a:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 801282e:	2301      	movs	r3, #1
 8012830:	74fb      	strb	r3, [r7, #19]
 8012832:	e002      	b.n	801283a <ce303_power+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8012834:	bf00      	nop
 8012836:	e000      	b.n	801283a <ce303_power+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8012838:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 801283a:	8a3b      	ldrh	r3, [r7, #16]
 801283c:	3301      	adds	r3, #1
 801283e:	823b      	strh	r3, [r7, #16]
 8012840:	8a3b      	ldrh	r3, [r7, #16]
 8012842:	2bff      	cmp	r3, #255	; 0xff
 8012844:	f67e afd1 	bls.w	80117ea <ce303_power+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 8012848:	4b0e      	ldr	r3, [pc, #56]	; (8012884 <ce303_power+0x1488>)
 801284a:	2200      	movs	r2, #0
 801284c:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801284e:	f7fc f925 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8012852:	2201      	movs	r2, #1
 8012854:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012858:	480b      	ldr	r0, [pc, #44]	; (8012888 <ce303_power+0x148c>)
 801285a:	f7f0 fd07 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 801285e:	2205      	movs	r2, #5
 8012860:	490a      	ldr	r1, [pc, #40]	; (801288c <ce303_power+0x1490>)
 8012862:	480b      	ldr	r0, [pc, #44]	; (8012890 <ce303_power+0x1494>)
 8012864:	f7f2 ffba 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8012868:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801286c:	f7ef fa4a 	bl	8001d04 <HAL_Delay>

}
 8012870:	bf00      	nop
 8012872:	3718      	adds	r7, #24
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}
 8012878:	200098e4 	.word	0x200098e4
 801287c:	20009a6c 	.word	0x20009a6c
 8012880:	2000a10c 	.word	0x2000a10c
 8012884:	2000085d 	.word	0x2000085d
 8012888:	40021800 	.word	0x40021800
 801288c:	20000030 	.word	0x20000030
 8012890:	20009c70 	.word	0x20009c70

08012894 <ce303_tarif>:

void ce303_tarif (uint8_t meter_id)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b086      	sub	sp, #24
 8012898:	af00      	add	r7, sp, #0
 801289a:	4603      	mov	r3, r0
 801289c:	71fb      	strb	r3, [r7, #7]
	uint8_t tarif_2_state;
	uint8_t tarif_3_state;
	uint8_t tarif_4_state;
	uint8_t tarif_5_state;

	if( (meter_id>99)&&(meter_id<1000) )
 801289e:	79fb      	ldrb	r3, [r7, #7]
 80128a0:	2b63      	cmp	r3, #99	; 0x63
 80128a2:	d962      	bls.n	801296a <ce303_tarif+0xd6>
	{
		start_buf[0] = 0x2F;
 80128a4:	4b9d      	ldr	r3, [pc, #628]	; (8012b1c <ce303_tarif+0x288>)
 80128a6:	222f      	movs	r2, #47	; 0x2f
 80128a8:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80128aa:	4b9c      	ldr	r3, [pc, #624]	; (8012b1c <ce303_tarif+0x288>)
 80128ac:	223f      	movs	r2, #63	; 0x3f
 80128ae:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 80128b0:	79fb      	ldrb	r3, [r7, #7]
 80128b2:	4a9b      	ldr	r2, [pc, #620]	; (8012b20 <ce303_tarif+0x28c>)
 80128b4:	fba2 2303 	umull	r2, r3, r2, r3
 80128b8:	095b      	lsrs	r3, r3, #5
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	3330      	adds	r3, #48	; 0x30
 80128be:	b2da      	uxtb	r2, r3
 80128c0:	4b96      	ldr	r3, [pc, #600]	; (8012b1c <ce303_tarif+0x288>)
 80128c2:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 80128c4:	79fa      	ldrb	r2, [r7, #7]
 80128c6:	79fb      	ldrb	r3, [r7, #7]
 80128c8:	4995      	ldr	r1, [pc, #596]	; (8012b20 <ce303_tarif+0x28c>)
 80128ca:	fba1 1303 	umull	r1, r3, r1, r3
 80128ce:	095b      	lsrs	r3, r3, #5
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	4619      	mov	r1, r3
 80128d4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80128d8:	fb03 f301 	mul.w	r3, r3, r1
 80128dc:	4413      	add	r3, r2
 80128de:	4a91      	ldr	r2, [pc, #580]	; (8012b24 <ce303_tarif+0x290>)
 80128e0:	fb82 1203 	smull	r1, r2, r2, r3
 80128e4:	1092      	asrs	r2, r2, #2
 80128e6:	17db      	asrs	r3, r3, #31
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	3330      	adds	r3, #48	; 0x30
 80128ee:	b2da      	uxtb	r2, r3
 80128f0:	4b8a      	ldr	r3, [pc, #552]	; (8012b1c <ce303_tarif+0x288>)
 80128f2:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 80128f4:	79fa      	ldrb	r2, [r7, #7]
 80128f6:	79fb      	ldrb	r3, [r7, #7]
 80128f8:	4989      	ldr	r1, [pc, #548]	; (8012b20 <ce303_tarif+0x28c>)
 80128fa:	fba1 1303 	umull	r1, r3, r1, r3
 80128fe:	095b      	lsrs	r3, r3, #5
 8012900:	b2db      	uxtb	r3, r3
 8012902:	4619      	mov	r1, r3
 8012904:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8012908:	fb03 f301 	mul.w	r3, r3, r1
 801290c:	441a      	add	r2, r3
 801290e:	4b85      	ldr	r3, [pc, #532]	; (8012b24 <ce303_tarif+0x290>)
 8012910:	fb83 1302 	smull	r1, r3, r3, r2
 8012914:	1099      	asrs	r1, r3, #2
 8012916:	17d3      	asrs	r3, r2, #31
 8012918:	1ac9      	subs	r1, r1, r3
 801291a:	460b      	mov	r3, r1
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	440b      	add	r3, r1
 8012920:	005b      	lsls	r3, r3, #1
 8012922:	1ad1      	subs	r1, r2, r3
 8012924:	b2cb      	uxtb	r3, r1
 8012926:	3330      	adds	r3, #48	; 0x30
 8012928:	b2da      	uxtb	r2, r3
 801292a:	4b7c      	ldr	r3, [pc, #496]	; (8012b1c <ce303_tarif+0x288>)
 801292c:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 801292e:	4b7b      	ldr	r3, [pc, #492]	; (8012b1c <ce303_tarif+0x288>)
 8012930:	2221      	movs	r2, #33	; 0x21
 8012932:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8012934:	4b79      	ldr	r3, [pc, #484]	; (8012b1c <ce303_tarif+0x288>)
 8012936:	220d      	movs	r2, #13
 8012938:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 801293a:	4b78      	ldr	r3, [pc, #480]	; (8012b1c <ce303_tarif+0x288>)
 801293c:	220a      	movs	r2, #10
 801293e:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8012940:	4b79      	ldr	r3, [pc, #484]	; (8012b28 <ce303_tarif+0x294>)
 8012942:	2200      	movs	r2, #0
 8012944:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012946:	f7fc f8a9 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801294a:	2201      	movs	r2, #1
 801294c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012950:	4876      	ldr	r0, [pc, #472]	; (8012b2c <ce303_tarif+0x298>)
 8012952:	f7f0 fc8b 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8012956:	2208      	movs	r2, #8
 8012958:	4970      	ldr	r1, [pc, #448]	; (8012b1c <ce303_tarif+0x288>)
 801295a:	4875      	ldr	r0, [pc, #468]	; (8012b30 <ce303_tarif+0x29c>)
 801295c:	f7f2 ff3e 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8012960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012964:	f7ef f9ce 	bl	8001d04 <HAL_Delay>
 8012968:	e072      	b.n	8012a50 <ce303_tarif+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 801296a:	79fb      	ldrb	r3, [r7, #7]
 801296c:	2b09      	cmp	r3, #9
 801296e:	d944      	bls.n	80129fa <ce303_tarif+0x166>
 8012970:	79fb      	ldrb	r3, [r7, #7]
 8012972:	2b63      	cmp	r3, #99	; 0x63
 8012974:	d841      	bhi.n	80129fa <ce303_tarif+0x166>
	{
		start_buf[0] = 0x2F;
 8012976:	4b69      	ldr	r3, [pc, #420]	; (8012b1c <ce303_tarif+0x288>)
 8012978:	222f      	movs	r2, #47	; 0x2f
 801297a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801297c:	4b67      	ldr	r3, [pc, #412]	; (8012b1c <ce303_tarif+0x288>)
 801297e:	223f      	movs	r2, #63	; 0x3f
 8012980:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8012982:	79fb      	ldrb	r3, [r7, #7]
 8012984:	4a6b      	ldr	r2, [pc, #428]	; (8012b34 <ce303_tarif+0x2a0>)
 8012986:	fba2 2303 	umull	r2, r3, r2, r3
 801298a:	08db      	lsrs	r3, r3, #3
 801298c:	b2db      	uxtb	r3, r3
 801298e:	3330      	adds	r3, #48	; 0x30
 8012990:	b2da      	uxtb	r2, r3
 8012992:	4b62      	ldr	r3, [pc, #392]	; (8012b1c <ce303_tarif+0x288>)
 8012994:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8012996:	79fb      	ldrb	r3, [r7, #7]
 8012998:	4a66      	ldr	r2, [pc, #408]	; (8012b34 <ce303_tarif+0x2a0>)
 801299a:	fba2 2303 	umull	r2, r3, r2, r3
 801299e:	08db      	lsrs	r3, r3, #3
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	461a      	mov	r2, r3
 80129a4:	0152      	lsls	r2, r2, #5
 80129a6:	1ad2      	subs	r2, r2, r3
 80129a8:	0092      	lsls	r2, r2, #2
 80129aa:	1ad3      	subs	r3, r2, r3
 80129ac:	005b      	lsls	r3, r3, #1
 80129ae:	b2da      	uxtb	r2, r3
 80129b0:	79fb      	ldrb	r3, [r7, #7]
 80129b2:	4413      	add	r3, r2
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	3330      	adds	r3, #48	; 0x30
 80129b8:	b2da      	uxtb	r2, r3
 80129ba:	4b58      	ldr	r3, [pc, #352]	; (8012b1c <ce303_tarif+0x288>)
 80129bc:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 80129be:	4b57      	ldr	r3, [pc, #348]	; (8012b1c <ce303_tarif+0x288>)
 80129c0:	2221      	movs	r2, #33	; 0x21
 80129c2:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 80129c4:	4b55      	ldr	r3, [pc, #340]	; (8012b1c <ce303_tarif+0x288>)
 80129c6:	220d      	movs	r2, #13
 80129c8:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 80129ca:	4b54      	ldr	r3, [pc, #336]	; (8012b1c <ce303_tarif+0x288>)
 80129cc:	220a      	movs	r2, #10
 80129ce:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 80129d0:	4b55      	ldr	r3, [pc, #340]	; (8012b28 <ce303_tarif+0x294>)
 80129d2:	2200      	movs	r2, #0
 80129d4:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80129d6:	f7fc f861 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80129da:	2201      	movs	r2, #1
 80129dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80129e0:	4852      	ldr	r0, [pc, #328]	; (8012b2c <ce303_tarif+0x298>)
 80129e2:	f7f0 fc43 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 80129e6:	2207      	movs	r2, #7
 80129e8:	494c      	ldr	r1, [pc, #304]	; (8012b1c <ce303_tarif+0x288>)
 80129ea:	4851      	ldr	r0, [pc, #324]	; (8012b30 <ce303_tarif+0x29c>)
 80129ec:	f7f2 fef6 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80129f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80129f4:	f7ef f986 	bl	8001d04 <HAL_Delay>
 80129f8:	e02a      	b.n	8012a50 <ce303_tarif+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 80129fa:	79fb      	ldrb	r3, [r7, #7]
 80129fc:	2b09      	cmp	r3, #9
 80129fe:	d827      	bhi.n	8012a50 <ce303_tarif+0x1bc>
	{
		start_buf[0] = 0x2F;
 8012a00:	4b46      	ldr	r3, [pc, #280]	; (8012b1c <ce303_tarif+0x288>)
 8012a02:	222f      	movs	r2, #47	; 0x2f
 8012a04:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8012a06:	4b45      	ldr	r3, [pc, #276]	; (8012b1c <ce303_tarif+0x288>)
 8012a08:	223f      	movs	r2, #63	; 0x3f
 8012a0a:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8012a0c:	79fb      	ldrb	r3, [r7, #7]
 8012a0e:	3330      	adds	r3, #48	; 0x30
 8012a10:	b2da      	uxtb	r2, r3
 8012a12:	4b42      	ldr	r3, [pc, #264]	; (8012b1c <ce303_tarif+0x288>)
 8012a14:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8012a16:	4b41      	ldr	r3, [pc, #260]	; (8012b1c <ce303_tarif+0x288>)
 8012a18:	2221      	movs	r2, #33	; 0x21
 8012a1a:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8012a1c:	4b3f      	ldr	r3, [pc, #252]	; (8012b1c <ce303_tarif+0x288>)
 8012a1e:	220d      	movs	r2, #13
 8012a20:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8012a22:	4b3e      	ldr	r3, [pc, #248]	; (8012b1c <ce303_tarif+0x288>)
 8012a24:	220a      	movs	r2, #10
 8012a26:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8012a28:	4b3f      	ldr	r3, [pc, #252]	; (8012b28 <ce303_tarif+0x294>)
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012a2e:	f7fc f835 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8012a32:	2201      	movs	r2, #1
 8012a34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012a38:	483c      	ldr	r0, [pc, #240]	; (8012b2c <ce303_tarif+0x298>)
 8012a3a:	f7f0 fc17 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8012a3e:	2206      	movs	r2, #6
 8012a40:	4936      	ldr	r1, [pc, #216]	; (8012b1c <ce303_tarif+0x288>)
 8012a42:	483b      	ldr	r0, [pc, #236]	; (8012b30 <ce303_tarif+0x29c>)
 8012a44:	f7f2 feca 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8012a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012a4c:	f7ef f95a 	bl	8001d04 <HAL_Delay>
	}

	if( (meter_id>99)&&(meter_id<1000) )
 8012a50:	79fb      	ldrb	r3, [r7, #7]
 8012a52:	2b63      	cmp	r3, #99	; 0x63
 8012a54:	d970      	bls.n	8012b38 <ce303_tarif+0x2a4>
	{
		start_buf[0] = 0x2F;
 8012a56:	4b31      	ldr	r3, [pc, #196]	; (8012b1c <ce303_tarif+0x288>)
 8012a58:	222f      	movs	r2, #47	; 0x2f
 8012a5a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8012a5c:	4b2f      	ldr	r3, [pc, #188]	; (8012b1c <ce303_tarif+0x288>)
 8012a5e:	223f      	movs	r2, #63	; 0x3f
 8012a60:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8012a62:	79fb      	ldrb	r3, [r7, #7]
 8012a64:	4a2e      	ldr	r2, [pc, #184]	; (8012b20 <ce303_tarif+0x28c>)
 8012a66:	fba2 2303 	umull	r2, r3, r2, r3
 8012a6a:	095b      	lsrs	r3, r3, #5
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	3330      	adds	r3, #48	; 0x30
 8012a70:	b2da      	uxtb	r2, r3
 8012a72:	4b2a      	ldr	r3, [pc, #168]	; (8012b1c <ce303_tarif+0x288>)
 8012a74:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8012a76:	79fa      	ldrb	r2, [r7, #7]
 8012a78:	79fb      	ldrb	r3, [r7, #7]
 8012a7a:	4929      	ldr	r1, [pc, #164]	; (8012b20 <ce303_tarif+0x28c>)
 8012a7c:	fba1 1303 	umull	r1, r3, r1, r3
 8012a80:	095b      	lsrs	r3, r3, #5
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	4619      	mov	r1, r3
 8012a86:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8012a8a:	fb03 f301 	mul.w	r3, r3, r1
 8012a8e:	4413      	add	r3, r2
 8012a90:	4a24      	ldr	r2, [pc, #144]	; (8012b24 <ce303_tarif+0x290>)
 8012a92:	fb82 1203 	smull	r1, r2, r2, r3
 8012a96:	1092      	asrs	r2, r2, #2
 8012a98:	17db      	asrs	r3, r3, #31
 8012a9a:	1ad3      	subs	r3, r2, r3
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	3330      	adds	r3, #48	; 0x30
 8012aa0:	b2da      	uxtb	r2, r3
 8012aa2:	4b1e      	ldr	r3, [pc, #120]	; (8012b1c <ce303_tarif+0x288>)
 8012aa4:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8012aa6:	79fa      	ldrb	r2, [r7, #7]
 8012aa8:	79fb      	ldrb	r3, [r7, #7]
 8012aaa:	491d      	ldr	r1, [pc, #116]	; (8012b20 <ce303_tarif+0x28c>)
 8012aac:	fba1 1303 	umull	r1, r3, r1, r3
 8012ab0:	095b      	lsrs	r3, r3, #5
 8012ab2:	b2db      	uxtb	r3, r3
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8012aba:	fb03 f301 	mul.w	r3, r3, r1
 8012abe:	441a      	add	r2, r3
 8012ac0:	4b18      	ldr	r3, [pc, #96]	; (8012b24 <ce303_tarif+0x290>)
 8012ac2:	fb83 1302 	smull	r1, r3, r3, r2
 8012ac6:	1099      	asrs	r1, r3, #2
 8012ac8:	17d3      	asrs	r3, r2, #31
 8012aca:	1ac9      	subs	r1, r1, r3
 8012acc:	460b      	mov	r3, r1
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	440b      	add	r3, r1
 8012ad2:	005b      	lsls	r3, r3, #1
 8012ad4:	1ad1      	subs	r1, r2, r3
 8012ad6:	b2cb      	uxtb	r3, r1
 8012ad8:	3330      	adds	r3, #48	; 0x30
 8012ada:	b2da      	uxtb	r2, r3
 8012adc:	4b0f      	ldr	r3, [pc, #60]	; (8012b1c <ce303_tarif+0x288>)
 8012ade:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8012ae0:	4b0e      	ldr	r3, [pc, #56]	; (8012b1c <ce303_tarif+0x288>)
 8012ae2:	2221      	movs	r2, #33	; 0x21
 8012ae4:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8012ae6:	4b0d      	ldr	r3, [pc, #52]	; (8012b1c <ce303_tarif+0x288>)
 8012ae8:	220d      	movs	r2, #13
 8012aea:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8012aec:	4b0b      	ldr	r3, [pc, #44]	; (8012b1c <ce303_tarif+0x288>)
 8012aee:	220a      	movs	r2, #10
 8012af0:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8012af2:	4b0d      	ldr	r3, [pc, #52]	; (8012b28 <ce303_tarif+0x294>)
 8012af4:	2200      	movs	r2, #0
 8012af6:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012af8:	f7fb ffd0 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8012afc:	2201      	movs	r2, #1
 8012afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012b02:	480a      	ldr	r0, [pc, #40]	; (8012b2c <ce303_tarif+0x298>)
 8012b04:	f7f0 fbb2 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8012b08:	2208      	movs	r2, #8
 8012b0a:	4904      	ldr	r1, [pc, #16]	; (8012b1c <ce303_tarif+0x288>)
 8012b0c:	4808      	ldr	r0, [pc, #32]	; (8012b30 <ce303_tarif+0x29c>)
 8012b0e:	f7f2 fe65 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8012b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012b16:	f7ef f8f5 	bl	8001d04 <HAL_Delay>
 8012b1a:	e080      	b.n	8012c1e <ce303_tarif+0x38a>
 8012b1c:	20000010 	.word	0x20000010
 8012b20:	51eb851f 	.word	0x51eb851f
 8012b24:	66666667 	.word	0x66666667
 8012b28:	2000085d 	.word	0x2000085d
 8012b2c:	40021800 	.word	0x40021800
 8012b30:	20009c70 	.word	0x20009c70
 8012b34:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8012b38:	79fb      	ldrb	r3, [r7, #7]
 8012b3a:	2b09      	cmp	r3, #9
 8012b3c:	d944      	bls.n	8012bc8 <ce303_tarif+0x334>
 8012b3e:	79fb      	ldrb	r3, [r7, #7]
 8012b40:	2b63      	cmp	r3, #99	; 0x63
 8012b42:	d841      	bhi.n	8012bc8 <ce303_tarif+0x334>
	{
		start_buf[0] = 0x2F;
 8012b44:	4b98      	ldr	r3, [pc, #608]	; (8012da8 <ce303_tarif+0x514>)
 8012b46:	222f      	movs	r2, #47	; 0x2f
 8012b48:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8012b4a:	4b97      	ldr	r3, [pc, #604]	; (8012da8 <ce303_tarif+0x514>)
 8012b4c:	223f      	movs	r2, #63	; 0x3f
 8012b4e:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8012b50:	79fb      	ldrb	r3, [r7, #7]
 8012b52:	4a96      	ldr	r2, [pc, #600]	; (8012dac <ce303_tarif+0x518>)
 8012b54:	fba2 2303 	umull	r2, r3, r2, r3
 8012b58:	08db      	lsrs	r3, r3, #3
 8012b5a:	b2db      	uxtb	r3, r3
 8012b5c:	3330      	adds	r3, #48	; 0x30
 8012b5e:	b2da      	uxtb	r2, r3
 8012b60:	4b91      	ldr	r3, [pc, #580]	; (8012da8 <ce303_tarif+0x514>)
 8012b62:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8012b64:	79fb      	ldrb	r3, [r7, #7]
 8012b66:	4a91      	ldr	r2, [pc, #580]	; (8012dac <ce303_tarif+0x518>)
 8012b68:	fba2 2303 	umull	r2, r3, r2, r3
 8012b6c:	08db      	lsrs	r3, r3, #3
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	461a      	mov	r2, r3
 8012b72:	0152      	lsls	r2, r2, #5
 8012b74:	1ad2      	subs	r2, r2, r3
 8012b76:	0092      	lsls	r2, r2, #2
 8012b78:	1ad3      	subs	r3, r2, r3
 8012b7a:	005b      	lsls	r3, r3, #1
 8012b7c:	b2da      	uxtb	r2, r3
 8012b7e:	79fb      	ldrb	r3, [r7, #7]
 8012b80:	4413      	add	r3, r2
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	3330      	adds	r3, #48	; 0x30
 8012b86:	b2da      	uxtb	r2, r3
 8012b88:	4b87      	ldr	r3, [pc, #540]	; (8012da8 <ce303_tarif+0x514>)
 8012b8a:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8012b8c:	4b86      	ldr	r3, [pc, #536]	; (8012da8 <ce303_tarif+0x514>)
 8012b8e:	2221      	movs	r2, #33	; 0x21
 8012b90:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8012b92:	4b85      	ldr	r3, [pc, #532]	; (8012da8 <ce303_tarif+0x514>)
 8012b94:	220d      	movs	r2, #13
 8012b96:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8012b98:	4b83      	ldr	r3, [pc, #524]	; (8012da8 <ce303_tarif+0x514>)
 8012b9a:	220a      	movs	r2, #10
 8012b9c:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8012b9e:	4b84      	ldr	r3, [pc, #528]	; (8012db0 <ce303_tarif+0x51c>)
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012ba4:	f7fb ff7a 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8012ba8:	2201      	movs	r2, #1
 8012baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012bae:	4881      	ldr	r0, [pc, #516]	; (8012db4 <ce303_tarif+0x520>)
 8012bb0:	f7f0 fb5c 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8012bb4:	2207      	movs	r2, #7
 8012bb6:	497c      	ldr	r1, [pc, #496]	; (8012da8 <ce303_tarif+0x514>)
 8012bb8:	487f      	ldr	r0, [pc, #508]	; (8012db8 <ce303_tarif+0x524>)
 8012bba:	f7f2 fe0f 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8012bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012bc2:	f7ef f89f 	bl	8001d04 <HAL_Delay>
 8012bc6:	e02a      	b.n	8012c1e <ce303_tarif+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8012bc8:	79fb      	ldrb	r3, [r7, #7]
 8012bca:	2b09      	cmp	r3, #9
 8012bcc:	d827      	bhi.n	8012c1e <ce303_tarif+0x38a>
	{
		start_buf[0] = 0x2F;
 8012bce:	4b76      	ldr	r3, [pc, #472]	; (8012da8 <ce303_tarif+0x514>)
 8012bd0:	222f      	movs	r2, #47	; 0x2f
 8012bd2:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8012bd4:	4b74      	ldr	r3, [pc, #464]	; (8012da8 <ce303_tarif+0x514>)
 8012bd6:	223f      	movs	r2, #63	; 0x3f
 8012bd8:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8012bda:	79fb      	ldrb	r3, [r7, #7]
 8012bdc:	3330      	adds	r3, #48	; 0x30
 8012bde:	b2da      	uxtb	r2, r3
 8012be0:	4b71      	ldr	r3, [pc, #452]	; (8012da8 <ce303_tarif+0x514>)
 8012be2:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8012be4:	4b70      	ldr	r3, [pc, #448]	; (8012da8 <ce303_tarif+0x514>)
 8012be6:	2221      	movs	r2, #33	; 0x21
 8012be8:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8012bea:	4b6f      	ldr	r3, [pc, #444]	; (8012da8 <ce303_tarif+0x514>)
 8012bec:	220d      	movs	r2, #13
 8012bee:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8012bf0:	4b6d      	ldr	r3, [pc, #436]	; (8012da8 <ce303_tarif+0x514>)
 8012bf2:	220a      	movs	r2, #10
 8012bf4:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8012bf6:	4b6e      	ldr	r3, [pc, #440]	; (8012db0 <ce303_tarif+0x51c>)
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012bfc:	f7fb ff4e 	bl	800ea9c <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8012c00:	2201      	movs	r2, #1
 8012c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012c06:	486b      	ldr	r0, [pc, #428]	; (8012db4 <ce303_tarif+0x520>)
 8012c08:	f7f0 fb30 	bl	800326c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8012c0c:	2206      	movs	r2, #6
 8012c0e:	4966      	ldr	r1, [pc, #408]	; (8012da8 <ce303_tarif+0x514>)
 8012c10:	4869      	ldr	r0, [pc, #420]	; (8012db8 <ce303_tarif+0x524>)
 8012c12:	f7f2 fde3 	bl	80057dc <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8012c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012c1a:	f7ef f873 	bl	8001d04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 8012c1e:	4b64      	ldr	r3, [pc, #400]	; (8012db0 <ce303_tarif+0x51c>)
 8012c20:	2200      	movs	r2, #0
 8012c22:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012c24:	f7fb ff3a 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8012c28:	2201      	movs	r2, #1
 8012c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012c2e:	4861      	ldr	r0, [pc, #388]	; (8012db4 <ce303_tarif+0x520>)
 8012c30:	f7f0 fb1c 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8012c34:	2206      	movs	r2, #6
 8012c36:	4961      	ldr	r1, [pc, #388]	; (8012dbc <ce303_tarif+0x528>)
 8012c38:	485f      	ldr	r0, [pc, #380]	; (8012db8 <ce303_tarif+0x524>)
 8012c3a:	f7f2 fdcf 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8012c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012c42:	f7ef f85f 	bl	8001d04 <HAL_Delay>

	meter_rx_number = 0;
 8012c46:	4b5a      	ldr	r3, [pc, #360]	; (8012db0 <ce303_tarif+0x51c>)
 8012c48:	2200      	movs	r2, #0
 8012c4a:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012c4c:	f7fb ff26 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8012c50:	2201      	movs	r2, #1
 8012c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012c56:	4857      	ldr	r0, [pc, #348]	; (8012db4 <ce303_tarif+0x520>)
 8012c58:	f7f0 fb08 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &tarif_buf[0], 13); // передаем команду
 8012c5c:	220d      	movs	r2, #13
 8012c5e:	4958      	ldr	r1, [pc, #352]	; (8012dc0 <ce303_tarif+0x52c>)
 8012c60:	4855      	ldr	r0, [pc, #340]	; (8012db8 <ce303_tarif+0x524>)
 8012c62:	f7f2 fdbb 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8012c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012c6a:	f7ef f84b 	bl	8001d04 <HAL_Delay>

	tarif_general_state = 0; // обнуляем переменные состояния прочтения мощщности перед их прочтением
 8012c6e:	2300      	movs	r3, #0
 8012c70:	757b      	strb	r3, [r7, #21]
	tarif_1_state = 0;
 8012c72:	2300      	movs	r3, #0
 8012c74:	753b      	strb	r3, [r7, #20]
	tarif_2_state = 0;
 8012c76:	2300      	movs	r3, #0
 8012c78:	74fb      	strb	r3, [r7, #19]
	tarif_3_state = 0;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	74bb      	strb	r3, [r7, #18]
	tarif_4_state = 0;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	73fb      	strb	r3, [r7, #15]
	tarif_5_state = 0;
 8012c82:	2300      	movs	r3, #0
 8012c84:	73bb      	strb	r3, [r7, #14]

	for(uint16_t i=0; i<256; i++)
 8012c86:	2300      	movs	r3, #0
 8012c88:	823b      	strh	r3, [r7, #16]
 8012c8a:	f002 b814 	b.w	8014cb6 <ce303_tarif+0x2422>
	{
		if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==0) && (tarif_1_state==0) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8012c8e:	8a3b      	ldrh	r3, [r7, #16]
 8012c90:	4a4c      	ldr	r2, [pc, #304]	; (8012dc4 <ce303_tarif+0x530>)
 8012c92:	5cd3      	ldrb	r3, [r2, r3]
 8012c94:	2b28      	cmp	r3, #40	; 0x28
 8012c96:	f040 8400 	bne.w	801349a <ce303_tarif+0xc06>
 8012c9a:	7d7b      	ldrb	r3, [r7, #21]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	f040 83fc 	bne.w	801349a <ce303_tarif+0xc06>
 8012ca2:	7d3b      	ldrb	r3, [r7, #20]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f040 83f8 	bne.w	801349a <ce303_tarif+0xc06>
 8012caa:	7cfb      	ldrb	r3, [r7, #19]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	f040 83f4 	bne.w	801349a <ce303_tarif+0xc06>
 8012cb2:	7cbb      	ldrb	r3, [r7, #18]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	f040 83f0 	bne.w	801349a <ce303_tarif+0xc06>
 8012cba:	7bfb      	ldrb	r3, [r7, #15]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	f040 83ec 	bne.w	801349a <ce303_tarif+0xc06>
 8012cc2:	7bbb      	ldrb	r3, [r7, #14]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	f040 83e8 	bne.w	801349a <ce303_tarif+0xc06>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8012cca:	8a3b      	ldrh	r3, [r7, #16]
 8012ccc:	3302      	adds	r3, #2
 8012cce:	4a3d      	ldr	r2, [pc, #244]	; (8012dc4 <ce303_tarif+0x530>)
 8012cd0:	5cd3      	ldrb	r3, [r2, r3]
 8012cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8012cd4:	f040 80ec 	bne.w	8012eb0 <ce303_tarif+0x61c>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8012cd8:	8a3b      	ldrh	r3, [r7, #16]
 8012cda:	3301      	adds	r3, #1
 8012cdc:	4a39      	ldr	r2, [pc, #228]	; (8012dc4 <ce303_tarif+0x530>)
 8012cde:	5cd3      	ldrb	r3, [r2, r3]
 8012ce0:	3b30      	subs	r3, #48	; 0x30
 8012ce2:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8012ce4:	8a3b      	ldrh	r3, [r7, #16]
 8012ce6:	3304      	adds	r3, #4
 8012ce8:	4a36      	ldr	r2, [pc, #216]	; (8012dc4 <ce303_tarif+0x530>)
 8012cea:	5cd3      	ldrb	r3, [r2, r3]
 8012cec:	2b29      	cmp	r3, #41	; 0x29
 8012cee:	d110      	bne.n	8012d12 <ce303_tarif+0x47e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8012cf0:	8a3b      	ldrh	r3, [r7, #16]
 8012cf2:	3303      	adds	r3, #3
 8012cf4:	4a33      	ldr	r2, [pc, #204]	; (8012dc4 <ce303_tarif+0x530>)
 8012cf6:	5cd3      	ldrb	r3, [r2, r3]
 8012cf8:	3b30      	subs	r3, #48	; 0x30
 8012cfa:	b29b      	uxth	r3, r3
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	0092      	lsls	r2, r2, #2
 8012d00:	4413      	add	r3, r2
 8012d02:	461a      	mov	r2, r3
 8012d04:	0091      	lsls	r1, r2, #2
 8012d06:	461a      	mov	r2, r3
 8012d08:	460b      	mov	r3, r1
 8012d0a:	4413      	add	r3, r2
 8012d0c:	009b      	lsls	r3, r3, #2
 8012d0e:	82fb      	strh	r3, [r7, #22]
 8012d10:	e080      	b.n	8012e14 <ce303_tarif+0x580>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8012d12:	8a3b      	ldrh	r3, [r7, #16]
 8012d14:	3305      	adds	r3, #5
 8012d16:	4a2b      	ldr	r2, [pc, #172]	; (8012dc4 <ce303_tarif+0x530>)
 8012d18:	5cd3      	ldrb	r3, [r2, r3]
 8012d1a:	2b29      	cmp	r3, #41	; 0x29
 8012d1c:	d117      	bne.n	8012d4e <ce303_tarif+0x4ba>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8012d1e:	8a3b      	ldrh	r3, [r7, #16]
 8012d20:	3303      	adds	r3, #3
 8012d22:	4a28      	ldr	r2, [pc, #160]	; (8012dc4 <ce303_tarif+0x530>)
 8012d24:	5cd3      	ldrb	r3, [r2, r3]
 8012d26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	009b      	lsls	r3, r3, #2
 8012d2e:	4413      	add	r3, r2
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	4619      	mov	r1, r3
 8012d34:	8a3b      	ldrh	r3, [r7, #16]
 8012d36:	3304      	adds	r3, #4
 8012d38:	4a22      	ldr	r2, [pc, #136]	; (8012dc4 <ce303_tarif+0x530>)
 8012d3a:	5cd3      	ldrb	r3, [r2, r3]
 8012d3c:	3b30      	subs	r3, #48	; 0x30
 8012d3e:	440b      	add	r3, r1
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	461a      	mov	r2, r3
 8012d44:	0092      	lsls	r2, r2, #2
 8012d46:	4413      	add	r3, r2
 8012d48:	005b      	lsls	r3, r3, #1
 8012d4a:	82fb      	strh	r3, [r7, #22]
 8012d4c:	e062      	b.n	8012e14 <ce303_tarif+0x580>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8012d4e:	8a3b      	ldrh	r3, [r7, #16]
 8012d50:	3306      	adds	r3, #6
 8012d52:	4a1c      	ldr	r2, [pc, #112]	; (8012dc4 <ce303_tarif+0x530>)
 8012d54:	5cd3      	ldrb	r3, [r2, r3]
 8012d56:	2b29      	cmp	r3, #41	; 0x29
 8012d58:	d136      	bne.n	8012dc8 <ce303_tarif+0x534>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8012d5a:	8a3b      	ldrh	r3, [r7, #16]
 8012d5c:	3303      	adds	r3, #3
 8012d5e:	4a19      	ldr	r2, [pc, #100]	; (8012dc4 <ce303_tarif+0x530>)
 8012d60:	5cd3      	ldrb	r3, [r2, r3]
 8012d62:	3b30      	subs	r3, #48	; 0x30
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	461a      	mov	r2, r3
 8012d68:	0092      	lsls	r2, r2, #2
 8012d6a:	4413      	add	r3, r2
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	0091      	lsls	r1, r2, #2
 8012d70:	461a      	mov	r2, r3
 8012d72:	460b      	mov	r3, r1
 8012d74:	4413      	add	r3, r2
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	b29a      	uxth	r2, r3
 8012d7a:	8a3b      	ldrh	r3, [r7, #16]
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	4911      	ldr	r1, [pc, #68]	; (8012dc4 <ce303_tarif+0x530>)
 8012d80:	5ccb      	ldrb	r3, [r1, r3]
 8012d82:	3b30      	subs	r3, #48	; 0x30
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	4619      	mov	r1, r3
 8012d88:	0089      	lsls	r1, r1, #2
 8012d8a:	440b      	add	r3, r1
 8012d8c:	005b      	lsls	r3, r3, #1
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	4413      	add	r3, r2
 8012d92:	b29a      	uxth	r2, r3
 8012d94:	8a3b      	ldrh	r3, [r7, #16]
 8012d96:	3305      	adds	r3, #5
 8012d98:	490a      	ldr	r1, [pc, #40]	; (8012dc4 <ce303_tarif+0x530>)
 8012d9a:	5ccb      	ldrb	r3, [r1, r3]
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	4413      	add	r3, r2
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	3b30      	subs	r3, #48	; 0x30
 8012da4:	82fb      	strh	r3, [r7, #22]
 8012da6:	e035      	b.n	8012e14 <ce303_tarif+0x580>
 8012da8:	20000010 	.word	0x20000010
 8012dac:	cccccccd 	.word	0xcccccccd
 8012db0:	2000085d 	.word	0x2000085d
 8012db4:	40021800 	.word	0x40021800
 8012db8:	20009c70 	.word	0x20009c70
 8012dbc:	20000018 	.word	0x20000018
 8012dc0:	20000058 	.word	0x20000058
 8012dc4:	200098e4 	.word	0x200098e4
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8012dc8:	8a3b      	ldrh	r3, [r7, #16]
 8012dca:	3303      	adds	r3, #3
 8012dcc:	4ab0      	ldr	r2, [pc, #704]	; (8013090 <ce303_tarif+0x7fc>)
 8012dce:	5cd3      	ldrb	r3, [r2, r3]
 8012dd0:	3b30      	subs	r3, #48	; 0x30
 8012dd2:	b29b      	uxth	r3, r3
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	0092      	lsls	r2, r2, #2
 8012dd8:	4413      	add	r3, r2
 8012dda:	461a      	mov	r2, r3
 8012ddc:	0091      	lsls	r1, r2, #2
 8012dde:	461a      	mov	r2, r3
 8012de0:	460b      	mov	r3, r1
 8012de2:	4413      	add	r3, r2
 8012de4:	009b      	lsls	r3, r3, #2
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	8a3b      	ldrh	r3, [r7, #16]
 8012dea:	3304      	adds	r3, #4
 8012dec:	49a8      	ldr	r1, [pc, #672]	; (8013090 <ce303_tarif+0x7fc>)
 8012dee:	5ccb      	ldrb	r3, [r1, r3]
 8012df0:	3b30      	subs	r3, #48	; 0x30
 8012df2:	b29b      	uxth	r3, r3
 8012df4:	4619      	mov	r1, r3
 8012df6:	0089      	lsls	r1, r1, #2
 8012df8:	440b      	add	r3, r1
 8012dfa:	005b      	lsls	r3, r3, #1
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	4413      	add	r3, r2
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	8a3b      	ldrh	r3, [r7, #16]
 8012e04:	3305      	adds	r3, #5
 8012e06:	49a2      	ldr	r1, [pc, #648]	; (8013090 <ce303_tarif+0x7fc>)
 8012e08:	5ccb      	ldrb	r3, [r1, r3]
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	4413      	add	r3, r2
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	3b30      	subs	r3, #48	; 0x30
 8012e12:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8012e14:	4b9f      	ldr	r3, [pc, #636]	; (8013094 <ce303_tarif+0x800>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f04f 31ff 	mov.w	r1, #4294967295
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7f3 ff8b 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	0e1b      	lsrs	r3, r3, #24
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	4619      	mov	r1, r3
 8012e2a:	f242 0082 	movw	r0, #8322	; 0x2082
 8012e2e:	f002 fd17 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	0c1b      	lsrs	r3, r3, #16
 8012e36:	b2db      	uxtb	r3, r3
 8012e38:	4619      	mov	r1, r3
 8012e3a:	f242 0083 	movw	r0, #8323	; 0x2083
 8012e3e:	f002 fd0f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	0a1b      	lsrs	r3, r3, #8
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	4619      	mov	r1, r3
 8012e4a:	f242 0084 	movw	r0, #8324	; 0x2084
 8012e4e:	f002 fd07 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	4619      	mov	r1, r3
 8012e58:	f242 0085 	movw	r0, #8325	; 0x2085
 8012e5c:	f002 fd00 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 8012e60:	8afb      	ldrh	r3, [r7, #22]
 8012e62:	0a1b      	lsrs	r3, r3, #8
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	b2db      	uxtb	r3, r3
 8012e68:	4619      	mov	r1, r3
 8012e6a:	f242 0086 	movw	r0, #8326	; 0x2086
 8012e6e:	f002 fcf7 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 8012e72:	8afb      	ldrh	r3, [r7, #22]
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	4619      	mov	r1, r3
 8012e78:	f242 0087 	movw	r0, #8327	; 0x2087
 8012e7c:	f002 fcf0 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8012e80:	4b84      	ldr	r3, [pc, #528]	; (8013094 <ce303_tarif+0x800>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7f3 ffa5 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	0c1b      	lsrs	r3, r3, #16
 8012e8e:	b29a      	uxth	r2, r3
 8012e90:	4b81      	ldr	r3, [pc, #516]	; (8013098 <ce303_tarif+0x804>)
 8012e92:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	b29a      	uxth	r2, r3
 8012e9a:	4b7f      	ldr	r3, [pc, #508]	; (8013098 <ce303_tarif+0x804>)
 8012e9c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 8012ea0:	4a7d      	ldr	r2, [pc, #500]	; (8013098 <ce303_tarif+0x804>)
 8012ea2:	8afb      	ldrh	r3, [r7, #22]
 8012ea4:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 8012ea8:	2301      	movs	r3, #1
 8012eaa:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8012eac:	f001 befb 	b.w	8014ca6 <ce303_tarif+0x2412>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8012eb0:	8a3b      	ldrh	r3, [r7, #16]
 8012eb2:	3303      	adds	r3, #3
 8012eb4:	4a76      	ldr	r2, [pc, #472]	; (8013090 <ce303_tarif+0x7fc>)
 8012eb6:	5cd3      	ldrb	r3, [r2, r3]
 8012eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8012eba:	f040 80ef 	bne.w	801309c <ce303_tarif+0x808>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8012ebe:	8a3b      	ldrh	r3, [r7, #16]
 8012ec0:	3301      	adds	r3, #1
 8012ec2:	4a73      	ldr	r2, [pc, #460]	; (8013090 <ce303_tarif+0x7fc>)
 8012ec4:	5cd3      	ldrb	r3, [r2, r3]
 8012ec6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012eca:	4613      	mov	r3, r2
 8012ecc:	009b      	lsls	r3, r3, #2
 8012ece:	4413      	add	r3, r2
 8012ed0:	005b      	lsls	r3, r3, #1
 8012ed2:	4619      	mov	r1, r3
 8012ed4:	8a3b      	ldrh	r3, [r7, #16]
 8012ed6:	3302      	adds	r3, #2
 8012ed8:	4a6d      	ldr	r2, [pc, #436]	; (8013090 <ce303_tarif+0x7fc>)
 8012eda:	5cd3      	ldrb	r3, [r2, r3]
 8012edc:	3b30      	subs	r3, #48	; 0x30
 8012ede:	440b      	add	r3, r1
 8012ee0:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8012ee2:	8a3b      	ldrh	r3, [r7, #16]
 8012ee4:	3305      	adds	r3, #5
 8012ee6:	4a6a      	ldr	r2, [pc, #424]	; (8013090 <ce303_tarif+0x7fc>)
 8012ee8:	5cd3      	ldrb	r3, [r2, r3]
 8012eea:	2b29      	cmp	r3, #41	; 0x29
 8012eec:	d110      	bne.n	8012f10 <ce303_tarif+0x67c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8012eee:	8a3b      	ldrh	r3, [r7, #16]
 8012ef0:	3304      	adds	r3, #4
 8012ef2:	4a67      	ldr	r2, [pc, #412]	; (8013090 <ce303_tarif+0x7fc>)
 8012ef4:	5cd3      	ldrb	r3, [r2, r3]
 8012ef6:	3b30      	subs	r3, #48	; 0x30
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	461a      	mov	r2, r3
 8012efc:	0092      	lsls	r2, r2, #2
 8012efe:	4413      	add	r3, r2
 8012f00:	461a      	mov	r2, r3
 8012f02:	0091      	lsls	r1, r2, #2
 8012f04:	461a      	mov	r2, r3
 8012f06:	460b      	mov	r3, r1
 8012f08:	4413      	add	r3, r2
 8012f0a:	009b      	lsls	r3, r3, #2
 8012f0c:	82fb      	strh	r3, [r7, #22]
 8012f0e:	e070      	b.n	8012ff2 <ce303_tarif+0x75e>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8012f10:	8a3b      	ldrh	r3, [r7, #16]
 8012f12:	3306      	adds	r3, #6
 8012f14:	4a5e      	ldr	r2, [pc, #376]	; (8013090 <ce303_tarif+0x7fc>)
 8012f16:	5cd3      	ldrb	r3, [r2, r3]
 8012f18:	2b29      	cmp	r3, #41	; 0x29
 8012f1a:	d117      	bne.n	8012f4c <ce303_tarif+0x6b8>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8012f1c:	8a3b      	ldrh	r3, [r7, #16]
 8012f1e:	3304      	adds	r3, #4
 8012f20:	4a5b      	ldr	r2, [pc, #364]	; (8013090 <ce303_tarif+0x7fc>)
 8012f22:	5cd3      	ldrb	r3, [r2, r3]
 8012f24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012f28:	4613      	mov	r3, r2
 8012f2a:	009b      	lsls	r3, r3, #2
 8012f2c:	4413      	add	r3, r2
 8012f2e:	005b      	lsls	r3, r3, #1
 8012f30:	4619      	mov	r1, r3
 8012f32:	8a3b      	ldrh	r3, [r7, #16]
 8012f34:	3305      	adds	r3, #5
 8012f36:	4a56      	ldr	r2, [pc, #344]	; (8013090 <ce303_tarif+0x7fc>)
 8012f38:	5cd3      	ldrb	r3, [r2, r3]
 8012f3a:	3b30      	subs	r3, #48	; 0x30
 8012f3c:	440b      	add	r3, r1
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	461a      	mov	r2, r3
 8012f42:	0092      	lsls	r2, r2, #2
 8012f44:	4413      	add	r3, r2
 8012f46:	005b      	lsls	r3, r3, #1
 8012f48:	82fb      	strh	r3, [r7, #22]
 8012f4a:	e052      	b.n	8012ff2 <ce303_tarif+0x75e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8012f4c:	8a3b      	ldrh	r3, [r7, #16]
 8012f4e:	3307      	adds	r3, #7
 8012f50:	4a4f      	ldr	r2, [pc, #316]	; (8013090 <ce303_tarif+0x7fc>)
 8012f52:	5cd3      	ldrb	r3, [r2, r3]
 8012f54:	2b29      	cmp	r3, #41	; 0x29
 8012f56:	d126      	bne.n	8012fa6 <ce303_tarif+0x712>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012f58:	8a3b      	ldrh	r3, [r7, #16]
 8012f5a:	3304      	adds	r3, #4
 8012f5c:	4a4c      	ldr	r2, [pc, #304]	; (8013090 <ce303_tarif+0x7fc>)
 8012f5e:	5cd3      	ldrb	r3, [r2, r3]
 8012f60:	3b30      	subs	r3, #48	; 0x30
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	461a      	mov	r2, r3
 8012f66:	0092      	lsls	r2, r2, #2
 8012f68:	4413      	add	r3, r2
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	0091      	lsls	r1, r2, #2
 8012f6e:	461a      	mov	r2, r3
 8012f70:	460b      	mov	r3, r1
 8012f72:	4413      	add	r3, r2
 8012f74:	009b      	lsls	r3, r3, #2
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	8a3b      	ldrh	r3, [r7, #16]
 8012f7a:	3305      	adds	r3, #5
 8012f7c:	4944      	ldr	r1, [pc, #272]	; (8013090 <ce303_tarif+0x7fc>)
 8012f7e:	5ccb      	ldrb	r3, [r1, r3]
 8012f80:	3b30      	subs	r3, #48	; 0x30
 8012f82:	b29b      	uxth	r3, r3
 8012f84:	4619      	mov	r1, r3
 8012f86:	0089      	lsls	r1, r1, #2
 8012f88:	440b      	add	r3, r1
 8012f8a:	005b      	lsls	r3, r3, #1
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	4413      	add	r3, r2
 8012f90:	b29a      	uxth	r2, r3
 8012f92:	8a3b      	ldrh	r3, [r7, #16]
 8012f94:	3306      	adds	r3, #6
 8012f96:	493e      	ldr	r1, [pc, #248]	; (8013090 <ce303_tarif+0x7fc>)
 8012f98:	5ccb      	ldrb	r3, [r1, r3]
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	4413      	add	r3, r2
 8012f9e:	b29b      	uxth	r3, r3
 8012fa0:	3b30      	subs	r3, #48	; 0x30
 8012fa2:	82fb      	strh	r3, [r7, #22]
 8012fa4:	e025      	b.n	8012ff2 <ce303_tarif+0x75e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012fa6:	8a3b      	ldrh	r3, [r7, #16]
 8012fa8:	3304      	adds	r3, #4
 8012faa:	4a39      	ldr	r2, [pc, #228]	; (8013090 <ce303_tarif+0x7fc>)
 8012fac:	5cd3      	ldrb	r3, [r2, r3]
 8012fae:	3b30      	subs	r3, #48	; 0x30
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	0092      	lsls	r2, r2, #2
 8012fb6:	4413      	add	r3, r2
 8012fb8:	461a      	mov	r2, r3
 8012fba:	0091      	lsls	r1, r2, #2
 8012fbc:	461a      	mov	r2, r3
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	4413      	add	r3, r2
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	b29a      	uxth	r2, r3
 8012fc6:	8a3b      	ldrh	r3, [r7, #16]
 8012fc8:	3305      	adds	r3, #5
 8012fca:	4931      	ldr	r1, [pc, #196]	; (8013090 <ce303_tarif+0x7fc>)
 8012fcc:	5ccb      	ldrb	r3, [r1, r3]
 8012fce:	3b30      	subs	r3, #48	; 0x30
 8012fd0:	b29b      	uxth	r3, r3
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	0089      	lsls	r1, r1, #2
 8012fd6:	440b      	add	r3, r1
 8012fd8:	005b      	lsls	r3, r3, #1
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	4413      	add	r3, r2
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	8a3b      	ldrh	r3, [r7, #16]
 8012fe2:	3306      	adds	r3, #6
 8012fe4:	492a      	ldr	r1, [pc, #168]	; (8013090 <ce303_tarif+0x7fc>)
 8012fe6:	5ccb      	ldrb	r3, [r1, r3]
 8012fe8:	b29b      	uxth	r3, r3
 8012fea:	4413      	add	r3, r2
 8012fec:	b29b      	uxth	r3, r3
 8012fee:	3b30      	subs	r3, #48	; 0x30
 8012ff0:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8012ff2:	4b28      	ldr	r3, [pc, #160]	; (8013094 <ce303_tarif+0x800>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	f04f 31ff 	mov.w	r1, #4294967295
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7f3 fe9c 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8013000:	68bb      	ldr	r3, [r7, #8]
 8013002:	0e1b      	lsrs	r3, r3, #24
 8013004:	b2db      	uxtb	r3, r3
 8013006:	4619      	mov	r1, r3
 8013008:	f242 0082 	movw	r0, #8322	; 0x2082
 801300c:	f002 fc28 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	0c1b      	lsrs	r3, r3, #16
 8013014:	b2db      	uxtb	r3, r3
 8013016:	4619      	mov	r1, r3
 8013018:	f242 0083 	movw	r0, #8323	; 0x2083
 801301c:	f002 fc20 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	0a1b      	lsrs	r3, r3, #8
 8013024:	b2db      	uxtb	r3, r3
 8013026:	4619      	mov	r1, r3
 8013028:	f242 0084 	movw	r0, #8324	; 0x2084
 801302c:	f002 fc18 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	b2db      	uxtb	r3, r3
 8013034:	4619      	mov	r1, r3
 8013036:	f242 0085 	movw	r0, #8325	; 0x2085
 801303a:	f002 fc11 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 801303e:	8afb      	ldrh	r3, [r7, #22]
 8013040:	0a1b      	lsrs	r3, r3, #8
 8013042:	b29b      	uxth	r3, r3
 8013044:	b2db      	uxtb	r3, r3
 8013046:	4619      	mov	r1, r3
 8013048:	f242 0086 	movw	r0, #8326	; 0x2086
 801304c:	f002 fc08 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 8013050:	8afb      	ldrh	r3, [r7, #22]
 8013052:	b2db      	uxtb	r3, r3
 8013054:	4619      	mov	r1, r3
 8013056:	f242 0087 	movw	r0, #8327	; 0x2087
 801305a:	f002 fc01 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801305e:	4b0d      	ldr	r3, [pc, #52]	; (8013094 <ce303_tarif+0x800>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4618      	mov	r0, r3
 8013064:	f7f3 feb6 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8013068:	68bb      	ldr	r3, [r7, #8]
 801306a:	0c1b      	lsrs	r3, r3, #16
 801306c:	b29a      	uxth	r2, r3
 801306e:	4b0a      	ldr	r3, [pc, #40]	; (8013098 <ce303_tarif+0x804>)
 8013070:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	b29a      	uxth	r2, r3
 8013078:	4b07      	ldr	r3, [pc, #28]	; (8013098 <ce303_tarif+0x804>)
 801307a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 801307e:	4a06      	ldr	r2, [pc, #24]	; (8013098 <ce303_tarif+0x804>)
 8013080:	8afb      	ldrh	r3, [r7, #22]
 8013082:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 8013086:	2301      	movs	r3, #1
 8013088:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 801308a:	f001 be0c 	b.w	8014ca6 <ce303_tarif+0x2412>
 801308e:	bf00      	nop
 8013090:	200098e4 	.word	0x200098e4
 8013094:	20009a6c 	.word	0x20009a6c
 8013098:	2000a10c 	.word	0x2000a10c

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 801309c:	8a3b      	ldrh	r3, [r7, #16]
 801309e:	3304      	adds	r3, #4
 80130a0:	4aaa      	ldr	r2, [pc, #680]	; (801334c <ce303_tarif+0xab8>)
 80130a2:	5cd3      	ldrb	r3, [r2, r3]
 80130a4:	2b2e      	cmp	r3, #46	; 0x2e
 80130a6:	f040 80f0 	bne.w	801328a <ce303_tarif+0x9f6>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80130aa:	8a3b      	ldrh	r3, [r7, #16]
 80130ac:	3301      	adds	r3, #1
 80130ae:	4aa7      	ldr	r2, [pc, #668]	; (801334c <ce303_tarif+0xab8>)
 80130b0:	5cd3      	ldrb	r3, [r2, r3]
 80130b2:	3b30      	subs	r3, #48	; 0x30
 80130b4:	2264      	movs	r2, #100	; 0x64
 80130b6:	fb02 f103 	mul.w	r1, r2, r3
 80130ba:	8a3b      	ldrh	r3, [r7, #16]
 80130bc:	3302      	adds	r3, #2
 80130be:	4aa3      	ldr	r2, [pc, #652]	; (801334c <ce303_tarif+0xab8>)
 80130c0:	5cd3      	ldrb	r3, [r2, r3]
 80130c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80130c6:	4613      	mov	r3, r2
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	4413      	add	r3, r2
 80130cc:	005b      	lsls	r3, r3, #1
 80130ce:	18ca      	adds	r2, r1, r3
 80130d0:	8a3b      	ldrh	r3, [r7, #16]
 80130d2:	3303      	adds	r3, #3
 80130d4:	499d      	ldr	r1, [pc, #628]	; (801334c <ce303_tarif+0xab8>)
 80130d6:	5ccb      	ldrb	r3, [r1, r3]
 80130d8:	3b30      	subs	r3, #48	; 0x30
 80130da:	4413      	add	r3, r2
 80130dc:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80130de:	8a3b      	ldrh	r3, [r7, #16]
 80130e0:	3306      	adds	r3, #6
 80130e2:	4a9a      	ldr	r2, [pc, #616]	; (801334c <ce303_tarif+0xab8>)
 80130e4:	5cd3      	ldrb	r3, [r2, r3]
 80130e6:	2b29      	cmp	r3, #41	; 0x29
 80130e8:	d110      	bne.n	801310c <ce303_tarif+0x878>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80130ea:	8a3b      	ldrh	r3, [r7, #16]
 80130ec:	3305      	adds	r3, #5
 80130ee:	4a97      	ldr	r2, [pc, #604]	; (801334c <ce303_tarif+0xab8>)
 80130f0:	5cd3      	ldrb	r3, [r2, r3]
 80130f2:	3b30      	subs	r3, #48	; 0x30
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	461a      	mov	r2, r3
 80130f8:	0092      	lsls	r2, r2, #2
 80130fa:	4413      	add	r3, r2
 80130fc:	461a      	mov	r2, r3
 80130fe:	0091      	lsls	r1, r2, #2
 8013100:	461a      	mov	r2, r3
 8013102:	460b      	mov	r3, r1
 8013104:	4413      	add	r3, r2
 8013106:	009b      	lsls	r3, r3, #2
 8013108:	82fb      	strh	r3, [r7, #22]
 801310a:	e070      	b.n	80131ee <ce303_tarif+0x95a>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 801310c:	8a3b      	ldrh	r3, [r7, #16]
 801310e:	3307      	adds	r3, #7
 8013110:	4a8e      	ldr	r2, [pc, #568]	; (801334c <ce303_tarif+0xab8>)
 8013112:	5cd3      	ldrb	r3, [r2, r3]
 8013114:	2b29      	cmp	r3, #41	; 0x29
 8013116:	d117      	bne.n	8013148 <ce303_tarif+0x8b4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8013118:	8a3b      	ldrh	r3, [r7, #16]
 801311a:	3305      	adds	r3, #5
 801311c:	4a8b      	ldr	r2, [pc, #556]	; (801334c <ce303_tarif+0xab8>)
 801311e:	5cd3      	ldrb	r3, [r2, r3]
 8013120:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013124:	4613      	mov	r3, r2
 8013126:	009b      	lsls	r3, r3, #2
 8013128:	4413      	add	r3, r2
 801312a:	005b      	lsls	r3, r3, #1
 801312c:	4619      	mov	r1, r3
 801312e:	8a3b      	ldrh	r3, [r7, #16]
 8013130:	3306      	adds	r3, #6
 8013132:	4a86      	ldr	r2, [pc, #536]	; (801334c <ce303_tarif+0xab8>)
 8013134:	5cd3      	ldrb	r3, [r2, r3]
 8013136:	3b30      	subs	r3, #48	; 0x30
 8013138:	440b      	add	r3, r1
 801313a:	b29b      	uxth	r3, r3
 801313c:	461a      	mov	r2, r3
 801313e:	0092      	lsls	r2, r2, #2
 8013140:	4413      	add	r3, r2
 8013142:	005b      	lsls	r3, r3, #1
 8013144:	82fb      	strh	r3, [r7, #22]
 8013146:	e052      	b.n	80131ee <ce303_tarif+0x95a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8013148:	8a3b      	ldrh	r3, [r7, #16]
 801314a:	3308      	adds	r3, #8
 801314c:	4a7f      	ldr	r2, [pc, #508]	; (801334c <ce303_tarif+0xab8>)
 801314e:	5cd3      	ldrb	r3, [r2, r3]
 8013150:	2b29      	cmp	r3, #41	; 0x29
 8013152:	d126      	bne.n	80131a2 <ce303_tarif+0x90e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8013154:	8a3b      	ldrh	r3, [r7, #16]
 8013156:	3305      	adds	r3, #5
 8013158:	4a7c      	ldr	r2, [pc, #496]	; (801334c <ce303_tarif+0xab8>)
 801315a:	5cd3      	ldrb	r3, [r2, r3]
 801315c:	3b30      	subs	r3, #48	; 0x30
 801315e:	b29b      	uxth	r3, r3
 8013160:	461a      	mov	r2, r3
 8013162:	0092      	lsls	r2, r2, #2
 8013164:	4413      	add	r3, r2
 8013166:	461a      	mov	r2, r3
 8013168:	0091      	lsls	r1, r2, #2
 801316a:	461a      	mov	r2, r3
 801316c:	460b      	mov	r3, r1
 801316e:	4413      	add	r3, r2
 8013170:	009b      	lsls	r3, r3, #2
 8013172:	b29a      	uxth	r2, r3
 8013174:	8a3b      	ldrh	r3, [r7, #16]
 8013176:	3306      	adds	r3, #6
 8013178:	4974      	ldr	r1, [pc, #464]	; (801334c <ce303_tarif+0xab8>)
 801317a:	5ccb      	ldrb	r3, [r1, r3]
 801317c:	3b30      	subs	r3, #48	; 0x30
 801317e:	b29b      	uxth	r3, r3
 8013180:	4619      	mov	r1, r3
 8013182:	0089      	lsls	r1, r1, #2
 8013184:	440b      	add	r3, r1
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	b29b      	uxth	r3, r3
 801318a:	4413      	add	r3, r2
 801318c:	b29a      	uxth	r2, r3
 801318e:	8a3b      	ldrh	r3, [r7, #16]
 8013190:	3307      	adds	r3, #7
 8013192:	496e      	ldr	r1, [pc, #440]	; (801334c <ce303_tarif+0xab8>)
 8013194:	5ccb      	ldrb	r3, [r1, r3]
 8013196:	b29b      	uxth	r3, r3
 8013198:	4413      	add	r3, r2
 801319a:	b29b      	uxth	r3, r3
 801319c:	3b30      	subs	r3, #48	; 0x30
 801319e:	82fb      	strh	r3, [r7, #22]
 80131a0:	e025      	b.n	80131ee <ce303_tarif+0x95a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80131a2:	8a3b      	ldrh	r3, [r7, #16]
 80131a4:	3305      	adds	r3, #5
 80131a6:	4a69      	ldr	r2, [pc, #420]	; (801334c <ce303_tarif+0xab8>)
 80131a8:	5cd3      	ldrb	r3, [r2, r3]
 80131aa:	3b30      	subs	r3, #48	; 0x30
 80131ac:	b29b      	uxth	r3, r3
 80131ae:	461a      	mov	r2, r3
 80131b0:	0092      	lsls	r2, r2, #2
 80131b2:	4413      	add	r3, r2
 80131b4:	461a      	mov	r2, r3
 80131b6:	0091      	lsls	r1, r2, #2
 80131b8:	461a      	mov	r2, r3
 80131ba:	460b      	mov	r3, r1
 80131bc:	4413      	add	r3, r2
 80131be:	009b      	lsls	r3, r3, #2
 80131c0:	b29a      	uxth	r2, r3
 80131c2:	8a3b      	ldrh	r3, [r7, #16]
 80131c4:	3306      	adds	r3, #6
 80131c6:	4961      	ldr	r1, [pc, #388]	; (801334c <ce303_tarif+0xab8>)
 80131c8:	5ccb      	ldrb	r3, [r1, r3]
 80131ca:	3b30      	subs	r3, #48	; 0x30
 80131cc:	b29b      	uxth	r3, r3
 80131ce:	4619      	mov	r1, r3
 80131d0:	0089      	lsls	r1, r1, #2
 80131d2:	440b      	add	r3, r1
 80131d4:	005b      	lsls	r3, r3, #1
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	4413      	add	r3, r2
 80131da:	b29a      	uxth	r2, r3
 80131dc:	8a3b      	ldrh	r3, [r7, #16]
 80131de:	3307      	adds	r3, #7
 80131e0:	495a      	ldr	r1, [pc, #360]	; (801334c <ce303_tarif+0xab8>)
 80131e2:	5ccb      	ldrb	r3, [r1, r3]
 80131e4:	b29b      	uxth	r3, r3
 80131e6:	4413      	add	r3, r2
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	3b30      	subs	r3, #48	; 0x30
 80131ec:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80131ee:	4b58      	ldr	r3, [pc, #352]	; (8013350 <ce303_tarif+0xabc>)
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	f04f 31ff 	mov.w	r1, #4294967295
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7f3 fd9e 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	0e1b      	lsrs	r3, r3, #24
 8013200:	b2db      	uxtb	r3, r3
 8013202:	4619      	mov	r1, r3
 8013204:	f242 0082 	movw	r0, #8322	; 0x2082
 8013208:	f002 fb2a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	0c1b      	lsrs	r3, r3, #16
 8013210:	b2db      	uxtb	r3, r3
 8013212:	4619      	mov	r1, r3
 8013214:	f242 0083 	movw	r0, #8323	; 0x2083
 8013218:	f002 fb22 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	0a1b      	lsrs	r3, r3, #8
 8013220:	b2db      	uxtb	r3, r3
 8013222:	4619      	mov	r1, r3
 8013224:	f242 0084 	movw	r0, #8324	; 0x2084
 8013228:	f002 fb1a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	b2db      	uxtb	r3, r3
 8013230:	4619      	mov	r1, r3
 8013232:	f242 0085 	movw	r0, #8325	; 0x2085
 8013236:	f002 fb13 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 801323a:	8afb      	ldrh	r3, [r7, #22]
 801323c:	0a1b      	lsrs	r3, r3, #8
 801323e:	b29b      	uxth	r3, r3
 8013240:	b2db      	uxtb	r3, r3
 8013242:	4619      	mov	r1, r3
 8013244:	f242 0086 	movw	r0, #8326	; 0x2086
 8013248:	f002 fb0a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 801324c:	8afb      	ldrh	r3, [r7, #22]
 801324e:	b2db      	uxtb	r3, r3
 8013250:	4619      	mov	r1, r3
 8013252:	f242 0087 	movw	r0, #8327	; 0x2087
 8013256:	f002 fb03 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801325a:	4b3d      	ldr	r3, [pc, #244]	; (8013350 <ce303_tarif+0xabc>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	4618      	mov	r0, r3
 8013260:	f7f3 fdb8 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	0c1b      	lsrs	r3, r3, #16
 8013268:	b29a      	uxth	r2, r3
 801326a:	4b3a      	ldr	r3, [pc, #232]	; (8013354 <ce303_tarif+0xac0>)
 801326c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	b29a      	uxth	r2, r3
 8013274:	4b37      	ldr	r3, [pc, #220]	; (8013354 <ce303_tarif+0xac0>)
 8013276:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 801327a:	4a36      	ldr	r2, [pc, #216]	; (8013354 <ce303_tarif+0xac0>)
 801327c:	8afb      	ldrh	r3, [r7, #22]
 801327e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 8013282:	2301      	movs	r3, #1
 8013284:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8013286:	f001 bd0e 	b.w	8014ca6 <ce303_tarif+0x2412>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 801328a:	8a3b      	ldrh	r3, [r7, #16]
 801328c:	3305      	adds	r3, #5
 801328e:	4a2f      	ldr	r2, [pc, #188]	; (801334c <ce303_tarif+0xab8>)
 8013290:	5cd3      	ldrb	r3, [r2, r3]
 8013292:	2b2e      	cmp	r3, #46	; 0x2e
 8013294:	f041 8507 	bne.w	8014ca6 <ce303_tarif+0x2412>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8013298:	8a3b      	ldrh	r3, [r7, #16]
 801329a:	3301      	adds	r3, #1
 801329c:	4a2b      	ldr	r2, [pc, #172]	; (801334c <ce303_tarif+0xab8>)
 801329e:	5cd3      	ldrb	r3, [r2, r3]
 80132a0:	3b30      	subs	r3, #48	; 0x30
 80132a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80132a6:	fb02 f203 	mul.w	r2, r2, r3
 80132aa:	8a3b      	ldrh	r3, [r7, #16]
 80132ac:	3302      	adds	r3, #2
 80132ae:	4927      	ldr	r1, [pc, #156]	; (801334c <ce303_tarif+0xab8>)
 80132b0:	5ccb      	ldrb	r3, [r1, r3]
 80132b2:	3b30      	subs	r3, #48	; 0x30
 80132b4:	2164      	movs	r1, #100	; 0x64
 80132b6:	fb01 f303 	mul.w	r3, r1, r3
 80132ba:	18d1      	adds	r1, r2, r3
 80132bc:	8a3b      	ldrh	r3, [r7, #16]
 80132be:	3303      	adds	r3, #3
 80132c0:	4a22      	ldr	r2, [pc, #136]	; (801334c <ce303_tarif+0xab8>)
 80132c2:	5cd3      	ldrb	r3, [r2, r3]
 80132c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80132c8:	4613      	mov	r3, r2
 80132ca:	009b      	lsls	r3, r3, #2
 80132cc:	4413      	add	r3, r2
 80132ce:	005b      	lsls	r3, r3, #1
 80132d0:	18ca      	adds	r2, r1, r3
 80132d2:	8a3b      	ldrh	r3, [r7, #16]
 80132d4:	3304      	adds	r3, #4
 80132d6:	491d      	ldr	r1, [pc, #116]	; (801334c <ce303_tarif+0xab8>)
 80132d8:	5ccb      	ldrb	r3, [r1, r3]
 80132da:	3b30      	subs	r3, #48	; 0x30
 80132dc:	4413      	add	r3, r2
 80132de:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 80132e0:	8a3b      	ldrh	r3, [r7, #16]
 80132e2:	3307      	adds	r3, #7
 80132e4:	4a19      	ldr	r2, [pc, #100]	; (801334c <ce303_tarif+0xab8>)
 80132e6:	5cd3      	ldrb	r3, [r2, r3]
 80132e8:	2b29      	cmp	r3, #41	; 0x29
 80132ea:	d110      	bne.n	801330e <ce303_tarif+0xa7a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 80132ec:	8a3b      	ldrh	r3, [r7, #16]
 80132ee:	3306      	adds	r3, #6
 80132f0:	4a16      	ldr	r2, [pc, #88]	; (801334c <ce303_tarif+0xab8>)
 80132f2:	5cd3      	ldrb	r3, [r2, r3]
 80132f4:	3b30      	subs	r3, #48	; 0x30
 80132f6:	b29b      	uxth	r3, r3
 80132f8:	461a      	mov	r2, r3
 80132fa:	0092      	lsls	r2, r2, #2
 80132fc:	4413      	add	r3, r2
 80132fe:	461a      	mov	r2, r3
 8013300:	0091      	lsls	r1, r2, #2
 8013302:	461a      	mov	r2, r3
 8013304:	460b      	mov	r3, r1
 8013306:	4413      	add	r3, r2
 8013308:	009b      	lsls	r3, r3, #2
 801330a:	82fb      	strh	r3, [r7, #22]
 801330c:	e077      	b.n	80133fe <ce303_tarif+0xb6a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 801330e:	8a3b      	ldrh	r3, [r7, #16]
 8013310:	3308      	adds	r3, #8
 8013312:	4a0e      	ldr	r2, [pc, #56]	; (801334c <ce303_tarif+0xab8>)
 8013314:	5cd3      	ldrb	r3, [r2, r3]
 8013316:	2b29      	cmp	r3, #41	; 0x29
 8013318:	d11e      	bne.n	8013358 <ce303_tarif+0xac4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 801331a:	8a3b      	ldrh	r3, [r7, #16]
 801331c:	3306      	adds	r3, #6
 801331e:	4a0b      	ldr	r2, [pc, #44]	; (801334c <ce303_tarif+0xab8>)
 8013320:	5cd3      	ldrb	r3, [r2, r3]
 8013322:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013326:	4613      	mov	r3, r2
 8013328:	009b      	lsls	r3, r3, #2
 801332a:	4413      	add	r3, r2
 801332c:	005b      	lsls	r3, r3, #1
 801332e:	4619      	mov	r1, r3
 8013330:	8a3b      	ldrh	r3, [r7, #16]
 8013332:	3307      	adds	r3, #7
 8013334:	4a05      	ldr	r2, [pc, #20]	; (801334c <ce303_tarif+0xab8>)
 8013336:	5cd3      	ldrb	r3, [r2, r3]
 8013338:	3b30      	subs	r3, #48	; 0x30
 801333a:	440b      	add	r3, r1
 801333c:	b29b      	uxth	r3, r3
 801333e:	461a      	mov	r2, r3
 8013340:	0092      	lsls	r2, r2, #2
 8013342:	4413      	add	r3, r2
 8013344:	005b      	lsls	r3, r3, #1
 8013346:	82fb      	strh	r3, [r7, #22]
 8013348:	e059      	b.n	80133fe <ce303_tarif+0xb6a>
 801334a:	bf00      	nop
 801334c:	200098e4 	.word	0x200098e4
 8013350:	20009a6c 	.word	0x20009a6c
 8013354:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8013358:	8a3b      	ldrh	r3, [r7, #16]
 801335a:	3309      	adds	r3, #9
 801335c:	4a95      	ldr	r2, [pc, #596]	; (80135b4 <ce303_tarif+0xd20>)
 801335e:	5cd3      	ldrb	r3, [r2, r3]
 8013360:	2b29      	cmp	r3, #41	; 0x29
 8013362:	d126      	bne.n	80133b2 <ce303_tarif+0xb1e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8013364:	8a3b      	ldrh	r3, [r7, #16]
 8013366:	3306      	adds	r3, #6
 8013368:	4a92      	ldr	r2, [pc, #584]	; (80135b4 <ce303_tarif+0xd20>)
 801336a:	5cd3      	ldrb	r3, [r2, r3]
 801336c:	3b30      	subs	r3, #48	; 0x30
 801336e:	b29b      	uxth	r3, r3
 8013370:	461a      	mov	r2, r3
 8013372:	0092      	lsls	r2, r2, #2
 8013374:	4413      	add	r3, r2
 8013376:	461a      	mov	r2, r3
 8013378:	0091      	lsls	r1, r2, #2
 801337a:	461a      	mov	r2, r3
 801337c:	460b      	mov	r3, r1
 801337e:	4413      	add	r3, r2
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	b29a      	uxth	r2, r3
 8013384:	8a3b      	ldrh	r3, [r7, #16]
 8013386:	3307      	adds	r3, #7
 8013388:	498a      	ldr	r1, [pc, #552]	; (80135b4 <ce303_tarif+0xd20>)
 801338a:	5ccb      	ldrb	r3, [r1, r3]
 801338c:	3b30      	subs	r3, #48	; 0x30
 801338e:	b29b      	uxth	r3, r3
 8013390:	4619      	mov	r1, r3
 8013392:	0089      	lsls	r1, r1, #2
 8013394:	440b      	add	r3, r1
 8013396:	005b      	lsls	r3, r3, #1
 8013398:	b29b      	uxth	r3, r3
 801339a:	4413      	add	r3, r2
 801339c:	b29a      	uxth	r2, r3
 801339e:	8a3b      	ldrh	r3, [r7, #16]
 80133a0:	3308      	adds	r3, #8
 80133a2:	4984      	ldr	r1, [pc, #528]	; (80135b4 <ce303_tarif+0xd20>)
 80133a4:	5ccb      	ldrb	r3, [r1, r3]
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	4413      	add	r3, r2
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	3b30      	subs	r3, #48	; 0x30
 80133ae:	82fb      	strh	r3, [r7, #22]
 80133b0:	e025      	b.n	80133fe <ce303_tarif+0xb6a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 80133b2:	8a3b      	ldrh	r3, [r7, #16]
 80133b4:	3306      	adds	r3, #6
 80133b6:	4a7f      	ldr	r2, [pc, #508]	; (80135b4 <ce303_tarif+0xd20>)
 80133b8:	5cd3      	ldrb	r3, [r2, r3]
 80133ba:	3b30      	subs	r3, #48	; 0x30
 80133bc:	b29b      	uxth	r3, r3
 80133be:	461a      	mov	r2, r3
 80133c0:	0092      	lsls	r2, r2, #2
 80133c2:	4413      	add	r3, r2
 80133c4:	461a      	mov	r2, r3
 80133c6:	0091      	lsls	r1, r2, #2
 80133c8:	461a      	mov	r2, r3
 80133ca:	460b      	mov	r3, r1
 80133cc:	4413      	add	r3, r2
 80133ce:	009b      	lsls	r3, r3, #2
 80133d0:	b29a      	uxth	r2, r3
 80133d2:	8a3b      	ldrh	r3, [r7, #16]
 80133d4:	3307      	adds	r3, #7
 80133d6:	4977      	ldr	r1, [pc, #476]	; (80135b4 <ce303_tarif+0xd20>)
 80133d8:	5ccb      	ldrb	r3, [r1, r3]
 80133da:	3b30      	subs	r3, #48	; 0x30
 80133dc:	b29b      	uxth	r3, r3
 80133de:	4619      	mov	r1, r3
 80133e0:	0089      	lsls	r1, r1, #2
 80133e2:	440b      	add	r3, r1
 80133e4:	005b      	lsls	r3, r3, #1
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	4413      	add	r3, r2
 80133ea:	b29a      	uxth	r2, r3
 80133ec:	8a3b      	ldrh	r3, [r7, #16]
 80133ee:	3308      	adds	r3, #8
 80133f0:	4970      	ldr	r1, [pc, #448]	; (80135b4 <ce303_tarif+0xd20>)
 80133f2:	5ccb      	ldrb	r3, [r1, r3]
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	4413      	add	r3, r2
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	3b30      	subs	r3, #48	; 0x30
 80133fc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80133fe:	4b6e      	ldr	r3, [pc, #440]	; (80135b8 <ce303_tarif+0xd24>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	f04f 31ff 	mov.w	r1, #4294967295
 8013406:	4618      	mov	r0, r3
 8013408:	f7f3 fc96 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	0e1b      	lsrs	r3, r3, #24
 8013410:	b2db      	uxtb	r3, r3
 8013412:	4619      	mov	r1, r3
 8013414:	f242 0082 	movw	r0, #8322	; 0x2082
 8013418:	f002 fa22 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	0c1b      	lsrs	r3, r3, #16
 8013420:	b2db      	uxtb	r3, r3
 8013422:	4619      	mov	r1, r3
 8013424:	f242 0083 	movw	r0, #8323	; 0x2083
 8013428:	f002 fa1a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	0a1b      	lsrs	r3, r3, #8
 8013430:	b2db      	uxtb	r3, r3
 8013432:	4619      	mov	r1, r3
 8013434:	f242 0084 	movw	r0, #8324	; 0x2084
 8013438:	f002 fa12 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	b2db      	uxtb	r3, r3
 8013440:	4619      	mov	r1, r3
 8013442:	f242 0085 	movw	r0, #8325	; 0x2085
 8013446:	f002 fa0b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 801344a:	8afb      	ldrh	r3, [r7, #22]
 801344c:	0a1b      	lsrs	r3, r3, #8
 801344e:	b29b      	uxth	r3, r3
 8013450:	b2db      	uxtb	r3, r3
 8013452:	4619      	mov	r1, r3
 8013454:	f242 0086 	movw	r0, #8326	; 0x2086
 8013458:	f002 fa02 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 801345c:	8afb      	ldrh	r3, [r7, #22]
 801345e:	b2db      	uxtb	r3, r3
 8013460:	4619      	mov	r1, r3
 8013462:	f242 0087 	movw	r0, #8327	; 0x2087
 8013466:	f002 f9fb 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801346a:	4b53      	ldr	r3, [pc, #332]	; (80135b8 <ce303_tarif+0xd24>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	4618      	mov	r0, r3
 8013470:	f7f3 fcb0 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	0c1b      	lsrs	r3, r3, #16
 8013478:	b29a      	uxth	r2, r3
 801347a:	4b50      	ldr	r3, [pc, #320]	; (80135bc <ce303_tarif+0xd28>)
 801347c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	b29a      	uxth	r2, r3
 8013484:	4b4d      	ldr	r3, [pc, #308]	; (80135bc <ce303_tarif+0xd28>)
 8013486:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 801348a:	4a4c      	ldr	r2, [pc, #304]	; (80135bc <ce303_tarif+0xd28>)
 801348c:	8afb      	ldrh	r3, [r7, #22]
 801348e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 8013492:	2301      	movs	r3, #1
 8013494:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8013496:	f001 bc06 	b.w	8014ca6 <ce303_tarif+0x2412>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==0) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 801349a:	8a3b      	ldrh	r3, [r7, #16]
 801349c:	4a45      	ldr	r2, [pc, #276]	; (80135b4 <ce303_tarif+0xd20>)
 801349e:	5cd3      	ldrb	r3, [r2, r3]
 80134a0:	2b28      	cmp	r3, #40	; 0x28
 80134a2:	f040 83f6 	bne.w	8013c92 <ce303_tarif+0x13fe>
 80134a6:	7d7b      	ldrb	r3, [r7, #21]
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	f040 83f2 	bne.w	8013c92 <ce303_tarif+0x13fe>
 80134ae:	7d3b      	ldrb	r3, [r7, #20]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f040 83ee 	bne.w	8013c92 <ce303_tarif+0x13fe>
 80134b6:	7cfb      	ldrb	r3, [r7, #19]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	f040 83ea 	bne.w	8013c92 <ce303_tarif+0x13fe>
 80134be:	7cbb      	ldrb	r3, [r7, #18]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	f040 83e6 	bne.w	8013c92 <ce303_tarif+0x13fe>
 80134c6:	7bfb      	ldrb	r3, [r7, #15]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	f040 83e2 	bne.w	8013c92 <ce303_tarif+0x13fe>
 80134ce:	7bbb      	ldrb	r3, [r7, #14]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	f040 83de 	bne.w	8013c92 <ce303_tarif+0x13fe>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80134d6:	8a3b      	ldrh	r3, [r7, #16]
 80134d8:	3302      	adds	r3, #2
 80134da:	4a36      	ldr	r2, [pc, #216]	; (80135b4 <ce303_tarif+0xd20>)
 80134dc:	5cd3      	ldrb	r3, [r2, r3]
 80134de:	2b2e      	cmp	r3, #46	; 0x2e
 80134e0:	f040 80e2 	bne.w	80136a8 <ce303_tarif+0xe14>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 80134e4:	8a3b      	ldrh	r3, [r7, #16]
 80134e6:	3301      	adds	r3, #1
 80134e8:	4a32      	ldr	r2, [pc, #200]	; (80135b4 <ce303_tarif+0xd20>)
 80134ea:	5cd3      	ldrb	r3, [r2, r3]
 80134ec:	3b30      	subs	r3, #48	; 0x30
 80134ee:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 80134f0:	8a3b      	ldrh	r3, [r7, #16]
 80134f2:	3304      	adds	r3, #4
 80134f4:	4a2f      	ldr	r2, [pc, #188]	; (80135b4 <ce303_tarif+0xd20>)
 80134f6:	5cd3      	ldrb	r3, [r2, r3]
 80134f8:	2b29      	cmp	r3, #41	; 0x29
 80134fa:	d110      	bne.n	801351e <ce303_tarif+0xc8a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 80134fc:	8a3b      	ldrh	r3, [r7, #16]
 80134fe:	3303      	adds	r3, #3
 8013500:	4a2c      	ldr	r2, [pc, #176]	; (80135b4 <ce303_tarif+0xd20>)
 8013502:	5cd3      	ldrb	r3, [r2, r3]
 8013504:	3b30      	subs	r3, #48	; 0x30
 8013506:	b29b      	uxth	r3, r3
 8013508:	461a      	mov	r2, r3
 801350a:	0092      	lsls	r2, r2, #2
 801350c:	4413      	add	r3, r2
 801350e:	461a      	mov	r2, r3
 8013510:	0091      	lsls	r1, r2, #2
 8013512:	461a      	mov	r2, r3
 8013514:	460b      	mov	r3, r1
 8013516:	4413      	add	r3, r2
 8013518:	009b      	lsls	r3, r3, #2
 801351a:	82fb      	strh	r3, [r7, #22]
 801351c:	e076      	b.n	801360c <ce303_tarif+0xd78>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801351e:	8a3b      	ldrh	r3, [r7, #16]
 8013520:	3305      	adds	r3, #5
 8013522:	4a24      	ldr	r2, [pc, #144]	; (80135b4 <ce303_tarif+0xd20>)
 8013524:	5cd3      	ldrb	r3, [r2, r3]
 8013526:	2b29      	cmp	r3, #41	; 0x29
 8013528:	d117      	bne.n	801355a <ce303_tarif+0xcc6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801352a:	8a3b      	ldrh	r3, [r7, #16]
 801352c:	3303      	adds	r3, #3
 801352e:	4a21      	ldr	r2, [pc, #132]	; (80135b4 <ce303_tarif+0xd20>)
 8013530:	5cd3      	ldrb	r3, [r2, r3]
 8013532:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013536:	4613      	mov	r3, r2
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	4413      	add	r3, r2
 801353c:	005b      	lsls	r3, r3, #1
 801353e:	4619      	mov	r1, r3
 8013540:	8a3b      	ldrh	r3, [r7, #16]
 8013542:	3304      	adds	r3, #4
 8013544:	4a1b      	ldr	r2, [pc, #108]	; (80135b4 <ce303_tarif+0xd20>)
 8013546:	5cd3      	ldrb	r3, [r2, r3]
 8013548:	3b30      	subs	r3, #48	; 0x30
 801354a:	440b      	add	r3, r1
 801354c:	b29b      	uxth	r3, r3
 801354e:	461a      	mov	r2, r3
 8013550:	0092      	lsls	r2, r2, #2
 8013552:	4413      	add	r3, r2
 8013554:	005b      	lsls	r3, r3, #1
 8013556:	82fb      	strh	r3, [r7, #22]
 8013558:	e058      	b.n	801360c <ce303_tarif+0xd78>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 801355a:	8a3b      	ldrh	r3, [r7, #16]
 801355c:	3306      	adds	r3, #6
 801355e:	4a15      	ldr	r2, [pc, #84]	; (80135b4 <ce303_tarif+0xd20>)
 8013560:	5cd3      	ldrb	r3, [r2, r3]
 8013562:	2b29      	cmp	r3, #41	; 0x29
 8013564:	d12c      	bne.n	80135c0 <ce303_tarif+0xd2c>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8013566:	8a3b      	ldrh	r3, [r7, #16]
 8013568:	3303      	adds	r3, #3
 801356a:	4a12      	ldr	r2, [pc, #72]	; (80135b4 <ce303_tarif+0xd20>)
 801356c:	5cd3      	ldrb	r3, [r2, r3]
 801356e:	3b30      	subs	r3, #48	; 0x30
 8013570:	b29b      	uxth	r3, r3
 8013572:	461a      	mov	r2, r3
 8013574:	0092      	lsls	r2, r2, #2
 8013576:	4413      	add	r3, r2
 8013578:	461a      	mov	r2, r3
 801357a:	0091      	lsls	r1, r2, #2
 801357c:	461a      	mov	r2, r3
 801357e:	460b      	mov	r3, r1
 8013580:	4413      	add	r3, r2
 8013582:	009b      	lsls	r3, r3, #2
 8013584:	b29a      	uxth	r2, r3
 8013586:	8a3b      	ldrh	r3, [r7, #16]
 8013588:	3304      	adds	r3, #4
 801358a:	490a      	ldr	r1, [pc, #40]	; (80135b4 <ce303_tarif+0xd20>)
 801358c:	5ccb      	ldrb	r3, [r1, r3]
 801358e:	3b30      	subs	r3, #48	; 0x30
 8013590:	b29b      	uxth	r3, r3
 8013592:	4619      	mov	r1, r3
 8013594:	0089      	lsls	r1, r1, #2
 8013596:	440b      	add	r3, r1
 8013598:	005b      	lsls	r3, r3, #1
 801359a:	b29b      	uxth	r3, r3
 801359c:	4413      	add	r3, r2
 801359e:	b29a      	uxth	r2, r3
 80135a0:	8a3b      	ldrh	r3, [r7, #16]
 80135a2:	3305      	adds	r3, #5
 80135a4:	4903      	ldr	r1, [pc, #12]	; (80135b4 <ce303_tarif+0xd20>)
 80135a6:	5ccb      	ldrb	r3, [r1, r3]
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	4413      	add	r3, r2
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	3b30      	subs	r3, #48	; 0x30
 80135b0:	82fb      	strh	r3, [r7, #22]
 80135b2:	e02b      	b.n	801360c <ce303_tarif+0xd78>
 80135b4:	200098e4 	.word	0x200098e4
 80135b8:	20009a6c 	.word	0x20009a6c
 80135bc:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80135c0:	8a3b      	ldrh	r3, [r7, #16]
 80135c2:	3303      	adds	r3, #3
 80135c4:	4ab0      	ldr	r2, [pc, #704]	; (8013888 <ce303_tarif+0xff4>)
 80135c6:	5cd3      	ldrb	r3, [r2, r3]
 80135c8:	3b30      	subs	r3, #48	; 0x30
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	461a      	mov	r2, r3
 80135ce:	0092      	lsls	r2, r2, #2
 80135d0:	4413      	add	r3, r2
 80135d2:	461a      	mov	r2, r3
 80135d4:	0091      	lsls	r1, r2, #2
 80135d6:	461a      	mov	r2, r3
 80135d8:	460b      	mov	r3, r1
 80135da:	4413      	add	r3, r2
 80135dc:	009b      	lsls	r3, r3, #2
 80135de:	b29a      	uxth	r2, r3
 80135e0:	8a3b      	ldrh	r3, [r7, #16]
 80135e2:	3304      	adds	r3, #4
 80135e4:	49a8      	ldr	r1, [pc, #672]	; (8013888 <ce303_tarif+0xff4>)
 80135e6:	5ccb      	ldrb	r3, [r1, r3]
 80135e8:	3b30      	subs	r3, #48	; 0x30
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	4619      	mov	r1, r3
 80135ee:	0089      	lsls	r1, r1, #2
 80135f0:	440b      	add	r3, r1
 80135f2:	005b      	lsls	r3, r3, #1
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	4413      	add	r3, r2
 80135f8:	b29a      	uxth	r2, r3
 80135fa:	8a3b      	ldrh	r3, [r7, #16]
 80135fc:	3305      	adds	r3, #5
 80135fe:	49a2      	ldr	r1, [pc, #648]	; (8013888 <ce303_tarif+0xff4>)
 8013600:	5ccb      	ldrb	r3, [r1, r3]
 8013602:	b29b      	uxth	r3, r3
 8013604:	4413      	add	r3, r2
 8013606:	b29b      	uxth	r3, r3
 8013608:	3b30      	subs	r3, #48	; 0x30
 801360a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801360c:	4b9f      	ldr	r3, [pc, #636]	; (801388c <ce303_tarif+0xff8>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	f04f 31ff 	mov.w	r1, #4294967295
 8013614:	4618      	mov	r0, r3
 8013616:	f7f3 fb8f 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	0e1b      	lsrs	r3, r3, #24
 801361e:	b2db      	uxtb	r3, r3
 8013620:	4619      	mov	r1, r3
 8013622:	f242 0088 	movw	r0, #8328	; 0x2088
 8013626:	f002 f91b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	0c1b      	lsrs	r3, r3, #16
 801362e:	b2db      	uxtb	r3, r3
 8013630:	4619      	mov	r1, r3
 8013632:	f242 0089 	movw	r0, #8329	; 0x2089
 8013636:	f002 f913 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	0a1b      	lsrs	r3, r3, #8
 801363e:	b2db      	uxtb	r3, r3
 8013640:	4619      	mov	r1, r3
 8013642:	f242 008a 	movw	r0, #8330	; 0x208a
 8013646:	f002 f90b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	b2db      	uxtb	r3, r3
 801364e:	4619      	mov	r1, r3
 8013650:	f242 008b 	movw	r0, #8331	; 0x208b
 8013654:	f002 f904 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8013658:	8afb      	ldrh	r3, [r7, #22]
 801365a:	0a1b      	lsrs	r3, r3, #8
 801365c:	b29b      	uxth	r3, r3
 801365e:	b2db      	uxtb	r3, r3
 8013660:	4619      	mov	r1, r3
 8013662:	f242 008c 	movw	r0, #8332	; 0x208c
 8013666:	f002 f8fb 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 801366a:	8afb      	ldrh	r3, [r7, #22]
 801366c:	b2db      	uxtb	r3, r3
 801366e:	4619      	mov	r1, r3
 8013670:	f242 008d 	movw	r0, #8333	; 0x208d
 8013674:	f002 f8f4 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8013678:	4b84      	ldr	r3, [pc, #528]	; (801388c <ce303_tarif+0xff8>)
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	4618      	mov	r0, r3
 801367e:	f7f3 fba9 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	0c1b      	lsrs	r3, r3, #16
 8013686:	b29a      	uxth	r2, r3
 8013688:	4b81      	ldr	r3, [pc, #516]	; (8013890 <ce303_tarif+0xffc>)
 801368a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	b29a      	uxth	r2, r3
 8013692:	4b7f      	ldr	r3, [pc, #508]	; (8013890 <ce303_tarif+0xffc>)
 8013694:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8013698:	4a7d      	ldr	r2, [pc, #500]	; (8013890 <ce303_tarif+0xffc>)
 801369a:	8afb      	ldrh	r3, [r7, #22]
 801369c:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 80136a0:	2301      	movs	r3, #1
 80136a2:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80136a4:	f001 bb01 	b.w	8014caa <ce303_tarif+0x2416>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 80136a8:	8a3b      	ldrh	r3, [r7, #16]
 80136aa:	3303      	adds	r3, #3
 80136ac:	4a76      	ldr	r2, [pc, #472]	; (8013888 <ce303_tarif+0xff4>)
 80136ae:	5cd3      	ldrb	r3, [r2, r3]
 80136b0:	2b2e      	cmp	r3, #46	; 0x2e
 80136b2:	f040 80ef 	bne.w	8013894 <ce303_tarif+0x1000>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80136b6:	8a3b      	ldrh	r3, [r7, #16]
 80136b8:	3301      	adds	r3, #1
 80136ba:	4a73      	ldr	r2, [pc, #460]	; (8013888 <ce303_tarif+0xff4>)
 80136bc:	5cd3      	ldrb	r3, [r2, r3]
 80136be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80136c2:	4613      	mov	r3, r2
 80136c4:	009b      	lsls	r3, r3, #2
 80136c6:	4413      	add	r3, r2
 80136c8:	005b      	lsls	r3, r3, #1
 80136ca:	4619      	mov	r1, r3
 80136cc:	8a3b      	ldrh	r3, [r7, #16]
 80136ce:	3302      	adds	r3, #2
 80136d0:	4a6d      	ldr	r2, [pc, #436]	; (8013888 <ce303_tarif+0xff4>)
 80136d2:	5cd3      	ldrb	r3, [r2, r3]
 80136d4:	3b30      	subs	r3, #48	; 0x30
 80136d6:	440b      	add	r3, r1
 80136d8:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80136da:	8a3b      	ldrh	r3, [r7, #16]
 80136dc:	3305      	adds	r3, #5
 80136de:	4a6a      	ldr	r2, [pc, #424]	; (8013888 <ce303_tarif+0xff4>)
 80136e0:	5cd3      	ldrb	r3, [r2, r3]
 80136e2:	2b29      	cmp	r3, #41	; 0x29
 80136e4:	d110      	bne.n	8013708 <ce303_tarif+0xe74>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80136e6:	8a3b      	ldrh	r3, [r7, #16]
 80136e8:	3304      	adds	r3, #4
 80136ea:	4a67      	ldr	r2, [pc, #412]	; (8013888 <ce303_tarif+0xff4>)
 80136ec:	5cd3      	ldrb	r3, [r2, r3]
 80136ee:	3b30      	subs	r3, #48	; 0x30
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	461a      	mov	r2, r3
 80136f4:	0092      	lsls	r2, r2, #2
 80136f6:	4413      	add	r3, r2
 80136f8:	461a      	mov	r2, r3
 80136fa:	0091      	lsls	r1, r2, #2
 80136fc:	461a      	mov	r2, r3
 80136fe:	460b      	mov	r3, r1
 8013700:	4413      	add	r3, r2
 8013702:	009b      	lsls	r3, r3, #2
 8013704:	82fb      	strh	r3, [r7, #22]
 8013706:	e070      	b.n	80137ea <ce303_tarif+0xf56>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8013708:	8a3b      	ldrh	r3, [r7, #16]
 801370a:	3306      	adds	r3, #6
 801370c:	4a5e      	ldr	r2, [pc, #376]	; (8013888 <ce303_tarif+0xff4>)
 801370e:	5cd3      	ldrb	r3, [r2, r3]
 8013710:	2b29      	cmp	r3, #41	; 0x29
 8013712:	d117      	bne.n	8013744 <ce303_tarif+0xeb0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8013714:	8a3b      	ldrh	r3, [r7, #16]
 8013716:	3304      	adds	r3, #4
 8013718:	4a5b      	ldr	r2, [pc, #364]	; (8013888 <ce303_tarif+0xff4>)
 801371a:	5cd3      	ldrb	r3, [r2, r3]
 801371c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013720:	4613      	mov	r3, r2
 8013722:	009b      	lsls	r3, r3, #2
 8013724:	4413      	add	r3, r2
 8013726:	005b      	lsls	r3, r3, #1
 8013728:	4619      	mov	r1, r3
 801372a:	8a3b      	ldrh	r3, [r7, #16]
 801372c:	3305      	adds	r3, #5
 801372e:	4a56      	ldr	r2, [pc, #344]	; (8013888 <ce303_tarif+0xff4>)
 8013730:	5cd3      	ldrb	r3, [r2, r3]
 8013732:	3b30      	subs	r3, #48	; 0x30
 8013734:	440b      	add	r3, r1
 8013736:	b29b      	uxth	r3, r3
 8013738:	461a      	mov	r2, r3
 801373a:	0092      	lsls	r2, r2, #2
 801373c:	4413      	add	r3, r2
 801373e:	005b      	lsls	r3, r3, #1
 8013740:	82fb      	strh	r3, [r7, #22]
 8013742:	e052      	b.n	80137ea <ce303_tarif+0xf56>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8013744:	8a3b      	ldrh	r3, [r7, #16]
 8013746:	3307      	adds	r3, #7
 8013748:	4a4f      	ldr	r2, [pc, #316]	; (8013888 <ce303_tarif+0xff4>)
 801374a:	5cd3      	ldrb	r3, [r2, r3]
 801374c:	2b29      	cmp	r3, #41	; 0x29
 801374e:	d126      	bne.n	801379e <ce303_tarif+0xf0a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8013750:	8a3b      	ldrh	r3, [r7, #16]
 8013752:	3304      	adds	r3, #4
 8013754:	4a4c      	ldr	r2, [pc, #304]	; (8013888 <ce303_tarif+0xff4>)
 8013756:	5cd3      	ldrb	r3, [r2, r3]
 8013758:	3b30      	subs	r3, #48	; 0x30
 801375a:	b29b      	uxth	r3, r3
 801375c:	461a      	mov	r2, r3
 801375e:	0092      	lsls	r2, r2, #2
 8013760:	4413      	add	r3, r2
 8013762:	461a      	mov	r2, r3
 8013764:	0091      	lsls	r1, r2, #2
 8013766:	461a      	mov	r2, r3
 8013768:	460b      	mov	r3, r1
 801376a:	4413      	add	r3, r2
 801376c:	009b      	lsls	r3, r3, #2
 801376e:	b29a      	uxth	r2, r3
 8013770:	8a3b      	ldrh	r3, [r7, #16]
 8013772:	3305      	adds	r3, #5
 8013774:	4944      	ldr	r1, [pc, #272]	; (8013888 <ce303_tarif+0xff4>)
 8013776:	5ccb      	ldrb	r3, [r1, r3]
 8013778:	3b30      	subs	r3, #48	; 0x30
 801377a:	b29b      	uxth	r3, r3
 801377c:	4619      	mov	r1, r3
 801377e:	0089      	lsls	r1, r1, #2
 8013780:	440b      	add	r3, r1
 8013782:	005b      	lsls	r3, r3, #1
 8013784:	b29b      	uxth	r3, r3
 8013786:	4413      	add	r3, r2
 8013788:	b29a      	uxth	r2, r3
 801378a:	8a3b      	ldrh	r3, [r7, #16]
 801378c:	3306      	adds	r3, #6
 801378e:	493e      	ldr	r1, [pc, #248]	; (8013888 <ce303_tarif+0xff4>)
 8013790:	5ccb      	ldrb	r3, [r1, r3]
 8013792:	b29b      	uxth	r3, r3
 8013794:	4413      	add	r3, r2
 8013796:	b29b      	uxth	r3, r3
 8013798:	3b30      	subs	r3, #48	; 0x30
 801379a:	82fb      	strh	r3, [r7, #22]
 801379c:	e025      	b.n	80137ea <ce303_tarif+0xf56>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801379e:	8a3b      	ldrh	r3, [r7, #16]
 80137a0:	3304      	adds	r3, #4
 80137a2:	4a39      	ldr	r2, [pc, #228]	; (8013888 <ce303_tarif+0xff4>)
 80137a4:	5cd3      	ldrb	r3, [r2, r3]
 80137a6:	3b30      	subs	r3, #48	; 0x30
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	461a      	mov	r2, r3
 80137ac:	0092      	lsls	r2, r2, #2
 80137ae:	4413      	add	r3, r2
 80137b0:	461a      	mov	r2, r3
 80137b2:	0091      	lsls	r1, r2, #2
 80137b4:	461a      	mov	r2, r3
 80137b6:	460b      	mov	r3, r1
 80137b8:	4413      	add	r3, r2
 80137ba:	009b      	lsls	r3, r3, #2
 80137bc:	b29a      	uxth	r2, r3
 80137be:	8a3b      	ldrh	r3, [r7, #16]
 80137c0:	3305      	adds	r3, #5
 80137c2:	4931      	ldr	r1, [pc, #196]	; (8013888 <ce303_tarif+0xff4>)
 80137c4:	5ccb      	ldrb	r3, [r1, r3]
 80137c6:	3b30      	subs	r3, #48	; 0x30
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	4619      	mov	r1, r3
 80137cc:	0089      	lsls	r1, r1, #2
 80137ce:	440b      	add	r3, r1
 80137d0:	005b      	lsls	r3, r3, #1
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	4413      	add	r3, r2
 80137d6:	b29a      	uxth	r2, r3
 80137d8:	8a3b      	ldrh	r3, [r7, #16]
 80137da:	3306      	adds	r3, #6
 80137dc:	492a      	ldr	r1, [pc, #168]	; (8013888 <ce303_tarif+0xff4>)
 80137de:	5ccb      	ldrb	r3, [r1, r3]
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	4413      	add	r3, r2
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	3b30      	subs	r3, #48	; 0x30
 80137e8:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80137ea:	4b28      	ldr	r3, [pc, #160]	; (801388c <ce303_tarif+0xff8>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	f04f 31ff 	mov.w	r1, #4294967295
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7f3 faa0 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	0e1b      	lsrs	r3, r3, #24
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	4619      	mov	r1, r3
 8013800:	f242 0088 	movw	r0, #8328	; 0x2088
 8013804:	f002 f82c 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	0c1b      	lsrs	r3, r3, #16
 801380c:	b2db      	uxtb	r3, r3
 801380e:	4619      	mov	r1, r3
 8013810:	f242 0089 	movw	r0, #8329	; 0x2089
 8013814:	f002 f824 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	0a1b      	lsrs	r3, r3, #8
 801381c:	b2db      	uxtb	r3, r3
 801381e:	4619      	mov	r1, r3
 8013820:	f242 008a 	movw	r0, #8330	; 0x208a
 8013824:	f002 f81c 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	b2db      	uxtb	r3, r3
 801382c:	4619      	mov	r1, r3
 801382e:	f242 008b 	movw	r0, #8331	; 0x208b
 8013832:	f002 f815 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8013836:	8afb      	ldrh	r3, [r7, #22]
 8013838:	0a1b      	lsrs	r3, r3, #8
 801383a:	b29b      	uxth	r3, r3
 801383c:	b2db      	uxtb	r3, r3
 801383e:	4619      	mov	r1, r3
 8013840:	f242 008c 	movw	r0, #8332	; 0x208c
 8013844:	f002 f80c 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8013848:	8afb      	ldrh	r3, [r7, #22]
 801384a:	b2db      	uxtb	r3, r3
 801384c:	4619      	mov	r1, r3
 801384e:	f242 008d 	movw	r0, #8333	; 0x208d
 8013852:	f002 f805 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8013856:	4b0d      	ldr	r3, [pc, #52]	; (801388c <ce303_tarif+0xff8>)
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	4618      	mov	r0, r3
 801385c:	f7f3 faba 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	0c1b      	lsrs	r3, r3, #16
 8013864:	b29a      	uxth	r2, r3
 8013866:	4b0a      	ldr	r3, [pc, #40]	; (8013890 <ce303_tarif+0xffc>)
 8013868:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	b29a      	uxth	r2, r3
 8013870:	4b07      	ldr	r3, [pc, #28]	; (8013890 <ce303_tarif+0xffc>)
 8013872:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8013876:	4a06      	ldr	r2, [pc, #24]	; (8013890 <ce303_tarif+0xffc>)
 8013878:	8afb      	ldrh	r3, [r7, #22]
 801387a:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 801387e:	2301      	movs	r3, #1
 8013880:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8013882:	f001 ba12 	b.w	8014caa <ce303_tarif+0x2416>
 8013886:	bf00      	nop
 8013888:	200098e4 	.word	0x200098e4
 801388c:	20009a6c 	.word	0x20009a6c
 8013890:	2000a10c 	.word	0x2000a10c

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 8013894:	8a3b      	ldrh	r3, [r7, #16]
 8013896:	3304      	adds	r3, #4
 8013898:	4aaa      	ldr	r2, [pc, #680]	; (8013b44 <ce303_tarif+0x12b0>)
 801389a:	5cd3      	ldrb	r3, [r2, r3]
 801389c:	2b2e      	cmp	r3, #46	; 0x2e
 801389e:	f040 80f0 	bne.w	8013a82 <ce303_tarif+0x11ee>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80138a2:	8a3b      	ldrh	r3, [r7, #16]
 80138a4:	3301      	adds	r3, #1
 80138a6:	4aa7      	ldr	r2, [pc, #668]	; (8013b44 <ce303_tarif+0x12b0>)
 80138a8:	5cd3      	ldrb	r3, [r2, r3]
 80138aa:	3b30      	subs	r3, #48	; 0x30
 80138ac:	2264      	movs	r2, #100	; 0x64
 80138ae:	fb02 f103 	mul.w	r1, r2, r3
 80138b2:	8a3b      	ldrh	r3, [r7, #16]
 80138b4:	3302      	adds	r3, #2
 80138b6:	4aa3      	ldr	r2, [pc, #652]	; (8013b44 <ce303_tarif+0x12b0>)
 80138b8:	5cd3      	ldrb	r3, [r2, r3]
 80138ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80138be:	4613      	mov	r3, r2
 80138c0:	009b      	lsls	r3, r3, #2
 80138c2:	4413      	add	r3, r2
 80138c4:	005b      	lsls	r3, r3, #1
 80138c6:	18ca      	adds	r2, r1, r3
 80138c8:	8a3b      	ldrh	r3, [r7, #16]
 80138ca:	3303      	adds	r3, #3
 80138cc:	499d      	ldr	r1, [pc, #628]	; (8013b44 <ce303_tarif+0x12b0>)
 80138ce:	5ccb      	ldrb	r3, [r1, r3]
 80138d0:	3b30      	subs	r3, #48	; 0x30
 80138d2:	4413      	add	r3, r2
 80138d4:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80138d6:	8a3b      	ldrh	r3, [r7, #16]
 80138d8:	3306      	adds	r3, #6
 80138da:	4a9a      	ldr	r2, [pc, #616]	; (8013b44 <ce303_tarif+0x12b0>)
 80138dc:	5cd3      	ldrb	r3, [r2, r3]
 80138de:	2b29      	cmp	r3, #41	; 0x29
 80138e0:	d110      	bne.n	8013904 <ce303_tarif+0x1070>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80138e2:	8a3b      	ldrh	r3, [r7, #16]
 80138e4:	3305      	adds	r3, #5
 80138e6:	4a97      	ldr	r2, [pc, #604]	; (8013b44 <ce303_tarif+0x12b0>)
 80138e8:	5cd3      	ldrb	r3, [r2, r3]
 80138ea:	3b30      	subs	r3, #48	; 0x30
 80138ec:	b29b      	uxth	r3, r3
 80138ee:	461a      	mov	r2, r3
 80138f0:	0092      	lsls	r2, r2, #2
 80138f2:	4413      	add	r3, r2
 80138f4:	461a      	mov	r2, r3
 80138f6:	0091      	lsls	r1, r2, #2
 80138f8:	461a      	mov	r2, r3
 80138fa:	460b      	mov	r3, r1
 80138fc:	4413      	add	r3, r2
 80138fe:	009b      	lsls	r3, r3, #2
 8013900:	82fb      	strh	r3, [r7, #22]
 8013902:	e070      	b.n	80139e6 <ce303_tarif+0x1152>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8013904:	8a3b      	ldrh	r3, [r7, #16]
 8013906:	3307      	adds	r3, #7
 8013908:	4a8e      	ldr	r2, [pc, #568]	; (8013b44 <ce303_tarif+0x12b0>)
 801390a:	5cd3      	ldrb	r3, [r2, r3]
 801390c:	2b29      	cmp	r3, #41	; 0x29
 801390e:	d117      	bne.n	8013940 <ce303_tarif+0x10ac>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8013910:	8a3b      	ldrh	r3, [r7, #16]
 8013912:	3305      	adds	r3, #5
 8013914:	4a8b      	ldr	r2, [pc, #556]	; (8013b44 <ce303_tarif+0x12b0>)
 8013916:	5cd3      	ldrb	r3, [r2, r3]
 8013918:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801391c:	4613      	mov	r3, r2
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	4413      	add	r3, r2
 8013922:	005b      	lsls	r3, r3, #1
 8013924:	4619      	mov	r1, r3
 8013926:	8a3b      	ldrh	r3, [r7, #16]
 8013928:	3306      	adds	r3, #6
 801392a:	4a86      	ldr	r2, [pc, #536]	; (8013b44 <ce303_tarif+0x12b0>)
 801392c:	5cd3      	ldrb	r3, [r2, r3]
 801392e:	3b30      	subs	r3, #48	; 0x30
 8013930:	440b      	add	r3, r1
 8013932:	b29b      	uxth	r3, r3
 8013934:	461a      	mov	r2, r3
 8013936:	0092      	lsls	r2, r2, #2
 8013938:	4413      	add	r3, r2
 801393a:	005b      	lsls	r3, r3, #1
 801393c:	82fb      	strh	r3, [r7, #22]
 801393e:	e052      	b.n	80139e6 <ce303_tarif+0x1152>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8013940:	8a3b      	ldrh	r3, [r7, #16]
 8013942:	3308      	adds	r3, #8
 8013944:	4a7f      	ldr	r2, [pc, #508]	; (8013b44 <ce303_tarif+0x12b0>)
 8013946:	5cd3      	ldrb	r3, [r2, r3]
 8013948:	2b29      	cmp	r3, #41	; 0x29
 801394a:	d126      	bne.n	801399a <ce303_tarif+0x1106>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801394c:	8a3b      	ldrh	r3, [r7, #16]
 801394e:	3305      	adds	r3, #5
 8013950:	4a7c      	ldr	r2, [pc, #496]	; (8013b44 <ce303_tarif+0x12b0>)
 8013952:	5cd3      	ldrb	r3, [r2, r3]
 8013954:	3b30      	subs	r3, #48	; 0x30
 8013956:	b29b      	uxth	r3, r3
 8013958:	461a      	mov	r2, r3
 801395a:	0092      	lsls	r2, r2, #2
 801395c:	4413      	add	r3, r2
 801395e:	461a      	mov	r2, r3
 8013960:	0091      	lsls	r1, r2, #2
 8013962:	461a      	mov	r2, r3
 8013964:	460b      	mov	r3, r1
 8013966:	4413      	add	r3, r2
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	b29a      	uxth	r2, r3
 801396c:	8a3b      	ldrh	r3, [r7, #16]
 801396e:	3306      	adds	r3, #6
 8013970:	4974      	ldr	r1, [pc, #464]	; (8013b44 <ce303_tarif+0x12b0>)
 8013972:	5ccb      	ldrb	r3, [r1, r3]
 8013974:	3b30      	subs	r3, #48	; 0x30
 8013976:	b29b      	uxth	r3, r3
 8013978:	4619      	mov	r1, r3
 801397a:	0089      	lsls	r1, r1, #2
 801397c:	440b      	add	r3, r1
 801397e:	005b      	lsls	r3, r3, #1
 8013980:	b29b      	uxth	r3, r3
 8013982:	4413      	add	r3, r2
 8013984:	b29a      	uxth	r2, r3
 8013986:	8a3b      	ldrh	r3, [r7, #16]
 8013988:	3307      	adds	r3, #7
 801398a:	496e      	ldr	r1, [pc, #440]	; (8013b44 <ce303_tarif+0x12b0>)
 801398c:	5ccb      	ldrb	r3, [r1, r3]
 801398e:	b29b      	uxth	r3, r3
 8013990:	4413      	add	r3, r2
 8013992:	b29b      	uxth	r3, r3
 8013994:	3b30      	subs	r3, #48	; 0x30
 8013996:	82fb      	strh	r3, [r7, #22]
 8013998:	e025      	b.n	80139e6 <ce303_tarif+0x1152>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801399a:	8a3b      	ldrh	r3, [r7, #16]
 801399c:	3305      	adds	r3, #5
 801399e:	4a69      	ldr	r2, [pc, #420]	; (8013b44 <ce303_tarif+0x12b0>)
 80139a0:	5cd3      	ldrb	r3, [r2, r3]
 80139a2:	3b30      	subs	r3, #48	; 0x30
 80139a4:	b29b      	uxth	r3, r3
 80139a6:	461a      	mov	r2, r3
 80139a8:	0092      	lsls	r2, r2, #2
 80139aa:	4413      	add	r3, r2
 80139ac:	461a      	mov	r2, r3
 80139ae:	0091      	lsls	r1, r2, #2
 80139b0:	461a      	mov	r2, r3
 80139b2:	460b      	mov	r3, r1
 80139b4:	4413      	add	r3, r2
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	b29a      	uxth	r2, r3
 80139ba:	8a3b      	ldrh	r3, [r7, #16]
 80139bc:	3306      	adds	r3, #6
 80139be:	4961      	ldr	r1, [pc, #388]	; (8013b44 <ce303_tarif+0x12b0>)
 80139c0:	5ccb      	ldrb	r3, [r1, r3]
 80139c2:	3b30      	subs	r3, #48	; 0x30
 80139c4:	b29b      	uxth	r3, r3
 80139c6:	4619      	mov	r1, r3
 80139c8:	0089      	lsls	r1, r1, #2
 80139ca:	440b      	add	r3, r1
 80139cc:	005b      	lsls	r3, r3, #1
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	4413      	add	r3, r2
 80139d2:	b29a      	uxth	r2, r3
 80139d4:	8a3b      	ldrh	r3, [r7, #16]
 80139d6:	3307      	adds	r3, #7
 80139d8:	495a      	ldr	r1, [pc, #360]	; (8013b44 <ce303_tarif+0x12b0>)
 80139da:	5ccb      	ldrb	r3, [r1, r3]
 80139dc:	b29b      	uxth	r3, r3
 80139de:	4413      	add	r3, r2
 80139e0:	b29b      	uxth	r3, r3
 80139e2:	3b30      	subs	r3, #48	; 0x30
 80139e4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80139e6:	4b58      	ldr	r3, [pc, #352]	; (8013b48 <ce303_tarif+0x12b4>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f04f 31ff 	mov.w	r1, #4294967295
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7f3 f9a2 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	0e1b      	lsrs	r3, r3, #24
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	4619      	mov	r1, r3
 80139fc:	f242 0088 	movw	r0, #8328	; 0x2088
 8013a00:	f001 ff2e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	0c1b      	lsrs	r3, r3, #16
 8013a08:	b2db      	uxtb	r3, r3
 8013a0a:	4619      	mov	r1, r3
 8013a0c:	f242 0089 	movw	r0, #8329	; 0x2089
 8013a10:	f001 ff26 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	0a1b      	lsrs	r3, r3, #8
 8013a18:	b2db      	uxtb	r3, r3
 8013a1a:	4619      	mov	r1, r3
 8013a1c:	f242 008a 	movw	r0, #8330	; 0x208a
 8013a20:	f001 ff1e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8013a24:	68bb      	ldr	r3, [r7, #8]
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	4619      	mov	r1, r3
 8013a2a:	f242 008b 	movw	r0, #8331	; 0x208b
 8013a2e:	f001 ff17 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8013a32:	8afb      	ldrh	r3, [r7, #22]
 8013a34:	0a1b      	lsrs	r3, r3, #8
 8013a36:	b29b      	uxth	r3, r3
 8013a38:	b2db      	uxtb	r3, r3
 8013a3a:	4619      	mov	r1, r3
 8013a3c:	f242 008c 	movw	r0, #8332	; 0x208c
 8013a40:	f001 ff0e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8013a44:	8afb      	ldrh	r3, [r7, #22]
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	4619      	mov	r1, r3
 8013a4a:	f242 008d 	movw	r0, #8333	; 0x208d
 8013a4e:	f001 ff07 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8013a52:	4b3d      	ldr	r3, [pc, #244]	; (8013b48 <ce303_tarif+0x12b4>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7f3 f9bc 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	0c1b      	lsrs	r3, r3, #16
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	4b3a      	ldr	r3, [pc, #232]	; (8013b4c <ce303_tarif+0x12b8>)
 8013a64:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	4b37      	ldr	r3, [pc, #220]	; (8013b4c <ce303_tarif+0x12b8>)
 8013a6e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8013a72:	4a36      	ldr	r2, [pc, #216]	; (8013b4c <ce303_tarif+0x12b8>)
 8013a74:	8afb      	ldrh	r3, [r7, #22]
 8013a76:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8013a7e:	f001 b914 	b.w	8014caa <ce303_tarif+0x2416>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 8013a82:	8a3b      	ldrh	r3, [r7, #16]
 8013a84:	3305      	adds	r3, #5
 8013a86:	4a2f      	ldr	r2, [pc, #188]	; (8013b44 <ce303_tarif+0x12b0>)
 8013a88:	5cd3      	ldrb	r3, [r2, r3]
 8013a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8013a8c:	f041 810d 	bne.w	8014caa <ce303_tarif+0x2416>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8013a90:	8a3b      	ldrh	r3, [r7, #16]
 8013a92:	3301      	adds	r3, #1
 8013a94:	4a2b      	ldr	r2, [pc, #172]	; (8013b44 <ce303_tarif+0x12b0>)
 8013a96:	5cd3      	ldrb	r3, [r2, r3]
 8013a98:	3b30      	subs	r3, #48	; 0x30
 8013a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013a9e:	fb02 f203 	mul.w	r2, r2, r3
 8013aa2:	8a3b      	ldrh	r3, [r7, #16]
 8013aa4:	3302      	adds	r3, #2
 8013aa6:	4927      	ldr	r1, [pc, #156]	; (8013b44 <ce303_tarif+0x12b0>)
 8013aa8:	5ccb      	ldrb	r3, [r1, r3]
 8013aaa:	3b30      	subs	r3, #48	; 0x30
 8013aac:	2164      	movs	r1, #100	; 0x64
 8013aae:	fb01 f303 	mul.w	r3, r1, r3
 8013ab2:	18d1      	adds	r1, r2, r3
 8013ab4:	8a3b      	ldrh	r3, [r7, #16]
 8013ab6:	3303      	adds	r3, #3
 8013ab8:	4a22      	ldr	r2, [pc, #136]	; (8013b44 <ce303_tarif+0x12b0>)
 8013aba:	5cd3      	ldrb	r3, [r2, r3]
 8013abc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013ac0:	4613      	mov	r3, r2
 8013ac2:	009b      	lsls	r3, r3, #2
 8013ac4:	4413      	add	r3, r2
 8013ac6:	005b      	lsls	r3, r3, #1
 8013ac8:	18ca      	adds	r2, r1, r3
 8013aca:	8a3b      	ldrh	r3, [r7, #16]
 8013acc:	3304      	adds	r3, #4
 8013ace:	491d      	ldr	r1, [pc, #116]	; (8013b44 <ce303_tarif+0x12b0>)
 8013ad0:	5ccb      	ldrb	r3, [r1, r3]
 8013ad2:	3b30      	subs	r3, #48	; 0x30
 8013ad4:	4413      	add	r3, r2
 8013ad6:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 8013ad8:	8a3b      	ldrh	r3, [r7, #16]
 8013ada:	3307      	adds	r3, #7
 8013adc:	4a19      	ldr	r2, [pc, #100]	; (8013b44 <ce303_tarif+0x12b0>)
 8013ade:	5cd3      	ldrb	r3, [r2, r3]
 8013ae0:	2b29      	cmp	r3, #41	; 0x29
 8013ae2:	d110      	bne.n	8013b06 <ce303_tarif+0x1272>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8013ae4:	8a3b      	ldrh	r3, [r7, #16]
 8013ae6:	3306      	adds	r3, #6
 8013ae8:	4a16      	ldr	r2, [pc, #88]	; (8013b44 <ce303_tarif+0x12b0>)
 8013aea:	5cd3      	ldrb	r3, [r2, r3]
 8013aec:	3b30      	subs	r3, #48	; 0x30
 8013aee:	b29b      	uxth	r3, r3
 8013af0:	461a      	mov	r2, r3
 8013af2:	0092      	lsls	r2, r2, #2
 8013af4:	4413      	add	r3, r2
 8013af6:	461a      	mov	r2, r3
 8013af8:	0091      	lsls	r1, r2, #2
 8013afa:	461a      	mov	r2, r3
 8013afc:	460b      	mov	r3, r1
 8013afe:	4413      	add	r3, r2
 8013b00:	009b      	lsls	r3, r3, #2
 8013b02:	82fb      	strh	r3, [r7, #22]
 8013b04:	e077      	b.n	8013bf6 <ce303_tarif+0x1362>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 8013b06:	8a3b      	ldrh	r3, [r7, #16]
 8013b08:	3308      	adds	r3, #8
 8013b0a:	4a0e      	ldr	r2, [pc, #56]	; (8013b44 <ce303_tarif+0x12b0>)
 8013b0c:	5cd3      	ldrb	r3, [r2, r3]
 8013b0e:	2b29      	cmp	r3, #41	; 0x29
 8013b10:	d11e      	bne.n	8013b50 <ce303_tarif+0x12bc>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8013b12:	8a3b      	ldrh	r3, [r7, #16]
 8013b14:	3306      	adds	r3, #6
 8013b16:	4a0b      	ldr	r2, [pc, #44]	; (8013b44 <ce303_tarif+0x12b0>)
 8013b18:	5cd3      	ldrb	r3, [r2, r3]
 8013b1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013b1e:	4613      	mov	r3, r2
 8013b20:	009b      	lsls	r3, r3, #2
 8013b22:	4413      	add	r3, r2
 8013b24:	005b      	lsls	r3, r3, #1
 8013b26:	4619      	mov	r1, r3
 8013b28:	8a3b      	ldrh	r3, [r7, #16]
 8013b2a:	3307      	adds	r3, #7
 8013b2c:	4a05      	ldr	r2, [pc, #20]	; (8013b44 <ce303_tarif+0x12b0>)
 8013b2e:	5cd3      	ldrb	r3, [r2, r3]
 8013b30:	3b30      	subs	r3, #48	; 0x30
 8013b32:	440b      	add	r3, r1
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	461a      	mov	r2, r3
 8013b38:	0092      	lsls	r2, r2, #2
 8013b3a:	4413      	add	r3, r2
 8013b3c:	005b      	lsls	r3, r3, #1
 8013b3e:	82fb      	strh	r3, [r7, #22]
 8013b40:	e059      	b.n	8013bf6 <ce303_tarif+0x1362>
 8013b42:	bf00      	nop
 8013b44:	200098e4 	.word	0x200098e4
 8013b48:	20009a6c 	.word	0x20009a6c
 8013b4c:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8013b50:	8a3b      	ldrh	r3, [r7, #16]
 8013b52:	3309      	adds	r3, #9
 8013b54:	4a95      	ldr	r2, [pc, #596]	; (8013dac <ce303_tarif+0x1518>)
 8013b56:	5cd3      	ldrb	r3, [r2, r3]
 8013b58:	2b29      	cmp	r3, #41	; 0x29
 8013b5a:	d126      	bne.n	8013baa <ce303_tarif+0x1316>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8013b5c:	8a3b      	ldrh	r3, [r7, #16]
 8013b5e:	3306      	adds	r3, #6
 8013b60:	4a92      	ldr	r2, [pc, #584]	; (8013dac <ce303_tarif+0x1518>)
 8013b62:	5cd3      	ldrb	r3, [r2, r3]
 8013b64:	3b30      	subs	r3, #48	; 0x30
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	461a      	mov	r2, r3
 8013b6a:	0092      	lsls	r2, r2, #2
 8013b6c:	4413      	add	r3, r2
 8013b6e:	461a      	mov	r2, r3
 8013b70:	0091      	lsls	r1, r2, #2
 8013b72:	461a      	mov	r2, r3
 8013b74:	460b      	mov	r3, r1
 8013b76:	4413      	add	r3, r2
 8013b78:	009b      	lsls	r3, r3, #2
 8013b7a:	b29a      	uxth	r2, r3
 8013b7c:	8a3b      	ldrh	r3, [r7, #16]
 8013b7e:	3307      	adds	r3, #7
 8013b80:	498a      	ldr	r1, [pc, #552]	; (8013dac <ce303_tarif+0x1518>)
 8013b82:	5ccb      	ldrb	r3, [r1, r3]
 8013b84:	3b30      	subs	r3, #48	; 0x30
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	4619      	mov	r1, r3
 8013b8a:	0089      	lsls	r1, r1, #2
 8013b8c:	440b      	add	r3, r1
 8013b8e:	005b      	lsls	r3, r3, #1
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	4413      	add	r3, r2
 8013b94:	b29a      	uxth	r2, r3
 8013b96:	8a3b      	ldrh	r3, [r7, #16]
 8013b98:	3308      	adds	r3, #8
 8013b9a:	4984      	ldr	r1, [pc, #528]	; (8013dac <ce303_tarif+0x1518>)
 8013b9c:	5ccb      	ldrb	r3, [r1, r3]
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	4413      	add	r3, r2
 8013ba2:	b29b      	uxth	r3, r3
 8013ba4:	3b30      	subs	r3, #48	; 0x30
 8013ba6:	82fb      	strh	r3, [r7, #22]
 8013ba8:	e025      	b.n	8013bf6 <ce303_tarif+0x1362>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8013baa:	8a3b      	ldrh	r3, [r7, #16]
 8013bac:	3306      	adds	r3, #6
 8013bae:	4a7f      	ldr	r2, [pc, #508]	; (8013dac <ce303_tarif+0x1518>)
 8013bb0:	5cd3      	ldrb	r3, [r2, r3]
 8013bb2:	3b30      	subs	r3, #48	; 0x30
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	461a      	mov	r2, r3
 8013bb8:	0092      	lsls	r2, r2, #2
 8013bba:	4413      	add	r3, r2
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	0091      	lsls	r1, r2, #2
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	460b      	mov	r3, r1
 8013bc4:	4413      	add	r3, r2
 8013bc6:	009b      	lsls	r3, r3, #2
 8013bc8:	b29a      	uxth	r2, r3
 8013bca:	8a3b      	ldrh	r3, [r7, #16]
 8013bcc:	3307      	adds	r3, #7
 8013bce:	4977      	ldr	r1, [pc, #476]	; (8013dac <ce303_tarif+0x1518>)
 8013bd0:	5ccb      	ldrb	r3, [r1, r3]
 8013bd2:	3b30      	subs	r3, #48	; 0x30
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	0089      	lsls	r1, r1, #2
 8013bda:	440b      	add	r3, r1
 8013bdc:	005b      	lsls	r3, r3, #1
 8013bde:	b29b      	uxth	r3, r3
 8013be0:	4413      	add	r3, r2
 8013be2:	b29a      	uxth	r2, r3
 8013be4:	8a3b      	ldrh	r3, [r7, #16]
 8013be6:	3308      	adds	r3, #8
 8013be8:	4970      	ldr	r1, [pc, #448]	; (8013dac <ce303_tarif+0x1518>)
 8013bea:	5ccb      	ldrb	r3, [r1, r3]
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	4413      	add	r3, r2
 8013bf0:	b29b      	uxth	r3, r3
 8013bf2:	3b30      	subs	r3, #48	; 0x30
 8013bf4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8013bf6:	4b6e      	ldr	r3, [pc, #440]	; (8013db0 <ce303_tarif+0x151c>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f7f3 f89a 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	0e1b      	lsrs	r3, r3, #24
 8013c08:	b2db      	uxtb	r3, r3
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	f242 0088 	movw	r0, #8328	; 0x2088
 8013c10:	f001 fe26 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	0c1b      	lsrs	r3, r3, #16
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	f242 0089 	movw	r0, #8329	; 0x2089
 8013c20:	f001 fe1e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	0a1b      	lsrs	r3, r3, #8
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	f242 008a 	movw	r0, #8330	; 0x208a
 8013c30:	f001 fe16 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	b2db      	uxtb	r3, r3
 8013c38:	4619      	mov	r1, r3
 8013c3a:	f242 008b 	movw	r0, #8331	; 0x208b
 8013c3e:	f001 fe0f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8013c42:	8afb      	ldrh	r3, [r7, #22]
 8013c44:	0a1b      	lsrs	r3, r3, #8
 8013c46:	b29b      	uxth	r3, r3
 8013c48:	b2db      	uxtb	r3, r3
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	f242 008c 	movw	r0, #8332	; 0x208c
 8013c50:	f001 fe06 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8013c54:	8afb      	ldrh	r3, [r7, #22]
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	4619      	mov	r1, r3
 8013c5a:	f242 008d 	movw	r0, #8333	; 0x208d
 8013c5e:	f001 fdff 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8013c62:	4b53      	ldr	r3, [pc, #332]	; (8013db0 <ce303_tarif+0x151c>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	4618      	mov	r0, r3
 8013c68:	f7f3 f8b4 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	0c1b      	lsrs	r3, r3, #16
 8013c70:	b29a      	uxth	r2, r3
 8013c72:	4b50      	ldr	r3, [pc, #320]	; (8013db4 <ce303_tarif+0x1520>)
 8013c74:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	4b4d      	ldr	r3, [pc, #308]	; (8013db4 <ce303_tarif+0x1520>)
 8013c7e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8013c82:	4a4c      	ldr	r2, [pc, #304]	; (8013db4 <ce303_tarif+0x1520>)
 8013c84:	8afb      	ldrh	r3, [r7, #22]
 8013c86:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8013c8e:	f001 b80c 	b.w	8014caa <ce303_tarif+0x2416>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8013c92:	8a3b      	ldrh	r3, [r7, #16]
 8013c94:	4a45      	ldr	r2, [pc, #276]	; (8013dac <ce303_tarif+0x1518>)
 8013c96:	5cd3      	ldrb	r3, [r2, r3]
 8013c98:	2b28      	cmp	r3, #40	; 0x28
 8013c9a:	f040 83f6 	bne.w	801448a <ce303_tarif+0x1bf6>
 8013c9e:	7d7b      	ldrb	r3, [r7, #21]
 8013ca0:	2b01      	cmp	r3, #1
 8013ca2:	f040 83f2 	bne.w	801448a <ce303_tarif+0x1bf6>
 8013ca6:	7d3b      	ldrb	r3, [r7, #20]
 8013ca8:	2b01      	cmp	r3, #1
 8013caa:	f040 83ee 	bne.w	801448a <ce303_tarif+0x1bf6>
 8013cae:	7cfb      	ldrb	r3, [r7, #19]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	f040 83ea 	bne.w	801448a <ce303_tarif+0x1bf6>
 8013cb6:	7cbb      	ldrb	r3, [r7, #18]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	f040 83e6 	bne.w	801448a <ce303_tarif+0x1bf6>
 8013cbe:	7bfb      	ldrb	r3, [r7, #15]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	f040 83e2 	bne.w	801448a <ce303_tarif+0x1bf6>
 8013cc6:	7bbb      	ldrb	r3, [r7, #14]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f040 83de 	bne.w	801448a <ce303_tarif+0x1bf6>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8013cce:	8a3b      	ldrh	r3, [r7, #16]
 8013cd0:	3302      	adds	r3, #2
 8013cd2:	4a36      	ldr	r2, [pc, #216]	; (8013dac <ce303_tarif+0x1518>)
 8013cd4:	5cd3      	ldrb	r3, [r2, r3]
 8013cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8013cd8:	f040 80e2 	bne.w	8013ea0 <ce303_tarif+0x160c>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8013cdc:	8a3b      	ldrh	r3, [r7, #16]
 8013cde:	3301      	adds	r3, #1
 8013ce0:	4a32      	ldr	r2, [pc, #200]	; (8013dac <ce303_tarif+0x1518>)
 8013ce2:	5cd3      	ldrb	r3, [r2, r3]
 8013ce4:	3b30      	subs	r3, #48	; 0x30
 8013ce6:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8013ce8:	8a3b      	ldrh	r3, [r7, #16]
 8013cea:	3304      	adds	r3, #4
 8013cec:	4a2f      	ldr	r2, [pc, #188]	; (8013dac <ce303_tarif+0x1518>)
 8013cee:	5cd3      	ldrb	r3, [r2, r3]
 8013cf0:	2b29      	cmp	r3, #41	; 0x29
 8013cf2:	d110      	bne.n	8013d16 <ce303_tarif+0x1482>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8013cf4:	8a3b      	ldrh	r3, [r7, #16]
 8013cf6:	3303      	adds	r3, #3
 8013cf8:	4a2c      	ldr	r2, [pc, #176]	; (8013dac <ce303_tarif+0x1518>)
 8013cfa:	5cd3      	ldrb	r3, [r2, r3]
 8013cfc:	3b30      	subs	r3, #48	; 0x30
 8013cfe:	b29b      	uxth	r3, r3
 8013d00:	461a      	mov	r2, r3
 8013d02:	0092      	lsls	r2, r2, #2
 8013d04:	4413      	add	r3, r2
 8013d06:	461a      	mov	r2, r3
 8013d08:	0091      	lsls	r1, r2, #2
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	4413      	add	r3, r2
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	82fb      	strh	r3, [r7, #22]
 8013d14:	e076      	b.n	8013e04 <ce303_tarif+0x1570>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8013d16:	8a3b      	ldrh	r3, [r7, #16]
 8013d18:	3305      	adds	r3, #5
 8013d1a:	4a24      	ldr	r2, [pc, #144]	; (8013dac <ce303_tarif+0x1518>)
 8013d1c:	5cd3      	ldrb	r3, [r2, r3]
 8013d1e:	2b29      	cmp	r3, #41	; 0x29
 8013d20:	d117      	bne.n	8013d52 <ce303_tarif+0x14be>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8013d22:	8a3b      	ldrh	r3, [r7, #16]
 8013d24:	3303      	adds	r3, #3
 8013d26:	4a21      	ldr	r2, [pc, #132]	; (8013dac <ce303_tarif+0x1518>)
 8013d28:	5cd3      	ldrb	r3, [r2, r3]
 8013d2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013d2e:	4613      	mov	r3, r2
 8013d30:	009b      	lsls	r3, r3, #2
 8013d32:	4413      	add	r3, r2
 8013d34:	005b      	lsls	r3, r3, #1
 8013d36:	4619      	mov	r1, r3
 8013d38:	8a3b      	ldrh	r3, [r7, #16]
 8013d3a:	3304      	adds	r3, #4
 8013d3c:	4a1b      	ldr	r2, [pc, #108]	; (8013dac <ce303_tarif+0x1518>)
 8013d3e:	5cd3      	ldrb	r3, [r2, r3]
 8013d40:	3b30      	subs	r3, #48	; 0x30
 8013d42:	440b      	add	r3, r1
 8013d44:	b29b      	uxth	r3, r3
 8013d46:	461a      	mov	r2, r3
 8013d48:	0092      	lsls	r2, r2, #2
 8013d4a:	4413      	add	r3, r2
 8013d4c:	005b      	lsls	r3, r3, #1
 8013d4e:	82fb      	strh	r3, [r7, #22]
 8013d50:	e058      	b.n	8013e04 <ce303_tarif+0x1570>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8013d52:	8a3b      	ldrh	r3, [r7, #16]
 8013d54:	3306      	adds	r3, #6
 8013d56:	4a15      	ldr	r2, [pc, #84]	; (8013dac <ce303_tarif+0x1518>)
 8013d58:	5cd3      	ldrb	r3, [r2, r3]
 8013d5a:	2b29      	cmp	r3, #41	; 0x29
 8013d5c:	d12c      	bne.n	8013db8 <ce303_tarif+0x1524>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8013d5e:	8a3b      	ldrh	r3, [r7, #16]
 8013d60:	3303      	adds	r3, #3
 8013d62:	4a12      	ldr	r2, [pc, #72]	; (8013dac <ce303_tarif+0x1518>)
 8013d64:	5cd3      	ldrb	r3, [r2, r3]
 8013d66:	3b30      	subs	r3, #48	; 0x30
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	0092      	lsls	r2, r2, #2
 8013d6e:	4413      	add	r3, r2
 8013d70:	461a      	mov	r2, r3
 8013d72:	0091      	lsls	r1, r2, #2
 8013d74:	461a      	mov	r2, r3
 8013d76:	460b      	mov	r3, r1
 8013d78:	4413      	add	r3, r2
 8013d7a:	009b      	lsls	r3, r3, #2
 8013d7c:	b29a      	uxth	r2, r3
 8013d7e:	8a3b      	ldrh	r3, [r7, #16]
 8013d80:	3304      	adds	r3, #4
 8013d82:	490a      	ldr	r1, [pc, #40]	; (8013dac <ce303_tarif+0x1518>)
 8013d84:	5ccb      	ldrb	r3, [r1, r3]
 8013d86:	3b30      	subs	r3, #48	; 0x30
 8013d88:	b29b      	uxth	r3, r3
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	0089      	lsls	r1, r1, #2
 8013d8e:	440b      	add	r3, r1
 8013d90:	005b      	lsls	r3, r3, #1
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	4413      	add	r3, r2
 8013d96:	b29a      	uxth	r2, r3
 8013d98:	8a3b      	ldrh	r3, [r7, #16]
 8013d9a:	3305      	adds	r3, #5
 8013d9c:	4903      	ldr	r1, [pc, #12]	; (8013dac <ce303_tarif+0x1518>)
 8013d9e:	5ccb      	ldrb	r3, [r1, r3]
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	4413      	add	r3, r2
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	3b30      	subs	r3, #48	; 0x30
 8013da8:	82fb      	strh	r3, [r7, #22]
 8013daa:	e02b      	b.n	8013e04 <ce303_tarif+0x1570>
 8013dac:	200098e4 	.word	0x200098e4
 8013db0:	20009a6c 	.word	0x20009a6c
 8013db4:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8013db8:	8a3b      	ldrh	r3, [r7, #16]
 8013dba:	3303      	adds	r3, #3
 8013dbc:	4ab0      	ldr	r2, [pc, #704]	; (8014080 <ce303_tarif+0x17ec>)
 8013dbe:	5cd3      	ldrb	r3, [r2, r3]
 8013dc0:	3b30      	subs	r3, #48	; 0x30
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	461a      	mov	r2, r3
 8013dc6:	0092      	lsls	r2, r2, #2
 8013dc8:	4413      	add	r3, r2
 8013dca:	461a      	mov	r2, r3
 8013dcc:	0091      	lsls	r1, r2, #2
 8013dce:	461a      	mov	r2, r3
 8013dd0:	460b      	mov	r3, r1
 8013dd2:	4413      	add	r3, r2
 8013dd4:	009b      	lsls	r3, r3, #2
 8013dd6:	b29a      	uxth	r2, r3
 8013dd8:	8a3b      	ldrh	r3, [r7, #16]
 8013dda:	3304      	adds	r3, #4
 8013ddc:	49a8      	ldr	r1, [pc, #672]	; (8014080 <ce303_tarif+0x17ec>)
 8013dde:	5ccb      	ldrb	r3, [r1, r3]
 8013de0:	3b30      	subs	r3, #48	; 0x30
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	4619      	mov	r1, r3
 8013de6:	0089      	lsls	r1, r1, #2
 8013de8:	440b      	add	r3, r1
 8013dea:	005b      	lsls	r3, r3, #1
 8013dec:	b29b      	uxth	r3, r3
 8013dee:	4413      	add	r3, r2
 8013df0:	b29a      	uxth	r2, r3
 8013df2:	8a3b      	ldrh	r3, [r7, #16]
 8013df4:	3305      	adds	r3, #5
 8013df6:	49a2      	ldr	r1, [pc, #648]	; (8014080 <ce303_tarif+0x17ec>)
 8013df8:	5ccb      	ldrb	r3, [r1, r3]
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	4413      	add	r3, r2
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	3b30      	subs	r3, #48	; 0x30
 8013e02:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8013e04:	4b9f      	ldr	r3, [pc, #636]	; (8014084 <ce303_tarif+0x17f0>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f04f 31ff 	mov.w	r1, #4294967295
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7f2 ff93 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8013e12:	68bb      	ldr	r3, [r7, #8]
 8013e14:	0e1b      	lsrs	r3, r3, #24
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	4619      	mov	r1, r3
 8013e1a:	f242 008e 	movw	r0, #8334	; 0x208e
 8013e1e:	f001 fd1f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8013e22:	68bb      	ldr	r3, [r7, #8]
 8013e24:	0c1b      	lsrs	r3, r3, #16
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	4619      	mov	r1, r3
 8013e2a:	f242 008f 	movw	r0, #8335	; 0x208f
 8013e2e:	f001 fd17 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	0a1b      	lsrs	r3, r3, #8
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	4619      	mov	r1, r3
 8013e3a:	f242 0090 	movw	r0, #8336	; 0x2090
 8013e3e:	f001 fd0f 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	4619      	mov	r1, r3
 8013e48:	f242 0091 	movw	r0, #8337	; 0x2091
 8013e4c:	f001 fd08 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8013e50:	8afb      	ldrh	r3, [r7, #22]
 8013e52:	0a1b      	lsrs	r3, r3, #8
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	b2db      	uxtb	r3, r3
 8013e58:	4619      	mov	r1, r3
 8013e5a:	f242 0092 	movw	r0, #8338	; 0x2092
 8013e5e:	f001 fcff 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8013e62:	8afb      	ldrh	r3, [r7, #22]
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	4619      	mov	r1, r3
 8013e68:	f242 0093 	movw	r0, #8339	; 0x2093
 8013e6c:	f001 fcf8 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8013e70:	4b84      	ldr	r3, [pc, #528]	; (8014084 <ce303_tarif+0x17f0>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7f2 ffad 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	0c1b      	lsrs	r3, r3, #16
 8013e7e:	b29a      	uxth	r2, r3
 8013e80:	4b81      	ldr	r3, [pc, #516]	; (8014088 <ce303_tarif+0x17f4>)
 8013e82:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	4b7f      	ldr	r3, [pc, #508]	; (8014088 <ce303_tarif+0x17f4>)
 8013e8c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 8013e90:	4a7d      	ldr	r2, [pc, #500]	; (8014088 <ce303_tarif+0x17f4>)
 8013e92:	8afb      	ldrh	r3, [r7, #22]
 8013e94:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8013e98:	2301      	movs	r3, #1
 8013e9a:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8013e9c:	f000 bf07 	b.w	8014cae <ce303_tarif+0x241a>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8013ea0:	8a3b      	ldrh	r3, [r7, #16]
 8013ea2:	3303      	adds	r3, #3
 8013ea4:	4a76      	ldr	r2, [pc, #472]	; (8014080 <ce303_tarif+0x17ec>)
 8013ea6:	5cd3      	ldrb	r3, [r2, r3]
 8013ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8013eaa:	f040 80ef 	bne.w	801408c <ce303_tarif+0x17f8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8013eae:	8a3b      	ldrh	r3, [r7, #16]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	4a73      	ldr	r2, [pc, #460]	; (8014080 <ce303_tarif+0x17ec>)
 8013eb4:	5cd3      	ldrb	r3, [r2, r3]
 8013eb6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013eba:	4613      	mov	r3, r2
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	4413      	add	r3, r2
 8013ec0:	005b      	lsls	r3, r3, #1
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	8a3b      	ldrh	r3, [r7, #16]
 8013ec6:	3302      	adds	r3, #2
 8013ec8:	4a6d      	ldr	r2, [pc, #436]	; (8014080 <ce303_tarif+0x17ec>)
 8013eca:	5cd3      	ldrb	r3, [r2, r3]
 8013ecc:	3b30      	subs	r3, #48	; 0x30
 8013ece:	440b      	add	r3, r1
 8013ed0:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8013ed2:	8a3b      	ldrh	r3, [r7, #16]
 8013ed4:	3305      	adds	r3, #5
 8013ed6:	4a6a      	ldr	r2, [pc, #424]	; (8014080 <ce303_tarif+0x17ec>)
 8013ed8:	5cd3      	ldrb	r3, [r2, r3]
 8013eda:	2b29      	cmp	r3, #41	; 0x29
 8013edc:	d110      	bne.n	8013f00 <ce303_tarif+0x166c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8013ede:	8a3b      	ldrh	r3, [r7, #16]
 8013ee0:	3304      	adds	r3, #4
 8013ee2:	4a67      	ldr	r2, [pc, #412]	; (8014080 <ce303_tarif+0x17ec>)
 8013ee4:	5cd3      	ldrb	r3, [r2, r3]
 8013ee6:	3b30      	subs	r3, #48	; 0x30
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	461a      	mov	r2, r3
 8013eec:	0092      	lsls	r2, r2, #2
 8013eee:	4413      	add	r3, r2
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	0091      	lsls	r1, r2, #2
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	460b      	mov	r3, r1
 8013ef8:	4413      	add	r3, r2
 8013efa:	009b      	lsls	r3, r3, #2
 8013efc:	82fb      	strh	r3, [r7, #22]
 8013efe:	e070      	b.n	8013fe2 <ce303_tarif+0x174e>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8013f00:	8a3b      	ldrh	r3, [r7, #16]
 8013f02:	3306      	adds	r3, #6
 8013f04:	4a5e      	ldr	r2, [pc, #376]	; (8014080 <ce303_tarif+0x17ec>)
 8013f06:	5cd3      	ldrb	r3, [r2, r3]
 8013f08:	2b29      	cmp	r3, #41	; 0x29
 8013f0a:	d117      	bne.n	8013f3c <ce303_tarif+0x16a8>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8013f0c:	8a3b      	ldrh	r3, [r7, #16]
 8013f0e:	3304      	adds	r3, #4
 8013f10:	4a5b      	ldr	r2, [pc, #364]	; (8014080 <ce303_tarif+0x17ec>)
 8013f12:	5cd3      	ldrb	r3, [r2, r3]
 8013f14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013f18:	4613      	mov	r3, r2
 8013f1a:	009b      	lsls	r3, r3, #2
 8013f1c:	4413      	add	r3, r2
 8013f1e:	005b      	lsls	r3, r3, #1
 8013f20:	4619      	mov	r1, r3
 8013f22:	8a3b      	ldrh	r3, [r7, #16]
 8013f24:	3305      	adds	r3, #5
 8013f26:	4a56      	ldr	r2, [pc, #344]	; (8014080 <ce303_tarif+0x17ec>)
 8013f28:	5cd3      	ldrb	r3, [r2, r3]
 8013f2a:	3b30      	subs	r3, #48	; 0x30
 8013f2c:	440b      	add	r3, r1
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	461a      	mov	r2, r3
 8013f32:	0092      	lsls	r2, r2, #2
 8013f34:	4413      	add	r3, r2
 8013f36:	005b      	lsls	r3, r3, #1
 8013f38:	82fb      	strh	r3, [r7, #22]
 8013f3a:	e052      	b.n	8013fe2 <ce303_tarif+0x174e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8013f3c:	8a3b      	ldrh	r3, [r7, #16]
 8013f3e:	3307      	adds	r3, #7
 8013f40:	4a4f      	ldr	r2, [pc, #316]	; (8014080 <ce303_tarif+0x17ec>)
 8013f42:	5cd3      	ldrb	r3, [r2, r3]
 8013f44:	2b29      	cmp	r3, #41	; 0x29
 8013f46:	d126      	bne.n	8013f96 <ce303_tarif+0x1702>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8013f48:	8a3b      	ldrh	r3, [r7, #16]
 8013f4a:	3304      	adds	r3, #4
 8013f4c:	4a4c      	ldr	r2, [pc, #304]	; (8014080 <ce303_tarif+0x17ec>)
 8013f4e:	5cd3      	ldrb	r3, [r2, r3]
 8013f50:	3b30      	subs	r3, #48	; 0x30
 8013f52:	b29b      	uxth	r3, r3
 8013f54:	461a      	mov	r2, r3
 8013f56:	0092      	lsls	r2, r2, #2
 8013f58:	4413      	add	r3, r2
 8013f5a:	461a      	mov	r2, r3
 8013f5c:	0091      	lsls	r1, r2, #2
 8013f5e:	461a      	mov	r2, r3
 8013f60:	460b      	mov	r3, r1
 8013f62:	4413      	add	r3, r2
 8013f64:	009b      	lsls	r3, r3, #2
 8013f66:	b29a      	uxth	r2, r3
 8013f68:	8a3b      	ldrh	r3, [r7, #16]
 8013f6a:	3305      	adds	r3, #5
 8013f6c:	4944      	ldr	r1, [pc, #272]	; (8014080 <ce303_tarif+0x17ec>)
 8013f6e:	5ccb      	ldrb	r3, [r1, r3]
 8013f70:	3b30      	subs	r3, #48	; 0x30
 8013f72:	b29b      	uxth	r3, r3
 8013f74:	4619      	mov	r1, r3
 8013f76:	0089      	lsls	r1, r1, #2
 8013f78:	440b      	add	r3, r1
 8013f7a:	005b      	lsls	r3, r3, #1
 8013f7c:	b29b      	uxth	r3, r3
 8013f7e:	4413      	add	r3, r2
 8013f80:	b29a      	uxth	r2, r3
 8013f82:	8a3b      	ldrh	r3, [r7, #16]
 8013f84:	3306      	adds	r3, #6
 8013f86:	493e      	ldr	r1, [pc, #248]	; (8014080 <ce303_tarif+0x17ec>)
 8013f88:	5ccb      	ldrb	r3, [r1, r3]
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	4413      	add	r3, r2
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	3b30      	subs	r3, #48	; 0x30
 8013f92:	82fb      	strh	r3, [r7, #22]
 8013f94:	e025      	b.n	8013fe2 <ce303_tarif+0x174e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8013f96:	8a3b      	ldrh	r3, [r7, #16]
 8013f98:	3304      	adds	r3, #4
 8013f9a:	4a39      	ldr	r2, [pc, #228]	; (8014080 <ce303_tarif+0x17ec>)
 8013f9c:	5cd3      	ldrb	r3, [r2, r3]
 8013f9e:	3b30      	subs	r3, #48	; 0x30
 8013fa0:	b29b      	uxth	r3, r3
 8013fa2:	461a      	mov	r2, r3
 8013fa4:	0092      	lsls	r2, r2, #2
 8013fa6:	4413      	add	r3, r2
 8013fa8:	461a      	mov	r2, r3
 8013faa:	0091      	lsls	r1, r2, #2
 8013fac:	461a      	mov	r2, r3
 8013fae:	460b      	mov	r3, r1
 8013fb0:	4413      	add	r3, r2
 8013fb2:	009b      	lsls	r3, r3, #2
 8013fb4:	b29a      	uxth	r2, r3
 8013fb6:	8a3b      	ldrh	r3, [r7, #16]
 8013fb8:	3305      	adds	r3, #5
 8013fba:	4931      	ldr	r1, [pc, #196]	; (8014080 <ce303_tarif+0x17ec>)
 8013fbc:	5ccb      	ldrb	r3, [r1, r3]
 8013fbe:	3b30      	subs	r3, #48	; 0x30
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	0089      	lsls	r1, r1, #2
 8013fc6:	440b      	add	r3, r1
 8013fc8:	005b      	lsls	r3, r3, #1
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	4413      	add	r3, r2
 8013fce:	b29a      	uxth	r2, r3
 8013fd0:	8a3b      	ldrh	r3, [r7, #16]
 8013fd2:	3306      	adds	r3, #6
 8013fd4:	492a      	ldr	r1, [pc, #168]	; (8014080 <ce303_tarif+0x17ec>)
 8013fd6:	5ccb      	ldrb	r3, [r1, r3]
 8013fd8:	b29b      	uxth	r3, r3
 8013fda:	4413      	add	r3, r2
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	3b30      	subs	r3, #48	; 0x30
 8013fe0:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8013fe2:	4b28      	ldr	r3, [pc, #160]	; (8014084 <ce303_tarif+0x17f0>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7f2 fea4 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	0e1b      	lsrs	r3, r3, #24
 8013ff4:	b2db      	uxtb	r3, r3
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	f242 008e 	movw	r0, #8334	; 0x208e
 8013ffc:	f001 fc30 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	0c1b      	lsrs	r3, r3, #16
 8014004:	b2db      	uxtb	r3, r3
 8014006:	4619      	mov	r1, r3
 8014008:	f242 008f 	movw	r0, #8335	; 0x208f
 801400c:	f001 fc28 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	0a1b      	lsrs	r3, r3, #8
 8014014:	b2db      	uxtb	r3, r3
 8014016:	4619      	mov	r1, r3
 8014018:	f242 0090 	movw	r0, #8336	; 0x2090
 801401c:	f001 fc20 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	b2db      	uxtb	r3, r3
 8014024:	4619      	mov	r1, r3
 8014026:	f242 0091 	movw	r0, #8337	; 0x2091
 801402a:	f001 fc19 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 801402e:	8afb      	ldrh	r3, [r7, #22]
 8014030:	0a1b      	lsrs	r3, r3, #8
 8014032:	b29b      	uxth	r3, r3
 8014034:	b2db      	uxtb	r3, r3
 8014036:	4619      	mov	r1, r3
 8014038:	f242 0092 	movw	r0, #8338	; 0x2092
 801403c:	f001 fc10 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8014040:	8afb      	ldrh	r3, [r7, #22]
 8014042:	b2db      	uxtb	r3, r3
 8014044:	4619      	mov	r1, r3
 8014046:	f242 0093 	movw	r0, #8339	; 0x2093
 801404a:	f001 fc09 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801404e:	4b0d      	ldr	r3, [pc, #52]	; (8014084 <ce303_tarif+0x17f0>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	4618      	mov	r0, r3
 8014054:	f7f2 febe 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	0c1b      	lsrs	r3, r3, #16
 801405c:	b29a      	uxth	r2, r3
 801405e:	4b0a      	ldr	r3, [pc, #40]	; (8014088 <ce303_tarif+0x17f4>)
 8014060:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	b29a      	uxth	r2, r3
 8014068:	4b07      	ldr	r3, [pc, #28]	; (8014088 <ce303_tarif+0x17f4>)
 801406a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 801406e:	4a06      	ldr	r2, [pc, #24]	; (8014088 <ce303_tarif+0x17f4>)
 8014070:	8afb      	ldrh	r3, [r7, #22]
 8014072:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8014076:	2301      	movs	r3, #1
 8014078:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 801407a:	f000 be18 	b.w	8014cae <ce303_tarif+0x241a>
 801407e:	bf00      	nop
 8014080:	200098e4 	.word	0x200098e4
 8014084:	20009a6c 	.word	0x20009a6c
 8014088:	2000a10c 	.word	0x2000a10c

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 801408c:	8a3b      	ldrh	r3, [r7, #16]
 801408e:	3304      	adds	r3, #4
 8014090:	4aaa      	ldr	r2, [pc, #680]	; (801433c <ce303_tarif+0x1aa8>)
 8014092:	5cd3      	ldrb	r3, [r2, r3]
 8014094:	2b2e      	cmp	r3, #46	; 0x2e
 8014096:	f040 80f0 	bne.w	801427a <ce303_tarif+0x19e6>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 801409a:	8a3b      	ldrh	r3, [r7, #16]
 801409c:	3301      	adds	r3, #1
 801409e:	4aa7      	ldr	r2, [pc, #668]	; (801433c <ce303_tarif+0x1aa8>)
 80140a0:	5cd3      	ldrb	r3, [r2, r3]
 80140a2:	3b30      	subs	r3, #48	; 0x30
 80140a4:	2264      	movs	r2, #100	; 0x64
 80140a6:	fb02 f103 	mul.w	r1, r2, r3
 80140aa:	8a3b      	ldrh	r3, [r7, #16]
 80140ac:	3302      	adds	r3, #2
 80140ae:	4aa3      	ldr	r2, [pc, #652]	; (801433c <ce303_tarif+0x1aa8>)
 80140b0:	5cd3      	ldrb	r3, [r2, r3]
 80140b2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80140b6:	4613      	mov	r3, r2
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	4413      	add	r3, r2
 80140bc:	005b      	lsls	r3, r3, #1
 80140be:	18ca      	adds	r2, r1, r3
 80140c0:	8a3b      	ldrh	r3, [r7, #16]
 80140c2:	3303      	adds	r3, #3
 80140c4:	499d      	ldr	r1, [pc, #628]	; (801433c <ce303_tarif+0x1aa8>)
 80140c6:	5ccb      	ldrb	r3, [r1, r3]
 80140c8:	3b30      	subs	r3, #48	; 0x30
 80140ca:	4413      	add	r3, r2
 80140cc:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80140ce:	8a3b      	ldrh	r3, [r7, #16]
 80140d0:	3306      	adds	r3, #6
 80140d2:	4a9a      	ldr	r2, [pc, #616]	; (801433c <ce303_tarif+0x1aa8>)
 80140d4:	5cd3      	ldrb	r3, [r2, r3]
 80140d6:	2b29      	cmp	r3, #41	; 0x29
 80140d8:	d110      	bne.n	80140fc <ce303_tarif+0x1868>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80140da:	8a3b      	ldrh	r3, [r7, #16]
 80140dc:	3305      	adds	r3, #5
 80140de:	4a97      	ldr	r2, [pc, #604]	; (801433c <ce303_tarif+0x1aa8>)
 80140e0:	5cd3      	ldrb	r3, [r2, r3]
 80140e2:	3b30      	subs	r3, #48	; 0x30
 80140e4:	b29b      	uxth	r3, r3
 80140e6:	461a      	mov	r2, r3
 80140e8:	0092      	lsls	r2, r2, #2
 80140ea:	4413      	add	r3, r2
 80140ec:	461a      	mov	r2, r3
 80140ee:	0091      	lsls	r1, r2, #2
 80140f0:	461a      	mov	r2, r3
 80140f2:	460b      	mov	r3, r1
 80140f4:	4413      	add	r3, r2
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	82fb      	strh	r3, [r7, #22]
 80140fa:	e070      	b.n	80141de <ce303_tarif+0x194a>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 80140fc:	8a3b      	ldrh	r3, [r7, #16]
 80140fe:	3307      	adds	r3, #7
 8014100:	4a8e      	ldr	r2, [pc, #568]	; (801433c <ce303_tarif+0x1aa8>)
 8014102:	5cd3      	ldrb	r3, [r2, r3]
 8014104:	2b29      	cmp	r3, #41	; 0x29
 8014106:	d117      	bne.n	8014138 <ce303_tarif+0x18a4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8014108:	8a3b      	ldrh	r3, [r7, #16]
 801410a:	3305      	adds	r3, #5
 801410c:	4a8b      	ldr	r2, [pc, #556]	; (801433c <ce303_tarif+0x1aa8>)
 801410e:	5cd3      	ldrb	r3, [r2, r3]
 8014110:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014114:	4613      	mov	r3, r2
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	4413      	add	r3, r2
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	4619      	mov	r1, r3
 801411e:	8a3b      	ldrh	r3, [r7, #16]
 8014120:	3306      	adds	r3, #6
 8014122:	4a86      	ldr	r2, [pc, #536]	; (801433c <ce303_tarif+0x1aa8>)
 8014124:	5cd3      	ldrb	r3, [r2, r3]
 8014126:	3b30      	subs	r3, #48	; 0x30
 8014128:	440b      	add	r3, r1
 801412a:	b29b      	uxth	r3, r3
 801412c:	461a      	mov	r2, r3
 801412e:	0092      	lsls	r2, r2, #2
 8014130:	4413      	add	r3, r2
 8014132:	005b      	lsls	r3, r3, #1
 8014134:	82fb      	strh	r3, [r7, #22]
 8014136:	e052      	b.n	80141de <ce303_tarif+0x194a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8014138:	8a3b      	ldrh	r3, [r7, #16]
 801413a:	3308      	adds	r3, #8
 801413c:	4a7f      	ldr	r2, [pc, #508]	; (801433c <ce303_tarif+0x1aa8>)
 801413e:	5cd3      	ldrb	r3, [r2, r3]
 8014140:	2b29      	cmp	r3, #41	; 0x29
 8014142:	d126      	bne.n	8014192 <ce303_tarif+0x18fe>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8014144:	8a3b      	ldrh	r3, [r7, #16]
 8014146:	3305      	adds	r3, #5
 8014148:	4a7c      	ldr	r2, [pc, #496]	; (801433c <ce303_tarif+0x1aa8>)
 801414a:	5cd3      	ldrb	r3, [r2, r3]
 801414c:	3b30      	subs	r3, #48	; 0x30
 801414e:	b29b      	uxth	r3, r3
 8014150:	461a      	mov	r2, r3
 8014152:	0092      	lsls	r2, r2, #2
 8014154:	4413      	add	r3, r2
 8014156:	461a      	mov	r2, r3
 8014158:	0091      	lsls	r1, r2, #2
 801415a:	461a      	mov	r2, r3
 801415c:	460b      	mov	r3, r1
 801415e:	4413      	add	r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	b29a      	uxth	r2, r3
 8014164:	8a3b      	ldrh	r3, [r7, #16]
 8014166:	3306      	adds	r3, #6
 8014168:	4974      	ldr	r1, [pc, #464]	; (801433c <ce303_tarif+0x1aa8>)
 801416a:	5ccb      	ldrb	r3, [r1, r3]
 801416c:	3b30      	subs	r3, #48	; 0x30
 801416e:	b29b      	uxth	r3, r3
 8014170:	4619      	mov	r1, r3
 8014172:	0089      	lsls	r1, r1, #2
 8014174:	440b      	add	r3, r1
 8014176:	005b      	lsls	r3, r3, #1
 8014178:	b29b      	uxth	r3, r3
 801417a:	4413      	add	r3, r2
 801417c:	b29a      	uxth	r2, r3
 801417e:	8a3b      	ldrh	r3, [r7, #16]
 8014180:	3307      	adds	r3, #7
 8014182:	496e      	ldr	r1, [pc, #440]	; (801433c <ce303_tarif+0x1aa8>)
 8014184:	5ccb      	ldrb	r3, [r1, r3]
 8014186:	b29b      	uxth	r3, r3
 8014188:	4413      	add	r3, r2
 801418a:	b29b      	uxth	r3, r3
 801418c:	3b30      	subs	r3, #48	; 0x30
 801418e:	82fb      	strh	r3, [r7, #22]
 8014190:	e025      	b.n	80141de <ce303_tarif+0x194a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8014192:	8a3b      	ldrh	r3, [r7, #16]
 8014194:	3305      	adds	r3, #5
 8014196:	4a69      	ldr	r2, [pc, #420]	; (801433c <ce303_tarif+0x1aa8>)
 8014198:	5cd3      	ldrb	r3, [r2, r3]
 801419a:	3b30      	subs	r3, #48	; 0x30
 801419c:	b29b      	uxth	r3, r3
 801419e:	461a      	mov	r2, r3
 80141a0:	0092      	lsls	r2, r2, #2
 80141a2:	4413      	add	r3, r2
 80141a4:	461a      	mov	r2, r3
 80141a6:	0091      	lsls	r1, r2, #2
 80141a8:	461a      	mov	r2, r3
 80141aa:	460b      	mov	r3, r1
 80141ac:	4413      	add	r3, r2
 80141ae:	009b      	lsls	r3, r3, #2
 80141b0:	b29a      	uxth	r2, r3
 80141b2:	8a3b      	ldrh	r3, [r7, #16]
 80141b4:	3306      	adds	r3, #6
 80141b6:	4961      	ldr	r1, [pc, #388]	; (801433c <ce303_tarif+0x1aa8>)
 80141b8:	5ccb      	ldrb	r3, [r1, r3]
 80141ba:	3b30      	subs	r3, #48	; 0x30
 80141bc:	b29b      	uxth	r3, r3
 80141be:	4619      	mov	r1, r3
 80141c0:	0089      	lsls	r1, r1, #2
 80141c2:	440b      	add	r3, r1
 80141c4:	005b      	lsls	r3, r3, #1
 80141c6:	b29b      	uxth	r3, r3
 80141c8:	4413      	add	r3, r2
 80141ca:	b29a      	uxth	r2, r3
 80141cc:	8a3b      	ldrh	r3, [r7, #16]
 80141ce:	3307      	adds	r3, #7
 80141d0:	495a      	ldr	r1, [pc, #360]	; (801433c <ce303_tarif+0x1aa8>)
 80141d2:	5ccb      	ldrb	r3, [r1, r3]
 80141d4:	b29b      	uxth	r3, r3
 80141d6:	4413      	add	r3, r2
 80141d8:	b29b      	uxth	r3, r3
 80141da:	3b30      	subs	r3, #48	; 0x30
 80141dc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80141de:	4b58      	ldr	r3, [pc, #352]	; (8014340 <ce303_tarif+0x1aac>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	f04f 31ff 	mov.w	r1, #4294967295
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7f2 fda6 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	0e1b      	lsrs	r3, r3, #24
 80141f0:	b2db      	uxtb	r3, r3
 80141f2:	4619      	mov	r1, r3
 80141f4:	f242 008e 	movw	r0, #8334	; 0x208e
 80141f8:	f001 fb32 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	0c1b      	lsrs	r3, r3, #16
 8014200:	b2db      	uxtb	r3, r3
 8014202:	4619      	mov	r1, r3
 8014204:	f242 008f 	movw	r0, #8335	; 0x208f
 8014208:	f001 fb2a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	0a1b      	lsrs	r3, r3, #8
 8014210:	b2db      	uxtb	r3, r3
 8014212:	4619      	mov	r1, r3
 8014214:	f242 0090 	movw	r0, #8336	; 0x2090
 8014218:	f001 fb22 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	b2db      	uxtb	r3, r3
 8014220:	4619      	mov	r1, r3
 8014222:	f242 0091 	movw	r0, #8337	; 0x2091
 8014226:	f001 fb1b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 801422a:	8afb      	ldrh	r3, [r7, #22]
 801422c:	0a1b      	lsrs	r3, r3, #8
 801422e:	b29b      	uxth	r3, r3
 8014230:	b2db      	uxtb	r3, r3
 8014232:	4619      	mov	r1, r3
 8014234:	f242 0092 	movw	r0, #8338	; 0x2092
 8014238:	f001 fb12 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 801423c:	8afb      	ldrh	r3, [r7, #22]
 801423e:	b2db      	uxtb	r3, r3
 8014240:	4619      	mov	r1, r3
 8014242:	f242 0093 	movw	r0, #8339	; 0x2093
 8014246:	f001 fb0b 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801424a:	4b3d      	ldr	r3, [pc, #244]	; (8014340 <ce303_tarif+0x1aac>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	4618      	mov	r0, r3
 8014250:	f7f2 fdc0 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	0c1b      	lsrs	r3, r3, #16
 8014258:	b29a      	uxth	r2, r3
 801425a:	4b3a      	ldr	r3, [pc, #232]	; (8014344 <ce303_tarif+0x1ab0>)
 801425c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8014260:	68bb      	ldr	r3, [r7, #8]
 8014262:	b29a      	uxth	r2, r3
 8014264:	4b37      	ldr	r3, [pc, #220]	; (8014344 <ce303_tarif+0x1ab0>)
 8014266:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 801426a:	4a36      	ldr	r2, [pc, #216]	; (8014344 <ce303_tarif+0x1ab0>)
 801426c:	8afb      	ldrh	r3, [r7, #22]
 801426e:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8014272:	2301      	movs	r3, #1
 8014274:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8014276:	f000 bd1a 	b.w	8014cae <ce303_tarif+0x241a>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 801427a:	8a3b      	ldrh	r3, [r7, #16]
 801427c:	3305      	adds	r3, #5
 801427e:	4a2f      	ldr	r2, [pc, #188]	; (801433c <ce303_tarif+0x1aa8>)
 8014280:	5cd3      	ldrb	r3, [r2, r3]
 8014282:	2b2e      	cmp	r3, #46	; 0x2e
 8014284:	f040 8513 	bne.w	8014cae <ce303_tarif+0x241a>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8014288:	8a3b      	ldrh	r3, [r7, #16]
 801428a:	3301      	adds	r3, #1
 801428c:	4a2b      	ldr	r2, [pc, #172]	; (801433c <ce303_tarif+0x1aa8>)
 801428e:	5cd3      	ldrb	r3, [r2, r3]
 8014290:	3b30      	subs	r3, #48	; 0x30
 8014292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014296:	fb02 f203 	mul.w	r2, r2, r3
 801429a:	8a3b      	ldrh	r3, [r7, #16]
 801429c:	3302      	adds	r3, #2
 801429e:	4927      	ldr	r1, [pc, #156]	; (801433c <ce303_tarif+0x1aa8>)
 80142a0:	5ccb      	ldrb	r3, [r1, r3]
 80142a2:	3b30      	subs	r3, #48	; 0x30
 80142a4:	2164      	movs	r1, #100	; 0x64
 80142a6:	fb01 f303 	mul.w	r3, r1, r3
 80142aa:	18d1      	adds	r1, r2, r3
 80142ac:	8a3b      	ldrh	r3, [r7, #16]
 80142ae:	3303      	adds	r3, #3
 80142b0:	4a22      	ldr	r2, [pc, #136]	; (801433c <ce303_tarif+0x1aa8>)
 80142b2:	5cd3      	ldrb	r3, [r2, r3]
 80142b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80142b8:	4613      	mov	r3, r2
 80142ba:	009b      	lsls	r3, r3, #2
 80142bc:	4413      	add	r3, r2
 80142be:	005b      	lsls	r3, r3, #1
 80142c0:	18ca      	adds	r2, r1, r3
 80142c2:	8a3b      	ldrh	r3, [r7, #16]
 80142c4:	3304      	adds	r3, #4
 80142c6:	491d      	ldr	r1, [pc, #116]	; (801433c <ce303_tarif+0x1aa8>)
 80142c8:	5ccb      	ldrb	r3, [r1, r3]
 80142ca:	3b30      	subs	r3, #48	; 0x30
 80142cc:	4413      	add	r3, r2
 80142ce:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 80142d0:	8a3b      	ldrh	r3, [r7, #16]
 80142d2:	3307      	adds	r3, #7
 80142d4:	4a19      	ldr	r2, [pc, #100]	; (801433c <ce303_tarif+0x1aa8>)
 80142d6:	5cd3      	ldrb	r3, [r2, r3]
 80142d8:	2b29      	cmp	r3, #41	; 0x29
 80142da:	d110      	bne.n	80142fe <ce303_tarif+0x1a6a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 80142dc:	8a3b      	ldrh	r3, [r7, #16]
 80142de:	3306      	adds	r3, #6
 80142e0:	4a16      	ldr	r2, [pc, #88]	; (801433c <ce303_tarif+0x1aa8>)
 80142e2:	5cd3      	ldrb	r3, [r2, r3]
 80142e4:	3b30      	subs	r3, #48	; 0x30
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	461a      	mov	r2, r3
 80142ea:	0092      	lsls	r2, r2, #2
 80142ec:	4413      	add	r3, r2
 80142ee:	461a      	mov	r2, r3
 80142f0:	0091      	lsls	r1, r2, #2
 80142f2:	461a      	mov	r2, r3
 80142f4:	460b      	mov	r3, r1
 80142f6:	4413      	add	r3, r2
 80142f8:	009b      	lsls	r3, r3, #2
 80142fa:	82fb      	strh	r3, [r7, #22]
 80142fc:	e077      	b.n	80143ee <ce303_tarif+0x1b5a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 80142fe:	8a3b      	ldrh	r3, [r7, #16]
 8014300:	3308      	adds	r3, #8
 8014302:	4a0e      	ldr	r2, [pc, #56]	; (801433c <ce303_tarif+0x1aa8>)
 8014304:	5cd3      	ldrb	r3, [r2, r3]
 8014306:	2b29      	cmp	r3, #41	; 0x29
 8014308:	d11e      	bne.n	8014348 <ce303_tarif+0x1ab4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 801430a:	8a3b      	ldrh	r3, [r7, #16]
 801430c:	3306      	adds	r3, #6
 801430e:	4a0b      	ldr	r2, [pc, #44]	; (801433c <ce303_tarif+0x1aa8>)
 8014310:	5cd3      	ldrb	r3, [r2, r3]
 8014312:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014316:	4613      	mov	r3, r2
 8014318:	009b      	lsls	r3, r3, #2
 801431a:	4413      	add	r3, r2
 801431c:	005b      	lsls	r3, r3, #1
 801431e:	4619      	mov	r1, r3
 8014320:	8a3b      	ldrh	r3, [r7, #16]
 8014322:	3307      	adds	r3, #7
 8014324:	4a05      	ldr	r2, [pc, #20]	; (801433c <ce303_tarif+0x1aa8>)
 8014326:	5cd3      	ldrb	r3, [r2, r3]
 8014328:	3b30      	subs	r3, #48	; 0x30
 801432a:	440b      	add	r3, r1
 801432c:	b29b      	uxth	r3, r3
 801432e:	461a      	mov	r2, r3
 8014330:	0092      	lsls	r2, r2, #2
 8014332:	4413      	add	r3, r2
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	82fb      	strh	r3, [r7, #22]
 8014338:	e059      	b.n	80143ee <ce303_tarif+0x1b5a>
 801433a:	bf00      	nop
 801433c:	200098e4 	.word	0x200098e4
 8014340:	20009a6c 	.word	0x20009a6c
 8014344:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8014348:	8a3b      	ldrh	r3, [r7, #16]
 801434a:	3309      	adds	r3, #9
 801434c:	4a95      	ldr	r2, [pc, #596]	; (80145a4 <ce303_tarif+0x1d10>)
 801434e:	5cd3      	ldrb	r3, [r2, r3]
 8014350:	2b29      	cmp	r3, #41	; 0x29
 8014352:	d126      	bne.n	80143a2 <ce303_tarif+0x1b0e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8014354:	8a3b      	ldrh	r3, [r7, #16]
 8014356:	3306      	adds	r3, #6
 8014358:	4a92      	ldr	r2, [pc, #584]	; (80145a4 <ce303_tarif+0x1d10>)
 801435a:	5cd3      	ldrb	r3, [r2, r3]
 801435c:	3b30      	subs	r3, #48	; 0x30
 801435e:	b29b      	uxth	r3, r3
 8014360:	461a      	mov	r2, r3
 8014362:	0092      	lsls	r2, r2, #2
 8014364:	4413      	add	r3, r2
 8014366:	461a      	mov	r2, r3
 8014368:	0091      	lsls	r1, r2, #2
 801436a:	461a      	mov	r2, r3
 801436c:	460b      	mov	r3, r1
 801436e:	4413      	add	r3, r2
 8014370:	009b      	lsls	r3, r3, #2
 8014372:	b29a      	uxth	r2, r3
 8014374:	8a3b      	ldrh	r3, [r7, #16]
 8014376:	3307      	adds	r3, #7
 8014378:	498a      	ldr	r1, [pc, #552]	; (80145a4 <ce303_tarif+0x1d10>)
 801437a:	5ccb      	ldrb	r3, [r1, r3]
 801437c:	3b30      	subs	r3, #48	; 0x30
 801437e:	b29b      	uxth	r3, r3
 8014380:	4619      	mov	r1, r3
 8014382:	0089      	lsls	r1, r1, #2
 8014384:	440b      	add	r3, r1
 8014386:	005b      	lsls	r3, r3, #1
 8014388:	b29b      	uxth	r3, r3
 801438a:	4413      	add	r3, r2
 801438c:	b29a      	uxth	r2, r3
 801438e:	8a3b      	ldrh	r3, [r7, #16]
 8014390:	3308      	adds	r3, #8
 8014392:	4984      	ldr	r1, [pc, #528]	; (80145a4 <ce303_tarif+0x1d10>)
 8014394:	5ccb      	ldrb	r3, [r1, r3]
 8014396:	b29b      	uxth	r3, r3
 8014398:	4413      	add	r3, r2
 801439a:	b29b      	uxth	r3, r3
 801439c:	3b30      	subs	r3, #48	; 0x30
 801439e:	82fb      	strh	r3, [r7, #22]
 80143a0:	e025      	b.n	80143ee <ce303_tarif+0x1b5a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 80143a2:	8a3b      	ldrh	r3, [r7, #16]
 80143a4:	3306      	adds	r3, #6
 80143a6:	4a7f      	ldr	r2, [pc, #508]	; (80145a4 <ce303_tarif+0x1d10>)
 80143a8:	5cd3      	ldrb	r3, [r2, r3]
 80143aa:	3b30      	subs	r3, #48	; 0x30
 80143ac:	b29b      	uxth	r3, r3
 80143ae:	461a      	mov	r2, r3
 80143b0:	0092      	lsls	r2, r2, #2
 80143b2:	4413      	add	r3, r2
 80143b4:	461a      	mov	r2, r3
 80143b6:	0091      	lsls	r1, r2, #2
 80143b8:	461a      	mov	r2, r3
 80143ba:	460b      	mov	r3, r1
 80143bc:	4413      	add	r3, r2
 80143be:	009b      	lsls	r3, r3, #2
 80143c0:	b29a      	uxth	r2, r3
 80143c2:	8a3b      	ldrh	r3, [r7, #16]
 80143c4:	3307      	adds	r3, #7
 80143c6:	4977      	ldr	r1, [pc, #476]	; (80145a4 <ce303_tarif+0x1d10>)
 80143c8:	5ccb      	ldrb	r3, [r1, r3]
 80143ca:	3b30      	subs	r3, #48	; 0x30
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	4619      	mov	r1, r3
 80143d0:	0089      	lsls	r1, r1, #2
 80143d2:	440b      	add	r3, r1
 80143d4:	005b      	lsls	r3, r3, #1
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	4413      	add	r3, r2
 80143da:	b29a      	uxth	r2, r3
 80143dc:	8a3b      	ldrh	r3, [r7, #16]
 80143de:	3308      	adds	r3, #8
 80143e0:	4970      	ldr	r1, [pc, #448]	; (80145a4 <ce303_tarif+0x1d10>)
 80143e2:	5ccb      	ldrb	r3, [r1, r3]
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	4413      	add	r3, r2
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	3b30      	subs	r3, #48	; 0x30
 80143ec:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80143ee:	4b6e      	ldr	r3, [pc, #440]	; (80145a8 <ce303_tarif+0x1d14>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	f04f 31ff 	mov.w	r1, #4294967295
 80143f6:	4618      	mov	r0, r3
 80143f8:	f7f2 fc9e 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	0e1b      	lsrs	r3, r3, #24
 8014400:	b2db      	uxtb	r3, r3
 8014402:	4619      	mov	r1, r3
 8014404:	f242 008e 	movw	r0, #8334	; 0x208e
 8014408:	f001 fa2a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	0c1b      	lsrs	r3, r3, #16
 8014410:	b2db      	uxtb	r3, r3
 8014412:	4619      	mov	r1, r3
 8014414:	f242 008f 	movw	r0, #8335	; 0x208f
 8014418:	f001 fa22 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	0a1b      	lsrs	r3, r3, #8
 8014420:	b2db      	uxtb	r3, r3
 8014422:	4619      	mov	r1, r3
 8014424:	f242 0090 	movw	r0, #8336	; 0x2090
 8014428:	f001 fa1a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	b2db      	uxtb	r3, r3
 8014430:	4619      	mov	r1, r3
 8014432:	f242 0091 	movw	r0, #8337	; 0x2091
 8014436:	f001 fa13 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 801443a:	8afb      	ldrh	r3, [r7, #22]
 801443c:	0a1b      	lsrs	r3, r3, #8
 801443e:	b29b      	uxth	r3, r3
 8014440:	b2db      	uxtb	r3, r3
 8014442:	4619      	mov	r1, r3
 8014444:	f242 0092 	movw	r0, #8338	; 0x2092
 8014448:	f001 fa0a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 801444c:	8afb      	ldrh	r3, [r7, #22]
 801444e:	b2db      	uxtb	r3, r3
 8014450:	4619      	mov	r1, r3
 8014452:	f242 0093 	movw	r0, #8339	; 0x2093
 8014456:	f001 fa03 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801445a:	4b53      	ldr	r3, [pc, #332]	; (80145a8 <ce303_tarif+0x1d14>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	4618      	mov	r0, r3
 8014460:	f7f2 fcb8 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	0c1b      	lsrs	r3, r3, #16
 8014468:	b29a      	uxth	r2, r3
 801446a:	4b50      	ldr	r3, [pc, #320]	; (80145ac <ce303_tarif+0x1d18>)
 801446c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	b29a      	uxth	r2, r3
 8014474:	4b4d      	ldr	r3, [pc, #308]	; (80145ac <ce303_tarif+0x1d18>)
 8014476:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 801447a:	4a4c      	ldr	r2, [pc, #304]	; (80145ac <ce303_tarif+0x1d18>)
 801447c:	8afb      	ldrh	r3, [r7, #22]
 801447e:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8014482:	2301      	movs	r3, #1
 8014484:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8014486:	f000 bc12 	b.w	8014cae <ce303_tarif+0x241a>

			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==1) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 801448a:	8a3b      	ldrh	r3, [r7, #16]
 801448c:	4a45      	ldr	r2, [pc, #276]	; (80145a4 <ce303_tarif+0x1d10>)
 801448e:	5cd3      	ldrb	r3, [r2, r3]
 8014490:	2b28      	cmp	r3, #40	; 0x28
 8014492:	f040 840d 	bne.w	8014cb0 <ce303_tarif+0x241c>
 8014496:	7d7b      	ldrb	r3, [r7, #21]
 8014498:	2b01      	cmp	r3, #1
 801449a:	f040 8409 	bne.w	8014cb0 <ce303_tarif+0x241c>
 801449e:	7d3b      	ldrb	r3, [r7, #20]
 80144a0:	2b01      	cmp	r3, #1
 80144a2:	f040 8405 	bne.w	8014cb0 <ce303_tarif+0x241c>
 80144a6:	7cfb      	ldrb	r3, [r7, #19]
 80144a8:	2b01      	cmp	r3, #1
 80144aa:	f040 8401 	bne.w	8014cb0 <ce303_tarif+0x241c>
 80144ae:	7cbb      	ldrb	r3, [r7, #18]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	f040 83fd 	bne.w	8014cb0 <ce303_tarif+0x241c>
 80144b6:	7bfb      	ldrb	r3, [r7, #15]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	f040 83f9 	bne.w	8014cb0 <ce303_tarif+0x241c>
 80144be:	7bbb      	ldrb	r3, [r7, #14]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	f040 83d9 	bne.w	8014c78 <ce303_tarif+0x23e4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80144c6:	8a3b      	ldrh	r3, [r7, #16]
 80144c8:	3302      	adds	r3, #2
 80144ca:	4a36      	ldr	r2, [pc, #216]	; (80145a4 <ce303_tarif+0x1d10>)
 80144cc:	5cd3      	ldrb	r3, [r2, r3]
 80144ce:	2b2e      	cmp	r3, #46	; 0x2e
 80144d0:	f040 80e1 	bne.w	8014696 <ce303_tarif+0x1e02>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 80144d4:	8a3b      	ldrh	r3, [r7, #16]
 80144d6:	3301      	adds	r3, #1
 80144d8:	4a32      	ldr	r2, [pc, #200]	; (80145a4 <ce303_tarif+0x1d10>)
 80144da:	5cd3      	ldrb	r3, [r2, r3]
 80144dc:	3b30      	subs	r3, #48	; 0x30
 80144de:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 80144e0:	8a3b      	ldrh	r3, [r7, #16]
 80144e2:	3304      	adds	r3, #4
 80144e4:	4a2f      	ldr	r2, [pc, #188]	; (80145a4 <ce303_tarif+0x1d10>)
 80144e6:	5cd3      	ldrb	r3, [r2, r3]
 80144e8:	2b29      	cmp	r3, #41	; 0x29
 80144ea:	d110      	bne.n	801450e <ce303_tarif+0x1c7a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 80144ec:	8a3b      	ldrh	r3, [r7, #16]
 80144ee:	3303      	adds	r3, #3
 80144f0:	4a2c      	ldr	r2, [pc, #176]	; (80145a4 <ce303_tarif+0x1d10>)
 80144f2:	5cd3      	ldrb	r3, [r2, r3]
 80144f4:	3b30      	subs	r3, #48	; 0x30
 80144f6:	b29b      	uxth	r3, r3
 80144f8:	461a      	mov	r2, r3
 80144fa:	0092      	lsls	r2, r2, #2
 80144fc:	4413      	add	r3, r2
 80144fe:	461a      	mov	r2, r3
 8014500:	0091      	lsls	r1, r2, #2
 8014502:	461a      	mov	r2, r3
 8014504:	460b      	mov	r3, r1
 8014506:	4413      	add	r3, r2
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	82fb      	strh	r3, [r7, #22]
 801450c:	e076      	b.n	80145fc <ce303_tarif+0x1d68>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801450e:	8a3b      	ldrh	r3, [r7, #16]
 8014510:	3305      	adds	r3, #5
 8014512:	4a24      	ldr	r2, [pc, #144]	; (80145a4 <ce303_tarif+0x1d10>)
 8014514:	5cd3      	ldrb	r3, [r2, r3]
 8014516:	2b29      	cmp	r3, #41	; 0x29
 8014518:	d117      	bne.n	801454a <ce303_tarif+0x1cb6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801451a:	8a3b      	ldrh	r3, [r7, #16]
 801451c:	3303      	adds	r3, #3
 801451e:	4a21      	ldr	r2, [pc, #132]	; (80145a4 <ce303_tarif+0x1d10>)
 8014520:	5cd3      	ldrb	r3, [r2, r3]
 8014522:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014526:	4613      	mov	r3, r2
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	4413      	add	r3, r2
 801452c:	005b      	lsls	r3, r3, #1
 801452e:	4619      	mov	r1, r3
 8014530:	8a3b      	ldrh	r3, [r7, #16]
 8014532:	3304      	adds	r3, #4
 8014534:	4a1b      	ldr	r2, [pc, #108]	; (80145a4 <ce303_tarif+0x1d10>)
 8014536:	5cd3      	ldrb	r3, [r2, r3]
 8014538:	3b30      	subs	r3, #48	; 0x30
 801453a:	440b      	add	r3, r1
 801453c:	b29b      	uxth	r3, r3
 801453e:	461a      	mov	r2, r3
 8014540:	0092      	lsls	r2, r2, #2
 8014542:	4413      	add	r3, r2
 8014544:	005b      	lsls	r3, r3, #1
 8014546:	82fb      	strh	r3, [r7, #22]
 8014548:	e058      	b.n	80145fc <ce303_tarif+0x1d68>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 801454a:	8a3b      	ldrh	r3, [r7, #16]
 801454c:	3306      	adds	r3, #6
 801454e:	4a15      	ldr	r2, [pc, #84]	; (80145a4 <ce303_tarif+0x1d10>)
 8014550:	5cd3      	ldrb	r3, [r2, r3]
 8014552:	2b29      	cmp	r3, #41	; 0x29
 8014554:	d12c      	bne.n	80145b0 <ce303_tarif+0x1d1c>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8014556:	8a3b      	ldrh	r3, [r7, #16]
 8014558:	3303      	adds	r3, #3
 801455a:	4a12      	ldr	r2, [pc, #72]	; (80145a4 <ce303_tarif+0x1d10>)
 801455c:	5cd3      	ldrb	r3, [r2, r3]
 801455e:	3b30      	subs	r3, #48	; 0x30
 8014560:	b29b      	uxth	r3, r3
 8014562:	461a      	mov	r2, r3
 8014564:	0092      	lsls	r2, r2, #2
 8014566:	4413      	add	r3, r2
 8014568:	461a      	mov	r2, r3
 801456a:	0091      	lsls	r1, r2, #2
 801456c:	461a      	mov	r2, r3
 801456e:	460b      	mov	r3, r1
 8014570:	4413      	add	r3, r2
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	b29a      	uxth	r2, r3
 8014576:	8a3b      	ldrh	r3, [r7, #16]
 8014578:	3304      	adds	r3, #4
 801457a:	490a      	ldr	r1, [pc, #40]	; (80145a4 <ce303_tarif+0x1d10>)
 801457c:	5ccb      	ldrb	r3, [r1, r3]
 801457e:	3b30      	subs	r3, #48	; 0x30
 8014580:	b29b      	uxth	r3, r3
 8014582:	4619      	mov	r1, r3
 8014584:	0089      	lsls	r1, r1, #2
 8014586:	440b      	add	r3, r1
 8014588:	005b      	lsls	r3, r3, #1
 801458a:	b29b      	uxth	r3, r3
 801458c:	4413      	add	r3, r2
 801458e:	b29a      	uxth	r2, r3
 8014590:	8a3b      	ldrh	r3, [r7, #16]
 8014592:	3305      	adds	r3, #5
 8014594:	4903      	ldr	r1, [pc, #12]	; (80145a4 <ce303_tarif+0x1d10>)
 8014596:	5ccb      	ldrb	r3, [r1, r3]
 8014598:	b29b      	uxth	r3, r3
 801459a:	4413      	add	r3, r2
 801459c:	b29b      	uxth	r3, r3
 801459e:	3b30      	subs	r3, #48	; 0x30
 80145a0:	82fb      	strh	r3, [r7, #22]
 80145a2:	e02b      	b.n	80145fc <ce303_tarif+0x1d68>
 80145a4:	200098e4 	.word	0x200098e4
 80145a8:	20009a6c 	.word	0x20009a6c
 80145ac:	2000a10c 	.word	0x2000a10c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80145b0:	8a3b      	ldrh	r3, [r7, #16]
 80145b2:	3303      	adds	r3, #3
 80145b4:	4aaf      	ldr	r2, [pc, #700]	; (8014874 <ce303_tarif+0x1fe0>)
 80145b6:	5cd3      	ldrb	r3, [r2, r3]
 80145b8:	3b30      	subs	r3, #48	; 0x30
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	461a      	mov	r2, r3
 80145be:	0092      	lsls	r2, r2, #2
 80145c0:	4413      	add	r3, r2
 80145c2:	461a      	mov	r2, r3
 80145c4:	0091      	lsls	r1, r2, #2
 80145c6:	461a      	mov	r2, r3
 80145c8:	460b      	mov	r3, r1
 80145ca:	4413      	add	r3, r2
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	b29a      	uxth	r2, r3
 80145d0:	8a3b      	ldrh	r3, [r7, #16]
 80145d2:	3304      	adds	r3, #4
 80145d4:	49a7      	ldr	r1, [pc, #668]	; (8014874 <ce303_tarif+0x1fe0>)
 80145d6:	5ccb      	ldrb	r3, [r1, r3]
 80145d8:	3b30      	subs	r3, #48	; 0x30
 80145da:	b29b      	uxth	r3, r3
 80145dc:	4619      	mov	r1, r3
 80145de:	0089      	lsls	r1, r1, #2
 80145e0:	440b      	add	r3, r1
 80145e2:	005b      	lsls	r3, r3, #1
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	4413      	add	r3, r2
 80145e8:	b29a      	uxth	r2, r3
 80145ea:	8a3b      	ldrh	r3, [r7, #16]
 80145ec:	3305      	adds	r3, #5
 80145ee:	49a1      	ldr	r1, [pc, #644]	; (8014874 <ce303_tarif+0x1fe0>)
 80145f0:	5ccb      	ldrb	r3, [r1, r3]
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	4413      	add	r3, r2
 80145f6:	b29b      	uxth	r3, r3
 80145f8:	3b30      	subs	r3, #48	; 0x30
 80145fa:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80145fc:	4b9e      	ldr	r3, [pc, #632]	; (8014878 <ce303_tarif+0x1fe4>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	f04f 31ff 	mov.w	r1, #4294967295
 8014604:	4618      	mov	r0, r3
 8014606:	f7f2 fb97 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	0e1b      	lsrs	r3, r3, #24
 801460e:	b2db      	uxtb	r3, r3
 8014610:	4619      	mov	r1, r3
 8014612:	f242 0094 	movw	r0, #8340	; 0x2094
 8014616:	f001 f923 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	0c1b      	lsrs	r3, r3, #16
 801461e:	b2db      	uxtb	r3, r3
 8014620:	4619      	mov	r1, r3
 8014622:	f242 0095 	movw	r0, #8341	; 0x2095
 8014626:	f001 f91b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	0a1b      	lsrs	r3, r3, #8
 801462e:	b2db      	uxtb	r3, r3
 8014630:	4619      	mov	r1, r3
 8014632:	f242 0096 	movw	r0, #8342	; 0x2096
 8014636:	f001 f913 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	b2db      	uxtb	r3, r3
 801463e:	4619      	mov	r1, r3
 8014640:	f242 0097 	movw	r0, #8343	; 0x2097
 8014644:	f001 f90c 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8014648:	8afb      	ldrh	r3, [r7, #22]
 801464a:	0a1b      	lsrs	r3, r3, #8
 801464c:	b29b      	uxth	r3, r3
 801464e:	b2db      	uxtb	r3, r3
 8014650:	4619      	mov	r1, r3
 8014652:	f242 0098 	movw	r0, #8344	; 0x2098
 8014656:	f001 f903 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 801465a:	8afb      	ldrh	r3, [r7, #22]
 801465c:	b2db      	uxtb	r3, r3
 801465e:	4619      	mov	r1, r3
 8014660:	f242 0099 	movw	r0, #8345	; 0x2099
 8014664:	f001 f8fc 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8014668:	4b83      	ldr	r3, [pc, #524]	; (8014878 <ce303_tarif+0x1fe4>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	4618      	mov	r0, r3
 801466e:	f7f2 fbb1 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	0c1b      	lsrs	r3, r3, #16
 8014676:	b29a      	uxth	r2, r3
 8014678:	4b80      	ldr	r3, [pc, #512]	; (801487c <ce303_tarif+0x1fe8>)
 801467a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	b29a      	uxth	r2, r3
 8014682:	4b7e      	ldr	r3, [pc, #504]	; (801487c <ce303_tarif+0x1fe8>)
 8014684:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8014688:	4a7c      	ldr	r2, [pc, #496]	; (801487c <ce303_tarif+0x1fe8>)
 801468a:	8afb      	ldrh	r3, [r7, #22]
 801468c:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8014690:	2301      	movs	r3, #1
 8014692:	74bb      	strb	r3, [r7, #18]
 8014694:	e30c      	b.n	8014cb0 <ce303_tarif+0x241c>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8014696:	8a3b      	ldrh	r3, [r7, #16]
 8014698:	3303      	adds	r3, #3
 801469a:	4a76      	ldr	r2, [pc, #472]	; (8014874 <ce303_tarif+0x1fe0>)
 801469c:	5cd3      	ldrb	r3, [r2, r3]
 801469e:	2b2e      	cmp	r3, #46	; 0x2e
 80146a0:	f040 80ee 	bne.w	8014880 <ce303_tarif+0x1fec>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80146a4:	8a3b      	ldrh	r3, [r7, #16]
 80146a6:	3301      	adds	r3, #1
 80146a8:	4a72      	ldr	r2, [pc, #456]	; (8014874 <ce303_tarif+0x1fe0>)
 80146aa:	5cd3      	ldrb	r3, [r2, r3]
 80146ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80146b0:	4613      	mov	r3, r2
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	4413      	add	r3, r2
 80146b6:	005b      	lsls	r3, r3, #1
 80146b8:	4619      	mov	r1, r3
 80146ba:	8a3b      	ldrh	r3, [r7, #16]
 80146bc:	3302      	adds	r3, #2
 80146be:	4a6d      	ldr	r2, [pc, #436]	; (8014874 <ce303_tarif+0x1fe0>)
 80146c0:	5cd3      	ldrb	r3, [r2, r3]
 80146c2:	3b30      	subs	r3, #48	; 0x30
 80146c4:	440b      	add	r3, r1
 80146c6:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80146c8:	8a3b      	ldrh	r3, [r7, #16]
 80146ca:	3305      	adds	r3, #5
 80146cc:	4a69      	ldr	r2, [pc, #420]	; (8014874 <ce303_tarif+0x1fe0>)
 80146ce:	5cd3      	ldrb	r3, [r2, r3]
 80146d0:	2b29      	cmp	r3, #41	; 0x29
 80146d2:	d110      	bne.n	80146f6 <ce303_tarif+0x1e62>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80146d4:	8a3b      	ldrh	r3, [r7, #16]
 80146d6:	3304      	adds	r3, #4
 80146d8:	4a66      	ldr	r2, [pc, #408]	; (8014874 <ce303_tarif+0x1fe0>)
 80146da:	5cd3      	ldrb	r3, [r2, r3]
 80146dc:	3b30      	subs	r3, #48	; 0x30
 80146de:	b29b      	uxth	r3, r3
 80146e0:	461a      	mov	r2, r3
 80146e2:	0092      	lsls	r2, r2, #2
 80146e4:	4413      	add	r3, r2
 80146e6:	461a      	mov	r2, r3
 80146e8:	0091      	lsls	r1, r2, #2
 80146ea:	461a      	mov	r2, r3
 80146ec:	460b      	mov	r3, r1
 80146ee:	4413      	add	r3, r2
 80146f0:	009b      	lsls	r3, r3, #2
 80146f2:	82fb      	strh	r3, [r7, #22]
 80146f4:	e070      	b.n	80147d8 <ce303_tarif+0x1f44>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 80146f6:	8a3b      	ldrh	r3, [r7, #16]
 80146f8:	3306      	adds	r3, #6
 80146fa:	4a5e      	ldr	r2, [pc, #376]	; (8014874 <ce303_tarif+0x1fe0>)
 80146fc:	5cd3      	ldrb	r3, [r2, r3]
 80146fe:	2b29      	cmp	r3, #41	; 0x29
 8014700:	d117      	bne.n	8014732 <ce303_tarif+0x1e9e>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8014702:	8a3b      	ldrh	r3, [r7, #16]
 8014704:	3304      	adds	r3, #4
 8014706:	4a5b      	ldr	r2, [pc, #364]	; (8014874 <ce303_tarif+0x1fe0>)
 8014708:	5cd3      	ldrb	r3, [r2, r3]
 801470a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801470e:	4613      	mov	r3, r2
 8014710:	009b      	lsls	r3, r3, #2
 8014712:	4413      	add	r3, r2
 8014714:	005b      	lsls	r3, r3, #1
 8014716:	4619      	mov	r1, r3
 8014718:	8a3b      	ldrh	r3, [r7, #16]
 801471a:	3305      	adds	r3, #5
 801471c:	4a55      	ldr	r2, [pc, #340]	; (8014874 <ce303_tarif+0x1fe0>)
 801471e:	5cd3      	ldrb	r3, [r2, r3]
 8014720:	3b30      	subs	r3, #48	; 0x30
 8014722:	440b      	add	r3, r1
 8014724:	b29b      	uxth	r3, r3
 8014726:	461a      	mov	r2, r3
 8014728:	0092      	lsls	r2, r2, #2
 801472a:	4413      	add	r3, r2
 801472c:	005b      	lsls	r3, r3, #1
 801472e:	82fb      	strh	r3, [r7, #22]
 8014730:	e052      	b.n	80147d8 <ce303_tarif+0x1f44>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8014732:	8a3b      	ldrh	r3, [r7, #16]
 8014734:	3307      	adds	r3, #7
 8014736:	4a4f      	ldr	r2, [pc, #316]	; (8014874 <ce303_tarif+0x1fe0>)
 8014738:	5cd3      	ldrb	r3, [r2, r3]
 801473a:	2b29      	cmp	r3, #41	; 0x29
 801473c:	d126      	bne.n	801478c <ce303_tarif+0x1ef8>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801473e:	8a3b      	ldrh	r3, [r7, #16]
 8014740:	3304      	adds	r3, #4
 8014742:	4a4c      	ldr	r2, [pc, #304]	; (8014874 <ce303_tarif+0x1fe0>)
 8014744:	5cd3      	ldrb	r3, [r2, r3]
 8014746:	3b30      	subs	r3, #48	; 0x30
 8014748:	b29b      	uxth	r3, r3
 801474a:	461a      	mov	r2, r3
 801474c:	0092      	lsls	r2, r2, #2
 801474e:	4413      	add	r3, r2
 8014750:	461a      	mov	r2, r3
 8014752:	0091      	lsls	r1, r2, #2
 8014754:	461a      	mov	r2, r3
 8014756:	460b      	mov	r3, r1
 8014758:	4413      	add	r3, r2
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	b29a      	uxth	r2, r3
 801475e:	8a3b      	ldrh	r3, [r7, #16]
 8014760:	3305      	adds	r3, #5
 8014762:	4944      	ldr	r1, [pc, #272]	; (8014874 <ce303_tarif+0x1fe0>)
 8014764:	5ccb      	ldrb	r3, [r1, r3]
 8014766:	3b30      	subs	r3, #48	; 0x30
 8014768:	b29b      	uxth	r3, r3
 801476a:	4619      	mov	r1, r3
 801476c:	0089      	lsls	r1, r1, #2
 801476e:	440b      	add	r3, r1
 8014770:	005b      	lsls	r3, r3, #1
 8014772:	b29b      	uxth	r3, r3
 8014774:	4413      	add	r3, r2
 8014776:	b29a      	uxth	r2, r3
 8014778:	8a3b      	ldrh	r3, [r7, #16]
 801477a:	3306      	adds	r3, #6
 801477c:	493d      	ldr	r1, [pc, #244]	; (8014874 <ce303_tarif+0x1fe0>)
 801477e:	5ccb      	ldrb	r3, [r1, r3]
 8014780:	b29b      	uxth	r3, r3
 8014782:	4413      	add	r3, r2
 8014784:	b29b      	uxth	r3, r3
 8014786:	3b30      	subs	r3, #48	; 0x30
 8014788:	82fb      	strh	r3, [r7, #22]
 801478a:	e025      	b.n	80147d8 <ce303_tarif+0x1f44>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801478c:	8a3b      	ldrh	r3, [r7, #16]
 801478e:	3304      	adds	r3, #4
 8014790:	4a38      	ldr	r2, [pc, #224]	; (8014874 <ce303_tarif+0x1fe0>)
 8014792:	5cd3      	ldrb	r3, [r2, r3]
 8014794:	3b30      	subs	r3, #48	; 0x30
 8014796:	b29b      	uxth	r3, r3
 8014798:	461a      	mov	r2, r3
 801479a:	0092      	lsls	r2, r2, #2
 801479c:	4413      	add	r3, r2
 801479e:	461a      	mov	r2, r3
 80147a0:	0091      	lsls	r1, r2, #2
 80147a2:	461a      	mov	r2, r3
 80147a4:	460b      	mov	r3, r1
 80147a6:	4413      	add	r3, r2
 80147a8:	009b      	lsls	r3, r3, #2
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	8a3b      	ldrh	r3, [r7, #16]
 80147ae:	3305      	adds	r3, #5
 80147b0:	4930      	ldr	r1, [pc, #192]	; (8014874 <ce303_tarif+0x1fe0>)
 80147b2:	5ccb      	ldrb	r3, [r1, r3]
 80147b4:	3b30      	subs	r3, #48	; 0x30
 80147b6:	b29b      	uxth	r3, r3
 80147b8:	4619      	mov	r1, r3
 80147ba:	0089      	lsls	r1, r1, #2
 80147bc:	440b      	add	r3, r1
 80147be:	005b      	lsls	r3, r3, #1
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	4413      	add	r3, r2
 80147c4:	b29a      	uxth	r2, r3
 80147c6:	8a3b      	ldrh	r3, [r7, #16]
 80147c8:	3306      	adds	r3, #6
 80147ca:	492a      	ldr	r1, [pc, #168]	; (8014874 <ce303_tarif+0x1fe0>)
 80147cc:	5ccb      	ldrb	r3, [r1, r3]
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	4413      	add	r3, r2
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	3b30      	subs	r3, #48	; 0x30
 80147d6:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80147d8:	4b27      	ldr	r3, [pc, #156]	; (8014878 <ce303_tarif+0x1fe4>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	f04f 31ff 	mov.w	r1, #4294967295
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7f2 faa9 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	0e1b      	lsrs	r3, r3, #24
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	4619      	mov	r1, r3
 80147ee:	f242 0094 	movw	r0, #8340	; 0x2094
 80147f2:	f001 f835 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	0c1b      	lsrs	r3, r3, #16
 80147fa:	b2db      	uxtb	r3, r3
 80147fc:	4619      	mov	r1, r3
 80147fe:	f242 0095 	movw	r0, #8341	; 0x2095
 8014802:	f001 f82d 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	0a1b      	lsrs	r3, r3, #8
 801480a:	b2db      	uxtb	r3, r3
 801480c:	4619      	mov	r1, r3
 801480e:	f242 0096 	movw	r0, #8342	; 0x2096
 8014812:	f001 f825 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	b2db      	uxtb	r3, r3
 801481a:	4619      	mov	r1, r3
 801481c:	f242 0097 	movw	r0, #8343	; 0x2097
 8014820:	f001 f81e 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8014824:	8afb      	ldrh	r3, [r7, #22]
 8014826:	0a1b      	lsrs	r3, r3, #8
 8014828:	b29b      	uxth	r3, r3
 801482a:	b2db      	uxtb	r3, r3
 801482c:	4619      	mov	r1, r3
 801482e:	f242 0098 	movw	r0, #8344	; 0x2098
 8014832:	f001 f815 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8014836:	8afb      	ldrh	r3, [r7, #22]
 8014838:	b2db      	uxtb	r3, r3
 801483a:	4619      	mov	r1, r3
 801483c:	f242 0099 	movw	r0, #8345	; 0x2099
 8014840:	f001 f80e 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8014844:	4b0c      	ldr	r3, [pc, #48]	; (8014878 <ce303_tarif+0x1fe4>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	4618      	mov	r0, r3
 801484a:	f7f2 fac3 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	0c1b      	lsrs	r3, r3, #16
 8014852:	b29a      	uxth	r2, r3
 8014854:	4b09      	ldr	r3, [pc, #36]	; (801487c <ce303_tarif+0x1fe8>)
 8014856:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	b29a      	uxth	r2, r3
 801485e:	4b07      	ldr	r3, [pc, #28]	; (801487c <ce303_tarif+0x1fe8>)
 8014860:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8014864:	4a05      	ldr	r2, [pc, #20]	; (801487c <ce303_tarif+0x1fe8>)
 8014866:	8afb      	ldrh	r3, [r7, #22]
 8014868:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 801486c:	2301      	movs	r3, #1
 801486e:	74bb      	strb	r3, [r7, #18]
 8014870:	e21e      	b.n	8014cb0 <ce303_tarif+0x241c>
 8014872:	bf00      	nop
 8014874:	200098e4 	.word	0x200098e4
 8014878:	20009a6c 	.word	0x20009a6c
 801487c:	2000a10c 	.word	0x2000a10c

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 8014880:	8a3b      	ldrh	r3, [r7, #16]
 8014882:	3304      	adds	r3, #4
 8014884:	4aa9      	ldr	r2, [pc, #676]	; (8014b2c <ce303_tarif+0x2298>)
 8014886:	5cd3      	ldrb	r3, [r2, r3]
 8014888:	2b2e      	cmp	r3, #46	; 0x2e
 801488a:	f040 80ef 	bne.w	8014a6c <ce303_tarif+0x21d8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 801488e:	8a3b      	ldrh	r3, [r7, #16]
 8014890:	3301      	adds	r3, #1
 8014892:	4aa6      	ldr	r2, [pc, #664]	; (8014b2c <ce303_tarif+0x2298>)
 8014894:	5cd3      	ldrb	r3, [r2, r3]
 8014896:	3b30      	subs	r3, #48	; 0x30
 8014898:	2264      	movs	r2, #100	; 0x64
 801489a:	fb02 f103 	mul.w	r1, r2, r3
 801489e:	8a3b      	ldrh	r3, [r7, #16]
 80148a0:	3302      	adds	r3, #2
 80148a2:	4aa2      	ldr	r2, [pc, #648]	; (8014b2c <ce303_tarif+0x2298>)
 80148a4:	5cd3      	ldrb	r3, [r2, r3]
 80148a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80148aa:	4613      	mov	r3, r2
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	4413      	add	r3, r2
 80148b0:	005b      	lsls	r3, r3, #1
 80148b2:	18ca      	adds	r2, r1, r3
 80148b4:	8a3b      	ldrh	r3, [r7, #16]
 80148b6:	3303      	adds	r3, #3
 80148b8:	499c      	ldr	r1, [pc, #624]	; (8014b2c <ce303_tarif+0x2298>)
 80148ba:	5ccb      	ldrb	r3, [r1, r3]
 80148bc:	3b30      	subs	r3, #48	; 0x30
 80148be:	4413      	add	r3, r2
 80148c0:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80148c2:	8a3b      	ldrh	r3, [r7, #16]
 80148c4:	3306      	adds	r3, #6
 80148c6:	4a99      	ldr	r2, [pc, #612]	; (8014b2c <ce303_tarif+0x2298>)
 80148c8:	5cd3      	ldrb	r3, [r2, r3]
 80148ca:	2b29      	cmp	r3, #41	; 0x29
 80148cc:	d110      	bne.n	80148f0 <ce303_tarif+0x205c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80148ce:	8a3b      	ldrh	r3, [r7, #16]
 80148d0:	3305      	adds	r3, #5
 80148d2:	4a96      	ldr	r2, [pc, #600]	; (8014b2c <ce303_tarif+0x2298>)
 80148d4:	5cd3      	ldrb	r3, [r2, r3]
 80148d6:	3b30      	subs	r3, #48	; 0x30
 80148d8:	b29b      	uxth	r3, r3
 80148da:	461a      	mov	r2, r3
 80148dc:	0092      	lsls	r2, r2, #2
 80148de:	4413      	add	r3, r2
 80148e0:	461a      	mov	r2, r3
 80148e2:	0091      	lsls	r1, r2, #2
 80148e4:	461a      	mov	r2, r3
 80148e6:	460b      	mov	r3, r1
 80148e8:	4413      	add	r3, r2
 80148ea:	009b      	lsls	r3, r3, #2
 80148ec:	82fb      	strh	r3, [r7, #22]
 80148ee:	e070      	b.n	80149d2 <ce303_tarif+0x213e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 80148f0:	8a3b      	ldrh	r3, [r7, #16]
 80148f2:	3307      	adds	r3, #7
 80148f4:	4a8d      	ldr	r2, [pc, #564]	; (8014b2c <ce303_tarif+0x2298>)
 80148f6:	5cd3      	ldrb	r3, [r2, r3]
 80148f8:	2b29      	cmp	r3, #41	; 0x29
 80148fa:	d117      	bne.n	801492c <ce303_tarif+0x2098>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 80148fc:	8a3b      	ldrh	r3, [r7, #16]
 80148fe:	3305      	adds	r3, #5
 8014900:	4a8a      	ldr	r2, [pc, #552]	; (8014b2c <ce303_tarif+0x2298>)
 8014902:	5cd3      	ldrb	r3, [r2, r3]
 8014904:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014908:	4613      	mov	r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	4413      	add	r3, r2
 801490e:	005b      	lsls	r3, r3, #1
 8014910:	4619      	mov	r1, r3
 8014912:	8a3b      	ldrh	r3, [r7, #16]
 8014914:	3306      	adds	r3, #6
 8014916:	4a85      	ldr	r2, [pc, #532]	; (8014b2c <ce303_tarif+0x2298>)
 8014918:	5cd3      	ldrb	r3, [r2, r3]
 801491a:	3b30      	subs	r3, #48	; 0x30
 801491c:	440b      	add	r3, r1
 801491e:	b29b      	uxth	r3, r3
 8014920:	461a      	mov	r2, r3
 8014922:	0092      	lsls	r2, r2, #2
 8014924:	4413      	add	r3, r2
 8014926:	005b      	lsls	r3, r3, #1
 8014928:	82fb      	strh	r3, [r7, #22]
 801492a:	e052      	b.n	80149d2 <ce303_tarif+0x213e>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 801492c:	8a3b      	ldrh	r3, [r7, #16]
 801492e:	3308      	adds	r3, #8
 8014930:	4a7e      	ldr	r2, [pc, #504]	; (8014b2c <ce303_tarif+0x2298>)
 8014932:	5cd3      	ldrb	r3, [r2, r3]
 8014934:	2b29      	cmp	r3, #41	; 0x29
 8014936:	d126      	bne.n	8014986 <ce303_tarif+0x20f2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8014938:	8a3b      	ldrh	r3, [r7, #16]
 801493a:	3305      	adds	r3, #5
 801493c:	4a7b      	ldr	r2, [pc, #492]	; (8014b2c <ce303_tarif+0x2298>)
 801493e:	5cd3      	ldrb	r3, [r2, r3]
 8014940:	3b30      	subs	r3, #48	; 0x30
 8014942:	b29b      	uxth	r3, r3
 8014944:	461a      	mov	r2, r3
 8014946:	0092      	lsls	r2, r2, #2
 8014948:	4413      	add	r3, r2
 801494a:	461a      	mov	r2, r3
 801494c:	0091      	lsls	r1, r2, #2
 801494e:	461a      	mov	r2, r3
 8014950:	460b      	mov	r3, r1
 8014952:	4413      	add	r3, r2
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	b29a      	uxth	r2, r3
 8014958:	8a3b      	ldrh	r3, [r7, #16]
 801495a:	3306      	adds	r3, #6
 801495c:	4973      	ldr	r1, [pc, #460]	; (8014b2c <ce303_tarif+0x2298>)
 801495e:	5ccb      	ldrb	r3, [r1, r3]
 8014960:	3b30      	subs	r3, #48	; 0x30
 8014962:	b29b      	uxth	r3, r3
 8014964:	4619      	mov	r1, r3
 8014966:	0089      	lsls	r1, r1, #2
 8014968:	440b      	add	r3, r1
 801496a:	005b      	lsls	r3, r3, #1
 801496c:	b29b      	uxth	r3, r3
 801496e:	4413      	add	r3, r2
 8014970:	b29a      	uxth	r2, r3
 8014972:	8a3b      	ldrh	r3, [r7, #16]
 8014974:	3307      	adds	r3, #7
 8014976:	496d      	ldr	r1, [pc, #436]	; (8014b2c <ce303_tarif+0x2298>)
 8014978:	5ccb      	ldrb	r3, [r1, r3]
 801497a:	b29b      	uxth	r3, r3
 801497c:	4413      	add	r3, r2
 801497e:	b29b      	uxth	r3, r3
 8014980:	3b30      	subs	r3, #48	; 0x30
 8014982:	82fb      	strh	r3, [r7, #22]
 8014984:	e025      	b.n	80149d2 <ce303_tarif+0x213e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8014986:	8a3b      	ldrh	r3, [r7, #16]
 8014988:	3305      	adds	r3, #5
 801498a:	4a68      	ldr	r2, [pc, #416]	; (8014b2c <ce303_tarif+0x2298>)
 801498c:	5cd3      	ldrb	r3, [r2, r3]
 801498e:	3b30      	subs	r3, #48	; 0x30
 8014990:	b29b      	uxth	r3, r3
 8014992:	461a      	mov	r2, r3
 8014994:	0092      	lsls	r2, r2, #2
 8014996:	4413      	add	r3, r2
 8014998:	461a      	mov	r2, r3
 801499a:	0091      	lsls	r1, r2, #2
 801499c:	461a      	mov	r2, r3
 801499e:	460b      	mov	r3, r1
 80149a0:	4413      	add	r3, r2
 80149a2:	009b      	lsls	r3, r3, #2
 80149a4:	b29a      	uxth	r2, r3
 80149a6:	8a3b      	ldrh	r3, [r7, #16]
 80149a8:	3306      	adds	r3, #6
 80149aa:	4960      	ldr	r1, [pc, #384]	; (8014b2c <ce303_tarif+0x2298>)
 80149ac:	5ccb      	ldrb	r3, [r1, r3]
 80149ae:	3b30      	subs	r3, #48	; 0x30
 80149b0:	b29b      	uxth	r3, r3
 80149b2:	4619      	mov	r1, r3
 80149b4:	0089      	lsls	r1, r1, #2
 80149b6:	440b      	add	r3, r1
 80149b8:	005b      	lsls	r3, r3, #1
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	4413      	add	r3, r2
 80149be:	b29a      	uxth	r2, r3
 80149c0:	8a3b      	ldrh	r3, [r7, #16]
 80149c2:	3307      	adds	r3, #7
 80149c4:	4959      	ldr	r1, [pc, #356]	; (8014b2c <ce303_tarif+0x2298>)
 80149c6:	5ccb      	ldrb	r3, [r1, r3]
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	4413      	add	r3, r2
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	3b30      	subs	r3, #48	; 0x30
 80149d0:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80149d2:	4b57      	ldr	r3, [pc, #348]	; (8014b30 <ce303_tarif+0x229c>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	f04f 31ff 	mov.w	r1, #4294967295
 80149da:	4618      	mov	r0, r3
 80149dc:	f7f2 f9ac 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	0e1b      	lsrs	r3, r3, #24
 80149e4:	b2db      	uxtb	r3, r3
 80149e6:	4619      	mov	r1, r3
 80149e8:	f242 0094 	movw	r0, #8340	; 0x2094
 80149ec:	f000 ff38 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	0c1b      	lsrs	r3, r3, #16
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	4619      	mov	r1, r3
 80149f8:	f242 0095 	movw	r0, #8341	; 0x2095
 80149fc:	f000 ff30 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8014a00:	68bb      	ldr	r3, [r7, #8]
 8014a02:	0a1b      	lsrs	r3, r3, #8
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	4619      	mov	r1, r3
 8014a08:	f242 0096 	movw	r0, #8342	; 0x2096
 8014a0c:	f000 ff28 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	b2db      	uxtb	r3, r3
 8014a14:	4619      	mov	r1, r3
 8014a16:	f242 0097 	movw	r0, #8343	; 0x2097
 8014a1a:	f000 ff21 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8014a1e:	8afb      	ldrh	r3, [r7, #22]
 8014a20:	0a1b      	lsrs	r3, r3, #8
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	b2db      	uxtb	r3, r3
 8014a26:	4619      	mov	r1, r3
 8014a28:	f242 0098 	movw	r0, #8344	; 0x2098
 8014a2c:	f000 ff18 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8014a30:	8afb      	ldrh	r3, [r7, #22]
 8014a32:	b2db      	uxtb	r3, r3
 8014a34:	4619      	mov	r1, r3
 8014a36:	f242 0099 	movw	r0, #8345	; 0x2099
 8014a3a:	f000 ff11 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8014a3e:	4b3c      	ldr	r3, [pc, #240]	; (8014b30 <ce303_tarif+0x229c>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7f2 f9c6 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	0c1b      	lsrs	r3, r3, #16
 8014a4c:	b29a      	uxth	r2, r3
 8014a4e:	4b39      	ldr	r3, [pc, #228]	; (8014b34 <ce303_tarif+0x22a0>)
 8014a50:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	4b36      	ldr	r3, [pc, #216]	; (8014b34 <ce303_tarif+0x22a0>)
 8014a5a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8014a5e:	4a35      	ldr	r2, [pc, #212]	; (8014b34 <ce303_tarif+0x22a0>)
 8014a60:	8afb      	ldrh	r3, [r7, #22]
 8014a62:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8014a66:	2301      	movs	r3, #1
 8014a68:	74bb      	strb	r3, [r7, #18]
 8014a6a:	e121      	b.n	8014cb0 <ce303_tarif+0x241c>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 8014a6c:	8a3b      	ldrh	r3, [r7, #16]
 8014a6e:	3305      	adds	r3, #5
 8014a70:	4a2e      	ldr	r2, [pc, #184]	; (8014b2c <ce303_tarif+0x2298>)
 8014a72:	5cd3      	ldrb	r3, [r2, r3]
 8014a74:	2b2e      	cmp	r3, #46	; 0x2e
 8014a76:	f040 811b 	bne.w	8014cb0 <ce303_tarif+0x241c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 8014a7a:	8a3b      	ldrh	r3, [r7, #16]
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	4a2b      	ldr	r2, [pc, #172]	; (8014b2c <ce303_tarif+0x2298>)
 8014a80:	5cd3      	ldrb	r3, [r2, r3]
 8014a82:	3b30      	subs	r3, #48	; 0x30
 8014a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a88:	fb02 f203 	mul.w	r2, r2, r3
 8014a8c:	8a3b      	ldrh	r3, [r7, #16]
 8014a8e:	3302      	adds	r3, #2
 8014a90:	4926      	ldr	r1, [pc, #152]	; (8014b2c <ce303_tarif+0x2298>)
 8014a92:	5ccb      	ldrb	r3, [r1, r3]
 8014a94:	3b30      	subs	r3, #48	; 0x30
 8014a96:	2164      	movs	r1, #100	; 0x64
 8014a98:	fb01 f303 	mul.w	r3, r1, r3
 8014a9c:	18d1      	adds	r1, r2, r3
 8014a9e:	8a3b      	ldrh	r3, [r7, #16]
 8014aa0:	3303      	adds	r3, #3
 8014aa2:	4a22      	ldr	r2, [pc, #136]	; (8014b2c <ce303_tarif+0x2298>)
 8014aa4:	5cd3      	ldrb	r3, [r2, r3]
 8014aa6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014aaa:	4613      	mov	r3, r2
 8014aac:	009b      	lsls	r3, r3, #2
 8014aae:	4413      	add	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	18ca      	adds	r2, r1, r3
 8014ab4:	8a3b      	ldrh	r3, [r7, #16]
 8014ab6:	3304      	adds	r3, #4
 8014ab8:	491c      	ldr	r1, [pc, #112]	; (8014b2c <ce303_tarif+0x2298>)
 8014aba:	5ccb      	ldrb	r3, [r1, r3]
 8014abc:	3b30      	subs	r3, #48	; 0x30
 8014abe:	4413      	add	r3, r2
 8014ac0:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 8014ac2:	8a3b      	ldrh	r3, [r7, #16]
 8014ac4:	3307      	adds	r3, #7
 8014ac6:	4a19      	ldr	r2, [pc, #100]	; (8014b2c <ce303_tarif+0x2298>)
 8014ac8:	5cd3      	ldrb	r3, [r2, r3]
 8014aca:	2b29      	cmp	r3, #41	; 0x29
 8014acc:	d110      	bne.n	8014af0 <ce303_tarif+0x225c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8014ace:	8a3b      	ldrh	r3, [r7, #16]
 8014ad0:	3306      	adds	r3, #6
 8014ad2:	4a16      	ldr	r2, [pc, #88]	; (8014b2c <ce303_tarif+0x2298>)
 8014ad4:	5cd3      	ldrb	r3, [r2, r3]
 8014ad6:	3b30      	subs	r3, #48	; 0x30
 8014ad8:	b29b      	uxth	r3, r3
 8014ada:	461a      	mov	r2, r3
 8014adc:	0092      	lsls	r2, r2, #2
 8014ade:	4413      	add	r3, r2
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	0091      	lsls	r1, r2, #2
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	460b      	mov	r3, r1
 8014ae8:	4413      	add	r3, r2
 8014aea:	009b      	lsls	r3, r3, #2
 8014aec:	82fb      	strh	r3, [r7, #22]
 8014aee:	e076      	b.n	8014bde <ce303_tarif+0x234a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 8014af0:	8a3b      	ldrh	r3, [r7, #16]
 8014af2:	3308      	adds	r3, #8
 8014af4:	4a0d      	ldr	r2, [pc, #52]	; (8014b2c <ce303_tarif+0x2298>)
 8014af6:	5cd3      	ldrb	r3, [r2, r3]
 8014af8:	2b29      	cmp	r3, #41	; 0x29
 8014afa:	d11d      	bne.n	8014b38 <ce303_tarif+0x22a4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8014afc:	8a3b      	ldrh	r3, [r7, #16]
 8014afe:	3306      	adds	r3, #6
 8014b00:	4a0a      	ldr	r2, [pc, #40]	; (8014b2c <ce303_tarif+0x2298>)
 8014b02:	5cd3      	ldrb	r3, [r2, r3]
 8014b04:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014b08:	4613      	mov	r3, r2
 8014b0a:	009b      	lsls	r3, r3, #2
 8014b0c:	4413      	add	r3, r2
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	4619      	mov	r1, r3
 8014b12:	8a3b      	ldrh	r3, [r7, #16]
 8014b14:	3307      	adds	r3, #7
 8014b16:	4a05      	ldr	r2, [pc, #20]	; (8014b2c <ce303_tarif+0x2298>)
 8014b18:	5cd3      	ldrb	r3, [r2, r3]
 8014b1a:	3b30      	subs	r3, #48	; 0x30
 8014b1c:	440b      	add	r3, r1
 8014b1e:	b29b      	uxth	r3, r3
 8014b20:	461a      	mov	r2, r3
 8014b22:	0092      	lsls	r2, r2, #2
 8014b24:	4413      	add	r3, r2
 8014b26:	005b      	lsls	r3, r3, #1
 8014b28:	82fb      	strh	r3, [r7, #22]
 8014b2a:	e058      	b.n	8014bde <ce303_tarif+0x234a>
 8014b2c:	200098e4 	.word	0x200098e4
 8014b30:	20009a6c 	.word	0x20009a6c
 8014b34:	2000a10c 	.word	0x2000a10c
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8014b38:	8a3b      	ldrh	r3, [r7, #16]
 8014b3a:	3309      	adds	r3, #9
 8014b3c:	4a6c      	ldr	r2, [pc, #432]	; (8014cf0 <ce303_tarif+0x245c>)
 8014b3e:	5cd3      	ldrb	r3, [r2, r3]
 8014b40:	2b29      	cmp	r3, #41	; 0x29
 8014b42:	d126      	bne.n	8014b92 <ce303_tarif+0x22fe>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8014b44:	8a3b      	ldrh	r3, [r7, #16]
 8014b46:	3306      	adds	r3, #6
 8014b48:	4a69      	ldr	r2, [pc, #420]	; (8014cf0 <ce303_tarif+0x245c>)
 8014b4a:	5cd3      	ldrb	r3, [r2, r3]
 8014b4c:	3b30      	subs	r3, #48	; 0x30
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	461a      	mov	r2, r3
 8014b52:	0092      	lsls	r2, r2, #2
 8014b54:	4413      	add	r3, r2
 8014b56:	461a      	mov	r2, r3
 8014b58:	0091      	lsls	r1, r2, #2
 8014b5a:	461a      	mov	r2, r3
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	4413      	add	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	b29a      	uxth	r2, r3
 8014b64:	8a3b      	ldrh	r3, [r7, #16]
 8014b66:	3307      	adds	r3, #7
 8014b68:	4961      	ldr	r1, [pc, #388]	; (8014cf0 <ce303_tarif+0x245c>)
 8014b6a:	5ccb      	ldrb	r3, [r1, r3]
 8014b6c:	3b30      	subs	r3, #48	; 0x30
 8014b6e:	b29b      	uxth	r3, r3
 8014b70:	4619      	mov	r1, r3
 8014b72:	0089      	lsls	r1, r1, #2
 8014b74:	440b      	add	r3, r1
 8014b76:	005b      	lsls	r3, r3, #1
 8014b78:	b29b      	uxth	r3, r3
 8014b7a:	4413      	add	r3, r2
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	8a3b      	ldrh	r3, [r7, #16]
 8014b80:	3308      	adds	r3, #8
 8014b82:	495b      	ldr	r1, [pc, #364]	; (8014cf0 <ce303_tarif+0x245c>)
 8014b84:	5ccb      	ldrb	r3, [r1, r3]
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	4413      	add	r3, r2
 8014b8a:	b29b      	uxth	r3, r3
 8014b8c:	3b30      	subs	r3, #48	; 0x30
 8014b8e:	82fb      	strh	r3, [r7, #22]
 8014b90:	e025      	b.n	8014bde <ce303_tarif+0x234a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8014b92:	8a3b      	ldrh	r3, [r7, #16]
 8014b94:	3306      	adds	r3, #6
 8014b96:	4a56      	ldr	r2, [pc, #344]	; (8014cf0 <ce303_tarif+0x245c>)
 8014b98:	5cd3      	ldrb	r3, [r2, r3]
 8014b9a:	3b30      	subs	r3, #48	; 0x30
 8014b9c:	b29b      	uxth	r3, r3
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	0092      	lsls	r2, r2, #2
 8014ba2:	4413      	add	r3, r2
 8014ba4:	461a      	mov	r2, r3
 8014ba6:	0091      	lsls	r1, r2, #2
 8014ba8:	461a      	mov	r2, r3
 8014baa:	460b      	mov	r3, r1
 8014bac:	4413      	add	r3, r2
 8014bae:	009b      	lsls	r3, r3, #2
 8014bb0:	b29a      	uxth	r2, r3
 8014bb2:	8a3b      	ldrh	r3, [r7, #16]
 8014bb4:	3307      	adds	r3, #7
 8014bb6:	494e      	ldr	r1, [pc, #312]	; (8014cf0 <ce303_tarif+0x245c>)
 8014bb8:	5ccb      	ldrb	r3, [r1, r3]
 8014bba:	3b30      	subs	r3, #48	; 0x30
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	0089      	lsls	r1, r1, #2
 8014bc2:	440b      	add	r3, r1
 8014bc4:	005b      	lsls	r3, r3, #1
 8014bc6:	b29b      	uxth	r3, r3
 8014bc8:	4413      	add	r3, r2
 8014bca:	b29a      	uxth	r2, r3
 8014bcc:	8a3b      	ldrh	r3, [r7, #16]
 8014bce:	3308      	adds	r3, #8
 8014bd0:	4947      	ldr	r1, [pc, #284]	; (8014cf0 <ce303_tarif+0x245c>)
 8014bd2:	5ccb      	ldrb	r3, [r1, r3]
 8014bd4:	b29b      	uxth	r3, r3
 8014bd6:	4413      	add	r3, r2
 8014bd8:	b29b      	uxth	r3, r3
 8014bda:	3b30      	subs	r3, #48	; 0x30
 8014bdc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8014bde:	4b45      	ldr	r3, [pc, #276]	; (8014cf4 <ce303_tarif+0x2460>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f04f 31ff 	mov.w	r1, #4294967295
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7f2 f8a6 	bl	8006d38 <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	0e1b      	lsrs	r3, r3, #24
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	4619      	mov	r1, r3
 8014bf4:	f242 0094 	movw	r0, #8340	; 0x2094
 8014bf8:	f000 fe32 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	0c1b      	lsrs	r3, r3, #16
 8014c00:	b2db      	uxtb	r3, r3
 8014c02:	4619      	mov	r1, r3
 8014c04:	f242 0095 	movw	r0, #8341	; 0x2095
 8014c08:	f000 fe2a 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	0a1b      	lsrs	r3, r3, #8
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	4619      	mov	r1, r3
 8014c14:	f242 0096 	movw	r0, #8342	; 0x2096
 8014c18:	f000 fe22 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	4619      	mov	r1, r3
 8014c22:	f242 0097 	movw	r0, #8343	; 0x2097
 8014c26:	f000 fe1b 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8014c2a:	8afb      	ldrh	r3, [r7, #22]
 8014c2c:	0a1b      	lsrs	r3, r3, #8
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	4619      	mov	r1, r3
 8014c34:	f242 0098 	movw	r0, #8344	; 0x2098
 8014c38:	f000 fe12 	bl	8015860 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8014c3c:	8afb      	ldrh	r3, [r7, #22]
 8014c3e:	b2db      	uxtb	r3, r3
 8014c40:	4619      	mov	r1, r3
 8014c42:	f242 0099 	movw	r0, #8345	; 0x2099
 8014c46:	f000 fe0b 	bl	8015860 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8014c4a:	4b2a      	ldr	r3, [pc, #168]	; (8014cf4 <ce303_tarif+0x2460>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7f2 f8c0 	bl	8006dd4 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	0c1b      	lsrs	r3, r3, #16
 8014c58:	b29a      	uxth	r2, r3
 8014c5a:	4b27      	ldr	r3, [pc, #156]	; (8014cf8 <ce303_tarif+0x2464>)
 8014c5c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	b29a      	uxth	r2, r3
 8014c64:	4b24      	ldr	r3, [pc, #144]	; (8014cf8 <ce303_tarif+0x2464>)
 8014c66:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8014c6a:	4a23      	ldr	r2, [pc, #140]	; (8014cf8 <ce303_tarif+0x2464>)
 8014c6c:	8afb      	ldrh	r3, [r7, #22]
 8014c6e:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8014c72:	2301      	movs	r3, #1
 8014c74:	74bb      	strb	r3, [r7, #18]
 8014c76:	e01b      	b.n	8014cb0 <ce303_tarif+0x241c>

			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==1) && (tarif_3_state==1) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8014c78:	8a3b      	ldrh	r3, [r7, #16]
 8014c7a:	4a1d      	ldr	r2, [pc, #116]	; (8014cf0 <ce303_tarif+0x245c>)
 8014c7c:	5cd3      	ldrb	r3, [r2, r3]
 8014c7e:	2b28      	cmp	r3, #40	; 0x28
 8014c80:	d116      	bne.n	8014cb0 <ce303_tarif+0x241c>
 8014c82:	7d7b      	ldrb	r3, [r7, #21]
 8014c84:	2b01      	cmp	r3, #1
 8014c86:	d113      	bne.n	8014cb0 <ce303_tarif+0x241c>
 8014c88:	7d3b      	ldrb	r3, [r7, #20]
 8014c8a:	2b01      	cmp	r3, #1
 8014c8c:	d110      	bne.n	8014cb0 <ce303_tarif+0x241c>
 8014c8e:	7cfb      	ldrb	r3, [r7, #19]
 8014c90:	2b01      	cmp	r3, #1
 8014c92:	d10d      	bne.n	8014cb0 <ce303_tarif+0x241c>
 8014c94:	7cbb      	ldrb	r3, [r7, #18]
 8014c96:	2b01      	cmp	r3, #1
 8014c98:	d10a      	bne.n	8014cb0 <ce303_tarif+0x241c>
 8014c9a:	7bfb      	ldrb	r3, [r7, #15]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d107      	bne.n	8014cb0 <ce303_tarif+0x241c>
 8014ca0:	7bbb      	ldrb	r3, [r7, #14]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	e004      	b.n	8014cb0 <ce303_tarif+0x241c>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8014ca6:	bf00      	nop
 8014ca8:	e002      	b.n	8014cb0 <ce303_tarif+0x241c>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8014caa:	bf00      	nop
 8014cac:	e000      	b.n	8014cb0 <ce303_tarif+0x241c>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8014cae:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 8014cb0:	8a3b      	ldrh	r3, [r7, #16]
 8014cb2:	3301      	adds	r3, #1
 8014cb4:	823b      	strh	r3, [r7, #16]
 8014cb6:	8a3b      	ldrh	r3, [r7, #16]
 8014cb8:	2bff      	cmp	r3, #255	; 0xff
 8014cba:	f67d afe8 	bls.w	8012c8e <ce303_tarif+0x3fa>

		}

	}

	meter_rx_number = 0;
 8014cbe:	4b0f      	ldr	r3, [pc, #60]	; (8014cfc <ce303_tarif+0x2468>)
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8014cc4:	f7f9 feea 	bl	800ea9c <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8014cc8:	2201      	movs	r2, #1
 8014cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014cce:	480c      	ldr	r0, [pc, #48]	; (8014d00 <ce303_tarif+0x246c>)
 8014cd0:	f7ee facc 	bl	800326c <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 8014cd4:	2205      	movs	r2, #5
 8014cd6:	490b      	ldr	r1, [pc, #44]	; (8014d04 <ce303_tarif+0x2470>)
 8014cd8:	480b      	ldr	r0, [pc, #44]	; (8014d08 <ce303_tarif+0x2474>)
 8014cda:	f7f0 fd7f 	bl	80057dc <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8014cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014ce2:	f7ed f80f 	bl	8001d04 <HAL_Delay>

}
 8014ce6:	bf00      	nop
 8014ce8:	3718      	adds	r7, #24
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	200098e4 	.word	0x200098e4
 8014cf4:	20009a6c 	.word	0x20009a6c
 8014cf8:	2000a10c 	.word	0x2000a10c
 8014cfc:	2000085d 	.word	0x2000085d
 8014d00:	40021800 	.word	0x40021800
 8014d04:	20000030 	.word	0x20000030
 8014d08:	20009c70 	.word	0x20009c70

08014d0c <LED1_A2_ON>:
#include "stm32f4xx_hal.h"

//---- Первая цифра---------------------------------------
void LED1_A2_ON(void)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8014d10:	2201      	movs	r2, #1
 8014d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014d16:	4802      	ldr	r0, [pc, #8]	; (8014d20 <LED1_A2_ON+0x14>)
 8014d18:	f7ee faa8 	bl	800326c <HAL_GPIO_WritePin>
}
 8014d1c:	bf00      	nop
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	40020000 	.word	0x40020000

08014d24 <LED1_A2_OFF>:

void LED1_A2_OFF(void)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8014d28:	2200      	movs	r2, #0
 8014d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014d2e:	4802      	ldr	r0, [pc, #8]	; (8014d38 <LED1_A2_OFF+0x14>)
 8014d30:	f7ee fa9c 	bl	800326c <HAL_GPIO_WritePin>
}
 8014d34:	bf00      	nop
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	40020000 	.word	0x40020000

08014d3c <LED1_B2_ON>:

void LED1_B2_ON(void)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8014d40:	2201      	movs	r2, #1
 8014d42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014d46:	4802      	ldr	r0, [pc, #8]	; (8014d50 <LED1_B2_ON+0x14>)
 8014d48:	f7ee fa90 	bl	800326c <HAL_GPIO_WritePin>
}
 8014d4c:	bf00      	nop
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	40020800 	.word	0x40020800

08014d54 <LED1_B2_OFF>:

void LED1_B2_OFF(void)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8014d58:	2200      	movs	r2, #0
 8014d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014d5e:	4802      	ldr	r0, [pc, #8]	; (8014d68 <LED1_B2_OFF+0x14>)
 8014d60:	f7ee fa84 	bl	800326c <HAL_GPIO_WritePin>
}
 8014d64:	bf00      	nop
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	40020800 	.word	0x40020800

08014d6c <LED1_C2_ON>:

void LED1_C2_ON(void)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8014d70:	2201      	movs	r2, #1
 8014d72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014d76:	4802      	ldr	r0, [pc, #8]	; (8014d80 <LED1_C2_ON+0x14>)
 8014d78:	f7ee fa78 	bl	800326c <HAL_GPIO_WritePin>
}
 8014d7c:	bf00      	nop
 8014d7e:	bd80      	pop	{r7, pc}
 8014d80:	40020800 	.word	0x40020800

08014d84 <LED1_C2_OFF>:

void LED1_C2_OFF(void)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8014d88:	2200      	movs	r2, #0
 8014d8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014d8e:	4802      	ldr	r0, [pc, #8]	; (8014d98 <LED1_C2_OFF+0x14>)
 8014d90:	f7ee fa6c 	bl	800326c <HAL_GPIO_WritePin>
}
 8014d94:	bf00      	nop
 8014d96:	bd80      	pop	{r7, pc}
 8014d98:	40020800 	.word	0x40020800

08014d9c <LED1_D2_ON>:

void LED1_D2_ON(void)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8014da0:	2201      	movs	r2, #1
 8014da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014da6:	4802      	ldr	r0, [pc, #8]	; (8014db0 <LED1_D2_ON+0x14>)
 8014da8:	f7ee fa60 	bl	800326c <HAL_GPIO_WritePin>
}
 8014dac:	bf00      	nop
 8014dae:	bd80      	pop	{r7, pc}
 8014db0:	40020800 	.word	0x40020800

08014db4 <LED1_D2_OFF>:

void LED1_D2_OFF(void)
{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8014db8:	2200      	movs	r2, #0
 8014dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014dbe:	4802      	ldr	r0, [pc, #8]	; (8014dc8 <LED1_D2_OFF+0x14>)
 8014dc0:	f7ee fa54 	bl	800326c <HAL_GPIO_WritePin>
}
 8014dc4:	bf00      	nop
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	40020800 	.word	0x40020800

08014dcc <LED1_E2_ON>:

void LED1_E2_ON(void)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8014dd0:	2201      	movs	r2, #1
 8014dd2:	2101      	movs	r1, #1
 8014dd4:	4802      	ldr	r0, [pc, #8]	; (8014de0 <LED1_E2_ON+0x14>)
 8014dd6:	f7ee fa49 	bl	800326c <HAL_GPIO_WritePin>
}
 8014dda:	bf00      	nop
 8014ddc:	bd80      	pop	{r7, pc}
 8014dde:	bf00      	nop
 8014de0:	40020c00 	.word	0x40020c00

08014de4 <LED1_E2_OFF>:

void LED1_E2_OFF(void)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8014de8:	2200      	movs	r2, #0
 8014dea:	2101      	movs	r1, #1
 8014dec:	4802      	ldr	r0, [pc, #8]	; (8014df8 <LED1_E2_OFF+0x14>)
 8014dee:	f7ee fa3d 	bl	800326c <HAL_GPIO_WritePin>
}
 8014df2:	bf00      	nop
 8014df4:	bd80      	pop	{r7, pc}
 8014df6:	bf00      	nop
 8014df8:	40020c00 	.word	0x40020c00

08014dfc <LED1_F2_ON>:

void LED1_F2_ON(void)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8014e00:	2201      	movs	r2, #1
 8014e02:	2102      	movs	r1, #2
 8014e04:	4802      	ldr	r0, [pc, #8]	; (8014e10 <LED1_F2_ON+0x14>)
 8014e06:	f7ee fa31 	bl	800326c <HAL_GPIO_WritePin>
}
 8014e0a:	bf00      	nop
 8014e0c:	bd80      	pop	{r7, pc}
 8014e0e:	bf00      	nop
 8014e10:	40020c00 	.word	0x40020c00

08014e14 <LED1_F2_OFF>:

void LED1_F2_OFF(void)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8014e18:	2200      	movs	r2, #0
 8014e1a:	2102      	movs	r1, #2
 8014e1c:	4802      	ldr	r0, [pc, #8]	; (8014e28 <LED1_F2_OFF+0x14>)
 8014e1e:	f7ee fa25 	bl	800326c <HAL_GPIO_WritePin>
}
 8014e22:	bf00      	nop
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	bf00      	nop
 8014e28:	40020c00 	.word	0x40020c00

08014e2c <LED1_G2_ON>:

void LED1_G2_ON(void)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8014e30:	2201      	movs	r2, #1
 8014e32:	2104      	movs	r1, #4
 8014e34:	4802      	ldr	r0, [pc, #8]	; (8014e40 <LED1_G2_ON+0x14>)
 8014e36:	f7ee fa19 	bl	800326c <HAL_GPIO_WritePin>
}
 8014e3a:	bf00      	nop
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	40020c00 	.word	0x40020c00

08014e44 <LED1_G2_OFF>:

void LED1_G2_OFF(void)
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8014e48:	2200      	movs	r2, #0
 8014e4a:	2104      	movs	r1, #4
 8014e4c:	4802      	ldr	r0, [pc, #8]	; (8014e58 <LED1_G2_OFF+0x14>)
 8014e4e:	f7ee fa0d 	bl	800326c <HAL_GPIO_WritePin>
}
 8014e52:	bf00      	nop
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	40020c00 	.word	0x40020c00

08014e5c <LED1_A1_ON>:
//---------------------------------------------------------


//---- Вторая цифра---------------------------------------
void LED1_A1_ON(void)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8014e60:	2201      	movs	r2, #1
 8014e62:	2140      	movs	r1, #64	; 0x40
 8014e64:	4802      	ldr	r0, [pc, #8]	; (8014e70 <LED1_A1_ON+0x14>)
 8014e66:	f7ee fa01 	bl	800326c <HAL_GPIO_WritePin>
}
 8014e6a:	bf00      	nop
 8014e6c:	bd80      	pop	{r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	40020800 	.word	0x40020800

08014e74 <LED1_A1_OFF>:

void LED1_A1_OFF(void)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8014e78:	2200      	movs	r2, #0
 8014e7a:	2140      	movs	r1, #64	; 0x40
 8014e7c:	4802      	ldr	r0, [pc, #8]	; (8014e88 <LED1_A1_OFF+0x14>)
 8014e7e:	f7ee f9f5 	bl	800326c <HAL_GPIO_WritePin>
}
 8014e82:	bf00      	nop
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	40020800 	.word	0x40020800

08014e8c <LED1_B1_ON>:

void LED1_B1_ON(void)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8014e90:	2201      	movs	r2, #1
 8014e92:	2180      	movs	r1, #128	; 0x80
 8014e94:	4802      	ldr	r0, [pc, #8]	; (8014ea0 <LED1_B1_ON+0x14>)
 8014e96:	f7ee f9e9 	bl	800326c <HAL_GPIO_WritePin>
}
 8014e9a:	bf00      	nop
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	40020800 	.word	0x40020800

08014ea4 <LED1_B1_OFF>:

void LED1_B1_OFF(void)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	2180      	movs	r1, #128	; 0x80
 8014eac:	4802      	ldr	r0, [pc, #8]	; (8014eb8 <LED1_B1_OFF+0x14>)
 8014eae:	f7ee f9dd 	bl	800326c <HAL_GPIO_WritePin>
}
 8014eb2:	bf00      	nop
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	40020800 	.word	0x40020800

08014ebc <LED1_C1_ON>:

void LED1_C1_ON(void)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8014ec0:	2201      	movs	r2, #1
 8014ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014ec6:	4802      	ldr	r0, [pc, #8]	; (8014ed0 <LED1_C1_ON+0x14>)
 8014ec8:	f7ee f9d0 	bl	800326c <HAL_GPIO_WritePin>
}
 8014ecc:	bf00      	nop
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	40020800 	.word	0x40020800

08014ed4 <LED1_C1_OFF>:

void LED1_C1_OFF(void)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8014ed8:	2200      	movs	r2, #0
 8014eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014ede:	4802      	ldr	r0, [pc, #8]	; (8014ee8 <LED1_C1_OFF+0x14>)
 8014ee0:	f7ee f9c4 	bl	800326c <HAL_GPIO_WritePin>
}
 8014ee4:	bf00      	nop
 8014ee6:	bd80      	pop	{r7, pc}
 8014ee8:	40020800 	.word	0x40020800

08014eec <LED1_D1_ON>:

void LED1_D1_ON(void)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8014ef0:	2201      	movs	r2, #1
 8014ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014ef6:	4802      	ldr	r0, [pc, #8]	; (8014f00 <LED1_D1_ON+0x14>)
 8014ef8:	f7ee f9b8 	bl	800326c <HAL_GPIO_WritePin>
}
 8014efc:	bf00      	nop
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	40020800 	.word	0x40020800

08014f04 <LED1_D1_OFF>:

void LED1_D1_OFF(void)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8014f08:	2200      	movs	r2, #0
 8014f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014f0e:	4802      	ldr	r0, [pc, #8]	; (8014f18 <LED1_D1_OFF+0x14>)
 8014f10:	f7ee f9ac 	bl	800326c <HAL_GPIO_WritePin>
}
 8014f14:	bf00      	nop
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	40020800 	.word	0x40020800

08014f1c <LED1_E1_ON>:

void LED1_E1_ON(void)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8014f20:	2201      	movs	r2, #1
 8014f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014f26:	4802      	ldr	r0, [pc, #8]	; (8014f30 <LED1_E1_ON+0x14>)
 8014f28:	f7ee f9a0 	bl	800326c <HAL_GPIO_WritePin>
}
 8014f2c:	bf00      	nop
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	40020000 	.word	0x40020000

08014f34 <LED1_E1_OFF>:

void LED1_E1_OFF(void)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8014f38:	2200      	movs	r2, #0
 8014f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014f3e:	4802      	ldr	r0, [pc, #8]	; (8014f48 <LED1_E1_OFF+0x14>)
 8014f40:	f7ee f994 	bl	800326c <HAL_GPIO_WritePin>
}
 8014f44:	bf00      	nop
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	40020000 	.word	0x40020000

08014f4c <LED1_F1_ON>:

void LED1_F1_ON(void)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8014f50:	2201      	movs	r2, #1
 8014f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014f56:	4802      	ldr	r0, [pc, #8]	; (8014f60 <LED1_F1_ON+0x14>)
 8014f58:	f7ee f988 	bl	800326c <HAL_GPIO_WritePin>
}
 8014f5c:	bf00      	nop
 8014f5e:	bd80      	pop	{r7, pc}
 8014f60:	40020000 	.word	0x40020000

08014f64 <LED1_F1_OFF>:

void LED1_F1_OFF(void)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014f6e:	4802      	ldr	r0, [pc, #8]	; (8014f78 <LED1_F1_OFF+0x14>)
 8014f70:	f7ee f97c 	bl	800326c <HAL_GPIO_WritePin>
}
 8014f74:	bf00      	nop
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	40020000 	.word	0x40020000

08014f7c <LED1_G1_ON>:

void LED1_G1_ON(void)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8014f80:	2201      	movs	r2, #1
 8014f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014f86:	4802      	ldr	r0, [pc, #8]	; (8014f90 <LED1_G1_ON+0x14>)
 8014f88:	f7ee f970 	bl	800326c <HAL_GPIO_WritePin>
}
 8014f8c:	bf00      	nop
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	40020000 	.word	0x40020000

08014f94 <LED1_G1_OFF>:

void LED1_G1_OFF(void)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8014f98:	2200      	movs	r2, #0
 8014f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014f9e:	4802      	ldr	r0, [pc, #8]	; (8014fa8 <LED1_G1_OFF+0x14>)
 8014fa0:	f7ee f964 	bl	800326c <HAL_GPIO_WritePin>
}
 8014fa4:	bf00      	nop
 8014fa6:	bd80      	pop	{r7, pc}
 8014fa8:	40020000 	.word	0x40020000

08014fac <LED2_A2_ON>:
//---------------------------------------------------------

//---- третья цифра---------------------------------------
void LED2_A2_ON(void)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014fb6:	4802      	ldr	r0, [pc, #8]	; (8014fc0 <LED2_A2_ON+0x14>)
 8014fb8:	f7ee f958 	bl	800326c <HAL_GPIO_WritePin>
}
 8014fbc:	bf00      	nop
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	40021000 	.word	0x40021000

08014fc4 <LED2_A2_OFF>:

void LED2_A2_OFF(void)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8014fc8:	2200      	movs	r2, #0
 8014fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014fce:	4802      	ldr	r0, [pc, #8]	; (8014fd8 <LED2_A2_OFF+0x14>)
 8014fd0:	f7ee f94c 	bl	800326c <HAL_GPIO_WritePin>
}
 8014fd4:	bf00      	nop
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	40021000 	.word	0x40021000

08014fdc <LED2_B2_ON>:

void LED2_B2_ON(void)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014fe6:	4802      	ldr	r0, [pc, #8]	; (8014ff0 <LED2_B2_ON+0x14>)
 8014fe8:	f7ee f940 	bl	800326c <HAL_GPIO_WritePin>
}
 8014fec:	bf00      	nop
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	40021000 	.word	0x40021000

08014ff4 <LED2_B2_OFF>:

void LED2_B2_OFF(void)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8014ff8:	2200      	movs	r2, #0
 8014ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014ffe:	4802      	ldr	r0, [pc, #8]	; (8015008 <LED2_B2_OFF+0x14>)
 8015000:	f7ee f934 	bl	800326c <HAL_GPIO_WritePin>
}
 8015004:	bf00      	nop
 8015006:	bd80      	pop	{r7, pc}
 8015008:	40021000 	.word	0x40021000

0801500c <LED2_C2_ON>:

void LED2_C2_ON(void)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8015010:	2201      	movs	r2, #1
 8015012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015016:	4802      	ldr	r0, [pc, #8]	; (8015020 <LED2_C2_ON+0x14>)
 8015018:	f7ee f928 	bl	800326c <HAL_GPIO_WritePin>
}
 801501c:	bf00      	nop
 801501e:	bd80      	pop	{r7, pc}
 8015020:	40021000 	.word	0x40021000

08015024 <LED2_C2_OFF>:

void LED2_C2_OFF(void)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8015028:	2200      	movs	r2, #0
 801502a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801502e:	4802      	ldr	r0, [pc, #8]	; (8015038 <LED2_C2_OFF+0x14>)
 8015030:	f7ee f91c 	bl	800326c <HAL_GPIO_WritePin>
}
 8015034:	bf00      	nop
 8015036:	bd80      	pop	{r7, pc}
 8015038:	40021000 	.word	0x40021000

0801503c <LED2_D2_ON>:

void LED2_D2_ON(void)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8015040:	2201      	movs	r2, #1
 8015042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015046:	4802      	ldr	r0, [pc, #8]	; (8015050 <LED2_D2_ON+0x14>)
 8015048:	f7ee f910 	bl	800326c <HAL_GPIO_WritePin>
}
 801504c:	bf00      	nop
 801504e:	bd80      	pop	{r7, pc}
 8015050:	40021000 	.word	0x40021000

08015054 <LED2_D2_OFF>:

void LED2_D2_OFF(void)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8015058:	2200      	movs	r2, #0
 801505a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801505e:	4802      	ldr	r0, [pc, #8]	; (8015068 <LED2_D2_OFF+0x14>)
 8015060:	f7ee f904 	bl	800326c <HAL_GPIO_WritePin>
}
 8015064:	bf00      	nop
 8015066:	bd80      	pop	{r7, pc}
 8015068:	40021000 	.word	0x40021000

0801506c <LED2_E2_ON>:

void LED2_E2_ON(void)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 8015070:	2201      	movs	r2, #1
 8015072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015076:	4802      	ldr	r0, [pc, #8]	; (8015080 <LED2_E2_ON+0x14>)
 8015078:	f7ee f8f8 	bl	800326c <HAL_GPIO_WritePin>
}
 801507c:	bf00      	nop
 801507e:	bd80      	pop	{r7, pc}
 8015080:	40021000 	.word	0x40021000

08015084 <LED2_E2_OFF>:

void LED2_E2_OFF(void)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 8015088:	2200      	movs	r2, #0
 801508a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801508e:	4802      	ldr	r0, [pc, #8]	; (8015098 <LED2_E2_OFF+0x14>)
 8015090:	f7ee f8ec 	bl	800326c <HAL_GPIO_WritePin>
}
 8015094:	bf00      	nop
 8015096:	bd80      	pop	{r7, pc}
 8015098:	40021000 	.word	0x40021000

0801509c <LED2_F2_ON>:

void LED2_F2_ON(void)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80150a0:	2201      	movs	r2, #1
 80150a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80150a6:	4802      	ldr	r0, [pc, #8]	; (80150b0 <LED2_F2_ON+0x14>)
 80150a8:	f7ee f8e0 	bl	800326c <HAL_GPIO_WritePin>
}
 80150ac:	bf00      	nop
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	40021000 	.word	0x40021000

080150b4 <LED2_F2_OFF>:

void LED2_F2_OFF(void)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80150b8:	2200      	movs	r2, #0
 80150ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80150be:	4802      	ldr	r0, [pc, #8]	; (80150c8 <LED2_F2_OFF+0x14>)
 80150c0:	f7ee f8d4 	bl	800326c <HAL_GPIO_WritePin>
}
 80150c4:	bf00      	nop
 80150c6:	bd80      	pop	{r7, pc}
 80150c8:	40021000 	.word	0x40021000

080150cc <LED2_G2_ON>:

void LED2_G2_ON(void)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80150d0:	2201      	movs	r2, #1
 80150d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80150d6:	4802      	ldr	r0, [pc, #8]	; (80150e0 <LED2_G2_ON+0x14>)
 80150d8:	f7ee f8c8 	bl	800326c <HAL_GPIO_WritePin>
}
 80150dc:	bf00      	nop
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	40021000 	.word	0x40021000

080150e4 <LED2_G2_OFF>:

void LED2_G2_OFF(void)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80150e8:	2200      	movs	r2, #0
 80150ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80150ee:	4802      	ldr	r0, [pc, #8]	; (80150f8 <LED2_G2_OFF+0x14>)
 80150f0:	f7ee f8bc 	bl	800326c <HAL_GPIO_WritePin>
}
 80150f4:	bf00      	nop
 80150f6:	bd80      	pop	{r7, pc}
 80150f8:	40021000 	.word	0x40021000

080150fc <LED2_A1_ON>:
//---------------------------------------------------------

//---- четвертая цифра---------------------------------------
void LED2_A1_ON(void)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8015100:	2201      	movs	r2, #1
 8015102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8015106:	4802      	ldr	r0, [pc, #8]	; (8015110 <LED2_A1_ON+0x14>)
 8015108:	f7ee f8b0 	bl	800326c <HAL_GPIO_WritePin>
}
 801510c:	bf00      	nop
 801510e:	bd80      	pop	{r7, pc}
 8015110:	40020c00 	.word	0x40020c00

08015114 <LED2_A1_OFF>:

void LED2_A1_OFF(void)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8015118:	2200      	movs	r2, #0
 801511a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801511e:	4802      	ldr	r0, [pc, #8]	; (8015128 <LED2_A1_OFF+0x14>)
 8015120:	f7ee f8a4 	bl	800326c <HAL_GPIO_WritePin>
}
 8015124:	bf00      	nop
 8015126:	bd80      	pop	{r7, pc}
 8015128:	40020c00 	.word	0x40020c00

0801512c <LED2_B1_ON>:

void LED2_B1_ON(void)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8015130:	2201      	movs	r2, #1
 8015132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015136:	4802      	ldr	r0, [pc, #8]	; (8015140 <LED2_B1_ON+0x14>)
 8015138:	f7ee f898 	bl	800326c <HAL_GPIO_WritePin>
}
 801513c:	bf00      	nop
 801513e:	bd80      	pop	{r7, pc}
 8015140:	40020c00 	.word	0x40020c00

08015144 <LED2_B1_OFF>:

void LED2_B1_OFF(void)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8015148:	2200      	movs	r2, #0
 801514a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801514e:	4802      	ldr	r0, [pc, #8]	; (8015158 <LED2_B1_OFF+0x14>)
 8015150:	f7ee f88c 	bl	800326c <HAL_GPIO_WritePin>
}
 8015154:	bf00      	nop
 8015156:	bd80      	pop	{r7, pc}
 8015158:	40020c00 	.word	0x40020c00

0801515c <LED2_C1_ON>:

void LED2_C1_ON(void)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8015160:	2201      	movs	r2, #1
 8015162:	2104      	movs	r1, #4
 8015164:	4802      	ldr	r0, [pc, #8]	; (8015170 <LED2_C1_ON+0x14>)
 8015166:	f7ee f881 	bl	800326c <HAL_GPIO_WritePin>
}
 801516a:	bf00      	nop
 801516c:	bd80      	pop	{r7, pc}
 801516e:	bf00      	nop
 8015170:	40021800 	.word	0x40021800

08015174 <LED2_C1_OFF>:

void LED2_C1_OFF(void)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8015178:	2200      	movs	r2, #0
 801517a:	2104      	movs	r1, #4
 801517c:	4802      	ldr	r0, [pc, #8]	; (8015188 <LED2_C1_OFF+0x14>)
 801517e:	f7ee f875 	bl	800326c <HAL_GPIO_WritePin>
}
 8015182:	bf00      	nop
 8015184:	bd80      	pop	{r7, pc}
 8015186:	bf00      	nop
 8015188:	40021800 	.word	0x40021800

0801518c <LED2_D1_ON>:

void LED2_D1_ON(void)
{
 801518c:	b580      	push	{r7, lr}
 801518e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 8015190:	2201      	movs	r2, #1
 8015192:	2108      	movs	r1, #8
 8015194:	4802      	ldr	r0, [pc, #8]	; (80151a0 <LED2_D1_ON+0x14>)
 8015196:	f7ee f869 	bl	800326c <HAL_GPIO_WritePin>
}
 801519a:	bf00      	nop
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	40021800 	.word	0x40021800

080151a4 <LED2_D1_OFF>:

void LED2_D1_OFF(void)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 80151a8:	2200      	movs	r2, #0
 80151aa:	2108      	movs	r1, #8
 80151ac:	4802      	ldr	r0, [pc, #8]	; (80151b8 <LED2_D1_OFF+0x14>)
 80151ae:	f7ee f85d 	bl	800326c <HAL_GPIO_WritePin>
}
 80151b2:	bf00      	nop
 80151b4:	bd80      	pop	{r7, pc}
 80151b6:	bf00      	nop
 80151b8:	40021800 	.word	0x40021800

080151bc <LED2_E1_ON>:

void LED2_E1_ON(void)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 80151c0:	2201      	movs	r2, #1
 80151c2:	2110      	movs	r1, #16
 80151c4:	4802      	ldr	r0, [pc, #8]	; (80151d0 <LED2_E1_ON+0x14>)
 80151c6:	f7ee f851 	bl	800326c <HAL_GPIO_WritePin>
}
 80151ca:	bf00      	nop
 80151cc:	bd80      	pop	{r7, pc}
 80151ce:	bf00      	nop
 80151d0:	40021800 	.word	0x40021800

080151d4 <LED2_E1_OFF>:

void LED2_E1_OFF(void)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 80151d8:	2200      	movs	r2, #0
 80151da:	2110      	movs	r1, #16
 80151dc:	4802      	ldr	r0, [pc, #8]	; (80151e8 <LED2_E1_OFF+0x14>)
 80151de:	f7ee f845 	bl	800326c <HAL_GPIO_WritePin>
}
 80151e2:	bf00      	nop
 80151e4:	bd80      	pop	{r7, pc}
 80151e6:	bf00      	nop
 80151e8:	40021800 	.word	0x40021800

080151ec <LED2_F1_ON>:

void LED2_F1_ON(void)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 80151f0:	2201      	movs	r2, #1
 80151f2:	2120      	movs	r1, #32
 80151f4:	4802      	ldr	r0, [pc, #8]	; (8015200 <LED2_F1_ON+0x14>)
 80151f6:	f7ee f839 	bl	800326c <HAL_GPIO_WritePin>
}
 80151fa:	bf00      	nop
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	40021800 	.word	0x40021800

08015204 <LED2_F1_OFF>:

void LED2_F1_OFF(void)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8015208:	2200      	movs	r2, #0
 801520a:	2120      	movs	r1, #32
 801520c:	4802      	ldr	r0, [pc, #8]	; (8015218 <LED2_F1_OFF+0x14>)
 801520e:	f7ee f82d 	bl	800326c <HAL_GPIO_WritePin>
}
 8015212:	bf00      	nop
 8015214:	bd80      	pop	{r7, pc}
 8015216:	bf00      	nop
 8015218:	40021800 	.word	0x40021800

0801521c <LED2_G1_ON>:

void LED2_G1_ON(void)
{
 801521c:	b580      	push	{r7, lr}
 801521e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8015220:	2201      	movs	r2, #1
 8015222:	2140      	movs	r1, #64	; 0x40
 8015224:	4802      	ldr	r0, [pc, #8]	; (8015230 <LED2_G1_ON+0x14>)
 8015226:	f7ee f821 	bl	800326c <HAL_GPIO_WritePin>
}
 801522a:	bf00      	nop
 801522c:	bd80      	pop	{r7, pc}
 801522e:	bf00      	nop
 8015230:	40021800 	.word	0x40021800

08015234 <LED2_G1_OFF>:

void LED2_G1_OFF(void)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8015238:	2200      	movs	r2, #0
 801523a:	2140      	movs	r1, #64	; 0x40
 801523c:	4802      	ldr	r0, [pc, #8]	; (8015248 <LED2_G1_OFF+0x14>)
 801523e:	f7ee f815 	bl	800326c <HAL_GPIO_WritePin>
}
 8015242:	bf00      	nop
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	40021800 	.word	0x40021800

0801524c <dig1_set_0>:
//---------------------------------------------------------


//----Управление первой цифрой-----------------------------
void dig1_set_0(void)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8015250:	f7ff fd5c 	bl	8014d0c <LED1_A2_ON>
	LED1_B2_ON();
 8015254:	f7ff fd72 	bl	8014d3c <LED1_B2_ON>
	LED1_C2_ON();
 8015258:	f7ff fd88 	bl	8014d6c <LED1_C2_ON>
	LED1_D2_ON();
 801525c:	f7ff fd9e 	bl	8014d9c <LED1_D2_ON>
	LED1_E2_ON();
 8015260:	f7ff fdb4 	bl	8014dcc <LED1_E2_ON>
	LED1_F2_ON();
 8015264:	f7ff fdca 	bl	8014dfc <LED1_F2_ON>
	LED1_G2_OFF();
 8015268:	f7ff fdec 	bl	8014e44 <LED1_G2_OFF>
}
 801526c:	bf00      	nop
 801526e:	bd80      	pop	{r7, pc}

08015270 <dig1_set_1>:

void dig1_set_1(void)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 8015274:	f7ff fd56 	bl	8014d24 <LED1_A2_OFF>
	LED1_B2_OFF();
 8015278:	f7ff fd6c 	bl	8014d54 <LED1_B2_OFF>
	LED1_C2_OFF();
 801527c:	f7ff fd82 	bl	8014d84 <LED1_C2_OFF>
	LED1_D2_OFF();
 8015280:	f7ff fd98 	bl	8014db4 <LED1_D2_OFF>
	LED1_E2_ON();
 8015284:	f7ff fda2 	bl	8014dcc <LED1_E2_ON>
	LED1_F2_ON();
 8015288:	f7ff fdb8 	bl	8014dfc <LED1_F2_ON>
	LED1_G2_OFF();
 801528c:	f7ff fdda 	bl	8014e44 <LED1_G2_OFF>
}
 8015290:	bf00      	nop
 8015292:	bd80      	pop	{r7, pc}

08015294 <dig1_set_2>:

void dig1_set_2(void)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8015298:	f7ff fd38 	bl	8014d0c <LED1_A2_ON>
	LED1_B2_ON();
 801529c:	f7ff fd4e 	bl	8014d3c <LED1_B2_ON>
	LED1_C2_OFF();
 80152a0:	f7ff fd70 	bl	8014d84 <LED1_C2_OFF>
	LED1_D2_ON();
 80152a4:	f7ff fd7a 	bl	8014d9c <LED1_D2_ON>
	LED1_E2_ON();
 80152a8:	f7ff fd90 	bl	8014dcc <LED1_E2_ON>
	LED1_F2_OFF();
 80152ac:	f7ff fdb2 	bl	8014e14 <LED1_F2_OFF>
	LED1_G2_ON();
 80152b0:	f7ff fdbc 	bl	8014e2c <LED1_G2_ON>
}
 80152b4:	bf00      	nop
 80152b6:	bd80      	pop	{r7, pc}

080152b8 <dig1_set_3>:

void dig1_set_3(void)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 80152bc:	f7ff fd26 	bl	8014d0c <LED1_A2_ON>
	LED1_B2_OFF();
 80152c0:	f7ff fd48 	bl	8014d54 <LED1_B2_OFF>
	LED1_C2_OFF();
 80152c4:	f7ff fd5e 	bl	8014d84 <LED1_C2_OFF>
	LED1_D2_ON();
 80152c8:	f7ff fd68 	bl	8014d9c <LED1_D2_ON>
	LED1_E2_ON();
 80152cc:	f7ff fd7e 	bl	8014dcc <LED1_E2_ON>
	LED1_F2_ON();
 80152d0:	f7ff fd94 	bl	8014dfc <LED1_F2_ON>
	LED1_G2_ON();
 80152d4:	f7ff fdaa 	bl	8014e2c <LED1_G2_ON>
}
 80152d8:	bf00      	nop
 80152da:	bd80      	pop	{r7, pc}

080152dc <dig1_set_4>:

void dig1_set_4(void)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 80152e0:	f7ff fd20 	bl	8014d24 <LED1_A2_OFF>
	LED1_B2_OFF();
 80152e4:	f7ff fd36 	bl	8014d54 <LED1_B2_OFF>
	LED1_C2_ON();
 80152e8:	f7ff fd40 	bl	8014d6c <LED1_C2_ON>
	LED1_D2_OFF();
 80152ec:	f7ff fd62 	bl	8014db4 <LED1_D2_OFF>
	LED1_E2_ON();
 80152f0:	f7ff fd6c 	bl	8014dcc <LED1_E2_ON>
	LED1_F2_ON();
 80152f4:	f7ff fd82 	bl	8014dfc <LED1_F2_ON>
	LED1_G2_ON();
 80152f8:	f7ff fd98 	bl	8014e2c <LED1_G2_ON>
}
 80152fc:	bf00      	nop
 80152fe:	bd80      	pop	{r7, pc}

08015300 <dig1_set_5>:

void dig1_set_5(void)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8015304:	f7ff fd02 	bl	8014d0c <LED1_A2_ON>
	LED1_B2_OFF();
 8015308:	f7ff fd24 	bl	8014d54 <LED1_B2_OFF>
	LED1_C2_ON();
 801530c:	f7ff fd2e 	bl	8014d6c <LED1_C2_ON>
	LED1_D2_ON();
 8015310:	f7ff fd44 	bl	8014d9c <LED1_D2_ON>
	LED1_E2_OFF();
 8015314:	f7ff fd66 	bl	8014de4 <LED1_E2_OFF>
	LED1_F2_ON();
 8015318:	f7ff fd70 	bl	8014dfc <LED1_F2_ON>
	LED1_G2_ON();
 801531c:	f7ff fd86 	bl	8014e2c <LED1_G2_ON>
}
 8015320:	bf00      	nop
 8015322:	bd80      	pop	{r7, pc}

08015324 <dig1_set_6>:

void dig1_set_6(void)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8015328:	f7ff fcf0 	bl	8014d0c <LED1_A2_ON>
	LED1_B2_ON();
 801532c:	f7ff fd06 	bl	8014d3c <LED1_B2_ON>
	LED1_C2_ON();
 8015330:	f7ff fd1c 	bl	8014d6c <LED1_C2_ON>
	LED1_D2_ON();
 8015334:	f7ff fd32 	bl	8014d9c <LED1_D2_ON>
	LED1_E2_OFF();
 8015338:	f7ff fd54 	bl	8014de4 <LED1_E2_OFF>
	LED1_F2_ON();
 801533c:	f7ff fd5e 	bl	8014dfc <LED1_F2_ON>
	LED1_G2_ON();
 8015340:	f7ff fd74 	bl	8014e2c <LED1_G2_ON>
}
 8015344:	bf00      	nop
 8015346:	bd80      	pop	{r7, pc}

08015348 <dig1_set_7>:

void dig1_set_7(void)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	af00      	add	r7, sp, #0
	LED1_A2_OFF();
 801534c:	f7ff fcea 	bl	8014d24 <LED1_A2_OFF>
	LED1_B2_OFF();
 8015350:	f7ff fd00 	bl	8014d54 <LED1_B2_OFF>
	LED1_C2_OFF();
 8015354:	f7ff fd16 	bl	8014d84 <LED1_C2_OFF>
	LED1_D2_ON();
 8015358:	f7ff fd20 	bl	8014d9c <LED1_D2_ON>
	LED1_E2_ON();
 801535c:	f7ff fd36 	bl	8014dcc <LED1_E2_ON>
	LED1_F2_ON();
 8015360:	f7ff fd4c 	bl	8014dfc <LED1_F2_ON>
	LED1_G2_OFF();
 8015364:	f7ff fd6e 	bl	8014e44 <LED1_G2_OFF>
}
 8015368:	bf00      	nop
 801536a:	bd80      	pop	{r7, pc}

0801536c <dig1_set_8>:

void dig1_set_8(void)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8015370:	f7ff fccc 	bl	8014d0c <LED1_A2_ON>
	LED1_B2_ON();
 8015374:	f7ff fce2 	bl	8014d3c <LED1_B2_ON>
	LED1_C2_ON();
 8015378:	f7ff fcf8 	bl	8014d6c <LED1_C2_ON>
	LED1_D2_ON();
 801537c:	f7ff fd0e 	bl	8014d9c <LED1_D2_ON>
	LED1_E2_ON();
 8015380:	f7ff fd24 	bl	8014dcc <LED1_E2_ON>
	LED1_F2_ON();
 8015384:	f7ff fd3a 	bl	8014dfc <LED1_F2_ON>
	LED1_G2_ON();
 8015388:	f7ff fd50 	bl	8014e2c <LED1_G2_ON>
}
 801538c:	bf00      	nop
 801538e:	bd80      	pop	{r7, pc}

08015390 <dig1_set_9>:

void dig1_set_9(void)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	af00      	add	r7, sp, #0
	LED1_A2_ON();
 8015394:	f7ff fcba 	bl	8014d0c <LED1_A2_ON>
	LED1_B2_OFF();
 8015398:	f7ff fcdc 	bl	8014d54 <LED1_B2_OFF>
	LED1_C2_ON();
 801539c:	f7ff fce6 	bl	8014d6c <LED1_C2_ON>
	LED1_D2_ON();
 80153a0:	f7ff fcfc 	bl	8014d9c <LED1_D2_ON>
	LED1_E2_ON();
 80153a4:	f7ff fd12 	bl	8014dcc <LED1_E2_ON>
	LED1_F2_ON();
 80153a8:	f7ff fd28 	bl	8014dfc <LED1_F2_ON>
	LED1_G2_ON();
 80153ac:	f7ff fd3e 	bl	8014e2c <LED1_G2_ON>
}
 80153b0:	bf00      	nop
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <dig2_set_0>:
//-----------------------------------------------------------


//----Управление второй цифрой-----------------------------
void dig2_set_0(void)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 80153b8:	f7ff fd50 	bl	8014e5c <LED1_A1_ON>
	LED1_B1_ON();
 80153bc:	f7ff fd66 	bl	8014e8c <LED1_B1_ON>
	LED1_C1_ON();
 80153c0:	f7ff fd7c 	bl	8014ebc <LED1_C1_ON>
	LED1_D1_ON();
 80153c4:	f7ff fd92 	bl	8014eec <LED1_D1_ON>
	LED1_E1_ON();
 80153c8:	f7ff fda8 	bl	8014f1c <LED1_E1_ON>
	LED1_F1_ON();
 80153cc:	f7ff fdbe 	bl	8014f4c <LED1_F1_ON>
	LED1_G1_OFF();
 80153d0:	f7ff fde0 	bl	8014f94 <LED1_G1_OFF>
}
 80153d4:	bf00      	nop
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <dig2_set_1>:

void dig2_set_1(void)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	af00      	add	r7, sp, #0
	LED1_A1_OFF();
 80153dc:	f7ff fd4a 	bl	8014e74 <LED1_A1_OFF>
	LED1_B1_OFF();
 80153e0:	f7ff fd60 	bl	8014ea4 <LED1_B1_OFF>
	LED1_C1_OFF();
 80153e4:	f7ff fd76 	bl	8014ed4 <LED1_C1_OFF>
	LED1_D1_OFF();
 80153e8:	f7ff fd8c 	bl	8014f04 <LED1_D1_OFF>
	LED1_E1_ON();
 80153ec:	f7ff fd96 	bl	8014f1c <LED1_E1_ON>
	LED1_F1_ON();
 80153f0:	f7ff fdac 	bl	8014f4c <LED1_F1_ON>
	LED1_G1_OFF();
 80153f4:	f7ff fdce 	bl	8014f94 <LED1_G1_OFF>
}
 80153f8:	bf00      	nop
 80153fa:	bd80      	pop	{r7, pc}

080153fc <dig2_set_2>:

void dig2_set_2(void)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 8015400:	f7ff fd2c 	bl	8014e5c <LED1_A1_ON>
	LED1_B1_ON();
 8015404:	f7ff fd42 	bl	8014e8c <LED1_B1_ON>
	LED1_C1_OFF();
 8015408:	f7ff fd64 	bl	8014ed4 <LED1_C1_OFF>
	LED1_D1_ON();
 801540c:	f7ff fd6e 	bl	8014eec <LED1_D1_ON>
	LED1_E1_ON();
 8015410:	f7ff fd84 	bl	8014f1c <LED1_E1_ON>
	LED1_F1_OFF();
 8015414:	f7ff fda6 	bl	8014f64 <LED1_F1_OFF>
	LED1_G1_ON();
 8015418:	f7ff fdb0 	bl	8014f7c <LED1_G1_ON>
}
 801541c:	bf00      	nop
 801541e:	bd80      	pop	{r7, pc}

08015420 <dig2_set_3>:

void dig2_set_3(void)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 8015424:	f7ff fd1a 	bl	8014e5c <LED1_A1_ON>
	LED1_B1_OFF();
 8015428:	f7ff fd3c 	bl	8014ea4 <LED1_B1_OFF>
	LED1_C1_OFF();
 801542c:	f7ff fd52 	bl	8014ed4 <LED1_C1_OFF>
	LED1_D1_ON();
 8015430:	f7ff fd5c 	bl	8014eec <LED1_D1_ON>
	LED1_E1_ON();
 8015434:	f7ff fd72 	bl	8014f1c <LED1_E1_ON>
	LED1_F1_ON();
 8015438:	f7ff fd88 	bl	8014f4c <LED1_F1_ON>
	LED1_G1_ON();
 801543c:	f7ff fd9e 	bl	8014f7c <LED1_G1_ON>
}
 8015440:	bf00      	nop
 8015442:	bd80      	pop	{r7, pc}

08015444 <dig2_set_4>:

void dig2_set_4(void)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	af00      	add	r7, sp, #0
	LED1_A1_OFF();
 8015448:	f7ff fd14 	bl	8014e74 <LED1_A1_OFF>
	LED1_B1_OFF();
 801544c:	f7ff fd2a 	bl	8014ea4 <LED1_B1_OFF>
	LED1_C1_ON();
 8015450:	f7ff fd34 	bl	8014ebc <LED1_C1_ON>
	LED1_D1_OFF();
 8015454:	f7ff fd56 	bl	8014f04 <LED1_D1_OFF>
	LED1_E1_ON();
 8015458:	f7ff fd60 	bl	8014f1c <LED1_E1_ON>
	LED1_F1_ON();
 801545c:	f7ff fd76 	bl	8014f4c <LED1_F1_ON>
	LED1_G1_ON();
 8015460:	f7ff fd8c 	bl	8014f7c <LED1_G1_ON>
}
 8015464:	bf00      	nop
 8015466:	bd80      	pop	{r7, pc}

08015468 <dig2_set_5>:

void dig2_set_5(void)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 801546c:	f7ff fcf6 	bl	8014e5c <LED1_A1_ON>
	LED1_B1_OFF();
 8015470:	f7ff fd18 	bl	8014ea4 <LED1_B1_OFF>
	LED1_C1_ON();
 8015474:	f7ff fd22 	bl	8014ebc <LED1_C1_ON>
	LED1_D1_ON();
 8015478:	f7ff fd38 	bl	8014eec <LED1_D1_ON>
	LED1_E1_OFF();
 801547c:	f7ff fd5a 	bl	8014f34 <LED1_E1_OFF>
	LED1_F1_ON();
 8015480:	f7ff fd64 	bl	8014f4c <LED1_F1_ON>
	LED1_G1_ON();
 8015484:	f7ff fd7a 	bl	8014f7c <LED1_G1_ON>
}
 8015488:	bf00      	nop
 801548a:	bd80      	pop	{r7, pc}

0801548c <dig2_set_6>:

void dig2_set_6(void)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 8015490:	f7ff fce4 	bl	8014e5c <LED1_A1_ON>
	LED1_B1_ON();
 8015494:	f7ff fcfa 	bl	8014e8c <LED1_B1_ON>
	LED1_C1_ON();
 8015498:	f7ff fd10 	bl	8014ebc <LED1_C1_ON>
	LED1_D1_ON();
 801549c:	f7ff fd26 	bl	8014eec <LED1_D1_ON>
	LED1_E1_OFF();
 80154a0:	f7ff fd48 	bl	8014f34 <LED1_E1_OFF>
	LED1_F1_ON();
 80154a4:	f7ff fd52 	bl	8014f4c <LED1_F1_ON>
	LED1_G1_ON();
 80154a8:	f7ff fd68 	bl	8014f7c <LED1_G1_ON>
}
 80154ac:	bf00      	nop
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <dig2_set_7>:

void dig2_set_7(void)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	af00      	add	r7, sp, #0
	LED1_A1_OFF();
 80154b4:	f7ff fcde 	bl	8014e74 <LED1_A1_OFF>
	LED1_B1_OFF();
 80154b8:	f7ff fcf4 	bl	8014ea4 <LED1_B1_OFF>
	LED1_C1_OFF();
 80154bc:	f7ff fd0a 	bl	8014ed4 <LED1_C1_OFF>
	LED1_D1_ON();
 80154c0:	f7ff fd14 	bl	8014eec <LED1_D1_ON>
	LED1_E1_ON();
 80154c4:	f7ff fd2a 	bl	8014f1c <LED1_E1_ON>
	LED1_F1_ON();
 80154c8:	f7ff fd40 	bl	8014f4c <LED1_F1_ON>
	LED1_G1_OFF();
 80154cc:	f7ff fd62 	bl	8014f94 <LED1_G1_OFF>
}
 80154d0:	bf00      	nop
 80154d2:	bd80      	pop	{r7, pc}

080154d4 <dig2_set_8>:

void dig2_set_8(void)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 80154d8:	f7ff fcc0 	bl	8014e5c <LED1_A1_ON>
	LED1_B1_ON();
 80154dc:	f7ff fcd6 	bl	8014e8c <LED1_B1_ON>
	LED1_C1_ON();
 80154e0:	f7ff fcec 	bl	8014ebc <LED1_C1_ON>
	LED1_D1_ON();
 80154e4:	f7ff fd02 	bl	8014eec <LED1_D1_ON>
	LED1_E1_ON();
 80154e8:	f7ff fd18 	bl	8014f1c <LED1_E1_ON>
	LED1_F1_ON();
 80154ec:	f7ff fd2e 	bl	8014f4c <LED1_F1_ON>
	LED1_G1_ON();
 80154f0:	f7ff fd44 	bl	8014f7c <LED1_G1_ON>
}
 80154f4:	bf00      	nop
 80154f6:	bd80      	pop	{r7, pc}

080154f8 <dig2_set_9>:

void dig2_set_9(void)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	af00      	add	r7, sp, #0
	LED1_A1_ON();
 80154fc:	f7ff fcae 	bl	8014e5c <LED1_A1_ON>
	LED1_B1_OFF();
 8015500:	f7ff fcd0 	bl	8014ea4 <LED1_B1_OFF>
	LED1_C1_ON();
 8015504:	f7ff fcda 	bl	8014ebc <LED1_C1_ON>
	LED1_D1_ON();
 8015508:	f7ff fcf0 	bl	8014eec <LED1_D1_ON>
	LED1_E1_ON();
 801550c:	f7ff fd06 	bl	8014f1c <LED1_E1_ON>
	LED1_F1_ON();
 8015510:	f7ff fd1c 	bl	8014f4c <LED1_F1_ON>
	LED1_G1_ON();
 8015514:	f7ff fd32 	bl	8014f7c <LED1_G1_ON>
}
 8015518:	bf00      	nop
 801551a:	bd80      	pop	{r7, pc}

0801551c <dig3_set_0>:
//-----------------------------------------------------------

//----Управление третьей цифрой-----------------------------
void dig3_set_0(void)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 8015520:	f7ff fd44 	bl	8014fac <LED2_A2_ON>
	LED2_B2_ON();
 8015524:	f7ff fd5a 	bl	8014fdc <LED2_B2_ON>
	LED2_C2_ON();
 8015528:	f7ff fd70 	bl	801500c <LED2_C2_ON>
	LED2_D2_ON();
 801552c:	f7ff fd86 	bl	801503c <LED2_D2_ON>
	LED2_E2_ON();
 8015530:	f7ff fd9c 	bl	801506c <LED2_E2_ON>
	LED2_F2_ON();
 8015534:	f7ff fdb2 	bl	801509c <LED2_F2_ON>
	LED2_G2_OFF();
 8015538:	f7ff fdd4 	bl	80150e4 <LED2_G2_OFF>
}
 801553c:	bf00      	nop
 801553e:	bd80      	pop	{r7, pc}

08015540 <dig3_set_1>:

void dig3_set_1(void)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	af00      	add	r7, sp, #0
	LED2_A2_OFF();
 8015544:	f7ff fd3e 	bl	8014fc4 <LED2_A2_OFF>
	LED2_B2_OFF();
 8015548:	f7ff fd54 	bl	8014ff4 <LED2_B2_OFF>
	LED2_C2_OFF();
 801554c:	f7ff fd6a 	bl	8015024 <LED2_C2_OFF>
	LED2_D2_OFF();
 8015550:	f7ff fd80 	bl	8015054 <LED2_D2_OFF>
	LED2_E2_ON();
 8015554:	f7ff fd8a 	bl	801506c <LED2_E2_ON>
	LED2_F2_ON();
 8015558:	f7ff fda0 	bl	801509c <LED2_F2_ON>
	LED2_G2_OFF();
 801555c:	f7ff fdc2 	bl	80150e4 <LED2_G2_OFF>
}
 8015560:	bf00      	nop
 8015562:	bd80      	pop	{r7, pc}

08015564 <dig3_set_2>:

void dig3_set_2(void)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 8015568:	f7ff fd20 	bl	8014fac <LED2_A2_ON>
	LED2_B2_ON();
 801556c:	f7ff fd36 	bl	8014fdc <LED2_B2_ON>
	LED2_C2_OFF();
 8015570:	f7ff fd58 	bl	8015024 <LED2_C2_OFF>
	LED2_D2_ON();
 8015574:	f7ff fd62 	bl	801503c <LED2_D2_ON>
	LED2_E2_ON();
 8015578:	f7ff fd78 	bl	801506c <LED2_E2_ON>
	LED2_F2_OFF();
 801557c:	f7ff fd9a 	bl	80150b4 <LED2_F2_OFF>
	LED2_G2_ON();
 8015580:	f7ff fda4 	bl	80150cc <LED2_G2_ON>
}
 8015584:	bf00      	nop
 8015586:	bd80      	pop	{r7, pc}

08015588 <dig3_set_3>:

void dig3_set_3(void)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 801558c:	f7ff fd0e 	bl	8014fac <LED2_A2_ON>
	LED2_B2_OFF();
 8015590:	f7ff fd30 	bl	8014ff4 <LED2_B2_OFF>
	LED2_C2_OFF();
 8015594:	f7ff fd46 	bl	8015024 <LED2_C2_OFF>
	LED2_D2_ON();
 8015598:	f7ff fd50 	bl	801503c <LED2_D2_ON>
	LED2_E2_ON();
 801559c:	f7ff fd66 	bl	801506c <LED2_E2_ON>
	LED2_F2_ON();
 80155a0:	f7ff fd7c 	bl	801509c <LED2_F2_ON>
	LED2_G2_ON();
 80155a4:	f7ff fd92 	bl	80150cc <LED2_G2_ON>
}
 80155a8:	bf00      	nop
 80155aa:	bd80      	pop	{r7, pc}

080155ac <dig3_set_4>:

void dig3_set_4(void)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	af00      	add	r7, sp, #0
	LED2_A2_OFF();
 80155b0:	f7ff fd08 	bl	8014fc4 <LED2_A2_OFF>
	LED2_B2_OFF();
 80155b4:	f7ff fd1e 	bl	8014ff4 <LED2_B2_OFF>
	LED2_C2_ON();
 80155b8:	f7ff fd28 	bl	801500c <LED2_C2_ON>
	LED2_D2_OFF();
 80155bc:	f7ff fd4a 	bl	8015054 <LED2_D2_OFF>
	LED2_E2_ON();
 80155c0:	f7ff fd54 	bl	801506c <LED2_E2_ON>
	LED2_F2_ON();
 80155c4:	f7ff fd6a 	bl	801509c <LED2_F2_ON>
	LED2_G2_ON();
 80155c8:	f7ff fd80 	bl	80150cc <LED2_G2_ON>
}
 80155cc:	bf00      	nop
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <dig3_set_5>:

void dig3_set_5(void)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 80155d4:	f7ff fcea 	bl	8014fac <LED2_A2_ON>
	LED2_B2_OFF();
 80155d8:	f7ff fd0c 	bl	8014ff4 <LED2_B2_OFF>
	LED2_C2_ON();
 80155dc:	f7ff fd16 	bl	801500c <LED2_C2_ON>
	LED2_D2_ON();
 80155e0:	f7ff fd2c 	bl	801503c <LED2_D2_ON>
	LED2_E2_OFF();
 80155e4:	f7ff fd4e 	bl	8015084 <LED2_E2_OFF>
	LED2_F2_ON();
 80155e8:	f7ff fd58 	bl	801509c <LED2_F2_ON>
	LED2_G2_ON();
 80155ec:	f7ff fd6e 	bl	80150cc <LED2_G2_ON>
}
 80155f0:	bf00      	nop
 80155f2:	bd80      	pop	{r7, pc}

080155f4 <dig3_set_6>:

void dig3_set_6(void)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 80155f8:	f7ff fcd8 	bl	8014fac <LED2_A2_ON>
	LED2_B2_ON();
 80155fc:	f7ff fcee 	bl	8014fdc <LED2_B2_ON>
	LED2_C2_ON();
 8015600:	f7ff fd04 	bl	801500c <LED2_C2_ON>
	LED2_D2_ON();
 8015604:	f7ff fd1a 	bl	801503c <LED2_D2_ON>
	LED2_E2_OFF();
 8015608:	f7ff fd3c 	bl	8015084 <LED2_E2_OFF>
	LED2_F2_ON();
 801560c:	f7ff fd46 	bl	801509c <LED2_F2_ON>
	LED2_G2_ON();
 8015610:	f7ff fd5c 	bl	80150cc <LED2_G2_ON>
}
 8015614:	bf00      	nop
 8015616:	bd80      	pop	{r7, pc}

08015618 <dig3_set_7>:

void dig3_set_7(void)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	af00      	add	r7, sp, #0
	LED2_A2_OFF();
 801561c:	f7ff fcd2 	bl	8014fc4 <LED2_A2_OFF>
	LED2_B2_OFF();
 8015620:	f7ff fce8 	bl	8014ff4 <LED2_B2_OFF>
	LED2_C2_OFF();
 8015624:	f7ff fcfe 	bl	8015024 <LED2_C2_OFF>
	LED2_D2_ON();
 8015628:	f7ff fd08 	bl	801503c <LED2_D2_ON>
	LED2_E2_ON();
 801562c:	f7ff fd1e 	bl	801506c <LED2_E2_ON>
	LED2_F2_ON();
 8015630:	f7ff fd34 	bl	801509c <LED2_F2_ON>
	LED2_G2_OFF();
 8015634:	f7ff fd56 	bl	80150e4 <LED2_G2_OFF>
}
 8015638:	bf00      	nop
 801563a:	bd80      	pop	{r7, pc}

0801563c <dig3_set_8>:

void dig3_set_8(void)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 8015640:	f7ff fcb4 	bl	8014fac <LED2_A2_ON>
	LED2_B2_ON();
 8015644:	f7ff fcca 	bl	8014fdc <LED2_B2_ON>
	LED2_C2_ON();
 8015648:	f7ff fce0 	bl	801500c <LED2_C2_ON>
	LED2_D2_ON();
 801564c:	f7ff fcf6 	bl	801503c <LED2_D2_ON>
	LED2_E2_ON();
 8015650:	f7ff fd0c 	bl	801506c <LED2_E2_ON>
	LED2_F2_ON();
 8015654:	f7ff fd22 	bl	801509c <LED2_F2_ON>
	LED2_G2_ON();
 8015658:	f7ff fd38 	bl	80150cc <LED2_G2_ON>
}
 801565c:	bf00      	nop
 801565e:	bd80      	pop	{r7, pc}

08015660 <dig3_set_9>:

void dig3_set_9(void)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	af00      	add	r7, sp, #0
	LED2_A2_ON();
 8015664:	f7ff fca2 	bl	8014fac <LED2_A2_ON>
	LED2_B2_OFF();
 8015668:	f7ff fcc4 	bl	8014ff4 <LED2_B2_OFF>
	LED2_C2_ON();
 801566c:	f7ff fcce 	bl	801500c <LED2_C2_ON>
	LED2_D2_ON();
 8015670:	f7ff fce4 	bl	801503c <LED2_D2_ON>
	LED2_E2_ON();
 8015674:	f7ff fcfa 	bl	801506c <LED2_E2_ON>
	LED2_F2_ON();
 8015678:	f7ff fd10 	bl	801509c <LED2_F2_ON>
	LED2_G2_ON();
 801567c:	f7ff fd26 	bl	80150cc <LED2_G2_ON>
}
 8015680:	bf00      	nop
 8015682:	bd80      	pop	{r7, pc}

08015684 <dig4_set_0>:
//-----------------------------------------------------------

//----Управление четвертой цифрой-----------------------------
void dig4_set_0(void)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 8015688:	f7ff fd38 	bl	80150fc <LED2_A1_ON>
	LED2_B1_ON();
 801568c:	f7ff fd4e 	bl	801512c <LED2_B1_ON>
	LED2_C1_ON();
 8015690:	f7ff fd64 	bl	801515c <LED2_C1_ON>
	LED2_D1_ON();
 8015694:	f7ff fd7a 	bl	801518c <LED2_D1_ON>
	LED2_E1_ON();
 8015698:	f7ff fd90 	bl	80151bc <LED2_E1_ON>
	LED2_F1_ON();
 801569c:	f7ff fda6 	bl	80151ec <LED2_F1_ON>
	LED2_G1_OFF();
 80156a0:	f7ff fdc8 	bl	8015234 <LED2_G1_OFF>
}
 80156a4:	bf00      	nop
 80156a6:	bd80      	pop	{r7, pc}

080156a8 <dig4_set_1>:

void dig4_set_1(void)
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	af00      	add	r7, sp, #0
	LED2_A1_OFF();
 80156ac:	f7ff fd32 	bl	8015114 <LED2_A1_OFF>
	LED2_B1_OFF();
 80156b0:	f7ff fd48 	bl	8015144 <LED2_B1_OFF>
	LED2_C1_OFF();
 80156b4:	f7ff fd5e 	bl	8015174 <LED2_C1_OFF>
	LED2_D1_OFF();
 80156b8:	f7ff fd74 	bl	80151a4 <LED2_D1_OFF>
	LED2_E1_ON();
 80156bc:	f7ff fd7e 	bl	80151bc <LED2_E1_ON>
	LED2_F1_ON();
 80156c0:	f7ff fd94 	bl	80151ec <LED2_F1_ON>
	LED2_G1_OFF();
 80156c4:	f7ff fdb6 	bl	8015234 <LED2_G1_OFF>
}
 80156c8:	bf00      	nop
 80156ca:	bd80      	pop	{r7, pc}

080156cc <dig4_set_2>:

void dig4_set_2(void)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 80156d0:	f7ff fd14 	bl	80150fc <LED2_A1_ON>
	LED2_B1_ON();
 80156d4:	f7ff fd2a 	bl	801512c <LED2_B1_ON>
	LED2_C1_OFF();
 80156d8:	f7ff fd4c 	bl	8015174 <LED2_C1_OFF>
	LED2_D1_ON();
 80156dc:	f7ff fd56 	bl	801518c <LED2_D1_ON>
	LED2_E1_ON();
 80156e0:	f7ff fd6c 	bl	80151bc <LED2_E1_ON>
	LED2_F1_OFF();
 80156e4:	f7ff fd8e 	bl	8015204 <LED2_F1_OFF>
	LED2_G1_ON();
 80156e8:	f7ff fd98 	bl	801521c <LED2_G1_ON>
}
 80156ec:	bf00      	nop
 80156ee:	bd80      	pop	{r7, pc}

080156f0 <dig4_set_3>:

void dig4_set_3(void)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 80156f4:	f7ff fd02 	bl	80150fc <LED2_A1_ON>
	LED2_B1_OFF();
 80156f8:	f7ff fd24 	bl	8015144 <LED2_B1_OFF>
	LED2_C1_OFF();
 80156fc:	f7ff fd3a 	bl	8015174 <LED2_C1_OFF>
	LED2_D1_ON();
 8015700:	f7ff fd44 	bl	801518c <LED2_D1_ON>
	LED2_E1_ON();
 8015704:	f7ff fd5a 	bl	80151bc <LED2_E1_ON>
	LED2_F1_ON();
 8015708:	f7ff fd70 	bl	80151ec <LED2_F1_ON>
	LED2_G1_ON();
 801570c:	f7ff fd86 	bl	801521c <LED2_G1_ON>
}
 8015710:	bf00      	nop
 8015712:	bd80      	pop	{r7, pc}

08015714 <dig4_set_4>:

void dig4_set_4(void)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	af00      	add	r7, sp, #0
	LED2_A1_OFF();
 8015718:	f7ff fcfc 	bl	8015114 <LED2_A1_OFF>
	LED2_B1_OFF();
 801571c:	f7ff fd12 	bl	8015144 <LED2_B1_OFF>
	LED2_C1_ON();
 8015720:	f7ff fd1c 	bl	801515c <LED2_C1_ON>
	LED2_D1_OFF();
 8015724:	f7ff fd3e 	bl	80151a4 <LED2_D1_OFF>
	LED2_E1_ON();
 8015728:	f7ff fd48 	bl	80151bc <LED2_E1_ON>
	LED2_F1_ON();
 801572c:	f7ff fd5e 	bl	80151ec <LED2_F1_ON>
	LED2_G1_ON();
 8015730:	f7ff fd74 	bl	801521c <LED2_G1_ON>
}
 8015734:	bf00      	nop
 8015736:	bd80      	pop	{r7, pc}

08015738 <dig4_set_5>:

void dig4_set_5(void)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 801573c:	f7ff fcde 	bl	80150fc <LED2_A1_ON>
	LED2_B1_OFF();
 8015740:	f7ff fd00 	bl	8015144 <LED2_B1_OFF>
	LED2_C1_ON();
 8015744:	f7ff fd0a 	bl	801515c <LED2_C1_ON>
	LED2_D1_ON();
 8015748:	f7ff fd20 	bl	801518c <LED2_D1_ON>
	LED2_E1_OFF();
 801574c:	f7ff fd42 	bl	80151d4 <LED2_E1_OFF>
	LED2_F1_ON();
 8015750:	f7ff fd4c 	bl	80151ec <LED2_F1_ON>
	LED2_G1_ON();
 8015754:	f7ff fd62 	bl	801521c <LED2_G1_ON>
}
 8015758:	bf00      	nop
 801575a:	bd80      	pop	{r7, pc}

0801575c <dig4_set_6>:

void dig4_set_6(void)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 8015760:	f7ff fccc 	bl	80150fc <LED2_A1_ON>
	LED2_B1_ON();
 8015764:	f7ff fce2 	bl	801512c <LED2_B1_ON>
	LED2_C1_ON();
 8015768:	f7ff fcf8 	bl	801515c <LED2_C1_ON>
	LED2_D1_ON();
 801576c:	f7ff fd0e 	bl	801518c <LED2_D1_ON>
	LED2_E1_OFF();
 8015770:	f7ff fd30 	bl	80151d4 <LED2_E1_OFF>
	LED2_F1_ON();
 8015774:	f7ff fd3a 	bl	80151ec <LED2_F1_ON>
	LED2_G1_ON();
 8015778:	f7ff fd50 	bl	801521c <LED2_G1_ON>
}
 801577c:	bf00      	nop
 801577e:	bd80      	pop	{r7, pc}

08015780 <dig4_set_7>:

void dig4_set_7(void)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	af00      	add	r7, sp, #0
	LED2_A1_OFF();
 8015784:	f7ff fcc6 	bl	8015114 <LED2_A1_OFF>
	LED2_B1_OFF();
 8015788:	f7ff fcdc 	bl	8015144 <LED2_B1_OFF>
	LED2_C1_OFF();
 801578c:	f7ff fcf2 	bl	8015174 <LED2_C1_OFF>
	LED2_D1_ON();
 8015790:	f7ff fcfc 	bl	801518c <LED2_D1_ON>
	LED2_E1_ON();
 8015794:	f7ff fd12 	bl	80151bc <LED2_E1_ON>
	LED2_F1_ON();
 8015798:	f7ff fd28 	bl	80151ec <LED2_F1_ON>
	LED2_G1_OFF();
 801579c:	f7ff fd4a 	bl	8015234 <LED2_G1_OFF>
}
 80157a0:	bf00      	nop
 80157a2:	bd80      	pop	{r7, pc}

080157a4 <dig4_set_8>:

void dig4_set_8(void)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 80157a8:	f7ff fca8 	bl	80150fc <LED2_A1_ON>
	LED2_B1_ON();
 80157ac:	f7ff fcbe 	bl	801512c <LED2_B1_ON>
	LED2_C1_ON();
 80157b0:	f7ff fcd4 	bl	801515c <LED2_C1_ON>
	LED2_D1_ON();
 80157b4:	f7ff fcea 	bl	801518c <LED2_D1_ON>
	LED2_E1_ON();
 80157b8:	f7ff fd00 	bl	80151bc <LED2_E1_ON>
	LED2_F1_ON();
 80157bc:	f7ff fd16 	bl	80151ec <LED2_F1_ON>
	LED2_G1_ON();
 80157c0:	f7ff fd2c 	bl	801521c <LED2_G1_ON>
}
 80157c4:	bf00      	nop
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <dig4_set_9>:

void dig4_set_9(void)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	af00      	add	r7, sp, #0
	LED2_A1_ON();
 80157cc:	f7ff fc96 	bl	80150fc <LED2_A1_ON>
	LED2_B1_OFF();
 80157d0:	f7ff fcb8 	bl	8015144 <LED2_B1_OFF>
	LED2_C1_ON();
 80157d4:	f7ff fcc2 	bl	801515c <LED2_C1_ON>
	LED2_D1_ON();
 80157d8:	f7ff fcd8 	bl	801518c <LED2_D1_ON>
	LED2_E1_ON();
 80157dc:	f7ff fcee 	bl	80151bc <LED2_E1_ON>
	LED2_F1_ON();
 80157e0:	f7ff fd04 	bl	80151ec <LED2_F1_ON>
	LED2_G1_ON();
 80157e4:	f7ff fd1a 	bl	801521c <LED2_G1_ON>
}
 80157e8:	bf00      	nop
 80157ea:	bd80      	pop	{r7, pc}

080157ec <fm25v02_read>:
	}
	return temp_id;
}

void fm25v02_read (uint16_t address, uint8_t* data)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	4603      	mov	r3, r0
 80157f4:	6039      	str	r1, [r7, #0]
 80157f6:	80fb      	strh	r3, [r7, #6]
	uint8_t data_out[3];
	data_out[0]= READ;
 80157f8:	2303      	movs	r3, #3
 80157fa:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 80157fc:	88fb      	ldrh	r3, [r7, #6]
 80157fe:	0a1b      	lsrs	r3, r3, #8
 8015800:	b29b      	uxth	r3, r3
 8015802:	b2db      	uxtb	r3, r3
 8015804:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 8015806:	88fb      	ldrh	r3, [r7, #6]
 8015808:	b2db      	uxtb	r3, r3
 801580a:	73bb      	strb	r3, [r7, #14]
	FM25V02_CS_ON();
 801580c:	2200      	movs	r2, #0
 801580e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015812:	4811      	ldr	r0, [pc, #68]	; (8015858 <fm25v02_read+0x6c>)
 8015814:	f7ed fd2a 	bl	800326c <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 3, 10) != HAL_OK ) {}
 8015818:	bf00      	nop
 801581a:	f107 010c 	add.w	r1, r7, #12
 801581e:	230a      	movs	r3, #10
 8015820:	2203      	movs	r2, #3
 8015822:	480e      	ldr	r0, [pc, #56]	; (801585c <fm25v02_read+0x70>)
 8015824:	f7ee fe8b 	bl	800453e <HAL_SPI_Transmit>
 8015828:	4603      	mov	r3, r0
 801582a:	2b00      	cmp	r3, #0
 801582c:	d1f5      	bne.n	801581a <fm25v02_read+0x2e>
	while( HAL_SPI_Receive(&hspi2, data, 1, 10) != HAL_OK ) {}
 801582e:	bf00      	nop
 8015830:	230a      	movs	r3, #10
 8015832:	2201      	movs	r2, #1
 8015834:	6839      	ldr	r1, [r7, #0]
 8015836:	4809      	ldr	r0, [pc, #36]	; (801585c <fm25v02_read+0x70>)
 8015838:	f7ee ffbd 	bl	80047b6 <HAL_SPI_Receive>
 801583c:	4603      	mov	r3, r0
 801583e:	2b00      	cmp	r3, #0
 8015840:	d1f6      	bne.n	8015830 <fm25v02_read+0x44>
	FM25V02_CS_OFF();
 8015842:	2201      	movs	r2, #1
 8015844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015848:	4803      	ldr	r0, [pc, #12]	; (8015858 <fm25v02_read+0x6c>)
 801584a:	f7ed fd0f 	bl	800326c <HAL_GPIO_WritePin>
}
 801584e:	bf00      	nop
 8015850:	3710      	adds	r7, #16
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	40021c00 	.word	0x40021c00
 801585c:	2000817c 	.word	0x2000817c

08015860 <fm25v02_write>:

void fm25v02_write (uint16_t address, uint8_t data)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b084      	sub	sp, #16
 8015864:	af00      	add	r7, sp, #0
 8015866:	4603      	mov	r3, r0
 8015868:	460a      	mov	r2, r1
 801586a:	80fb      	strh	r3, [r7, #6]
 801586c:	4613      	mov	r3, r2
 801586e:	717b      	strb	r3, [r7, #5]
	uint8_t data_out[4];
	data_out[0]= WREN;
 8015870:	2306      	movs	r3, #6
 8015872:	733b      	strb	r3, [r7, #12]
	FM25V02_CS_ON();
 8015874:	2200      	movs	r2, #0
 8015876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801587a:	481d      	ldr	r0, [pc, #116]	; (80158f0 <fm25v02_write+0x90>)
 801587c:	f7ed fcf6 	bl	800326c <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 1, 10) != HAL_OK ) {}
 8015880:	bf00      	nop
 8015882:	f107 010c 	add.w	r1, r7, #12
 8015886:	230a      	movs	r3, #10
 8015888:	2201      	movs	r2, #1
 801588a:	481a      	ldr	r0, [pc, #104]	; (80158f4 <fm25v02_write+0x94>)
 801588c:	f7ee fe57 	bl	800453e <HAL_SPI_Transmit>
 8015890:	4603      	mov	r3, r0
 8015892:	2b00      	cmp	r3, #0
 8015894:	d1f5      	bne.n	8015882 <fm25v02_write+0x22>
	FM25V02_CS_OFF();
 8015896:	2201      	movs	r2, #1
 8015898:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801589c:	4814      	ldr	r0, [pc, #80]	; (80158f0 <fm25v02_write+0x90>)
 801589e:	f7ed fce5 	bl	800326c <HAL_GPIO_WritePin>
	data_out[0]= WRITE;
 80158a2:	2302      	movs	r3, #2
 80158a4:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 80158a6:	88fb      	ldrh	r3, [r7, #6]
 80158a8:	0a1b      	lsrs	r3, r3, #8
 80158aa:	b29b      	uxth	r3, r3
 80158ac:	b2db      	uxtb	r3, r3
 80158ae:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 80158b0:	88fb      	ldrh	r3, [r7, #6]
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	73bb      	strb	r3, [r7, #14]
	data_out[3]= data;
 80158b6:	797b      	ldrb	r3, [r7, #5]
 80158b8:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 80158ba:	2200      	movs	r2, #0
 80158bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80158c0:	480b      	ldr	r0, [pc, #44]	; (80158f0 <fm25v02_write+0x90>)
 80158c2:	f7ed fcd3 	bl	800326c <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 80158c6:	bf00      	nop
 80158c8:	f107 010c 	add.w	r1, r7, #12
 80158cc:	230a      	movs	r3, #10
 80158ce:	2204      	movs	r2, #4
 80158d0:	4808      	ldr	r0, [pc, #32]	; (80158f4 <fm25v02_write+0x94>)
 80158d2:	f7ee fe34 	bl	800453e <HAL_SPI_Transmit>
 80158d6:	4603      	mov	r3, r0
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d1f5      	bne.n	80158c8 <fm25v02_write+0x68>
	FM25V02_CS_OFF();
 80158dc:	2201      	movs	r2, #1
 80158de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80158e2:	4803      	ldr	r0, [pc, #12]	; (80158f0 <fm25v02_write+0x90>)
 80158e4:	f7ed fcc2 	bl	800326c <HAL_GPIO_WritePin>
}
 80158e8:	bf00      	nop
 80158ea:	3710      	adds	r7, #16
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}
 80158f0:	40021c00 	.word	0x40021c00
 80158f4:	2000817c 	.word	0x2000817c

080158f8 <fm25v02_fast_write>:

uint8_t fm25v02_fast_write (uint16_t address, uint8_t* data, uint16_t Size)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b084      	sub	sp, #16
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	4603      	mov	r3, r0
 8015900:	6039      	str	r1, [r7, #0]
 8015902:	80fb      	strh	r3, [r7, #6]
 8015904:	4613      	mov	r3, r2
 8015906:	80bb      	strh	r3, [r7, #4]
	for(uint8_t i=0; i<Size; i++)
 8015908:	2300      	movs	r3, #0
 801590a:	73fb      	strb	r3, [r7, #15]
 801590c:	e00e      	b.n	801592c <fm25v02_fast_write+0x34>
	{
		fm25v02_write(address+i, *(data+i));
 801590e:	7bfb      	ldrb	r3, [r7, #15]
 8015910:	b29a      	uxth	r2, r3
 8015912:	88fb      	ldrh	r3, [r7, #6]
 8015914:	4413      	add	r3, r2
 8015916:	b298      	uxth	r0, r3
 8015918:	7bfb      	ldrb	r3, [r7, #15]
 801591a:	683a      	ldr	r2, [r7, #0]
 801591c:	4413      	add	r3, r2
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	4619      	mov	r1, r3
 8015922:	f7ff ff9d 	bl	8015860 <fm25v02_write>
	for(uint8_t i=0; i<Size; i++)
 8015926:	7bfb      	ldrb	r3, [r7, #15]
 8015928:	3301      	adds	r3, #1
 801592a:	73fb      	strb	r3, [r7, #15]
 801592c:	7bfb      	ldrb	r3, [r7, #15]
 801592e:	b29b      	uxth	r3, r3
 8015930:	88ba      	ldrh	r2, [r7, #4]
 8015932:	429a      	cmp	r2, r3
 8015934:	d8eb      	bhi.n	801590e <fm25v02_fast_write+0x16>
	}
	return 0;
 8015936:	2300      	movs	r3, #0
}
 8015938:	4618      	mov	r0, r3
 801593a:	3710      	adds	r7, #16
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}

08015940 <fm25v02_fast_read>:

HAL_StatusTypeDef fm25v02_fast_read (uint16_t address, uint8_t* data, uint16_t Size)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b084      	sub	sp, #16
 8015944:	af00      	add	r7, sp, #0
 8015946:	4603      	mov	r3, r0
 8015948:	6039      	str	r1, [r7, #0]
 801594a:	80fb      	strh	r3, [r7, #6]
 801594c:	4613      	mov	r3, r2
 801594e:	80bb      	strh	r3, [r7, #4]
	uint8_t data_out[4];
	data_out[0]= FSTRD;
 8015950:	230b      	movs	r3, #11
 8015952:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 8015954:	88fb      	ldrh	r3, [r7, #6]
 8015956:	0a1b      	lsrs	r3, r3, #8
 8015958:	b29b      	uxth	r3, r3
 801595a:	b2db      	uxtb	r3, r3
 801595c:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 801595e:	88fb      	ldrh	r3, [r7, #6]
 8015960:	b2db      	uxtb	r3, r3
 8015962:	73bb      	strb	r3, [r7, #14]
	data_out[3]= 0xFF;
 8015964:	23ff      	movs	r3, #255	; 0xff
 8015966:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 8015968:	2200      	movs	r2, #0
 801596a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801596e:	4811      	ldr	r0, [pc, #68]	; (80159b4 <fm25v02_fast_read+0x74>)
 8015970:	f7ed fc7c 	bl	800326c <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 8015974:	bf00      	nop
 8015976:	f107 010c 	add.w	r1, r7, #12
 801597a:	230a      	movs	r3, #10
 801597c:	2204      	movs	r2, #4
 801597e:	480e      	ldr	r0, [pc, #56]	; (80159b8 <fm25v02_fast_read+0x78>)
 8015980:	f7ee fddd 	bl	800453e <HAL_SPI_Transmit>
 8015984:	4603      	mov	r3, r0
 8015986:	2b00      	cmp	r3, #0
 8015988:	d1f5      	bne.n	8015976 <fm25v02_fast_read+0x36>
	while( HAL_SPI_Receive(&hspi2, data, Size, 10) != HAL_OK ) {}
 801598a:	bf00      	nop
 801598c:	88ba      	ldrh	r2, [r7, #4]
 801598e:	230a      	movs	r3, #10
 8015990:	6839      	ldr	r1, [r7, #0]
 8015992:	4809      	ldr	r0, [pc, #36]	; (80159b8 <fm25v02_fast_read+0x78>)
 8015994:	f7ee ff0f 	bl	80047b6 <HAL_SPI_Receive>
 8015998:	4603      	mov	r3, r0
 801599a:	2b00      	cmp	r3, #0
 801599c:	d1f6      	bne.n	801598c <fm25v02_fast_read+0x4c>
	FM25V02_CS_OFF();
 801599e:	2201      	movs	r2, #1
 80159a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80159a4:	4803      	ldr	r0, [pc, #12]	; (80159b4 <fm25v02_fast_read+0x74>)
 80159a6:	f7ed fc61 	bl	800326c <HAL_GPIO_WritePin>
	return HAL_OK;
 80159aa:	2300      	movs	r3, #0
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3710      	adds	r7, #16
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}
 80159b4:	40021c00 	.word	0x40021c00
 80159b8:	2000817c 	.word	0x2000817c

080159bc <BUZ_ON>:


//---функции включения и отключения светодиодов, зуммера и транзистора охранного светодиода-----------------

void BUZ_ON(void) // включение зуммера
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80159c0:	2201      	movs	r2, #1
 80159c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80159c6:	4802      	ldr	r0, [pc, #8]	; (80159d0 <BUZ_ON+0x14>)
 80159c8:	f7ed fc50 	bl	800326c <HAL_GPIO_WritePin>
}
 80159cc:	bf00      	nop
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	40020c00 	.word	0x40020c00

080159d4 <BUZ_OFF>:

void BUZ_OFF(void) // выключение зуммера
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 80159d8:	2200      	movs	r2, #0
 80159da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80159de:	4802      	ldr	r0, [pc, #8]	; (80159e8 <BUZ_OFF+0x14>)
 80159e0:	f7ed fc44 	bl	800326c <HAL_GPIO_WritePin>
}
 80159e4:	bf00      	nop
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	40020c00 	.word	0x40020c00

080159ec <LED_OUT_ON>:

void LED_OUT_ON(void) // включение охранного светодиода
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80159f0:	2201      	movs	r2, #1
 80159f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80159f6:	4802      	ldr	r0, [pc, #8]	; (8015a00 <LED_OUT_ON+0x14>)
 80159f8:	f7ed fc38 	bl	800326c <HAL_GPIO_WritePin>
}
 80159fc:	bf00      	nop
 80159fe:	bd80      	pop	{r7, pc}
 8015a00:	40020c00 	.word	0x40020c00

08015a04 <LED_OUT_OFF>:

void LED_OUT_OFF(void) // выключение охранного светодиода
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8015a08:	2200      	movs	r2, #0
 8015a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015a0e:	4802      	ldr	r0, [pc, #8]	; (8015a18 <LED_OUT_OFF+0x14>)
 8015a10:	f7ed fc2c 	bl	800326c <HAL_GPIO_WritePin>
}
 8015a14:	bf00      	nop
 8015a16:	bd80      	pop	{r7, pc}
 8015a18:	40020c00 	.word	0x40020c00

08015a1c <LED_OUT_TOGGLE>:

void LED_OUT_TOGGLE(void) // переключение охранного светодиода
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8015a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015a24:	4802      	ldr	r0, [pc, #8]	; (8015a30 <LED_OUT_TOGGLE+0x14>)
 8015a26:	f7ed fc3a 	bl	800329e <HAL_GPIO_TogglePin>
}
 8015a2a:	bf00      	nop
 8015a2c:	bd80      	pop	{r7, pc}
 8015a2e:	bf00      	nop
 8015a30:	40020c00 	.word	0x40020c00

08015a34 <LED_VD3_TOGGLE>:
{
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
}

void LED_VD3_TOGGLE(void) // переключение светодиода VD3
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8015a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015a3c:	4802      	ldr	r0, [pc, #8]	; (8015a48 <LED_VD3_TOGGLE+0x14>)
 8015a3e:	f7ed fc2e 	bl	800329e <HAL_GPIO_TogglePin>
}
 8015a42:	bf00      	nop
 8015a44:	bd80      	pop	{r7, pc}
 8015a46:	bf00      	nop
 8015a48:	40020800 	.word	0x40020800

08015a4c <LED1_OFF>:
{
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
}

void LED1_OFF(void) // выключение светодиода LED1
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_SET);
 8015a50:	2201      	movs	r2, #1
 8015a52:	2104      	movs	r1, #4
 8015a54:	4802      	ldr	r0, [pc, #8]	; (8015a60 <LED1_OFF+0x14>)
 8015a56:	f7ed fc09 	bl	800326c <HAL_GPIO_WritePin>
}
 8015a5a:	bf00      	nop
 8015a5c:	bd80      	pop	{r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	40021c00 	.word	0x40021c00

08015a64 <LED1_ON>:

void LED1_ON(void) // включение светодиода LED1
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_RESET);
 8015a68:	2200      	movs	r2, #0
 8015a6a:	2104      	movs	r1, #4
 8015a6c:	4802      	ldr	r0, [pc, #8]	; (8015a78 <LED1_ON+0x14>)
 8015a6e:	f7ed fbfd 	bl	800326c <HAL_GPIO_WritePin>
}
 8015a72:	bf00      	nop
 8015a74:	bd80      	pop	{r7, pc}
 8015a76:	bf00      	nop
 8015a78:	40021c00 	.word	0x40021c00

08015a7c <LED2_OFF>:

void LED2_OFF(void) // выключение светодиода LED2
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_SET);
 8015a80:	2201      	movs	r2, #1
 8015a82:	2108      	movs	r1, #8
 8015a84:	4802      	ldr	r0, [pc, #8]	; (8015a90 <LED2_OFF+0x14>)
 8015a86:	f7ed fbf1 	bl	800326c <HAL_GPIO_WritePin>
}
 8015a8a:	bf00      	nop
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	bf00      	nop
 8015a90:	40021c00 	.word	0x40021c00

08015a94 <LED2_ON>:

void LED2_ON(void) // включение светодиода LED2
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
 8015a98:	2200      	movs	r2, #0
 8015a9a:	2108      	movs	r1, #8
 8015a9c:	4802      	ldr	r0, [pc, #8]	; (8015aa8 <LED2_ON+0x14>)
 8015a9e:	f7ed fbe5 	bl	800326c <HAL_GPIO_WritePin>
}
 8015aa2:	bf00      	nop
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	40021c00 	.word	0x40021c00

08015aac <LED2_TOGGLE>:
{
	HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_2);
}

void LED2_TOGGLE(void) // переключение светодиода LED2
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_3);
 8015ab0:	2108      	movs	r1, #8
 8015ab2:	4802      	ldr	r0, [pc, #8]	; (8015abc <LED2_TOGGLE+0x10>)
 8015ab4:	f7ed fbf3 	bl	800329e <HAL_GPIO_TogglePin>
}
 8015ab8:	bf00      	nop
 8015aba:	bd80      	pop	{r7, pc}
 8015abc:	40021c00 	.word	0x40021c00

08015ac0 <calc_crc>:
//0x1d000001, 0x86075f01,
//0x92000a04, 0x5ad95901
//};

unsigned char calc_crc( unsigned char *mas, unsigned char Len )
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	b085      	sub	sp, #20
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	460b      	mov	r3, r1
 8015aca:	70fb      	strb	r3, [r7, #3]
  unsigned char i,dat,crc,fb,st_byt;
  st_byt=0; crc=0;
 8015acc:	2300      	movs	r3, #0
 8015ace:	733b      	strb	r3, [r7, #12]
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	737b      	strb	r3, [r7, #13]
  do{
    dat=mas[st_byt];
 8015ad4:	7b3b      	ldrb	r3, [r7, #12]
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	4413      	add	r3, r2
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	73bb      	strb	r3, [r7, #14]
    for( i=0; i<8; i++) {  // счетчик битов в байте
 8015ade:	2300      	movs	r3, #0
 8015ae0:	73fb      	strb	r3, [r7, #15]
 8015ae2:	e018      	b.n	8015b16 <calc_crc+0x56>
      fb = crc ^ dat;
 8015ae4:	7b7a      	ldrb	r2, [r7, #13]
 8015ae6:	7bbb      	ldrb	r3, [r7, #14]
 8015ae8:	4053      	eors	r3, r2
 8015aea:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8015aec:	7afb      	ldrb	r3, [r7, #11]
 8015aee:	f003 0301 	and.w	r3, r3, #1
 8015af2:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8015af4:	7b7b      	ldrb	r3, [r7, #13]
 8015af6:	085b      	lsrs	r3, r3, #1
 8015af8:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 8015afa:	7bbb      	ldrb	r3, [r7, #14]
 8015afc:	085b      	lsrs	r3, r3, #1
 8015afe:	73bb      	strb	r3, [r7, #14]
      if( fb == 1 ) crc ^= 0x8c; // полином
 8015b00:	7afb      	ldrb	r3, [r7, #11]
 8015b02:	2b01      	cmp	r3, #1
 8015b04:	d104      	bne.n	8015b10 <calc_crc+0x50>
 8015b06:	7b7b      	ldrb	r3, [r7, #13]
 8015b08:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8015b0c:	43db      	mvns	r3, r3
 8015b0e:	737b      	strb	r3, [r7, #13]
    for( i=0; i<8; i++) {  // счетчик битов в байте
 8015b10:	7bfb      	ldrb	r3, [r7, #15]
 8015b12:	3301      	adds	r3, #1
 8015b14:	73fb      	strb	r3, [r7, #15]
 8015b16:	7bfb      	ldrb	r3, [r7, #15]
 8015b18:	2b07      	cmp	r3, #7
 8015b1a:	d9e3      	bls.n	8015ae4 <calc_crc+0x24>
    }
    st_byt++;
 8015b1c:	7b3b      	ldrb	r3, [r7, #12]
 8015b1e:	3301      	adds	r3, #1
 8015b20:	733b      	strb	r3, [r7, #12]
  } while( st_byt < Len ); // счетчик байтов в массиве
 8015b22:	7b3a      	ldrb	r2, [r7, #12]
 8015b24:	78fb      	ldrb	r3, [r7, #3]
 8015b26:	429a      	cmp	r2, r3
 8015b28:	d3d4      	bcc.n	8015ad4 <calc_crc+0x14>
  return crc;
 8015b2a:	7b7b      	ldrb	r3, [r7, #13]
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3714      	adds	r7, #20
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr

08015b38 <ibutton_reset>:
		return 0;
	}
}
//Функция инициализации ibutton таблетки на шине 1-wire
HAL_StatusTypeDef ibutton_reset (void)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b082      	sub	sp, #8
 8015b3c:	af00      	add	r7, sp, #0
	uint8_t bufT[1];
	uint8_t bufR[1];
	bufT[0]=OW_RESET;
 8015b3e:	23f0      	movs	r3, #240	; 0xf0
 8015b40:	713b      	strb	r3, [r7, #4]
	huart1.Init.BaudRate = 9600;
 8015b42:	4b12      	ldr	r3, [pc, #72]	; (8015b8c <ibutton_reset+0x54>)
 8015b44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8015b48:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(huartx);
 8015b4a:	4810      	ldr	r0, [pc, #64]	; (8015b8c <ibutton_reset+0x54>)
 8015b4c:	f7ef fcc4 	bl	80054d8 <HAL_UART_Init>
	if( HAL_UART_Transmit(huartx, bufT, 1, 1) != HAL_OK ) {}
 8015b50:	1d39      	adds	r1, r7, #4
 8015b52:	2301      	movs	r3, #1
 8015b54:	2201      	movs	r2, #1
 8015b56:	480d      	ldr	r0, [pc, #52]	; (8015b8c <ibutton_reset+0x54>)
 8015b58:	f7ef fd0b 	bl	8005572 <HAL_UART_Transmit>
	if( HAL_UART_Receive(huartx, bufR, 1, 1) != HAL_OK ) {}
 8015b5c:	4639      	mov	r1, r7
 8015b5e:	2301      	movs	r3, #1
 8015b60:	2201      	movs	r2, #1
 8015b62:	480a      	ldr	r0, [pc, #40]	; (8015b8c <ibutton_reset+0x54>)
 8015b64:	f7ef fd97 	bl	8005696 <HAL_UART_Receive>
	huart1.Init.BaudRate = 115200;
 8015b68:	4b08      	ldr	r3, [pc, #32]	; (8015b8c <ibutton_reset+0x54>)
 8015b6a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8015b6e:	605a      	str	r2, [r3, #4]
	if ( HAL_UART_Init(huartx) != HAL_OK ) {}
 8015b70:	4806      	ldr	r0, [pc, #24]	; (8015b8c <ibutton_reset+0x54>)
 8015b72:	f7ef fcb1 	bl	80054d8 <HAL_UART_Init>
	//HAL_Delay(1);// Добавил задержку для нормальной инициализации скорости UART
	if(bufR[0]==OW_RESET)
 8015b76:	783b      	ldrb	r3, [r7, #0]
 8015b78:	2bf0      	cmp	r3, #240	; 0xf0
 8015b7a:	d101      	bne.n	8015b80 <ibutton_reset+0x48>
	{
		return HAL_ERROR;
 8015b7c:	2301      	movs	r3, #1
 8015b7e:	e000      	b.n	8015b82 <ibutton_reset+0x4a>
	}
	else
	{
		return HAL_OK;
 8015b80:	2300      	movs	r3, #0
	}
}
 8015b82:	4618      	mov	r0, r3
 8015b84:	3708      	adds	r7, #8
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}
 8015b8a:	bf00      	nop
 8015b8c:	200099e4 	.word	0x200099e4

08015b90 <ibutton_read_rom>:
// Функция чтения ID ROM устройства ibutton таблетки
// Возвращает значение типа IbuttonROM_Struct структуры
HAL_StatusTypeDef ibutton_read_rom (IbuttonROM_Struct* id)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b08a      	sub	sp, #40	; 0x28
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
	uint8_t family= 0x00;// Семейство микроконтроллера
 8015b98:	2300      	movs	r3, #0
 8015b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t id1= 0x00;//1-й байт данных
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t id2= 0x00;//2-й байт данных
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t id3= 0x00;//3-й байт данных
 8015baa:	2300      	movs	r3, #0
 8015bac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t id4= 0x00;//4-й байт данных
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t id5= 0x00;//5-й байт данных
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t id6= 0x00;//6-й байт данных
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t crc_ow= 0x00; // Принятая контрольная сумма
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t bufft = 0xFF;// байт для отправки
 8015bc8:	23ff      	movs	r3, #255	; 0xff
 8015bca:	77bb      	strb	r3, [r7, #30]
	uint8_t buffr=0x00;// байт для приема
 8015bcc:	2300      	movs	r3, #0
 8015bce:	777b      	strb	r3, [r7, #29]
	uint8_t i;
	unsigned char buffer_crc[7];// буффер для рассчета контрольной суммы
	uint8_t buf[8]={0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00};// буффер со значением 0х33
 8015bd0:	4ac1      	ldr	r2, [pc, #772]	; (8015ed8 <ibutton_read_rom+0x348>)
 8015bd2:	f107 030c 	add.w	r3, r7, #12
 8015bd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015bda:	e883 0003 	stmia.w	r3, {r0, r1}
	if( HAL_UART_Transmit(huartx, buf, 8, 1) != HAL_OK ) {printf("error reset\n");}// отправляем команду чтения "0х33"
 8015bde:	f107 010c 	add.w	r1, r7, #12
 8015be2:	2301      	movs	r3, #1
 8015be4:	2208      	movs	r2, #8
 8015be6:	48bd      	ldr	r0, [pc, #756]	; (8015edc <ibutton_read_rom+0x34c>)
 8015be8:	f7ef fcc3 	bl	8005572 <HAL_UART_Transmit>
 8015bec:	4603      	mov	r3, r0
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d002      	beq.n	8015bf8 <ibutton_read_rom+0x68>
 8015bf2:	48bb      	ldr	r0, [pc, #748]	; (8015ee0 <ibutton_read_rom+0x350>)
 8015bf4:	f003 fe1a 	bl	801982c <puts>
	//if( HAL_UART_Receive(huartx, buf, 8, 1) != HAL_OK ) {printf("error reset\n");}
	for(i=0; i<8; i++) //Принимаем данные устройства по 1-wire
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	77fb      	strb	r3, [r7, #31]
 8015bfc:	e01e      	b.n	8015c3c <ibutton_read_rom+0xac>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8015bfe:	f107 011e 	add.w	r1, r7, #30
 8015c02:	2301      	movs	r3, #1
 8015c04:	2201      	movs	r2, #1
 8015c06:	48b5      	ldr	r0, [pc, #724]	; (8015edc <ibutton_read_rom+0x34c>)
 8015c08:	f7ef fcb3 	bl	8005572 <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 8015c0c:	f107 011d 	add.w	r1, r7, #29
 8015c10:	2301      	movs	r3, #1
 8015c12:	2201      	movs	r2, #1
 8015c14:	48b1      	ldr	r0, [pc, #708]	; (8015edc <ibutton_read_rom+0x34c>)
 8015c16:	f7ef fd3e 	bl	8005696 <HAL_UART_Receive>
		if(buffr == 0xFF)
 8015c1a:	7f7b      	ldrb	r3, [r7, #29]
 8015c1c:	2bff      	cmp	r3, #255	; 0xff
 8015c1e:	d10a      	bne.n	8015c36 <ibutton_read_rom+0xa6>
		{
			family = family|(0x01<<i);
 8015c20:	7ffb      	ldrb	r3, [r7, #31]
 8015c22:	2201      	movs	r2, #1
 8015c24:	fa02 f303 	lsl.w	r3, r2, r3
 8015c28:	b25a      	sxtb	r2, r3
 8015c2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015c2e:	4313      	orrs	r3, r2
 8015c30:	b25b      	sxtb	r3, r3
 8015c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(i=0; i<8; i++) //Принимаем данные устройства по 1-wire
 8015c36:	7ffb      	ldrb	r3, [r7, #31]
 8015c38:	3301      	adds	r3, #1
 8015c3a:	77fb      	strb	r3, [r7, #31]
 8015c3c:	7ffb      	ldrb	r3, [r7, #31]
 8015c3e:	2b07      	cmp	r3, #7
 8015c40:	d9dd      	bls.n	8015bfe <ibutton_read_rom+0x6e>
		}
	}
	for(i=0; i<8; i++)
 8015c42:	2300      	movs	r3, #0
 8015c44:	77fb      	strb	r3, [r7, #31]
 8015c46:	e01e      	b.n	8015c86 <ibutton_read_rom+0xf6>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8015c48:	f107 011e 	add.w	r1, r7, #30
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	2201      	movs	r2, #1
 8015c50:	48a2      	ldr	r0, [pc, #648]	; (8015edc <ibutton_read_rom+0x34c>)
 8015c52:	f7ef fc8e 	bl	8005572 <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 8015c56:	f107 011d 	add.w	r1, r7, #29
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	2201      	movs	r2, #1
 8015c5e:	489f      	ldr	r0, [pc, #636]	; (8015edc <ibutton_read_rom+0x34c>)
 8015c60:	f7ef fd19 	bl	8005696 <HAL_UART_Receive>
		if(buffr == 0xFF)
 8015c64:	7f7b      	ldrb	r3, [r7, #29]
 8015c66:	2bff      	cmp	r3, #255	; 0xff
 8015c68:	d10a      	bne.n	8015c80 <ibutton_read_rom+0xf0>
		{
			id1 = id1|(0x01<<i);
 8015c6a:	7ffb      	ldrb	r3, [r7, #31]
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8015c72:	b25a      	sxtb	r2, r3
 8015c74:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8015c78:	4313      	orrs	r3, r2
 8015c7a:	b25b      	sxtb	r3, r3
 8015c7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(i=0; i<8; i++)
 8015c80:	7ffb      	ldrb	r3, [r7, #31]
 8015c82:	3301      	adds	r3, #1
 8015c84:	77fb      	strb	r3, [r7, #31]
 8015c86:	7ffb      	ldrb	r3, [r7, #31]
 8015c88:	2b07      	cmp	r3, #7
 8015c8a:	d9dd      	bls.n	8015c48 <ibutton_read_rom+0xb8>
		}
	}
	for(i=0; i<8; i++)
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	77fb      	strb	r3, [r7, #31]
 8015c90:	e01e      	b.n	8015cd0 <ibutton_read_rom+0x140>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8015c92:	f107 011e 	add.w	r1, r7, #30
 8015c96:	2301      	movs	r3, #1
 8015c98:	2201      	movs	r2, #1
 8015c9a:	4890      	ldr	r0, [pc, #576]	; (8015edc <ibutton_read_rom+0x34c>)
 8015c9c:	f7ef fc69 	bl	8005572 <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 8015ca0:	f107 011d 	add.w	r1, r7, #29
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	488c      	ldr	r0, [pc, #560]	; (8015edc <ibutton_read_rom+0x34c>)
 8015caa:	f7ef fcf4 	bl	8005696 <HAL_UART_Receive>
		if(buffr == 0xFF)
 8015cae:	7f7b      	ldrb	r3, [r7, #29]
 8015cb0:	2bff      	cmp	r3, #255	; 0xff
 8015cb2:	d10a      	bne.n	8015cca <ibutton_read_rom+0x13a>
		{
			id2 = id2|(0x01<<i);
 8015cb4:	7ffb      	ldrb	r3, [r7, #31]
 8015cb6:	2201      	movs	r2, #1
 8015cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8015cbc:	b25a      	sxtb	r2, r3
 8015cbe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015cc2:	4313      	orrs	r3, r2
 8015cc4:	b25b      	sxtb	r3, r3
 8015cc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	for(i=0; i<8; i++)
 8015cca:	7ffb      	ldrb	r3, [r7, #31]
 8015ccc:	3301      	adds	r3, #1
 8015cce:	77fb      	strb	r3, [r7, #31]
 8015cd0:	7ffb      	ldrb	r3, [r7, #31]
 8015cd2:	2b07      	cmp	r3, #7
 8015cd4:	d9dd      	bls.n	8015c92 <ibutton_read_rom+0x102>
		}
	}
	for(i=0; i<8; i++)
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	77fb      	strb	r3, [r7, #31]
 8015cda:	e01e      	b.n	8015d1a <ibutton_read_rom+0x18a>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8015cdc:	f107 011e 	add.w	r1, r7, #30
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	2201      	movs	r2, #1
 8015ce4:	487d      	ldr	r0, [pc, #500]	; (8015edc <ibutton_read_rom+0x34c>)
 8015ce6:	f7ef fc44 	bl	8005572 <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 8015cea:	f107 011d 	add.w	r1, r7, #29
 8015cee:	2301      	movs	r3, #1
 8015cf0:	2201      	movs	r2, #1
 8015cf2:	487a      	ldr	r0, [pc, #488]	; (8015edc <ibutton_read_rom+0x34c>)
 8015cf4:	f7ef fccf 	bl	8005696 <HAL_UART_Receive>
		if(buffr == 0xFF)
 8015cf8:	7f7b      	ldrb	r3, [r7, #29]
 8015cfa:	2bff      	cmp	r3, #255	; 0xff
 8015cfc:	d10a      	bne.n	8015d14 <ibutton_read_rom+0x184>
		{
			id3 = id3|(0x01<<i);
 8015cfe:	7ffb      	ldrb	r3, [r7, #31]
 8015d00:	2201      	movs	r2, #1
 8015d02:	fa02 f303 	lsl.w	r3, r2, r3
 8015d06:	b25a      	sxtb	r2, r3
 8015d08:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8015d0c:	4313      	orrs	r3, r2
 8015d0e:	b25b      	sxtb	r3, r3
 8015d10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(i=0; i<8; i++)
 8015d14:	7ffb      	ldrb	r3, [r7, #31]
 8015d16:	3301      	adds	r3, #1
 8015d18:	77fb      	strb	r3, [r7, #31]
 8015d1a:	7ffb      	ldrb	r3, [r7, #31]
 8015d1c:	2b07      	cmp	r3, #7
 8015d1e:	d9dd      	bls.n	8015cdc <ibutton_read_rom+0x14c>
		}
	}
	for(i=0; i<8; i++)
 8015d20:	2300      	movs	r3, #0
 8015d22:	77fb      	strb	r3, [r7, #31]
 8015d24:	e01e      	b.n	8015d64 <ibutton_read_rom+0x1d4>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8015d26:	f107 011e 	add.w	r1, r7, #30
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	2201      	movs	r2, #1
 8015d2e:	486b      	ldr	r0, [pc, #428]	; (8015edc <ibutton_read_rom+0x34c>)
 8015d30:	f7ef fc1f 	bl	8005572 <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) !=HAL_OK ) {}
 8015d34:	f107 011d 	add.w	r1, r7, #29
 8015d38:	2301      	movs	r3, #1
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	4867      	ldr	r0, [pc, #412]	; (8015edc <ibutton_read_rom+0x34c>)
 8015d3e:	f7ef fcaa 	bl	8005696 <HAL_UART_Receive>
		if(buffr == 0xFF)
 8015d42:	7f7b      	ldrb	r3, [r7, #29]
 8015d44:	2bff      	cmp	r3, #255	; 0xff
 8015d46:	d10a      	bne.n	8015d5e <ibutton_read_rom+0x1ce>
		{
			id4 = id4|(0x01<<i);
 8015d48:	7ffb      	ldrb	r3, [r7, #31]
 8015d4a:	2201      	movs	r2, #1
 8015d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8015d50:	b25a      	sxtb	r2, r3
 8015d52:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015d56:	4313      	orrs	r3, r2
 8015d58:	b25b      	sxtb	r3, r3
 8015d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for(i=0; i<8; i++)
 8015d5e:	7ffb      	ldrb	r3, [r7, #31]
 8015d60:	3301      	adds	r3, #1
 8015d62:	77fb      	strb	r3, [r7, #31]
 8015d64:	7ffb      	ldrb	r3, [r7, #31]
 8015d66:	2b07      	cmp	r3, #7
 8015d68:	d9dd      	bls.n	8015d26 <ibutton_read_rom+0x196>
		}
	}
	for(i=0; i<8; i++)
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	77fb      	strb	r3, [r7, #31]
 8015d6e:	e01e      	b.n	8015dae <ibutton_read_rom+0x21e>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8015d70:	f107 011e 	add.w	r1, r7, #30
 8015d74:	2301      	movs	r3, #1
 8015d76:	2201      	movs	r2, #1
 8015d78:	4858      	ldr	r0, [pc, #352]	; (8015edc <ibutton_read_rom+0x34c>)
 8015d7a:	f7ef fbfa 	bl	8005572 <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 8015d7e:	f107 011d 	add.w	r1, r7, #29
 8015d82:	2301      	movs	r3, #1
 8015d84:	2201      	movs	r2, #1
 8015d86:	4855      	ldr	r0, [pc, #340]	; (8015edc <ibutton_read_rom+0x34c>)
 8015d88:	f7ef fc85 	bl	8005696 <HAL_UART_Receive>
		if(buffr == 0xFF)
 8015d8c:	7f7b      	ldrb	r3, [r7, #29]
 8015d8e:	2bff      	cmp	r3, #255	; 0xff
 8015d90:	d10a      	bne.n	8015da8 <ibutton_read_rom+0x218>
		{
			id5 = id5|(0x01<<i);
 8015d92:	7ffb      	ldrb	r3, [r7, #31]
 8015d94:	2201      	movs	r2, #1
 8015d96:	fa02 f303 	lsl.w	r3, r2, r3
 8015d9a:	b25a      	sxtb	r2, r3
 8015d9c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8015da0:	4313      	orrs	r3, r2
 8015da2:	b25b      	sxtb	r3, r3
 8015da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	for(i=0; i<8; i++)
 8015da8:	7ffb      	ldrb	r3, [r7, #31]
 8015daa:	3301      	adds	r3, #1
 8015dac:	77fb      	strb	r3, [r7, #31]
 8015dae:	7ffb      	ldrb	r3, [r7, #31]
 8015db0:	2b07      	cmp	r3, #7
 8015db2:	d9dd      	bls.n	8015d70 <ibutton_read_rom+0x1e0>
		}
	}
	for(i=0; i<8; i++)
 8015db4:	2300      	movs	r3, #0
 8015db6:	77fb      	strb	r3, [r7, #31]
 8015db8:	e01e      	b.n	8015df8 <ibutton_read_rom+0x268>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8015dba:	f107 011e 	add.w	r1, r7, #30
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	2201      	movs	r2, #1
 8015dc2:	4846      	ldr	r0, [pc, #280]	; (8015edc <ibutton_read_rom+0x34c>)
 8015dc4:	f7ef fbd5 	bl	8005572 <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 8015dc8:	f107 011d 	add.w	r1, r7, #29
 8015dcc:	2301      	movs	r3, #1
 8015dce:	2201      	movs	r2, #1
 8015dd0:	4842      	ldr	r0, [pc, #264]	; (8015edc <ibutton_read_rom+0x34c>)
 8015dd2:	f7ef fc60 	bl	8005696 <HAL_UART_Receive>
		if(buffr == 0xFF)
 8015dd6:	7f7b      	ldrb	r3, [r7, #29]
 8015dd8:	2bff      	cmp	r3, #255	; 0xff
 8015dda:	d10a      	bne.n	8015df2 <ibutton_read_rom+0x262>
		{
			id6 = id6|(0x01<<i);
 8015ddc:	7ffb      	ldrb	r3, [r7, #31]
 8015dde:	2201      	movs	r2, #1
 8015de0:	fa02 f303 	lsl.w	r3, r2, r3
 8015de4:	b25a      	sxtb	r2, r3
 8015de6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8015dea:	4313      	orrs	r3, r2
 8015dec:	b25b      	sxtb	r3, r3
 8015dee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	for(i=0; i<8; i++)
 8015df2:	7ffb      	ldrb	r3, [r7, #31]
 8015df4:	3301      	adds	r3, #1
 8015df6:	77fb      	strb	r3, [r7, #31]
 8015df8:	7ffb      	ldrb	r3, [r7, #31]
 8015dfa:	2b07      	cmp	r3, #7
 8015dfc:	d9dd      	bls.n	8015dba <ibutton_read_rom+0x22a>
		}
	}
	for(i=0; i<8; i++)
 8015dfe:	2300      	movs	r3, #0
 8015e00:	77fb      	strb	r3, [r7, #31]
 8015e02:	e01e      	b.n	8015e42 <ibutton_read_rom+0x2b2>
	{
		if( HAL_UART_Transmit(huartx, &bufft, 1, 1) != HAL_OK ) {}
 8015e04:	f107 011e 	add.w	r1, r7, #30
 8015e08:	2301      	movs	r3, #1
 8015e0a:	2201      	movs	r2, #1
 8015e0c:	4833      	ldr	r0, [pc, #204]	; (8015edc <ibutton_read_rom+0x34c>)
 8015e0e:	f7ef fbb0 	bl	8005572 <HAL_UART_Transmit>
		if( HAL_UART_Receive(huartx, &buffr, 1, 1) != HAL_OK ) {}
 8015e12:	f107 011d 	add.w	r1, r7, #29
 8015e16:	2301      	movs	r3, #1
 8015e18:	2201      	movs	r2, #1
 8015e1a:	4830      	ldr	r0, [pc, #192]	; (8015edc <ibutton_read_rom+0x34c>)
 8015e1c:	f7ef fc3b 	bl	8005696 <HAL_UART_Receive>
		if(buffr == 0xFF)
 8015e20:	7f7b      	ldrb	r3, [r7, #29]
 8015e22:	2bff      	cmp	r3, #255	; 0xff
 8015e24:	d10a      	bne.n	8015e3c <ibutton_read_rom+0x2ac>
		{
			crc_ow = crc_ow|(0x01<<i);
 8015e26:	7ffb      	ldrb	r3, [r7, #31]
 8015e28:	2201      	movs	r2, #1
 8015e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8015e2e:	b25a      	sxtb	r2, r3
 8015e30:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8015e34:	4313      	orrs	r3, r2
 8015e36:	b25b      	sxtb	r3, r3
 8015e38:	f887 3020 	strb.w	r3, [r7, #32]
	for(i=0; i<8; i++)
 8015e3c:	7ffb      	ldrb	r3, [r7, #31]
 8015e3e:	3301      	adds	r3, #1
 8015e40:	77fb      	strb	r3, [r7, #31]
 8015e42:	7ffb      	ldrb	r3, [r7, #31]
 8015e44:	2b07      	cmp	r3, #7
 8015e46:	d9dd      	bls.n	8015e04 <ibutton_read_rom+0x274>
		}
	}

	buffer_crc[0] = family; // заполняем буффер принятыми данными
 8015e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e4c:	753b      	strb	r3, [r7, #20]
	buffer_crc[1] = id1;
 8015e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e52:	757b      	strb	r3, [r7, #21]
	buffer_crc[2] = id2;
 8015e54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8015e58:	75bb      	strb	r3, [r7, #22]
	buffer_crc[3] = id3;
 8015e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e5e:	75fb      	strb	r3, [r7, #23]
	buffer_crc[4] = id4;
 8015e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e64:	763b      	strb	r3, [r7, #24]
	buffer_crc[5] = id5;
 8015e66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015e6a:	767b      	strb	r3, [r7, #25]
	buffer_crc[6] = id6;
 8015e6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015e70:	76bb      	strb	r3, [r7, #26]

	if( calc_crc(&buffer_crc[0], 7) == crc_ow)// Рассчитывавем контрольную сумму принятых данных и проверяем ее на соответствие с принятой "crc_ow"
 8015e72:	f107 0314 	add.w	r3, r7, #20
 8015e76:	2107      	movs	r1, #7
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7ff fe21 	bl	8015ac0 <calc_crc>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	461a      	mov	r2, r3
 8015e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015e86:	4293      	cmp	r3, r2
 8015e88:	d121      	bne.n	8015ece <ibutton_read_rom+0x33e>
		{
			id->IbuttonROM_High= ((uint32_t)id4)|(((uint32_t)id5)<<8)|(((uint32_t)id6)<<16)|(((uint32_t)crc_ow)<<24);// Заполняем указанную в параметре структуру
 8015e8a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8015e8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015e92:	021b      	lsls	r3, r3, #8
 8015e94:	431a      	orrs	r2, r3
 8015e96:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015e9a:	041b      	lsls	r3, r3, #16
 8015e9c:	431a      	orrs	r2, r3
 8015e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015ea2:	061b      	lsls	r3, r3, #24
 8015ea4:	431a      	orrs	r2, r3
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	601a      	str	r2, [r3, #0]
			id->IbuttonROM_Low= ((uint32_t)family)|(((uint32_t)id1)<<8)|(((uint32_t)id2)<<16)|(((uint32_t)id3)<<24);
 8015eaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015eae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015eb2:	021b      	lsls	r3, r3, #8
 8015eb4:	431a      	orrs	r2, r3
 8015eb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8015eba:	041b      	lsls	r3, r3, #16
 8015ebc:	431a      	orrs	r2, r3
 8015ebe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015ec2:	061b      	lsls	r3, r3, #24
 8015ec4:	431a      	orrs	r2, r3
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	605a      	str	r2, [r3, #4]
			return HAL_OK;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e000      	b.n	8015ed0 <ibutton_read_rom+0x340>
		}
	else
		{
			return HAL_ERROR;
 8015ece:	2301      	movs	r3, #1
		}
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3728      	adds	r7, #40	; 0x28
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}
 8015ed8:	0801a898 	.word	0x0801a898
 8015edc:	200099e4 	.word	0x200099e4
 8015ee0:	0801a88c 	.word	0x0801a88c

08015ee4 <ibutton_search_rom>:
// параметр id это указатель к IbuttonROM_Struct структуре, которая содержит прочитанный ROM таблетки
// возращает значение типа HAL_StatusTypeDef. Может принимать значения: HAL_OK; HAL_ERROR
// HAL_OK - ROM найден в памяти FRAM
// HAL_ERROR - ROM не найден в памяти FRAM
HAL_StatusTypeDef ibutton_search_rom(IbuttonROM_Struct* id)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b08a      	sub	sp, #40	; 0x28
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
	//uint8_t temp_ibutton_state;
	uint8_t id_fram[16];
	uint32_t id_temp_rom_high=0;
 8015eec:	2300      	movs	r3, #0
 8015eee:	623b      	str	r3, [r7, #32]
	uint32_t id_temp_rom_low=0;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	61fb      	str	r3, [r7, #28]

	for(uint16_t add=0x1310; add<=0x1F80; add=add+16)
 8015ef4:	f241 3310 	movw	r3, #4880	; 0x1310
 8015ef8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015efa:	e039      	b.n	8015f70 <ibutton_search_rom+0x8c>
	{
		//fm25v02_read(add, &temp_ibutton_state);
		//if(temp_ibutton_state == 0x01) // Проверяем есть ли запись в памяти
		//{
			osMutexWait(Fm25v02MutexHandle, osWaitForever); // берем мьютекс для работы с чтением/записью FRAM памяти.
 8015efc:	4b21      	ldr	r3, [pc, #132]	; (8015f84 <ibutton_search_rom+0xa0>)
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	f04f 31ff 	mov.w	r1, #4294967295
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7f0 ff17 	bl	8006d38 <osMutexWait>
			fm25v02_fast_read(2*add, &id_fram[0], 16);
 8015f0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f0c:	005b      	lsls	r3, r3, #1
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	f107 010c 	add.w	r1, r7, #12
 8015f14:	2210      	movs	r2, #16
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7ff fd12 	bl	8015940 <fm25v02_fast_read>
			osMutexRelease(Fm25v02MutexHandle); // отдаем мьютекс для работы с чтением/записью FRAM памяти.
 8015f1c:	4b19      	ldr	r3, [pc, #100]	; (8015f84 <ibutton_search_rom+0xa0>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7f0 ff57 	bl	8006dd4 <osMutexRelease>
			id_temp_rom_high = (((uint32_t)id_fram[15])<<24)|(((uint32_t)id_fram[13])<<16)|(((uint32_t)id_fram[11])<<8)|((uint32_t)id_fram[9]);
 8015f26:	7efb      	ldrb	r3, [r7, #27]
 8015f28:	061a      	lsls	r2, r3, #24
 8015f2a:	7e7b      	ldrb	r3, [r7, #25]
 8015f2c:	041b      	lsls	r3, r3, #16
 8015f2e:	431a      	orrs	r2, r3
 8015f30:	7dfb      	ldrb	r3, [r7, #23]
 8015f32:	021b      	lsls	r3, r3, #8
 8015f34:	4313      	orrs	r3, r2
 8015f36:	7d7a      	ldrb	r2, [r7, #21]
 8015f38:	4313      	orrs	r3, r2
 8015f3a:	623b      	str	r3, [r7, #32]
			id_temp_rom_low = (((uint32_t)id_fram[7])<<24)|(((uint32_t)id_fram[5])<<16)|(((uint32_t)id_fram[3])<<8)|((uint32_t)id_fram[1]);
 8015f3c:	7cfb      	ldrb	r3, [r7, #19]
 8015f3e:	061a      	lsls	r2, r3, #24
 8015f40:	7c7b      	ldrb	r3, [r7, #17]
 8015f42:	041b      	lsls	r3, r3, #16
 8015f44:	431a      	orrs	r2, r3
 8015f46:	7bfb      	ldrb	r3, [r7, #15]
 8015f48:	021b      	lsls	r3, r3, #8
 8015f4a:	4313      	orrs	r3, r2
 8015f4c:	7b7a      	ldrb	r2, [r7, #13]
 8015f4e:	4313      	orrs	r3, r2
 8015f50:	61fb      	str	r3, [r7, #28]
			//id_temp_rom_high = (((uint32_t)id_fram[0])<<24)|(((uint32_t)id_fram[1])<<16)|(((uint32_t)id_fram[2])<<8)|((uint32_t)id_fram[3]);
			//id_temp_rom_low = (((uint32_t)id_fram[4])<<24)|(((uint32_t)id_fram[5])<<16)|(((uint32_t)id_fram[6])<<8)|((uint32_t)id_fram[7]);
			if( (id_temp_rom_high == id->IbuttonROM_High) && (id_temp_rom_low == id->IbuttonROM_Low) )
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	6a3a      	ldr	r2, [r7, #32]
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d106      	bne.n	8015f6a <ibutton_search_rom+0x86>
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	685b      	ldr	r3, [r3, #4]
 8015f60:	69fa      	ldr	r2, [r7, #28]
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d101      	bne.n	8015f6a <ibutton_search_rom+0x86>
			{
				return HAL_OK;
 8015f66:	2300      	movs	r3, #0
 8015f68:	e007      	b.n	8015f7a <ibutton_search_rom+0x96>
	for(uint16_t add=0x1310; add<=0x1F80; add=add+16)
 8015f6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f6c:	3310      	adds	r3, #16
 8015f6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015f70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f72:	f5b3 5ffc 	cmp.w	r3, #8064	; 0x1f80
 8015f76:	d9c1      	bls.n	8015efc <ibutton_search_rom+0x18>
			//{
				//return HAL_ERROR;
			//}
		//}
	}
	return HAL_ERROR;
 8015f78:	2301      	movs	r3, #1
			}
		}
	}
	return HAL_ERROR;
	*/
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3728      	adds	r7, #40	; 0x28
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}
 8015f82:	bf00      	nop
 8015f84:	20009a6c 	.word	0x20009a6c

08015f88 <find_str>:

//uint8_t send_ok[] = "SEND OK\r\n";
uint8_t send_ok[] = "SEND OK";

uint8_t find_str(uint8_t* buf_in, uint16_t buf_in_len, uint8_t* buf_search, uint16_t buf_search_len)
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b087      	sub	sp, #28
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	60f8      	str	r0, [r7, #12]
 8015f90:	607a      	str	r2, [r7, #4]
 8015f92:	461a      	mov	r2, r3
 8015f94:	460b      	mov	r3, r1
 8015f96:	817b      	strh	r3, [r7, #10]
 8015f98:	4613      	mov	r3, r2
 8015f9a:	813b      	strh	r3, [r7, #8]
	uint8_t j=0;
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i=0; i<buf_in_len; i++)
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	75bb      	strb	r3, [r7, #22]
 8015fa4:	e018      	b.n	8015fd8 <find_str+0x50>
	{
		if( *( buf_in+i ) == *(buf_search+j) )
 8015fa6:	7dbb      	ldrb	r3, [r7, #22]
 8015fa8:	68fa      	ldr	r2, [r7, #12]
 8015faa:	4413      	add	r3, r2
 8015fac:	781a      	ldrb	r2, [r3, #0]
 8015fae:	7dfb      	ldrb	r3, [r7, #23]
 8015fb0:	6879      	ldr	r1, [r7, #4]
 8015fb2:	440b      	add	r3, r1
 8015fb4:	781b      	ldrb	r3, [r3, #0]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d109      	bne.n	8015fce <find_str+0x46>
		{
			j++;
 8015fba:	7dfb      	ldrb	r3, [r7, #23]
 8015fbc:	3301      	adds	r3, #1
 8015fbe:	75fb      	strb	r3, [r7, #23]
			if(j>=buf_search_len)
 8015fc0:	7dfb      	ldrb	r3, [r7, #23]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	893a      	ldrh	r2, [r7, #8]
 8015fc6:	429a      	cmp	r2, r3
 8015fc8:	d803      	bhi.n	8015fd2 <find_str+0x4a>
			{
				return 1;
 8015fca:	2301      	movs	r3, #1
 8015fcc:	e00a      	b.n	8015fe4 <find_str+0x5c>
			}
		}
		else
		{
			j=0;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<buf_in_len; i++)
 8015fd2:	7dbb      	ldrb	r3, [r7, #22]
 8015fd4:	3301      	adds	r3, #1
 8015fd6:	75bb      	strb	r3, [r7, #22]
 8015fd8:	7dbb      	ldrb	r3, [r7, #22]
 8015fda:	b29b      	uxth	r3, r3
 8015fdc:	897a      	ldrh	r2, [r7, #10]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d8e1      	bhi.n	8015fa6 <find_str+0x1e>
		}
	}

	return 0;
 8015fe2:	2300      	movs	r3, #0
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	371c      	adds	r7, #28
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr

08015ff0 <m95_power_on>:

void m95_power_on(void) // функция включения питания
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	2140      	movs	r1, #64	; 0x40
 8015ff8:	480a      	ldr	r0, [pc, #40]	; (8016024 <m95_power_on+0x34>)
 8015ffa:	f7ed f937 	bl	800326c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8015ffe:	2064      	movs	r0, #100	; 0x64
 8016000:	f7eb fe80 	bl	8001d04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8016004:	2201      	movs	r2, #1
 8016006:	2140      	movs	r1, #64	; 0x40
 8016008:	4806      	ldr	r0, [pc, #24]	; (8016024 <m95_power_on+0x34>)
 801600a:	f7ed f92f 	bl	800326c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 801600e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016012:	f7eb fe77 	bl	8001d04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 8016016:	2200      	movs	r2, #0
 8016018:	2140      	movs	r1, #64	; 0x40
 801601a:	4802      	ldr	r0, [pc, #8]	; (8016024 <m95_power_on+0x34>)
 801601c:	f7ed f926 	bl	800326c <HAL_GPIO_WritePin>
}
 8016020:	bf00      	nop
 8016022:	bd80      	pop	{r7, pc}
 8016024:	40021c00 	.word	0x40021c00

08016028 <m95_power_off>:

void m95_power_off(void)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 801602c:	2200      	movs	r2, #0
 801602e:	2140      	movs	r1, #64	; 0x40
 8016030:	480a      	ldr	r0, [pc, #40]	; (801605c <m95_power_off+0x34>)
 8016032:	f7ed f91b 	bl	800326c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8016036:	2064      	movs	r0, #100	; 0x64
 8016038:	f7eb fe64 	bl	8001d04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 801603c:	2201      	movs	r2, #1
 801603e:	2140      	movs	r1, #64	; 0x40
 8016040:	4806      	ldr	r0, [pc, #24]	; (801605c <m95_power_off+0x34>)
 8016042:	f7ed f913 	bl	800326c <HAL_GPIO_WritePin>
	HAL_Delay(700);
 8016046:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 801604a:	f7eb fe5b 	bl	8001d04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 801604e:	2200      	movs	r2, #0
 8016050:	2140      	movs	r1, #64	; 0x40
 8016052:	4802      	ldr	r0, [pc, #8]	; (801605c <m95_power_off+0x34>)
 8016054:	f7ed f90a 	bl	800326c <HAL_GPIO_WritePin>
}
 8016058:	bf00      	nop
 801605a:	bd80      	pop	{r7, pc}
 801605c:	40021c00 	.word	0x40021c00

08016060 <modem_rx_buffer_clear>:



void modem_rx_buffer_clear (void)
{
 8016060:	b480      	push	{r7}
 8016062:	b083      	sub	sp, #12
 8016064:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 8016066:	2300      	movs	r3, #0
 8016068:	80fb      	strh	r3, [r7, #6]
 801606a:	e006      	b.n	801607a <modem_rx_buffer_clear+0x1a>
	{
		modem_rx_buffer[i] = 0;
 801606c:	88fb      	ldrh	r3, [r7, #6]
 801606e:	4a08      	ldr	r2, [pc, #32]	; (8016090 <modem_rx_buffer_clear+0x30>)
 8016070:	2100      	movs	r1, #0
 8016072:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 8016074:	88fb      	ldrh	r3, [r7, #6]
 8016076:	3301      	adds	r3, #1
 8016078:	80fb      	strh	r3, [r7, #6]
 801607a:	88fb      	ldrh	r3, [r7, #6]
 801607c:	2bff      	cmp	r3, #255	; 0xff
 801607e:	d9f5      	bls.n	801606c <modem_rx_buffer_clear+0xc>
	}
}
 8016080:	bf00      	nop
 8016082:	bf00      	nop
 8016084:	370c      	adds	r7, #12
 8016086:	46bd      	mov	sp, r7
 8016088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608c:	4770      	bx	lr
 801608e:	bf00      	nop
 8016090:	20009b70 	.word	0x20009b70

08016094 <ATE0>:

uint8_t ATE0 (void)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
	char str_out[5];
	sprintf(str_out, "ATE0\n");
 801609a:	463b      	mov	r3, r7
 801609c:	491f      	ldr	r1, [pc, #124]	; (801611c <ATE0+0x88>)
 801609e:	4618      	mov	r0, r3
 80160a0:	f003 fc46 	bl	8019930 <siprintf>

	read_rx_state = ACTIVE;
 80160a4:	4b1e      	ldr	r3, [pc, #120]	; (8016120 <ATE0+0x8c>)
 80160a6:	2201      	movs	r2, #1
 80160a8:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 80160aa:	4b1e      	ldr	r3, [pc, #120]	; (8016124 <ATE0+0x90>)
 80160ac:	2200      	movs	r2, #0
 80160ae:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 80160b0:	f7ff ffd6 	bl	8016060 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 80160b4:	2201      	movs	r2, #1
 80160b6:	491c      	ldr	r1, [pc, #112]	; (8016128 <ATE0+0x94>)
 80160b8:	481c      	ldr	r0, [pc, #112]	; (801612c <ATE0+0x98>)
 80160ba:	f7ef fc0d 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 5);
 80160be:	463b      	mov	r3, r7
 80160c0:	2205      	movs	r2, #5
 80160c2:	4619      	mov	r1, r3
 80160c4:	4819      	ldr	r0, [pc, #100]	; (801612c <ATE0+0x98>)
 80160c6:	f7ef fb89 	bl	80057dc <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 80160ca:	4b19      	ldr	r3, [pc, #100]	; (8016130 <ATE0+0x9c>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	f04f 31ff 	mov.w	r1, #4294967295
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7f0 fef4 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 80160d8:	4b16      	ldr	r3, [pc, #88]	; (8016134 <ATE0+0xa0>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80160e0:	4618      	mov	r0, r3
 80160e2:	f7f0 fd91 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 80160e6:	e010      	b.n	801610a <ATE0+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 80160e8:	4913      	ldr	r1, [pc, #76]	; (8016138 <ATE0+0xa4>)
 80160ea:	4814      	ldr	r0, [pc, #80]	; (801613c <ATE0+0xa8>)
 80160ec:	f003 fc83 	bl	80199f6 <strstr>
 80160f0:	4603      	mov	r3, r0
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d009      	beq.n	801610a <ATE0+0x76>
		{
			osTimerStop(AT_TimerHandle);
 80160f6:	4b0f      	ldr	r3, [pc, #60]	; (8016134 <ATE0+0xa0>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7f0 fdc8 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016100:	4b07      	ldr	r3, [pc, #28]	; (8016120 <ATE0+0x8c>)
 8016102:	2200      	movs	r2, #0
 8016104:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8016106:	2300      	movs	r3, #0
 8016108:	e004      	b.n	8016114 <ATE0+0x80>
	while(read_rx_state == ACTIVE)
 801610a:	4b05      	ldr	r3, [pc, #20]	; (8016120 <ATE0+0x8c>)
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	2b01      	cmp	r3, #1
 8016110:	d0ea      	beq.n	80160e8 <ATE0+0x54>
		}
	}
	return AT_ERROR;
 8016112:	2301      	movs	r3, #1
}
 8016114:	4618      	mov	r0, r3
 8016116:	3708      	adds	r7, #8
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}
 801611c:	0801a8a0 	.word	0x0801a8a0
 8016120:	20009a2c 	.word	0x20009a2c
 8016124:	2000085c 	.word	0x2000085c
 8016128:	20009a70 	.word	0x20009a70
 801612c:	20008238 	.word	0x20008238
 8016130:	20009cb8 	.word	0x20009cb8
 8016134:	20009698 	.word	0x20009698
 8016138:	0801a8a8 	.word	0x0801a8a8
 801613c:	20009b70 	.word	0x20009b70

08016140 <AT>:




uint8_t AT (void)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
	char str_out[3];
	sprintf(str_out, "AT\n");
 8016146:	1d3b      	adds	r3, r7, #4
 8016148:	491f      	ldr	r1, [pc, #124]	; (80161c8 <AT+0x88>)
 801614a:	4618      	mov	r0, r3
 801614c:	f003 fbf0 	bl	8019930 <siprintf>

	read_rx_state = ACTIVE;
 8016150:	4b1e      	ldr	r3, [pc, #120]	; (80161cc <AT+0x8c>)
 8016152:	2201      	movs	r2, #1
 8016154:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8016156:	4b1e      	ldr	r3, [pc, #120]	; (80161d0 <AT+0x90>)
 8016158:	2200      	movs	r2, #0
 801615a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 801615c:	f7ff ff80 	bl	8016060 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016160:	2201      	movs	r2, #1
 8016162:	491c      	ldr	r1, [pc, #112]	; (80161d4 <AT+0x94>)
 8016164:	481c      	ldr	r0, [pc, #112]	; (80161d8 <AT+0x98>)
 8016166:	f7ef fbb7 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 3);
 801616a:	1d3b      	adds	r3, r7, #4
 801616c:	2203      	movs	r2, #3
 801616e:	4619      	mov	r1, r3
 8016170:	4819      	ldr	r0, [pc, #100]	; (80161d8 <AT+0x98>)
 8016172:	f7ef fb33 	bl	80057dc <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8016176:	4b19      	ldr	r3, [pc, #100]	; (80161dc <AT+0x9c>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	f04f 31ff 	mov.w	r1, #4294967295
 801617e:	4618      	mov	r0, r3
 8016180:	f7f0 fe9e 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8016184:	4b16      	ldr	r3, [pc, #88]	; (80161e0 <AT+0xa0>)
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801618c:	4618      	mov	r0, r3
 801618e:	f7f0 fd3b 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8016192:	e010      	b.n	80161b6 <AT+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8016194:	4913      	ldr	r1, [pc, #76]	; (80161e4 <AT+0xa4>)
 8016196:	4814      	ldr	r0, [pc, #80]	; (80161e8 <AT+0xa8>)
 8016198:	f003 fc2d 	bl	80199f6 <strstr>
 801619c:	4603      	mov	r3, r0
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d009      	beq.n	80161b6 <AT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 80161a2:	4b0f      	ldr	r3, [pc, #60]	; (80161e0 <AT+0xa0>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7f0 fd72 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80161ac:	4b07      	ldr	r3, [pc, #28]	; (80161cc <AT+0x8c>)
 80161ae:	2200      	movs	r2, #0
 80161b0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 80161b2:	2300      	movs	r3, #0
 80161b4:	e004      	b.n	80161c0 <AT+0x80>
	while(read_rx_state == ACTIVE)
 80161b6:	4b05      	ldr	r3, [pc, #20]	; (80161cc <AT+0x8c>)
 80161b8:	781b      	ldrb	r3, [r3, #0]
 80161ba:	2b01      	cmp	r3, #1
 80161bc:	d0ea      	beq.n	8016194 <AT+0x54>
		}
	}
	return AT_ERROR;
 80161be:	2301      	movs	r3, #1
}
 80161c0:	4618      	mov	r0, r3
 80161c2:	3708      	adds	r7, #8
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	0801a8b0 	.word	0x0801a8b0
 80161cc:	20009a2c 	.word	0x20009a2c
 80161d0:	2000085c 	.word	0x2000085c
 80161d4:	20009a70 	.word	0x20009a70
 80161d8:	20008238 	.word	0x20008238
 80161dc:	20009cb8 	.word	0x20009cb8
 80161e0:	20009698 	.word	0x20009698
 80161e4:	0801a8a8 	.word	0x0801a8a8
 80161e8:	20009b70 	.word	0x20009b70

080161ec <AT_CSQ>:

uint8_t AT_CSQ (uint8_t* signal_level)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b084      	sub	sp, #16
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
	char str_out[7];
	sprintf(str_out, "AT+CSQ\n");
 80161f4:	f107 0308 	add.w	r3, r7, #8
 80161f8:	4931      	ldr	r1, [pc, #196]	; (80162c0 <AT_CSQ+0xd4>)
 80161fa:	4618      	mov	r0, r3
 80161fc:	f003 fb98 	bl	8019930 <siprintf>

	read_rx_state = ACTIVE;
 8016200:	4b30      	ldr	r3, [pc, #192]	; (80162c4 <AT_CSQ+0xd8>)
 8016202:	2201      	movs	r2, #1
 8016204:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8016206:	4b30      	ldr	r3, [pc, #192]	; (80162c8 <AT_CSQ+0xdc>)
 8016208:	2200      	movs	r2, #0
 801620a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 801620c:	f7ff ff28 	bl	8016060 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016210:	2201      	movs	r2, #1
 8016212:	492e      	ldr	r1, [pc, #184]	; (80162cc <AT_CSQ+0xe0>)
 8016214:	482e      	ldr	r0, [pc, #184]	; (80162d0 <AT_CSQ+0xe4>)
 8016216:	f7ef fb5f 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 7);
 801621a:	f107 0308 	add.w	r3, r7, #8
 801621e:	2207      	movs	r2, #7
 8016220:	4619      	mov	r1, r3
 8016222:	482b      	ldr	r0, [pc, #172]	; (80162d0 <AT_CSQ+0xe4>)
 8016224:	f7ef fada 	bl	80057dc <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_csq, 7);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8016228:	4b2a      	ldr	r3, [pc, #168]	; (80162d4 <AT_CSQ+0xe8>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	f04f 31ff 	mov.w	r1, #4294967295
 8016230:	4618      	mov	r0, r3
 8016232:	f7f0 fe45 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8016236:	4b28      	ldr	r3, [pc, #160]	; (80162d8 <AT_CSQ+0xec>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801623e:	4618      	mov	r0, r3
 8016240:	f7f0 fce2 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8016244:	e033      	b.n	80162ae <AT_CSQ+0xc2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "+CSQ:") != NULL )
 8016246:	4925      	ldr	r1, [pc, #148]	; (80162dc <AT_CSQ+0xf0>)
 8016248:	4825      	ldr	r0, [pc, #148]	; (80162e0 <AT_CSQ+0xf4>)
 801624a:	f003 fbd4 	bl	80199f6 <strstr>
 801624e:	4603      	mov	r3, r0
 8016250:	2b00      	cmp	r3, #0
 8016252:	d01b      	beq.n	801628c <AT_CSQ+0xa0>
		{
			if(modem_rx_buffer[9]==',') // в случае, если ATE0 (эхо выключено)
 8016254:	4b22      	ldr	r3, [pc, #136]	; (80162e0 <AT_CSQ+0xf4>)
 8016256:	7a5b      	ldrb	r3, [r3, #9]
 8016258:	2b2c      	cmp	r3, #44	; 0x2c
 801625a:	d106      	bne.n	801626a <AT_CSQ+0x7e>
			{
				*signal_level = modem_rx_buffer[8]-0x30;
 801625c:	4b20      	ldr	r3, [pc, #128]	; (80162e0 <AT_CSQ+0xf4>)
 801625e:	7a1b      	ldrb	r3, [r3, #8]
 8016260:	3b30      	subs	r3, #48	; 0x30
 8016262:	b2da      	uxtb	r2, r3
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	701a      	strb	r2, [r3, #0]
 8016268:	e010      	b.n	801628c <AT_CSQ+0xa0>
			}
			else
			{
				*signal_level = (modem_rx_buffer[8]-0x30)*10 + (modem_rx_buffer[9]-0x30);
 801626a:	4b1d      	ldr	r3, [pc, #116]	; (80162e0 <AT_CSQ+0xf4>)
 801626c:	7a1b      	ldrb	r3, [r3, #8]
 801626e:	3b30      	subs	r3, #48	; 0x30
 8016270:	b2db      	uxtb	r3, r3
 8016272:	461a      	mov	r2, r3
 8016274:	0092      	lsls	r2, r2, #2
 8016276:	4413      	add	r3, r2
 8016278:	005b      	lsls	r3, r3, #1
 801627a:	b2da      	uxtb	r2, r3
 801627c:	4b18      	ldr	r3, [pc, #96]	; (80162e0 <AT_CSQ+0xf4>)
 801627e:	7a5b      	ldrb	r3, [r3, #9]
 8016280:	4413      	add	r3, r2
 8016282:	b2db      	uxtb	r3, r3
 8016284:	3b30      	subs	r3, #48	; 0x30
 8016286:	b2da      	uxtb	r2, r3
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	701a      	strb	r2, [r3, #0]
			{
				*signal_level = (modem_rx_buffer[14]-0x30)*10 + (modem_rx_buffer[15]-0x30);
			}
			*/
		}
		if(strstr(modem_rx_buffer, "OK") != NULL )
 801628c:	4915      	ldr	r1, [pc, #84]	; (80162e4 <AT_CSQ+0xf8>)
 801628e:	4814      	ldr	r0, [pc, #80]	; (80162e0 <AT_CSQ+0xf4>)
 8016290:	f003 fbb1 	bl	80199f6 <strstr>
 8016294:	4603      	mov	r3, r0
 8016296:	2b00      	cmp	r3, #0
 8016298:	d009      	beq.n	80162ae <AT_CSQ+0xc2>
		{
			osTimerStop(AT_TimerHandle);
 801629a:	4b0f      	ldr	r3, [pc, #60]	; (80162d8 <AT_CSQ+0xec>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	4618      	mov	r0, r3
 80162a0:	f7f0 fcf6 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80162a4:	4b07      	ldr	r3, [pc, #28]	; (80162c4 <AT_CSQ+0xd8>)
 80162a6:	2200      	movs	r2, #0
 80162a8:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 80162aa:	2300      	movs	r3, #0
 80162ac:	e004      	b.n	80162b8 <AT_CSQ+0xcc>
	while(read_rx_state == ACTIVE)
 80162ae:	4b05      	ldr	r3, [pc, #20]	; (80162c4 <AT_CSQ+0xd8>)
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	2b01      	cmp	r3, #1
 80162b4:	d0c7      	beq.n	8016246 <AT_CSQ+0x5a>
		}
	}
	return AT_ERROR;
 80162b6:	2301      	movs	r3, #1
}
 80162b8:	4618      	mov	r0, r3
 80162ba:	3710      	adds	r7, #16
 80162bc:	46bd      	mov	sp, r7
 80162be:	bd80      	pop	{r7, pc}
 80162c0:	0801a8b4 	.word	0x0801a8b4
 80162c4:	20009a2c 	.word	0x20009a2c
 80162c8:	2000085c 	.word	0x2000085c
 80162cc:	20009a70 	.word	0x20009a70
 80162d0:	20008238 	.word	0x20008238
 80162d4:	20009cb8 	.word	0x20009cb8
 80162d8:	20009698 	.word	0x20009698
 80162dc:	0801a8bc 	.word	0x0801a8bc
 80162e0:	20009b70 	.word	0x20009b70
 80162e4:	0801a8c4 	.word	0x0801a8c4

080162e8 <AT_QCCID>:

uint8_t AT_QCCID ( uint8_t* id, uint64_t* temp_id) // Команда для для чтения CCID сим карты. id - указатель к массиву в которую будет сохраняться CCID симкарты (должен быть 8 байт), temp_id - указатель к временному массиву для расчета (должен быть 20 байт)
{
 80162e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80162ec:	b0ae      	sub	sp, #184	; 0xb8
 80162ee:	af00      	add	r7, sp, #0
 80162f0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80162f4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
	//uint64_t id1[20];
	char str_out[9];
	sprintf(str_out, "AT+QCCID\n");
 80162f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80162fc:	491d      	ldr	r1, [pc, #116]	; (8016374 <AT_QCCID+0x8c>)
 80162fe:	4618      	mov	r0, r3
 8016300:	f003 fb16 	bl	8019930 <siprintf>
	read_rx_state = ACTIVE;
 8016304:	4a1c      	ldr	r2, [pc, #112]	; (8016378 <AT_QCCID+0x90>)
 8016306:	2301      	movs	r3, #1
 8016308:	7013      	strb	r3, [r2, #0]
	modem_rx_number = 0;
 801630a:	4a1c      	ldr	r2, [pc, #112]	; (801637c <AT_QCCID+0x94>)
 801630c:	2300      	movs	r3, #0
 801630e:	7013      	strb	r3, [r2, #0]
	modem_rx_buffer_clear();
 8016310:	f7ff fea6 	bl	8016060 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016314:	2201      	movs	r2, #1
 8016316:	491a      	ldr	r1, [pc, #104]	; (8016380 <AT_QCCID+0x98>)
 8016318:	481a      	ldr	r0, [pc, #104]	; (8016384 <AT_QCCID+0x9c>)
 801631a:	f7ef fadd 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 801631e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8016322:	2209      	movs	r2, #9
 8016324:	4619      	mov	r1, r3
 8016326:	4817      	ldr	r0, [pc, #92]	; (8016384 <AT_QCCID+0x9c>)
 8016328:	f7ef fa58 	bl	80057dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 801632c:	4b16      	ldr	r3, [pc, #88]	; (8016388 <AT_QCCID+0xa0>)
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	f04f 31ff 	mov.w	r1, #4294967295
 8016334:	4618      	mov	r0, r3
 8016336:	f7f0 fdc3 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 801633a:	4b14      	ldr	r3, [pc, #80]	; (801638c <AT_QCCID+0xa4>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8016342:	4618      	mov	r0, r3
 8016344:	f7f0 fc60 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8016348:	e34b      	b.n	80169e2 <AT_QCCID+0x6fa>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 801634a:	4911      	ldr	r1, [pc, #68]	; (8016390 <AT_QCCID+0xa8>)
 801634c:	4811      	ldr	r0, [pc, #68]	; (8016394 <AT_QCCID+0xac>)
 801634e:	f003 fb52 	bl	80199f6 <strstr>
 8016352:	4603      	mov	r3, r0
 8016354:	2b00      	cmp	r3, #0
 8016356:	f000 8344 	beq.w	80169e2 <AT_QCCID+0x6fa>
		{
			osTimerStop(AT_TimerHandle);
 801635a:	4b0c      	ldr	r3, [pc, #48]	; (801638c <AT_QCCID+0xa4>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	4618      	mov	r0, r3
 8016360:	f7f0 fc96 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016364:	4a04      	ldr	r2, [pc, #16]	; (8016378 <AT_QCCID+0x90>)
 8016366:	2300      	movs	r3, #0
 8016368:	7013      	strb	r3, [r2, #0]

			// В случае, когда ATE0, эхо выключено
			for(uint8_t i=0; i<19; i++)
 801636a:	2300      	movs	r3, #0
 801636c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8016370:	e029      	b.n	80163c6 <AT_QCCID+0xde>
 8016372:	bf00      	nop
 8016374:	0801a8c8 	.word	0x0801a8c8
 8016378:	20009a2c 	.word	0x20009a2c
 801637c:	2000085c 	.word	0x2000085c
 8016380:	20009a70 	.word	0x20009a70
 8016384:	20008238 	.word	0x20008238
 8016388:	20009cb8 	.word	0x20009cb8
 801638c:	20009698 	.word	0x20009698
 8016390:	0801a8a8 	.word	0x0801a8a8
 8016394:	20009b70 	.word	0x20009b70
			{
				*(temp_id+i) = (uint8_t)modem_rx_buffer[2+i] - 48;
 8016398:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 801639c:	1c9a      	adds	r2, r3, #2
 801639e:	4bde      	ldr	r3, [pc, #888]	; (8016718 <AT_QCCID+0x430>)
 80163a0:	5c9b      	ldrb	r3, [r3, r2]
 80163a2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80163a6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80163aa:	00da      	lsls	r2, r3, #3
 80163ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80163b0:	1899      	adds	r1, r3, r2
 80163b2:	4602      	mov	r2, r0
 80163b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80163b8:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t i=0; i<19; i++)
 80163bc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80163c0:	3301      	adds	r3, #1
 80163c2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80163c6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80163ca:	2b12      	cmp	r3, #18
 80163cc:	d9e4      	bls.n	8016398 <AT_QCCID+0xb0>
				*(temp_id+i) = (uint8_t)modem_rx_buffer[10+i] - 48;
				//temp_id[i] = (uint8_t)modem_rx_buffer[10+i] - 48;
			}
			*/

			*(temp_id+19) = *temp_id*1000000000000000000 + *(temp_id+1)*100000000000000000 + *(temp_id+2)*10000000000000000 + *(temp_id+3)*1000000000000000 + *(temp_id+4)*100000000000000 + *(temp_id+5)*10000000000000 + *(temp_id+6)*1000000000000 + *(temp_id+7)*100000000000 + *(temp_id+8)*10000000000 + *(temp_id+9)*1000000000 + *(temp_id+10)*100000000 + *(temp_id+11)*10000000 + *(temp_id+12)*1000000 + *(temp_id+13)*100000 + *(temp_id+14)*10000 + *(temp_id+15)*1000 + *(temp_id+16)*100 + *(temp_id+17)*10 + *(temp_id+18);
 80163ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80163d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d6:	49d1      	ldr	r1, [pc, #836]	; (801671c <AT_QCCID+0x434>)
 80163d8:	fb01 f003 	mul.w	r0, r1, r3
 80163dc:	49d0      	ldr	r1, [pc, #832]	; (8016720 <AT_QCCID+0x438>)
 80163de:	fb01 f102 	mul.w	r1, r1, r2
 80163e2:	4408      	add	r0, r1
 80163e4:	49cd      	ldr	r1, [pc, #820]	; (801671c <AT_QCCID+0x434>)
 80163e6:	fba2 4501 	umull	r4, r5, r2, r1
 80163ea:	1943      	adds	r3, r0, r5
 80163ec:	461d      	mov	r5, r3
 80163ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80163f2:	3308      	adds	r3, #8
 80163f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f8:	49ca      	ldr	r1, [pc, #808]	; (8016724 <AT_QCCID+0x43c>)
 80163fa:	fb01 f003 	mul.w	r0, r1, r3
 80163fe:	49ca      	ldr	r1, [pc, #808]	; (8016728 <AT_QCCID+0x440>)
 8016400:	fb01 f102 	mul.w	r1, r1, r2
 8016404:	4408      	add	r0, r1
 8016406:	49c7      	ldr	r1, [pc, #796]	; (8016724 <AT_QCCID+0x43c>)
 8016408:	fba2 2301 	umull	r2, r3, r2, r1
 801640c:	18c1      	adds	r1, r0, r3
 801640e:	460b      	mov	r3, r1
 8016410:	eb14 0a02 	adds.w	sl, r4, r2
 8016414:	eb45 0b03 	adc.w	fp, r5, r3
 8016418:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801641c:	3318      	adds	r3, #24
 801641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016422:	49c2      	ldr	r1, [pc, #776]	; (801672c <AT_QCCID+0x444>)
 8016424:	fb01 f003 	mul.w	r0, r1, r3
 8016428:	49c1      	ldr	r1, [pc, #772]	; (8016730 <AT_QCCID+0x448>)
 801642a:	fb01 f102 	mul.w	r1, r1, r2
 801642e:	4408      	add	r0, r1
 8016430:	49be      	ldr	r1, [pc, #760]	; (801672c <AT_QCCID+0x444>)
 8016432:	fba2 4501 	umull	r4, r5, r2, r1
 8016436:	1943      	adds	r3, r0, r5
 8016438:	461d      	mov	r5, r3
 801643a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801643e:	3310      	adds	r3, #16
 8016440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016444:	49bb      	ldr	r1, [pc, #748]	; (8016734 <AT_QCCID+0x44c>)
 8016446:	fb01 f003 	mul.w	r0, r1, r3
 801644a:	49bb      	ldr	r1, [pc, #748]	; (8016738 <AT_QCCID+0x450>)
 801644c:	fb01 f102 	mul.w	r1, r1, r2
 8016450:	4408      	add	r0, r1
 8016452:	49b8      	ldr	r1, [pc, #736]	; (8016734 <AT_QCCID+0x44c>)
 8016454:	fba2 2301 	umull	r2, r3, r2, r1
 8016458:	18c1      	adds	r1, r0, r3
 801645a:	460b      	mov	r3, r1
 801645c:	eb14 0802 	adds.w	r8, r4, r2
 8016460:	eb45 0903 	adc.w	r9, r5, r3
 8016464:	eb1a 0308 	adds.w	r3, sl, r8
 8016468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801646c:	eb4b 0309 	adc.w	r3, fp, r9
 8016470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016474:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016478:	3328      	adds	r3, #40	; 0x28
 801647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801647e:	49af      	ldr	r1, [pc, #700]	; (801673c <AT_QCCID+0x454>)
 8016480:	fb01 f003 	mul.w	r0, r1, r3
 8016484:	f640 1118 	movw	r1, #2328	; 0x918
 8016488:	fb01 f102 	mul.w	r1, r1, r2
 801648c:	4408      	add	r0, r1
 801648e:	49ab      	ldr	r1, [pc, #684]	; (801673c <AT_QCCID+0x454>)
 8016490:	fba2 4501 	umull	r4, r5, r2, r1
 8016494:	1943      	adds	r3, r0, r5
 8016496:	461d      	mov	r5, r3
 8016498:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801649c:	3320      	adds	r3, #32
 801649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a2:	49a7      	ldr	r1, [pc, #668]	; (8016740 <AT_QCCID+0x458>)
 80164a4:	fb01 f003 	mul.w	r0, r1, r3
 80164a8:	f645 21f3 	movw	r1, #23283	; 0x5af3
 80164ac:	fb01 f102 	mul.w	r1, r1, r2
 80164b0:	4408      	add	r0, r1
 80164b2:	49a3      	ldr	r1, [pc, #652]	; (8016740 <AT_QCCID+0x458>)
 80164b4:	fba2 2301 	umull	r2, r3, r2, r1
 80164b8:	18c1      	adds	r1, r0, r3
 80164ba:	460b      	mov	r3, r1
 80164bc:	18a1      	adds	r1, r4, r2
 80164be:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80164c2:	eb45 0303 	adc.w	r3, r5, r3
 80164c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80164ca:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80164ce:	4623      	mov	r3, r4
 80164d0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80164d4:	4602      	mov	r2, r0
 80164d6:	189b      	adds	r3, r3, r2
 80164d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80164dc:	460b      	mov	r3, r1
 80164de:	462a      	mov	r2, r5
 80164e0:	eb42 0303 	adc.w	r3, r2, r3
 80164e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80164e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80164ec:	3338      	adds	r3, #56	; 0x38
 80164ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f2:	4994      	ldr	r1, [pc, #592]	; (8016744 <AT_QCCID+0x45c>)
 80164f4:	fb01 f003 	mul.w	r0, r1, r3
 80164f8:	2117      	movs	r1, #23
 80164fa:	fb01 f102 	mul.w	r1, r1, r2
 80164fe:	4408      	add	r0, r1
 8016500:	4990      	ldr	r1, [pc, #576]	; (8016744 <AT_QCCID+0x45c>)
 8016502:	fba2 4501 	umull	r4, r5, r2, r1
 8016506:	1943      	adds	r3, r0, r5
 8016508:	461d      	mov	r5, r3
 801650a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801650e:	3330      	adds	r3, #48	; 0x30
 8016510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016514:	498c      	ldr	r1, [pc, #560]	; (8016748 <AT_QCCID+0x460>)
 8016516:	fb01 f003 	mul.w	r0, r1, r3
 801651a:	21e8      	movs	r1, #232	; 0xe8
 801651c:	fb01 f102 	mul.w	r1, r1, r2
 8016520:	4408      	add	r0, r1
 8016522:	4989      	ldr	r1, [pc, #548]	; (8016748 <AT_QCCID+0x460>)
 8016524:	fba2 2301 	umull	r2, r3, r2, r1
 8016528:	18c1      	adds	r1, r0, r3
 801652a:	460b      	mov	r3, r1
 801652c:	18a1      	adds	r1, r4, r2
 801652e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8016532:	eb45 0303 	adc.w	r3, r5, r3
 8016536:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801653a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 801653e:	4623      	mov	r3, r4
 8016540:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8016544:	4602      	mov	r2, r0
 8016546:	189b      	adds	r3, r3, r2
 8016548:	67bb      	str	r3, [r7, #120]	; 0x78
 801654a:	460b      	mov	r3, r1
 801654c:	462a      	mov	r2, r5
 801654e:	eb42 0303 	adc.w	r3, r2, r3
 8016552:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016554:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016558:	3348      	adds	r3, #72	; 0x48
 801655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801655e:	497b      	ldr	r1, [pc, #492]	; (801674c <AT_QCCID+0x464>)
 8016560:	fb01 f003 	mul.w	r0, r1, r3
 8016564:	2100      	movs	r1, #0
 8016566:	fb01 f102 	mul.w	r1, r1, r2
 801656a:	4408      	add	r0, r1
 801656c:	4977      	ldr	r1, [pc, #476]	; (801674c <AT_QCCID+0x464>)
 801656e:	fba2 4501 	umull	r4, r5, r2, r1
 8016572:	1943      	adds	r3, r0, r5
 8016574:	461d      	mov	r5, r3
 8016576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801657a:	3340      	adds	r3, #64	; 0x40
 801657c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016580:	4973      	ldr	r1, [pc, #460]	; (8016750 <AT_QCCID+0x468>)
 8016582:	fb01 f003 	mul.w	r0, r1, r3
 8016586:	2102      	movs	r1, #2
 8016588:	fb01 f102 	mul.w	r1, r1, r2
 801658c:	4408      	add	r0, r1
 801658e:	4970      	ldr	r1, [pc, #448]	; (8016750 <AT_QCCID+0x468>)
 8016590:	fba2 2301 	umull	r2, r3, r2, r1
 8016594:	18c1      	adds	r1, r0, r3
 8016596:	460b      	mov	r3, r1
 8016598:	18a1      	adds	r1, r4, r2
 801659a:	6739      	str	r1, [r7, #112]	; 0x70
 801659c:	eb45 0303 	adc.w	r3, r5, r3
 80165a0:	677b      	str	r3, [r7, #116]	; 0x74
 80165a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80165a6:	4623      	mov	r3, r4
 80165a8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80165ac:	4602      	mov	r2, r0
 80165ae:	189b      	adds	r3, r3, r2
 80165b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80165b2:	460b      	mov	r3, r1
 80165b4:	462a      	mov	r2, r5
 80165b6:	eb42 0303 	adc.w	r3, r2, r3
 80165ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80165bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80165c0:	3358      	adds	r3, #88	; 0x58
 80165c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c6:	4963      	ldr	r1, [pc, #396]	; (8016754 <AT_QCCID+0x46c>)
 80165c8:	fb01 f003 	mul.w	r0, r1, r3
 80165cc:	2100      	movs	r1, #0
 80165ce:	fb01 f102 	mul.w	r1, r1, r2
 80165d2:	4408      	add	r0, r1
 80165d4:	495f      	ldr	r1, [pc, #380]	; (8016754 <AT_QCCID+0x46c>)
 80165d6:	fba2 4501 	umull	r4, r5, r2, r1
 80165da:	1943      	adds	r3, r0, r5
 80165dc:	461d      	mov	r5, r3
 80165de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80165e2:	3350      	adds	r3, #80	; 0x50
 80165e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165e8:	495b      	ldr	r1, [pc, #364]	; (8016758 <AT_QCCID+0x470>)
 80165ea:	fb01 f003 	mul.w	r0, r1, r3
 80165ee:	2100      	movs	r1, #0
 80165f0:	fb01 f102 	mul.w	r1, r1, r2
 80165f4:	4408      	add	r0, r1
 80165f6:	4958      	ldr	r1, [pc, #352]	; (8016758 <AT_QCCID+0x470>)
 80165f8:	fba2 2301 	umull	r2, r3, r2, r1
 80165fc:	18c1      	adds	r1, r0, r3
 80165fe:	460b      	mov	r3, r1
 8016600:	18a1      	adds	r1, r4, r2
 8016602:	6639      	str	r1, [r7, #96]	; 0x60
 8016604:	eb45 0303 	adc.w	r3, r5, r3
 8016608:	667b      	str	r3, [r7, #100]	; 0x64
 801660a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 801660e:	4623      	mov	r3, r4
 8016610:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8016614:	4602      	mov	r2, r0
 8016616:	189b      	adds	r3, r3, r2
 8016618:	65bb      	str	r3, [r7, #88]	; 0x58
 801661a:	460b      	mov	r3, r1
 801661c:	462a      	mov	r2, r5
 801661e:	eb42 0303 	adc.w	r3, r2, r3
 8016622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016624:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016628:	3368      	adds	r3, #104	; 0x68
 801662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801662e:	494b      	ldr	r1, [pc, #300]	; (801675c <AT_QCCID+0x474>)
 8016630:	fb01 f003 	mul.w	r0, r1, r3
 8016634:	2100      	movs	r1, #0
 8016636:	fb01 f102 	mul.w	r1, r1, r2
 801663a:	4408      	add	r0, r1
 801663c:	4947      	ldr	r1, [pc, #284]	; (801675c <AT_QCCID+0x474>)
 801663e:	fba2 8901 	umull	r8, r9, r2, r1
 8016642:	eb00 0309 	add.w	r3, r0, r9
 8016646:	4699      	mov	r9, r3
 8016648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801664c:	3360      	adds	r3, #96	; 0x60
 801664e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016652:	4622      	mov	r2, r4
 8016654:	462b      	mov	r3, r5
 8016656:	f04f 0000 	mov.w	r0, #0
 801665a:	f04f 0100 	mov.w	r1, #0
 801665e:	0159      	lsls	r1, r3, #5
 8016660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8016664:	0150      	lsls	r0, r2, #5
 8016666:	4602      	mov	r2, r0
 8016668:	460b      	mov	r3, r1
 801666a:	1b12      	subs	r2, r2, r4
 801666c:	eb63 0305 	sbc.w	r3, r3, r5
 8016670:	f04f 0000 	mov.w	r0, #0
 8016674:	f04f 0100 	mov.w	r1, #0
 8016678:	0259      	lsls	r1, r3, #9
 801667a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801667e:	0250      	lsls	r0, r2, #9
 8016680:	4602      	mov	r2, r0
 8016682:	460b      	mov	r3, r1
 8016684:	1912      	adds	r2, r2, r4
 8016686:	eb45 0303 	adc.w	r3, r5, r3
 801668a:	f04f 0000 	mov.w	r0, #0
 801668e:	f04f 0100 	mov.w	r1, #0
 8016692:	0199      	lsls	r1, r3, #6
 8016694:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8016698:	0190      	lsls	r0, r2, #6
 801669a:	1a80      	subs	r0, r0, r2
 801669c:	eb61 0103 	sbc.w	r1, r1, r3
 80166a0:	1903      	adds	r3, r0, r4
 80166a2:	653b      	str	r3, [r7, #80]	; 0x50
 80166a4:	eb41 0305 	adc.w	r3, r1, r5
 80166a8:	657b      	str	r3, [r7, #84]	; 0x54
 80166aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80166ae:	460b      	mov	r3, r1
 80166b0:	eb18 0303 	adds.w	r3, r8, r3
 80166b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80166b6:	4613      	mov	r3, r2
 80166b8:	eb49 0303 	adc.w	r3, r9, r3
 80166bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166be:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80166c2:	4623      	mov	r3, r4
 80166c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80166c8:	4602      	mov	r2, r0
 80166ca:	189b      	adds	r3, r3, r2
 80166cc:	643b      	str	r3, [r7, #64]	; 0x40
 80166ce:	460b      	mov	r3, r1
 80166d0:	462a      	mov	r2, r5
 80166d2:	eb42 0303 	adc.w	r3, r2, r3
 80166d6:	647b      	str	r3, [r7, #68]	; 0x44
 80166d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166dc:	3378      	adds	r3, #120	; 0x78
 80166de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80166e2:	4622      	mov	r2, r4
 80166e4:	462b      	mov	r3, r5
 80166e6:	f04f 0000 	mov.w	r0, #0
 80166ea:	f04f 0100 	mov.w	r1, #0
 80166ee:	0159      	lsls	r1, r3, #5
 80166f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80166f4:	0150      	lsls	r0, r2, #5
 80166f6:	4602      	mov	r2, r0
 80166f8:	460b      	mov	r3, r1
 80166fa:	1b12      	subs	r2, r2, r4
 80166fc:	eb63 0305 	sbc.w	r3, r3, r5
 8016700:	f04f 0000 	mov.w	r0, #0
 8016704:	f04f 0100 	mov.w	r1, #0
 8016708:	0099      	lsls	r1, r3, #2
 801670a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801670e:	0090      	lsls	r0, r2, #2
 8016710:	4602      	mov	r2, r0
 8016712:	460b      	mov	r3, r1
 8016714:	1912      	adds	r2, r2, r4
 8016716:	e023      	b.n	8016760 <AT_QCCID+0x478>
 8016718:	20009b70 	.word	0x20009b70
 801671c:	a7640000 	.word	0xa7640000
 8016720:	0de0b6b3 	.word	0x0de0b6b3
 8016724:	5d8a0000 	.word	0x5d8a0000
 8016728:	01634578 	.word	0x01634578
 801672c:	a4c68000 	.word	0xa4c68000
 8016730:	00038d7e 	.word	0x00038d7e
 8016734:	6fc10000 	.word	0x6fc10000
 8016738:	002386f2 	.word	0x002386f2
 801673c:	4e72a000 	.word	0x4e72a000
 8016740:	107a4000 	.word	0x107a4000
 8016744:	4876e800 	.word	0x4876e800
 8016748:	d4a51000 	.word	0xd4a51000
 801674c:	3b9aca00 	.word	0x3b9aca00
 8016750:	540be400 	.word	0x540be400
 8016754:	00989680 	.word	0x00989680
 8016758:	05f5e100 	.word	0x05f5e100
 801675c:	000186a0 	.word	0x000186a0
 8016760:	eb45 0303 	adc.w	r3, r5, r3
 8016764:	f04f 0000 	mov.w	r0, #0
 8016768:	f04f 0100 	mov.w	r1, #0
 801676c:	00d9      	lsls	r1, r3, #3
 801676e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016772:	00d0      	lsls	r0, r2, #3
 8016774:	4602      	mov	r2, r0
 8016776:	460b      	mov	r3, r1
 8016778:	4690      	mov	r8, r2
 801677a:	4699      	mov	r9, r3
 801677c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016780:	3370      	adds	r3, #112	; 0x70
 8016782:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016786:	4622      	mov	r2, r4
 8016788:	462b      	mov	r3, r5
 801678a:	f04f 0000 	mov.w	r0, #0
 801678e:	f04f 0100 	mov.w	r1, #0
 8016792:	0099      	lsls	r1, r3, #2
 8016794:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8016798:	0090      	lsls	r0, r2, #2
 801679a:	4602      	mov	r2, r0
 801679c:	460b      	mov	r3, r1
 801679e:	1912      	adds	r2, r2, r4
 80167a0:	eb45 0303 	adc.w	r3, r5, r3
 80167a4:	f04f 0000 	mov.w	r0, #0
 80167a8:	f04f 0100 	mov.w	r1, #0
 80167ac:	00d9      	lsls	r1, r3, #3
 80167ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80167b2:	00d0      	lsls	r0, r2, #3
 80167b4:	4602      	mov	r2, r0
 80167b6:	460b      	mov	r3, r1
 80167b8:	1b12      	subs	r2, r2, r4
 80167ba:	eb63 0305 	sbc.w	r3, r3, r5
 80167be:	f04f 0000 	mov.w	r0, #0
 80167c2:	f04f 0100 	mov.w	r1, #0
 80167c6:	0119      	lsls	r1, r3, #4
 80167c8:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80167cc:	0110      	lsls	r0, r2, #4
 80167ce:	4602      	mov	r2, r0
 80167d0:	460b      	mov	r3, r1
 80167d2:	1912      	adds	r2, r2, r4
 80167d4:	eb45 0303 	adc.w	r3, r5, r3
 80167d8:	f04f 0000 	mov.w	r0, #0
 80167dc:	f04f 0100 	mov.w	r1, #0
 80167e0:	0119      	lsls	r1, r3, #4
 80167e2:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80167e6:	0110      	lsls	r0, r2, #4
 80167e8:	4602      	mov	r2, r0
 80167ea:	460b      	mov	r3, r1
 80167ec:	eb18 0102 	adds.w	r1, r8, r2
 80167f0:	63b9      	str	r1, [r7, #56]	; 0x38
 80167f2:	eb49 0303 	adc.w	r3, r9, r3
 80167f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80167f8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80167fc:	4623      	mov	r3, r4
 80167fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016802:	4602      	mov	r2, r0
 8016804:	189b      	adds	r3, r3, r2
 8016806:	633b      	str	r3, [r7, #48]	; 0x30
 8016808:	460b      	mov	r3, r1
 801680a:	462a      	mov	r2, r5
 801680c:	eb42 0303 	adc.w	r3, r2, r3
 8016810:	637b      	str	r3, [r7, #52]	; 0x34
 8016812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016816:	3388      	adds	r3, #136	; 0x88
 8016818:	e9d3 4500 	ldrd	r4, r5, [r3]
 801681c:	4622      	mov	r2, r4
 801681e:	462b      	mov	r3, r5
 8016820:	f04f 0000 	mov.w	r0, #0
 8016824:	f04f 0100 	mov.w	r1, #0
 8016828:	0099      	lsls	r1, r3, #2
 801682a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801682e:	0090      	lsls	r0, r2, #2
 8016830:	4602      	mov	r2, r0
 8016832:	460b      	mov	r3, r1
 8016834:	1912      	adds	r2, r2, r4
 8016836:	eb45 0303 	adc.w	r3, r5, r3
 801683a:	1891      	adds	r1, r2, r2
 801683c:	60b9      	str	r1, [r7, #8]
 801683e:	415b      	adcs	r3, r3
 8016840:	60fb      	str	r3, [r7, #12]
 8016842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016846:	4690      	mov	r8, r2
 8016848:	4699      	mov	r9, r3
 801684a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801684e:	3380      	adds	r3, #128	; 0x80
 8016850:	e9d3 4500 	ldrd	r4, r5, [r3]
 8016854:	4622      	mov	r2, r4
 8016856:	462b      	mov	r3, r5
 8016858:	1891      	adds	r1, r2, r2
 801685a:	6039      	str	r1, [r7, #0]
 801685c:	415b      	adcs	r3, r3
 801685e:	607b      	str	r3, [r7, #4]
 8016860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016864:	1912      	adds	r2, r2, r4
 8016866:	eb45 0303 	adc.w	r3, r5, r3
 801686a:	f04f 0000 	mov.w	r0, #0
 801686e:	f04f 0100 	mov.w	r1, #0
 8016872:	0159      	lsls	r1, r3, #5
 8016874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8016878:	0150      	lsls	r0, r2, #5
 801687a:	1812      	adds	r2, r2, r0
 801687c:	eb41 0303 	adc.w	r3, r1, r3
 8016880:	1911      	adds	r1, r2, r4
 8016882:	62b9      	str	r1, [r7, #40]	; 0x28
 8016884:	416b      	adcs	r3, r5
 8016886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016888:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801688c:	460b      	mov	r3, r1
 801688e:	eb18 0303 	adds.w	r3, r8, r3
 8016892:	623b      	str	r3, [r7, #32]
 8016894:	4613      	mov	r3, r2
 8016896:	eb49 0303 	adc.w	r3, r9, r3
 801689a:	627b      	str	r3, [r7, #36]	; 0x24
 801689c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80168a0:	4623      	mov	r3, r4
 80168a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80168a6:	4602      	mov	r2, r0
 80168a8:	189b      	adds	r3, r3, r2
 80168aa:	61bb      	str	r3, [r7, #24]
 80168ac:	460b      	mov	r3, r1
 80168ae:	462a      	mov	r2, r5
 80168b0:	eb42 0303 	adc.w	r3, r2, r3
 80168b4:	61fb      	str	r3, [r7, #28]
 80168b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80168ba:	3390      	adds	r3, #144	; 0x90
 80168bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80168c4:	3198      	adds	r1, #152	; 0x98
 80168c6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80168ca:	4620      	mov	r0, r4
 80168cc:	1880      	adds	r0, r0, r2
 80168ce:	6138      	str	r0, [r7, #16]
 80168d0:	4628      	mov	r0, r5
 80168d2:	eb43 0000 	adc.w	r0, r3, r0
 80168d6:	6178      	str	r0, [r7, #20]
 80168d8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80168dc:	e9c1 3400 	strd	r3, r4, [r1]
			//temp_id[19] = temp_id[0]*1000000000000000000 + temp_id[1]*100000000000000000 + temp_id[2]*10000000000000000 + temp_id[3]*1000000000000000 + temp_id[4]*100000000000000 + temp_id[5]*10000000000000 + temp_id[6]*1000000000000 + temp_id[7]*100000000000 + temp_id[8]*10000000000 + temp_id[9]*1000000000 + temp_id[10]*100000000 + temp_id[11]*10000000 + temp_id[12]*1000000 + temp_id[13]*100000 + temp_id[14]*10000 + temp_id[15]*1000 + temp_id[16]*100 + temp_id[17]*10 + temp_id[18];

			*id = (uint8_t)(*(temp_id+19)>>56);
 80168e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80168e4:	3398      	adds	r3, #152	; 0x98
 80168e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80168ea:	f04f 0200 	mov.w	r2, #0
 80168ee:	f04f 0300 	mov.w	r3, #0
 80168f2:	0e0a      	lsrs	r2, r1, #24
 80168f4:	2300      	movs	r3, #0
 80168f6:	b2d2      	uxtb	r2, r2
 80168f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80168fc:	701a      	strb	r2, [r3, #0]
			*(id+1) = (uint8_t)(*(temp_id+19)>>48);
 80168fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016902:	3398      	adds	r3, #152	; 0x98
 8016904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016908:	f04f 0200 	mov.w	r2, #0
 801690c:	f04f 0300 	mov.w	r3, #0
 8016910:	0c0a      	lsrs	r2, r1, #16
 8016912:	2300      	movs	r3, #0
 8016914:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016918:	3101      	adds	r1, #1
 801691a:	b2d3      	uxtb	r3, r2
 801691c:	700b      	strb	r3, [r1, #0]
			*(id+2) = (uint8_t)(*(temp_id+19)>>40);
 801691e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016922:	3398      	adds	r3, #152	; 0x98
 8016924:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016928:	f04f 0200 	mov.w	r2, #0
 801692c:	f04f 0300 	mov.w	r3, #0
 8016930:	0a0a      	lsrs	r2, r1, #8
 8016932:	2300      	movs	r3, #0
 8016934:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016938:	3102      	adds	r1, #2
 801693a:	b2d3      	uxtb	r3, r2
 801693c:	700b      	strb	r3, [r1, #0]
			*(id+3) = (uint8_t)(*(temp_id+19)>>32);
 801693e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016942:	3398      	adds	r3, #152	; 0x98
 8016944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016948:	f04f 0200 	mov.w	r2, #0
 801694c:	f04f 0300 	mov.w	r3, #0
 8016950:	000a      	movs	r2, r1
 8016952:	2300      	movs	r3, #0
 8016954:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016958:	3103      	adds	r1, #3
 801695a:	b2d3      	uxtb	r3, r2
 801695c:	700b      	strb	r3, [r1, #0]
			*(id+4) = (uint8_t)(*(temp_id+19)>>24);
 801695e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016962:	3398      	adds	r3, #152	; 0x98
 8016964:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016968:	f04f 0200 	mov.w	r2, #0
 801696c:	f04f 0300 	mov.w	r3, #0
 8016970:	0e02      	lsrs	r2, r0, #24
 8016972:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016976:	0e0b      	lsrs	r3, r1, #24
 8016978:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801697c:	3104      	adds	r1, #4
 801697e:	b2d3      	uxtb	r3, r2
 8016980:	700b      	strb	r3, [r1, #0]
			*(id+5) = (uint8_t)(*(temp_id+19)>>16);
 8016982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016986:	3398      	adds	r3, #152	; 0x98
 8016988:	e9d3 0100 	ldrd	r0, r1, [r3]
 801698c:	f04f 0200 	mov.w	r2, #0
 8016990:	f04f 0300 	mov.w	r3, #0
 8016994:	0c02      	lsrs	r2, r0, #16
 8016996:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801699a:	0c0b      	lsrs	r3, r1, #16
 801699c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80169a0:	3105      	adds	r1, #5
 80169a2:	b2d3      	uxtb	r3, r2
 80169a4:	700b      	strb	r3, [r1, #0]
			*(id+6) = (uint8_t)(*(temp_id+19)>>8);
 80169a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80169aa:	3398      	adds	r3, #152	; 0x98
 80169ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80169b0:	f04f 0200 	mov.w	r2, #0
 80169b4:	f04f 0300 	mov.w	r3, #0
 80169b8:	0a02      	lsrs	r2, r0, #8
 80169ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80169be:	0a0b      	lsrs	r3, r1, #8
 80169c0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80169c4:	3106      	adds	r1, #6
 80169c6:	b2d3      	uxtb	r3, r2
 80169c8:	700b      	strb	r3, [r1, #0]
			*(id+7) = (uint8_t)*(temp_id+19);
 80169ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80169ce:	3398      	adds	r3, #152	; 0x98
 80169d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80169d8:	3107      	adds	r1, #7
 80169da:	b2d3      	uxtb	r3, r2
 80169dc:	700b      	strb	r3, [r1, #0]

			return AT_OK;
 80169de:	2300      	movs	r3, #0
 80169e0:	e005      	b.n	80169ee <AT_QCCID+0x706>
	while(read_rx_state == ACTIVE)
 80169e2:	4b05      	ldr	r3, [pc, #20]	; (80169f8 <AT_QCCID+0x710>)
 80169e4:	781b      	ldrb	r3, [r3, #0]
 80169e6:	2b01      	cmp	r3, #1
 80169e8:	f43f acaf 	beq.w	801634a <AT_QCCID+0x62>
		}

	}
	return AT_ERROR;
 80169ec:	2301      	movs	r3, #1
}
 80169ee:	4618      	mov	r0, r3
 80169f0:	37b8      	adds	r7, #184	; 0xb8
 80169f2:	46bd      	mov	sp, r7
 80169f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80169f8:	20009a2c 	.word	0x20009a2c

080169fc <AT_COPS>:

uint8_t AT_COPS (void)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b084      	sub	sp, #16
 8016a00:	af00      	add	r7, sp, #0
	char str_out[9];
	sprintf(str_out, "AT+COPS?\n");
 8016a02:	1d3b      	adds	r3, r7, #4
 8016a04:	4921      	ldr	r1, [pc, #132]	; (8016a8c <AT_COPS+0x90>)
 8016a06:	4618      	mov	r0, r3
 8016a08:	f002 ff92 	bl	8019930 <siprintf>

	read_rx_state = ACTIVE;
 8016a0c:	4b20      	ldr	r3, [pc, #128]	; (8016a90 <AT_COPS+0x94>)
 8016a0e:	2201      	movs	r2, #1
 8016a10:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8016a12:	4b20      	ldr	r3, [pc, #128]	; (8016a94 <AT_COPS+0x98>)
 8016a14:	2200      	movs	r2, #0
 8016a16:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8016a18:	f7ff fb22 	bl	8016060 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016a1c:	2201      	movs	r2, #1
 8016a1e:	491e      	ldr	r1, [pc, #120]	; (8016a98 <AT_COPS+0x9c>)
 8016a20:	481e      	ldr	r0, [pc, #120]	; (8016a9c <AT_COPS+0xa0>)
 8016a22:	f7ee ff59 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 8016a26:	1d3b      	adds	r3, r7, #4
 8016a28:	2209      	movs	r2, #9
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	481b      	ldr	r0, [pc, #108]	; (8016a9c <AT_COPS+0xa0>)
 8016a2e:	f7ee fed5 	bl	80057dc <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_cops, 9);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8016a32:	4b1b      	ldr	r3, [pc, #108]	; (8016aa0 <AT_COPS+0xa4>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	f04f 31ff 	mov.w	r1, #4294967295
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7f0 fa40 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 8016a40:	4b18      	ldr	r3, [pc, #96]	; (8016aa4 <AT_COPS+0xa8>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	f241 3188 	movw	r1, #5000	; 0x1388
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7f0 f8dd 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8016a4e:	e014      	b.n	8016a7a <AT_COPS+0x7e>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "MTS") != NULL )
 8016a50:	4915      	ldr	r1, [pc, #84]	; (8016aa8 <AT_COPS+0xac>)
 8016a52:	4816      	ldr	r0, [pc, #88]	; (8016aac <AT_COPS+0xb0>)
 8016a54:	f002 ffcf 	bl	80199f6 <strstr>
		{
			// Здесь должно быть то, что необходимо сделать, если пришло значение "МТС"
		}

		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8016a58:	4915      	ldr	r1, [pc, #84]	; (8016ab0 <AT_COPS+0xb4>)
 8016a5a:	4814      	ldr	r0, [pc, #80]	; (8016aac <AT_COPS+0xb0>)
 8016a5c:	f002 ffcb 	bl	80199f6 <strstr>
 8016a60:	4603      	mov	r3, r0
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d009      	beq.n	8016a7a <AT_COPS+0x7e>
		{
			osTimerStop(AT_TimerHandle);
 8016a66:	4b0f      	ldr	r3, [pc, #60]	; (8016aa4 <AT_COPS+0xa8>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7f0 f910 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016a70:	4b07      	ldr	r3, [pc, #28]	; (8016a90 <AT_COPS+0x94>)
 8016a72:	2200      	movs	r2, #0
 8016a74:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8016a76:	2300      	movs	r3, #0
 8016a78:	e004      	b.n	8016a84 <AT_COPS+0x88>
	while(read_rx_state == ACTIVE)
 8016a7a:	4b05      	ldr	r3, [pc, #20]	; (8016a90 <AT_COPS+0x94>)
 8016a7c:	781b      	ldrb	r3, [r3, #0]
 8016a7e:	2b01      	cmp	r3, #1
 8016a80:	d0e6      	beq.n	8016a50 <AT_COPS+0x54>
		}


	}
	return AT_ERROR;
 8016a82:	2301      	movs	r3, #1
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	3710      	adds	r7, #16
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}
 8016a8c:	0801a8d4 	.word	0x0801a8d4
 8016a90:	20009a2c 	.word	0x20009a2c
 8016a94:	2000085c 	.word	0x2000085c
 8016a98:	20009a70 	.word	0x20009a70
 8016a9c:	20008238 	.word	0x20008238
 8016aa0:	20009cb8 	.word	0x20009cb8
 8016aa4:	20009698 	.word	0x20009698
 8016aa8:	0801a8e0 	.word	0x0801a8e0
 8016aac:	20009b70 	.word	0x20009b70
 8016ab0:	0801a8a8 	.word	0x0801a8a8

08016ab4 <AT_QIOPEN>:

uint8_t AT_QIOPEN (char* type , uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4, uint16_t port)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b098      	sub	sp, #96	; 0x60
 8016ab8:	af04      	add	r7, sp, #16
 8016aba:	6078      	str	r0, [r7, #4]
 8016abc:	4608      	mov	r0, r1
 8016abe:	4611      	mov	r1, r2
 8016ac0:	461a      	mov	r2, r3
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	70fb      	strb	r3, [r7, #3]
 8016ac6:	460b      	mov	r3, r1
 8016ac8:	70bb      	strb	r3, [r7, #2]
 8016aca:	4613      	mov	r3, r2
 8016acc:	707b      	strb	r3, [r7, #1]
	char str5[3];
	char str6[5];
	char str7[40];
	uint8_t n;

	sprintf(str1, "%s", type);
 8016ace:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016ad2:	687a      	ldr	r2, [r7, #4]
 8016ad4:	4951      	ldr	r1, [pc, #324]	; (8016c1c <AT_QIOPEN+0x168>)
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f002 ff2a 	bl	8019930 <siprintf>
	sprintf(str2, "%u", ip1);
 8016adc:	78fa      	ldrb	r2, [r7, #3]
 8016ade:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016ae2:	494f      	ldr	r1, [pc, #316]	; (8016c20 <AT_QIOPEN+0x16c>)
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f002 ff23 	bl	8019930 <siprintf>
	sprintf(str3, "%u", ip2);
 8016aea:	78ba      	ldrb	r2, [r7, #2]
 8016aec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016af0:	494b      	ldr	r1, [pc, #300]	; (8016c20 <AT_QIOPEN+0x16c>)
 8016af2:	4618      	mov	r0, r3
 8016af4:	f002 ff1c 	bl	8019930 <siprintf>
	sprintf(str4, "%u", ip3);
 8016af8:	787a      	ldrb	r2, [r7, #1]
 8016afa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016afe:	4948      	ldr	r1, [pc, #288]	; (8016c20 <AT_QIOPEN+0x16c>)
 8016b00:	4618      	mov	r0, r3
 8016b02:	f002 ff15 	bl	8019930 <siprintf>
	sprintf(str5, "%u", ip4);
 8016b06:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8016b0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016b0e:	4944      	ldr	r1, [pc, #272]	; (8016c20 <AT_QIOPEN+0x16c>)
 8016b10:	4618      	mov	r0, r3
 8016b12:	f002 ff0d 	bl	8019930 <siprintf>
	sprintf(str6, "%u", port);
 8016b16:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8016b1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016b1e:	4940      	ldr	r1, [pc, #256]	; (8016c20 <AT_QIOPEN+0x16c>)
 8016b20:	4618      	mov	r0, r3
 8016b22:	f002 ff05 	bl	8019930 <siprintf>

	n = sprintf(str7, "AT+QIOPEN=\"%s\",\"%s.%s.%s.%s\",%s\n", str1, str2, str3, str4, str5, str6);
 8016b26:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8016b2a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016b2e:	f107 000c 	add.w	r0, r7, #12
 8016b32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016b36:	9303      	str	r3, [sp, #12]
 8016b38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016b3c:	9302      	str	r3, [sp, #8]
 8016b3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016b42:	9301      	str	r3, [sp, #4]
 8016b44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016b48:	9300      	str	r3, [sp, #0]
 8016b4a:	460b      	mov	r3, r1
 8016b4c:	4935      	ldr	r1, [pc, #212]	; (8016c24 <AT_QIOPEN+0x170>)
 8016b4e:	f002 feef 	bl	8019930 <siprintf>
 8016b52:	4603      	mov	r3, r0
 8016b54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

 	read_rx_state = ACTIVE;
 8016b58:	4b33      	ldr	r3, [pc, #204]	; (8016c28 <AT_QIOPEN+0x174>)
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8016b5e:	4b33      	ldr	r3, [pc, #204]	; (8016c2c <AT_QIOPEN+0x178>)
 8016b60:	2200      	movs	r2, #0
 8016b62:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8016b64:	f7ff fa7c 	bl	8016060 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016b68:	2201      	movs	r2, #1
 8016b6a:	4931      	ldr	r1, [pc, #196]	; (8016c30 <AT_QIOPEN+0x17c>)
 8016b6c:	4831      	ldr	r0, [pc, #196]	; (8016c34 <AT_QIOPEN+0x180>)
 8016b6e:	f7ee feb3 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str7, n);
 8016b72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8016b76:	b29a      	uxth	r2, r3
 8016b78:	f107 030c 	add.w	r3, r7, #12
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	482d      	ldr	r0, [pc, #180]	; (8016c34 <AT_QIOPEN+0x180>)
 8016b80:	f7ee fe2c 	bl	80057dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8016b84:	4b2c      	ldr	r3, [pc, #176]	; (8016c38 <AT_QIOPEN+0x184>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	f04f 31ff 	mov.w	r1, #4294967295
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f7f0 f997 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 3000);
 8016b92:	4b2a      	ldr	r3, [pc, #168]	; (8016c3c <AT_QIOPEN+0x188>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f7f0 f834 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8016ba0:	e032      	b.n	8016c08 <AT_QIOPEN+0x154>
	{
		//osThreadSuspend(M95TaskHandle);
		if( (strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL) )
 8016ba2:	4927      	ldr	r1, [pc, #156]	; (8016c40 <AT_QIOPEN+0x18c>)
 8016ba4:	4827      	ldr	r0, [pc, #156]	; (8016c44 <AT_QIOPEN+0x190>)
 8016ba6:	f002 ff26 	bl	80199f6 <strstr>
 8016baa:	4603      	mov	r3, r0
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d009      	beq.n	8016bc4 <AT_QIOPEN+0x110>
		{
			osTimerStop(AT_TimerHandle);
 8016bb0:	4b22      	ldr	r3, [pc, #136]	; (8016c3c <AT_QIOPEN+0x188>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7f0 f86b 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016bba:	4b1b      	ldr	r3, [pc, #108]	; (8016c28 <AT_QIOPEN+0x174>)
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	e026      	b.n	8016c12 <AT_QIOPEN+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "ALREADY CONNECT\r\n") != NULL) )
 8016bc4:	4920      	ldr	r1, [pc, #128]	; (8016c48 <AT_QIOPEN+0x194>)
 8016bc6:	481f      	ldr	r0, [pc, #124]	; (8016c44 <AT_QIOPEN+0x190>)
 8016bc8:	f002 ff15 	bl	80199f6 <strstr>
 8016bcc:	4603      	mov	r3, r0
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d009      	beq.n	8016be6 <AT_QIOPEN+0x132>
		{
			osTimerStop(AT_TimerHandle);
 8016bd2:	4b1a      	ldr	r3, [pc, #104]	; (8016c3c <AT_QIOPEN+0x188>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7f0 f85a 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016bdc:	4b12      	ldr	r3, [pc, #72]	; (8016c28 <AT_QIOPEN+0x174>)
 8016bde:	2200      	movs	r2, #0
 8016be0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8016be2:	2300      	movs	r3, #0
 8016be4:	e015      	b.n	8016c12 <AT_QIOPEN+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "CONNECT FAIL\r\n") != NULL) )
 8016be6:	4919      	ldr	r1, [pc, #100]	; (8016c4c <AT_QIOPEN+0x198>)
 8016be8:	4816      	ldr	r0, [pc, #88]	; (8016c44 <AT_QIOPEN+0x190>)
 8016bea:	f002 ff04 	bl	80199f6 <strstr>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d009      	beq.n	8016c08 <AT_QIOPEN+0x154>
		{
			osTimerStop(AT_TimerHandle);
 8016bf4:	4b11      	ldr	r3, [pc, #68]	; (8016c3c <AT_QIOPEN+0x188>)
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f7f0 f849 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016bfe:	4b0a      	ldr	r3, [pc, #40]	; (8016c28 <AT_QIOPEN+0x174>)
 8016c00:	2200      	movs	r2, #0
 8016c02:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8016c04:	2301      	movs	r3, #1
 8016c06:	e004      	b.n	8016c12 <AT_QIOPEN+0x15e>
	while(read_rx_state == ACTIVE)
 8016c08:	4b07      	ldr	r3, [pc, #28]	; (8016c28 <AT_QIOPEN+0x174>)
 8016c0a:	781b      	ldrb	r3, [r3, #0]
 8016c0c:	2b01      	cmp	r3, #1
 8016c0e:	d0c8      	beq.n	8016ba2 <AT_QIOPEN+0xee>
		}

	}
	return AT_ERROR;
 8016c10:	2301      	movs	r3, #1

}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3750      	adds	r7, #80	; 0x50
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	0801a8e4 	.word	0x0801a8e4
 8016c20:	0801a8e8 	.word	0x0801a8e8
 8016c24:	0801a8ec 	.word	0x0801a8ec
 8016c28:	20009a2c 	.word	0x20009a2c
 8016c2c:	2000085c 	.word	0x2000085c
 8016c30:	20009a70 	.word	0x20009a70
 8016c34:	20008238 	.word	0x20008238
 8016c38:	20009cb8 	.word	0x20009cb8
 8016c3c:	20009698 	.word	0x20009698
 8016c40:	0801a910 	.word	0x0801a910
 8016c44:	20009b70 	.word	0x20009b70
 8016c48:	0801a920 	.word	0x0801a920
 8016c4c:	0801a934 	.word	0x0801a934

08016c50 <AT_QISEND>:
	}
	return AT_ERROR;
}

uint8_t AT_QISEND (uint8_t* buf, uint16_t length) // maximum length = 1460
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b086      	sub	sp, #24
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
 8016c58:	460b      	mov	r3, r1
 8016c5a:	807b      	strh	r3, [r7, #2]
	uint8_t n1;
	char str_out[15];

	n1 = sprintf(str_out, "AT+QISEND=%u\n", length);
 8016c5c:	887a      	ldrh	r2, [r7, #2]
 8016c5e:	f107 0308 	add.w	r3, r7, #8
 8016c62:	493b      	ldr	r1, [pc, #236]	; (8016d50 <AT_QISEND+0x100>)
 8016c64:	4618      	mov	r0, r3
 8016c66:	f002 fe63 	bl	8019930 <siprintf>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	75fb      	strb	r3, [r7, #23]

 	read_rx_state = ACTIVE;
 8016c6e:	4b39      	ldr	r3, [pc, #228]	; (8016d54 <AT_QISEND+0x104>)
 8016c70:	2201      	movs	r2, #1
 8016c72:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8016c74:	4b38      	ldr	r3, [pc, #224]	; (8016d58 <AT_QISEND+0x108>)
 8016c76:	2200      	movs	r2, #0
 8016c78:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8016c7a:	f7ff f9f1 	bl	8016060 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016c7e:	2201      	movs	r2, #1
 8016c80:	4936      	ldr	r1, [pc, #216]	; (8016d5c <AT_QISEND+0x10c>)
 8016c82:	4837      	ldr	r0, [pc, #220]	; (8016d60 <AT_QISEND+0x110>)
 8016c84:	f7ee fe28 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n1);
 8016c88:	7dfb      	ldrb	r3, [r7, #23]
 8016c8a:	b29a      	uxth	r2, r3
 8016c8c:	f107 0308 	add.w	r3, r7, #8
 8016c90:	4619      	mov	r1, r3
 8016c92:	4833      	ldr	r0, [pc, #204]	; (8016d60 <AT_QISEND+0x110>)
 8016c94:	f7ee fda2 	bl	80057dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8016c98:	4b32      	ldr	r3, [pc, #200]	; (8016d64 <AT_QISEND+0x114>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7f0 f90d 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8016ca6:	4b30      	ldr	r3, [pc, #192]	; (8016d68 <AT_QISEND+0x118>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8016cae:	4618      	mov	r0, r3
 8016cb0:	f7ef ffaa 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8016cb4:	e043      	b.n	8016d3e <AT_QISEND+0xee>
	{
		//osThreadSuspend(osThreadGetId());
		//osSemaphoreWait(ReceiveStateHandle, osWaitForever);
		if( strstr(modem_rx_buffer, "> ") != NULL )
 8016cb6:	492d      	ldr	r1, [pc, #180]	; (8016d6c <AT_QISEND+0x11c>)
 8016cb8:	482d      	ldr	r0, [pc, #180]	; (8016d70 <AT_QISEND+0x120>)
 8016cba:	f002 fe9c 	bl	80199f6 <strstr>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d03c      	beq.n	8016d3e <AT_QISEND+0xee>
		{
			osTimerStop(AT_TimerHandle);
 8016cc4:	4b28      	ldr	r3, [pc, #160]	; (8016d68 <AT_QISEND+0x118>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7ef ffe1 	bl	8006c90 <osTimerStop>
			modem_rx_number = 0;
 8016cce:	4b22      	ldr	r3, [pc, #136]	; (8016d58 <AT_QISEND+0x108>)
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	701a      	strb	r2, [r3, #0]
			modem_rx_buffer_clear();
 8016cd4:	f7ff f9c4 	bl	8016060 <modem_rx_buffer_clear>

			HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016cd8:	2201      	movs	r2, #1
 8016cda:	4920      	ldr	r1, [pc, #128]	; (8016d5c <AT_QISEND+0x10c>)
 8016cdc:	4820      	ldr	r0, [pc, #128]	; (8016d60 <AT_QISEND+0x110>)
 8016cde:	f7ee fdfb 	bl	80058d8 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart3, buf, length);
 8016ce2:	887b      	ldrh	r3, [r7, #2]
 8016ce4:	461a      	mov	r2, r3
 8016ce6:	6879      	ldr	r1, [r7, #4]
 8016ce8:	481d      	ldr	r0, [pc, #116]	; (8016d60 <AT_QISEND+0x110>)
 8016cea:	f7ee fd77 	bl	80057dc <HAL_UART_Transmit_DMA>

			osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8016cee:	4b1d      	ldr	r3, [pc, #116]	; (8016d64 <AT_QISEND+0x114>)
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	f7f0 f8e2 	bl	8006ec0 <osSemaphoreWait>

			osTimerStart(AT_TimerHandle, 3000); // маленькое время!!!!!
 8016cfc:	4b1a      	ldr	r3, [pc, #104]	; (8016d68 <AT_QISEND+0x118>)
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7ef ff7f 	bl	8006c08 <osTimerStart>
			while(read_rx_state == ACTIVE)
 8016d0a:	e012      	b.n	8016d32 <AT_QISEND+0xe2>
			{
				//osThreadSuspend(osThreadGetId());
				//osSemaphoreWait(ReceiveStateHandle, osWaitForever);

				if( find_str(modem_rx_buffer, 255, send_ok, 7) == 1 )
 8016d0c:	2307      	movs	r3, #7
 8016d0e:	4a19      	ldr	r2, [pc, #100]	; (8016d74 <AT_QISEND+0x124>)
 8016d10:	21ff      	movs	r1, #255	; 0xff
 8016d12:	4817      	ldr	r0, [pc, #92]	; (8016d70 <AT_QISEND+0x120>)
 8016d14:	f7ff f938 	bl	8015f88 <find_str>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	2b01      	cmp	r3, #1
 8016d1c:	d109      	bne.n	8016d32 <AT_QISEND+0xe2>
				{
					osTimerStop(AT_TimerHandle);
 8016d1e:	4b12      	ldr	r3, [pc, #72]	; (8016d68 <AT_QISEND+0x118>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f7ef ffb4 	bl	8006c90 <osTimerStop>
					read_rx_state = NOT_ACTIVE;
 8016d28:	4b0a      	ldr	r3, [pc, #40]	; (8016d54 <AT_QISEND+0x104>)
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	701a      	strb	r2, [r3, #0]
					return AT_OK;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	e00a      	b.n	8016d48 <AT_QISEND+0xf8>
			while(read_rx_state == ACTIVE)
 8016d32:	4b08      	ldr	r3, [pc, #32]	; (8016d54 <AT_QISEND+0x104>)
 8016d34:	781b      	ldrb	r3, [r3, #0]
 8016d36:	2b01      	cmp	r3, #1
 8016d38:	d0e8      	beq.n	8016d0c <AT_QISEND+0xbc>
					read_rx_state = NOT_ACTIVE;
					return AT_ERROR;
				}
				*/
			}
			return AT_ERROR;
 8016d3a:	2301      	movs	r3, #1
 8016d3c:	e004      	b.n	8016d48 <AT_QISEND+0xf8>
	while(read_rx_state == ACTIVE)
 8016d3e:	4b05      	ldr	r3, [pc, #20]	; (8016d54 <AT_QISEND+0x104>)
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	2b01      	cmp	r3, #1
 8016d44:	d0b7      	beq.n	8016cb6 <AT_QISEND+0x66>
			read_rx_state = NOT_ACTIVE;
			return AT_ERROR;
		}*/

	}
	return AT_ERROR;
 8016d46:	2301      	movs	r3, #1

}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3718      	adds	r7, #24
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	0801a95c 	.word	0x0801a95c
 8016d54:	20009a2c 	.word	0x20009a2c
 8016d58:	2000085c 	.word	0x2000085c
 8016d5c:	20009a70 	.word	0x20009a70
 8016d60:	20008238 	.word	0x20008238
 8016d64:	20009cb8 	.word	0x20009cb8
 8016d68:	20009698 	.word	0x20009698
 8016d6c:	0801a96c 	.word	0x0801a96c
 8016d70:	20009b70 	.word	0x20009b70
 8016d74:	20000068 	.word	0x20000068

08016d78 <AT_QIMUX>:
	}
	return AT_ERROR;
}

uint8_t AT_QIMUX (uint8_t mode) // Команда для включения или отключения возможности нескольких сессий TCP/IP, 1 - включено, 0 - выключено
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b086      	sub	sp, #24
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	4603      	mov	r3, r0
 8016d80:	71fb      	strb	r3, [r7, #7]
	char str_out[11];
	sprintf(str_out, "AT+QIMUX=%u\n", mode);
 8016d82:	79fa      	ldrb	r2, [r7, #7]
 8016d84:	f107 030c 	add.w	r3, r7, #12
 8016d88:	4928      	ldr	r1, [pc, #160]	; (8016e2c <AT_QIMUX+0xb4>)
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f002 fdd0 	bl	8019930 <siprintf>
	read_rx_state = ACTIVE;
 8016d90:	4b27      	ldr	r3, [pc, #156]	; (8016e30 <AT_QIMUX+0xb8>)
 8016d92:	2201      	movs	r2, #1
 8016d94:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8016d96:	4b27      	ldr	r3, [pc, #156]	; (8016e34 <AT_QIMUX+0xbc>)
 8016d98:	2200      	movs	r2, #0
 8016d9a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8016d9c:	f7ff f960 	bl	8016060 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016da0:	2201      	movs	r2, #1
 8016da2:	4925      	ldr	r1, [pc, #148]	; (8016e38 <AT_QIMUX+0xc0>)
 8016da4:	4825      	ldr	r0, [pc, #148]	; (8016e3c <AT_QIMUX+0xc4>)
 8016da6:	f7ee fd97 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 8016daa:	f107 030c 	add.w	r3, r7, #12
 8016dae:	220b      	movs	r2, #11
 8016db0:	4619      	mov	r1, r3
 8016db2:	4822      	ldr	r0, [pc, #136]	; (8016e3c <AT_QIMUX+0xc4>)
 8016db4:	f7ee fd12 	bl	80057dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8016db8:	4b21      	ldr	r3, [pc, #132]	; (8016e40 <AT_QIMUX+0xc8>)
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7f0 f87d 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8016dc6:	4b1f      	ldr	r3, [pc, #124]	; (8016e44 <AT_QIMUX+0xcc>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7ef ff1a 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8016dd4:	e021      	b.n	8016e1a <AT_QIMUX+0xa2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8016dd6:	491c      	ldr	r1, [pc, #112]	; (8016e48 <AT_QIMUX+0xd0>)
 8016dd8:	481c      	ldr	r0, [pc, #112]	; (8016e4c <AT_QIMUX+0xd4>)
 8016dda:	f002 fe0c 	bl	80199f6 <strstr>
 8016dde:	4603      	mov	r3, r0
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d009      	beq.n	8016df8 <AT_QIMUX+0x80>
		{
			osTimerStop(AT_TimerHandle);
 8016de4:	4b17      	ldr	r3, [pc, #92]	; (8016e44 <AT_QIMUX+0xcc>)
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7ef ff51 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016dee:	4b10      	ldr	r3, [pc, #64]	; (8016e30 <AT_QIMUX+0xb8>)
 8016df0:	2200      	movs	r2, #0
 8016df2:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8016df4:	2300      	movs	r3, #0
 8016df6:	e015      	b.n	8016e24 <AT_QIMUX+0xac>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8016df8:	4915      	ldr	r1, [pc, #84]	; (8016e50 <AT_QIMUX+0xd8>)
 8016dfa:	4814      	ldr	r0, [pc, #80]	; (8016e4c <AT_QIMUX+0xd4>)
 8016dfc:	f002 fdfb 	bl	80199f6 <strstr>
 8016e00:	4603      	mov	r3, r0
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d009      	beq.n	8016e1a <AT_QIMUX+0xa2>
		{
			osTimerStop(AT_TimerHandle);
 8016e06:	4b0f      	ldr	r3, [pc, #60]	; (8016e44 <AT_QIMUX+0xcc>)
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f7ef ff40 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016e10:	4b07      	ldr	r3, [pc, #28]	; (8016e30 <AT_QIMUX+0xb8>)
 8016e12:	2200      	movs	r2, #0
 8016e14:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8016e16:	2301      	movs	r3, #1
 8016e18:	e004      	b.n	8016e24 <AT_QIMUX+0xac>
	while(read_rx_state == ACTIVE)
 8016e1a:	4b05      	ldr	r3, [pc, #20]	; (8016e30 <AT_QIMUX+0xb8>)
 8016e1c:	781b      	ldrb	r3, [r3, #0]
 8016e1e:	2b01      	cmp	r3, #1
 8016e20:	d0d9      	beq.n	8016dd6 <AT_QIMUX+0x5e>
		}

	}
	return AT_ERROR;
 8016e22:	2301      	movs	r3, #1
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3718      	adds	r7, #24
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}
 8016e2c:	0801a988 	.word	0x0801a988
 8016e30:	20009a2c 	.word	0x20009a2c
 8016e34:	2000085c 	.word	0x2000085c
 8016e38:	20009a70 	.word	0x20009a70
 8016e3c:	20008238 	.word	0x20008238
 8016e40:	20009cb8 	.word	0x20009cb8
 8016e44:	20009698 	.word	0x20009698
 8016e48:	0801a8a8 	.word	0x0801a8a8
 8016e4c:	20009b70 	.word	0x20009b70
 8016e50:	0801a980 	.word	0x0801a980

08016e54 <AT_QIREGAPP>:
	}
	return AT_ERROR;
}

uint8_t AT_QIREGAPP  (char* apn, char* user, char* password)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b0a0      	sub	sp, #128	; 0x80
 8016e58:	af02      	add	r7, sp, #8
 8016e5a:	60f8      	str	r0, [r7, #12]
 8016e5c:	60b9      	str	r1, [r7, #8]
 8016e5e:	607a      	str	r2, [r7, #4]
	uint8_t n;
	char str_out[100];
	sprintf(str_out, "AT+QIREGAPP=\"%s\",\"%s\",\"%s\"\n", apn, user, password);
 8016e60:	f107 0010 	add.w	r0, r7, #16
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	9300      	str	r3, [sp, #0]
 8016e68:	68bb      	ldr	r3, [r7, #8]
 8016e6a:	68fa      	ldr	r2, [r7, #12]
 8016e6c:	492d      	ldr	r1, [pc, #180]	; (8016f24 <AT_QIREGAPP+0xd0>)
 8016e6e:	f002 fd5f 	bl	8019930 <siprintf>
	n = strlen(str_out);
 8016e72:	f107 0310 	add.w	r3, r7, #16
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7e9 f9aa 	bl	80001d0 <strlen>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	read_rx_state = ACTIVE;
 8016e82:	4b29      	ldr	r3, [pc, #164]	; (8016f28 <AT_QIREGAPP+0xd4>)
 8016e84:	2201      	movs	r2, #1
 8016e86:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8016e88:	4b28      	ldr	r3, [pc, #160]	; (8016f2c <AT_QIREGAPP+0xd8>)
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8016e8e:	f7ff f8e7 	bl	8016060 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016e92:	2201      	movs	r2, #1
 8016e94:	4926      	ldr	r1, [pc, #152]	; (8016f30 <AT_QIREGAPP+0xdc>)
 8016e96:	4827      	ldr	r0, [pc, #156]	; (8016f34 <AT_QIREGAPP+0xe0>)
 8016e98:	f7ee fd1e 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n);
 8016e9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8016ea0:	b29a      	uxth	r2, r3
 8016ea2:	f107 0310 	add.w	r3, r7, #16
 8016ea6:	4619      	mov	r1, r3
 8016ea8:	4822      	ldr	r0, [pc, #136]	; (8016f34 <AT_QIREGAPP+0xe0>)
 8016eaa:	f7ee fc97 	bl	80057dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8016eae:	4b22      	ldr	r3, [pc, #136]	; (8016f38 <AT_QIREGAPP+0xe4>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7f0 f802 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8016ebc:	4b1f      	ldr	r3, [pc, #124]	; (8016f3c <AT_QIREGAPP+0xe8>)
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	f7ef fe9f 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8016eca:	e021      	b.n	8016f10 <AT_QIREGAPP+0xbc>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8016ecc:	491c      	ldr	r1, [pc, #112]	; (8016f40 <AT_QIREGAPP+0xec>)
 8016ece:	481d      	ldr	r0, [pc, #116]	; (8016f44 <AT_QIREGAPP+0xf0>)
 8016ed0:	f002 fd91 	bl	80199f6 <strstr>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d009      	beq.n	8016eee <AT_QIREGAPP+0x9a>
		{
			osTimerStop(AT_TimerHandle);
 8016eda:	4b18      	ldr	r3, [pc, #96]	; (8016f3c <AT_QIREGAPP+0xe8>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7ef fed6 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016ee4:	4b10      	ldr	r3, [pc, #64]	; (8016f28 <AT_QIREGAPP+0xd4>)
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8016eea:	2300      	movs	r3, #0
 8016eec:	e015      	b.n	8016f1a <AT_QIREGAPP+0xc6>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8016eee:	4916      	ldr	r1, [pc, #88]	; (8016f48 <AT_QIREGAPP+0xf4>)
 8016ef0:	4814      	ldr	r0, [pc, #80]	; (8016f44 <AT_QIREGAPP+0xf0>)
 8016ef2:	f002 fd80 	bl	80199f6 <strstr>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d009      	beq.n	8016f10 <AT_QIREGAPP+0xbc>
		{
			osTimerStop(AT_TimerHandle);
 8016efc:	4b0f      	ldr	r3, [pc, #60]	; (8016f3c <AT_QIREGAPP+0xe8>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7ef fec5 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016f06:	4b08      	ldr	r3, [pc, #32]	; (8016f28 <AT_QIREGAPP+0xd4>)
 8016f08:	2200      	movs	r2, #0
 8016f0a:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	e004      	b.n	8016f1a <AT_QIREGAPP+0xc6>
	while(read_rx_state == ACTIVE)
 8016f10:	4b05      	ldr	r3, [pc, #20]	; (8016f28 <AT_QIREGAPP+0xd4>)
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	2b01      	cmp	r3, #1
 8016f16:	d0d9      	beq.n	8016ecc <AT_QIREGAPP+0x78>
		}

	}
	return AT_ERROR;
 8016f18:	2301      	movs	r3, #1

}
 8016f1a:	4618      	mov	r0, r3
 8016f1c:	3778      	adds	r7, #120	; 0x78
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
 8016f22:	bf00      	nop
 8016f24:	0801a9a8 	.word	0x0801a9a8
 8016f28:	20009a2c 	.word	0x20009a2c
 8016f2c:	2000085c 	.word	0x2000085c
 8016f30:	20009a70 	.word	0x20009a70
 8016f34:	20008238 	.word	0x20008238
 8016f38:	20009cb8 	.word	0x20009cb8
 8016f3c:	20009698 	.word	0x20009698
 8016f40:	0801a8a8 	.word	0x0801a8a8
 8016f44:	20009b70 	.word	0x20009b70
 8016f48:	0801a980 	.word	0x0801a980

08016f4c <AT_QIACT>:

uint8_t AT_QIACT (void)
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b084      	sub	sp, #16
 8016f50:	af00      	add	r7, sp, #0
	uint8_t str_out[9];
	sprintf(str_out, "AT+QIACT\n");
 8016f52:	1d3b      	adds	r3, r7, #4
 8016f54:	4927      	ldr	r1, [pc, #156]	; (8016ff4 <AT_QIACT+0xa8>)
 8016f56:	4618      	mov	r0, r3
 8016f58:	f002 fcea 	bl	8019930 <siprintf>
	read_rx_state = ACTIVE;
 8016f5c:	4b26      	ldr	r3, [pc, #152]	; (8016ff8 <AT_QIACT+0xac>)
 8016f5e:	2201      	movs	r2, #1
 8016f60:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8016f62:	4b26      	ldr	r3, [pc, #152]	; (8016ffc <AT_QIACT+0xb0>)
 8016f64:	2200      	movs	r2, #0
 8016f66:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8016f68:	f7ff f87a 	bl	8016060 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8016f6c:	2201      	movs	r2, #1
 8016f6e:	4924      	ldr	r1, [pc, #144]	; (8017000 <AT_QIACT+0xb4>)
 8016f70:	4824      	ldr	r0, [pc, #144]	; (8017004 <AT_QIACT+0xb8>)
 8016f72:	f7ee fcb1 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 8016f76:	1d3b      	adds	r3, r7, #4
 8016f78:	2209      	movs	r2, #9
 8016f7a:	4619      	mov	r1, r3
 8016f7c:	4821      	ldr	r0, [pc, #132]	; (8017004 <AT_QIACT+0xb8>)
 8016f7e:	f7ee fc2d 	bl	80057dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8016f82:	4b21      	ldr	r3, [pc, #132]	; (8017008 <AT_QIACT+0xbc>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	f04f 31ff 	mov.w	r1, #4294967295
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7ef ff98 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 150000);
 8016f90:	4b1e      	ldr	r3, [pc, #120]	; (801700c <AT_QIACT+0xc0>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	491e      	ldr	r1, [pc, #120]	; (8017010 <AT_QIACT+0xc4>)
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7ef fe36 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8016f9c:	e021      	b.n	8016fe2 <AT_QIACT+0x96>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8016f9e:	491d      	ldr	r1, [pc, #116]	; (8017014 <AT_QIACT+0xc8>)
 8016fa0:	481d      	ldr	r0, [pc, #116]	; (8017018 <AT_QIACT+0xcc>)
 8016fa2:	f002 fd28 	bl	80199f6 <strstr>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d009      	beq.n	8016fc0 <AT_QIACT+0x74>
		{
			osTimerStop(AT_TimerHandle);
 8016fac:	4b17      	ldr	r3, [pc, #92]	; (801700c <AT_QIACT+0xc0>)
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7ef fe6d 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016fb6:	4b10      	ldr	r3, [pc, #64]	; (8016ff8 <AT_QIACT+0xac>)
 8016fb8:	2200      	movs	r2, #0
 8016fba:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8016fbc:	2300      	movs	r3, #0
 8016fbe:	e015      	b.n	8016fec <AT_QIACT+0xa0>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8016fc0:	4916      	ldr	r1, [pc, #88]	; (801701c <AT_QIACT+0xd0>)
 8016fc2:	4815      	ldr	r0, [pc, #84]	; (8017018 <AT_QIACT+0xcc>)
 8016fc4:	f002 fd17 	bl	80199f6 <strstr>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d009      	beq.n	8016fe2 <AT_QIACT+0x96>
		{
			osTimerStop(AT_TimerHandle);
 8016fce:	4b0f      	ldr	r3, [pc, #60]	; (801700c <AT_QIACT+0xc0>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7ef fe5c 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8016fd8:	4b07      	ldr	r3, [pc, #28]	; (8016ff8 <AT_QIACT+0xac>)
 8016fda:	2200      	movs	r2, #0
 8016fdc:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8016fde:	2301      	movs	r3, #1
 8016fe0:	e004      	b.n	8016fec <AT_QIACT+0xa0>
	while(read_rx_state == ACTIVE)
 8016fe2:	4b05      	ldr	r3, [pc, #20]	; (8016ff8 <AT_QIACT+0xac>)
 8016fe4:	781b      	ldrb	r3, [r3, #0]
 8016fe6:	2b01      	cmp	r3, #1
 8016fe8:	d0d9      	beq.n	8016f9e <AT_QIACT+0x52>
		}

	}
	return AT_ERROR;
 8016fea:	2301      	movs	r3, #1
}
 8016fec:	4618      	mov	r0, r3
 8016fee:	3710      	adds	r7, #16
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}
 8016ff4:	0801a9c4 	.word	0x0801a9c4
 8016ff8:	20009a2c 	.word	0x20009a2c
 8016ffc:	2000085c 	.word	0x2000085c
 8017000:	20009a70 	.word	0x20009a70
 8017004:	20008238 	.word	0x20008238
 8017008:	20009cb8 	.word	0x20009cb8
 801700c:	20009698 	.word	0x20009698
 8017010:	000249f0 	.word	0x000249f0
 8017014:	0801a8a8 	.word	0x0801a8a8
 8017018:	20009b70 	.word	0x20009b70
 801701c:	0801a980 	.word	0x0801a980

08017020 <AT_QIDEACT>:

uint8_t AT_QIDEACT (void)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b084      	sub	sp, #16
 8017024:	af00      	add	r7, sp, #0
	uint8_t str_out[11];
	sprintf(str_out, "AT+QIDEACT\n");
 8017026:	1d3b      	adds	r3, r7, #4
 8017028:	4928      	ldr	r1, [pc, #160]	; (80170cc <AT_QIDEACT+0xac>)
 801702a:	4618      	mov	r0, r3
 801702c:	f002 fc80 	bl	8019930 <siprintf>
	read_rx_state = ACTIVE;
 8017030:	4b27      	ldr	r3, [pc, #156]	; (80170d0 <AT_QIDEACT+0xb0>)
 8017032:	2201      	movs	r2, #1
 8017034:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8017036:	4b27      	ldr	r3, [pc, #156]	; (80170d4 <AT_QIDEACT+0xb4>)
 8017038:	2200      	movs	r2, #0
 801703a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 801703c:	f7ff f810 	bl	8016060 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8017040:	2201      	movs	r2, #1
 8017042:	4925      	ldr	r1, [pc, #148]	; (80170d8 <AT_QIDEACT+0xb8>)
 8017044:	4825      	ldr	r0, [pc, #148]	; (80170dc <AT_QIDEACT+0xbc>)
 8017046:	f7ee fc47 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 801704a:	1d3b      	adds	r3, r7, #4
 801704c:	220b      	movs	r2, #11
 801704e:	4619      	mov	r1, r3
 8017050:	4822      	ldr	r0, [pc, #136]	; (80170dc <AT_QIDEACT+0xbc>)
 8017052:	f7ee fbc3 	bl	80057dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8017056:	4b22      	ldr	r3, [pc, #136]	; (80170e0 <AT_QIDEACT+0xc0>)
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	f04f 31ff 	mov.w	r1, #4294967295
 801705e:	4618      	mov	r0, r3
 8017060:	f7ef ff2e 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 40000);
 8017064:	4b1f      	ldr	r3, [pc, #124]	; (80170e4 <AT_QIDEACT+0xc4>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	f649 4140 	movw	r1, #40000	; 0x9c40
 801706c:	4618      	mov	r0, r3
 801706e:	f7ef fdcb 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8017072:	e021      	b.n	80170b8 <AT_QIDEACT+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8017074:	491c      	ldr	r1, [pc, #112]	; (80170e8 <AT_QIDEACT+0xc8>)
 8017076:	481d      	ldr	r0, [pc, #116]	; (80170ec <AT_QIDEACT+0xcc>)
 8017078:	f002 fcbd 	bl	80199f6 <strstr>
 801707c:	4603      	mov	r3, r0
 801707e:	2b00      	cmp	r3, #0
 8017080:	d009      	beq.n	8017096 <AT_QIDEACT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 8017082:	4b18      	ldr	r3, [pc, #96]	; (80170e4 <AT_QIDEACT+0xc4>)
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	4618      	mov	r0, r3
 8017088:	f7ef fe02 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801708c:	4b10      	ldr	r3, [pc, #64]	; (80170d0 <AT_QIDEACT+0xb0>)
 801708e:	2200      	movs	r2, #0
 8017090:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8017092:	2300      	movs	r3, #0
 8017094:	e015      	b.n	80170c2 <AT_QIDEACT+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8017096:	4916      	ldr	r1, [pc, #88]	; (80170f0 <AT_QIDEACT+0xd0>)
 8017098:	4814      	ldr	r0, [pc, #80]	; (80170ec <AT_QIDEACT+0xcc>)
 801709a:	f002 fcac 	bl	80199f6 <strstr>
 801709e:	4603      	mov	r3, r0
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d009      	beq.n	80170b8 <AT_QIDEACT+0x98>
		{
			osTimerStop(AT_TimerHandle);
 80170a4:	4b0f      	ldr	r3, [pc, #60]	; (80170e4 <AT_QIDEACT+0xc4>)
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	4618      	mov	r0, r3
 80170aa:	f7ef fdf1 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80170ae:	4b08      	ldr	r3, [pc, #32]	; (80170d0 <AT_QIDEACT+0xb0>)
 80170b0:	2200      	movs	r2, #0
 80170b2:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 80170b4:	2301      	movs	r3, #1
 80170b6:	e004      	b.n	80170c2 <AT_QIDEACT+0xa2>
	while(read_rx_state == ACTIVE)
 80170b8:	4b05      	ldr	r3, [pc, #20]	; (80170d0 <AT_QIDEACT+0xb0>)
 80170ba:	781b      	ldrb	r3, [r3, #0]
 80170bc:	2b01      	cmp	r3, #1
 80170be:	d0d9      	beq.n	8017074 <AT_QIDEACT+0x54>
		}

	}
	return AT_ERROR;
 80170c0:	2301      	movs	r3, #1
}
 80170c2:	4618      	mov	r0, r3
 80170c4:	3710      	adds	r7, #16
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd80      	pop	{r7, pc}
 80170ca:	bf00      	nop
 80170cc:	0801a9d0 	.word	0x0801a9d0
 80170d0:	20009a2c 	.word	0x20009a2c
 80170d4:	2000085c 	.word	0x2000085c
 80170d8:	20009a70 	.word	0x20009a70
 80170dc:	20008238 	.word	0x20008238
 80170e0:	20009cb8 	.word	0x20009cb8
 80170e4:	20009698 	.word	0x20009698
 80170e8:	0801a8a8 	.word	0x0801a8a8
 80170ec:	20009b70 	.word	0x20009b70
 80170f0:	0801a980 	.word	0x0801a980

080170f4 <AT_QISTATE>:

uint8_t AT_QISTATE (void)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b084      	sub	sp, #16
 80170f8:	af00      	add	r7, sp, #0
	uint8_t str_out[11];
	sprintf(str_out, "AT+QISTATE\n");
 80170fa:	1d3b      	adds	r3, r7, #4
 80170fc:	497d      	ldr	r1, [pc, #500]	; (80172f4 <AT_QISTATE+0x200>)
 80170fe:	4618      	mov	r0, r3
 8017100:	f002 fc16 	bl	8019930 <siprintf>
	read_rx_state = ACTIVE;
 8017104:	4b7c      	ldr	r3, [pc, #496]	; (80172f8 <AT_QISTATE+0x204>)
 8017106:	2201      	movs	r2, #1
 8017108:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 801710a:	4b7c      	ldr	r3, [pc, #496]	; (80172fc <AT_QISTATE+0x208>)
 801710c:	2200      	movs	r2, #0
 801710e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8017110:	f7fe ffa6 	bl	8016060 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8017114:	2201      	movs	r2, #1
 8017116:	497a      	ldr	r1, [pc, #488]	; (8017300 <AT_QISTATE+0x20c>)
 8017118:	487a      	ldr	r0, [pc, #488]	; (8017304 <AT_QISTATE+0x210>)
 801711a:	f7ee fbdd 	bl	80058d8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 801711e:	1d3b      	adds	r3, r7, #4
 8017120:	220b      	movs	r2, #11
 8017122:	4619      	mov	r1, r3
 8017124:	4877      	ldr	r0, [pc, #476]	; (8017304 <AT_QISTATE+0x210>)
 8017126:	f7ee fb59 	bl	80057dc <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 801712a:	4b77      	ldr	r3, [pc, #476]	; (8017308 <AT_QISTATE+0x214>)
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	f04f 31ff 	mov.w	r1, #4294967295
 8017132:	4618      	mov	r0, r3
 8017134:	f7ef fec4 	bl	8006ec0 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 10000);
 8017138:	4b74      	ldr	r3, [pc, #464]	; (801730c <AT_QISTATE+0x218>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	f242 7110 	movw	r1, #10000	; 0x2710
 8017140:	4618      	mov	r0, r3
 8017142:	f7ef fd61 	bl	8006c08 <osTimerStart>
	while(read_rx_state == ACTIVE)
 8017146:	e0cb      	b.n	80172e0 <AT_QISTATE+0x1ec>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "IP INITIAL\r\n") != NULL )
 8017148:	4971      	ldr	r1, [pc, #452]	; (8017310 <AT_QISTATE+0x21c>)
 801714a:	4872      	ldr	r0, [pc, #456]	; (8017314 <AT_QISTATE+0x220>)
 801714c:	f002 fc53 	bl	80199f6 <strstr>
 8017150:	4603      	mov	r3, r0
 8017152:	2b00      	cmp	r3, #0
 8017154:	d009      	beq.n	801716a <AT_QISTATE+0x76>
		{
			osTimerStop(AT_TimerHandle);
 8017156:	4b6d      	ldr	r3, [pc, #436]	; (801730c <AT_QISTATE+0x218>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	4618      	mov	r0, r3
 801715c:	f7ef fd98 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017160:	4b65      	ldr	r3, [pc, #404]	; (80172f8 <AT_QISTATE+0x204>)
 8017162:	2200      	movs	r2, #0
 8017164:	701a      	strb	r2, [r3, #0]
			return IP_INITIAL;
 8017166:	2302      	movs	r3, #2
 8017168:	e0c0      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP START\r\n") != NULL )
 801716a:	496b      	ldr	r1, [pc, #428]	; (8017318 <AT_QISTATE+0x224>)
 801716c:	4869      	ldr	r0, [pc, #420]	; (8017314 <AT_QISTATE+0x220>)
 801716e:	f002 fc42 	bl	80199f6 <strstr>
 8017172:	4603      	mov	r3, r0
 8017174:	2b00      	cmp	r3, #0
 8017176:	d009      	beq.n	801718c <AT_QISTATE+0x98>
		{
			osTimerStop(AT_TimerHandle);
 8017178:	4b64      	ldr	r3, [pc, #400]	; (801730c <AT_QISTATE+0x218>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	4618      	mov	r0, r3
 801717e:	f7ef fd87 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017182:	4b5d      	ldr	r3, [pc, #372]	; (80172f8 <AT_QISTATE+0x204>)
 8017184:	2200      	movs	r2, #0
 8017186:	701a      	strb	r2, [r3, #0]
			return IP_START;
 8017188:	2303      	movs	r3, #3
 801718a:	e0af      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP CONFIG\r\n") != NULL )
 801718c:	4963      	ldr	r1, [pc, #396]	; (801731c <AT_QISTATE+0x228>)
 801718e:	4861      	ldr	r0, [pc, #388]	; (8017314 <AT_QISTATE+0x220>)
 8017190:	f002 fc31 	bl	80199f6 <strstr>
 8017194:	4603      	mov	r3, r0
 8017196:	2b00      	cmp	r3, #0
 8017198:	d009      	beq.n	80171ae <AT_QISTATE+0xba>
		{
			osTimerStop(AT_TimerHandle);
 801719a:	4b5c      	ldr	r3, [pc, #368]	; (801730c <AT_QISTATE+0x218>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	4618      	mov	r0, r3
 80171a0:	f7ef fd76 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80171a4:	4b54      	ldr	r3, [pc, #336]	; (80172f8 <AT_QISTATE+0x204>)
 80171a6:	2200      	movs	r2, #0
 80171a8:	701a      	strb	r2, [r3, #0]
			return IP_CONFIG;
 80171aa:	2304      	movs	r3, #4
 80171ac:	e09e      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP IND\r\n") != NULL )
 80171ae:	495c      	ldr	r1, [pc, #368]	; (8017320 <AT_QISTATE+0x22c>)
 80171b0:	4858      	ldr	r0, [pc, #352]	; (8017314 <AT_QISTATE+0x220>)
 80171b2:	f002 fc20 	bl	80199f6 <strstr>
 80171b6:	4603      	mov	r3, r0
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d009      	beq.n	80171d0 <AT_QISTATE+0xdc>
		{
			osTimerStop(AT_TimerHandle);
 80171bc:	4b53      	ldr	r3, [pc, #332]	; (801730c <AT_QISTATE+0x218>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	4618      	mov	r0, r3
 80171c2:	f7ef fd65 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80171c6:	4b4c      	ldr	r3, [pc, #304]	; (80172f8 <AT_QISTATE+0x204>)
 80171c8:	2200      	movs	r2, #0
 80171ca:	701a      	strb	r2, [r3, #0]
			return IP_IND;
 80171cc:	2305      	movs	r3, #5
 80171ce:	e08d      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP GPRSACT\r\n") != NULL )
 80171d0:	4954      	ldr	r1, [pc, #336]	; (8017324 <AT_QISTATE+0x230>)
 80171d2:	4850      	ldr	r0, [pc, #320]	; (8017314 <AT_QISTATE+0x220>)
 80171d4:	f002 fc0f 	bl	80199f6 <strstr>
 80171d8:	4603      	mov	r3, r0
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d009      	beq.n	80171f2 <AT_QISTATE+0xfe>
		{
			osTimerStop(AT_TimerHandle);
 80171de:	4b4b      	ldr	r3, [pc, #300]	; (801730c <AT_QISTATE+0x218>)
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7ef fd54 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80171e8:	4b43      	ldr	r3, [pc, #268]	; (80172f8 <AT_QISTATE+0x204>)
 80171ea:	2200      	movs	r2, #0
 80171ec:	701a      	strb	r2, [r3, #0]
			return IP_GPRSACT;
 80171ee:	2306      	movs	r3, #6
 80171f0:	e07c      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP STATUS\r\n") != NULL )
 80171f2:	494d      	ldr	r1, [pc, #308]	; (8017328 <AT_QISTATE+0x234>)
 80171f4:	4847      	ldr	r0, [pc, #284]	; (8017314 <AT_QISTATE+0x220>)
 80171f6:	f002 fbfe 	bl	80199f6 <strstr>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d009      	beq.n	8017214 <AT_QISTATE+0x120>
		{
			osTimerStop(AT_TimerHandle);
 8017200:	4b42      	ldr	r3, [pc, #264]	; (801730c <AT_QISTATE+0x218>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	4618      	mov	r0, r3
 8017206:	f7ef fd43 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801720a:	4b3b      	ldr	r3, [pc, #236]	; (80172f8 <AT_QISTATE+0x204>)
 801720c:	2200      	movs	r2, #0
 801720e:	701a      	strb	r2, [r3, #0]
			return IP_STATUS;
 8017210:	2307      	movs	r3, #7
 8017212:	e06b      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "TCP CONNECTING\r\n") != NULL )
 8017214:	4945      	ldr	r1, [pc, #276]	; (801732c <AT_QISTATE+0x238>)
 8017216:	483f      	ldr	r0, [pc, #252]	; (8017314 <AT_QISTATE+0x220>)
 8017218:	f002 fbed 	bl	80199f6 <strstr>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d009      	beq.n	8017236 <AT_QISTATE+0x142>
		{
			osTimerStop(AT_TimerHandle);
 8017222:	4b3a      	ldr	r3, [pc, #232]	; (801730c <AT_QISTATE+0x218>)
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	4618      	mov	r0, r3
 8017228:	f7ef fd32 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801722c:	4b32      	ldr	r3, [pc, #200]	; (80172f8 <AT_QISTATE+0x204>)
 801722e:	2200      	movs	r2, #0
 8017230:	701a      	strb	r2, [r3, #0]
			return TCP_CONNECTING;
 8017232:	2308      	movs	r3, #8
 8017234:	e05a      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "UDP CONNECTING\r\n") != NULL )
 8017236:	493e      	ldr	r1, [pc, #248]	; (8017330 <AT_QISTATE+0x23c>)
 8017238:	4836      	ldr	r0, [pc, #216]	; (8017314 <AT_QISTATE+0x220>)
 801723a:	f002 fbdc 	bl	80199f6 <strstr>
 801723e:	4603      	mov	r3, r0
 8017240:	2b00      	cmp	r3, #0
 8017242:	d009      	beq.n	8017258 <AT_QISTATE+0x164>
		{
			osTimerStop(AT_TimerHandle);
 8017244:	4b31      	ldr	r3, [pc, #196]	; (801730c <AT_QISTATE+0x218>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	4618      	mov	r0, r3
 801724a:	f7ef fd21 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801724e:	4b2a      	ldr	r3, [pc, #168]	; (80172f8 <AT_QISTATE+0x204>)
 8017250:	2200      	movs	r2, #0
 8017252:	701a      	strb	r2, [r3, #0]
			return UDP_CONNECTING;
 8017254:	2309      	movs	r3, #9
 8017256:	e049      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP CLOSE\r\n") != NULL )
 8017258:	4936      	ldr	r1, [pc, #216]	; (8017334 <AT_QISTATE+0x240>)
 801725a:	482e      	ldr	r0, [pc, #184]	; (8017314 <AT_QISTATE+0x220>)
 801725c:	f002 fbcb 	bl	80199f6 <strstr>
 8017260:	4603      	mov	r3, r0
 8017262:	2b00      	cmp	r3, #0
 8017264:	d009      	beq.n	801727a <AT_QISTATE+0x186>
		{
			osTimerStop(AT_TimerHandle);
 8017266:	4b29      	ldr	r3, [pc, #164]	; (801730c <AT_QISTATE+0x218>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	4618      	mov	r0, r3
 801726c:	f7ef fd10 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017270:	4b21      	ldr	r3, [pc, #132]	; (80172f8 <AT_QISTATE+0x204>)
 8017272:	2200      	movs	r2, #0
 8017274:	701a      	strb	r2, [r3, #0]
			return IP_CLOSE;
 8017276:	230a      	movs	r3, #10
 8017278:	e038      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL )
 801727a:	492f      	ldr	r1, [pc, #188]	; (8017338 <AT_QISTATE+0x244>)
 801727c:	4825      	ldr	r0, [pc, #148]	; (8017314 <AT_QISTATE+0x220>)
 801727e:	f002 fbba 	bl	80199f6 <strstr>
 8017282:	4603      	mov	r3, r0
 8017284:	2b00      	cmp	r3, #0
 8017286:	d009      	beq.n	801729c <AT_QISTATE+0x1a8>
		{
			osTimerStop(AT_TimerHandle);
 8017288:	4b20      	ldr	r3, [pc, #128]	; (801730c <AT_QISTATE+0x218>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	4618      	mov	r0, r3
 801728e:	f7ef fcff 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017292:	4b19      	ldr	r3, [pc, #100]	; (80172f8 <AT_QISTATE+0x204>)
 8017294:	2200      	movs	r2, #0
 8017296:	701a      	strb	r2, [r3, #0]
			return CONNECT_OK;
 8017298:	230b      	movs	r3, #11
 801729a:	e027      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "PDP DEACT\r\n") != NULL )
 801729c:	4927      	ldr	r1, [pc, #156]	; (801733c <AT_QISTATE+0x248>)
 801729e:	481d      	ldr	r0, [pc, #116]	; (8017314 <AT_QISTATE+0x220>)
 80172a0:	f002 fba9 	bl	80199f6 <strstr>
 80172a4:	4603      	mov	r3, r0
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d009      	beq.n	80172be <AT_QISTATE+0x1ca>
		{
			osTimerStop(AT_TimerHandle);
 80172aa:	4b18      	ldr	r3, [pc, #96]	; (801730c <AT_QISTATE+0x218>)
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	4618      	mov	r0, r3
 80172b0:	f7ef fcee 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80172b4:	4b10      	ldr	r3, [pc, #64]	; (80172f8 <AT_QISTATE+0x204>)
 80172b6:	2200      	movs	r2, #0
 80172b8:	701a      	strb	r2, [r3, #0]
			return PDP_DEACT;
 80172ba:	230c      	movs	r3, #12
 80172bc:	e016      	b.n	80172ec <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 80172be:	4920      	ldr	r1, [pc, #128]	; (8017340 <AT_QISTATE+0x24c>)
 80172c0:	4814      	ldr	r0, [pc, #80]	; (8017314 <AT_QISTATE+0x220>)
 80172c2:	f002 fb98 	bl	80199f6 <strstr>
 80172c6:	4603      	mov	r3, r0
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d009      	beq.n	80172e0 <AT_QISTATE+0x1ec>
		{
			osTimerStop(AT_TimerHandle);
 80172cc:	4b0f      	ldr	r3, [pc, #60]	; (801730c <AT_QISTATE+0x218>)
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	4618      	mov	r0, r3
 80172d2:	f7ef fcdd 	bl	8006c90 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80172d6:	4b08      	ldr	r3, [pc, #32]	; (80172f8 <AT_QISTATE+0x204>)
 80172d8:	2200      	movs	r2, #0
 80172da:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 80172dc:	2301      	movs	r3, #1
 80172de:	e005      	b.n	80172ec <AT_QISTATE+0x1f8>
	while(read_rx_state == ACTIVE)
 80172e0:	4b05      	ldr	r3, [pc, #20]	; (80172f8 <AT_QISTATE+0x204>)
 80172e2:	781b      	ldrb	r3, [r3, #0]
 80172e4:	2b01      	cmp	r3, #1
 80172e6:	f43f af2f 	beq.w	8017148 <AT_QISTATE+0x54>
		}

	}
	return AT_ERROR;
 80172ea:	2301      	movs	r3, #1
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3710      	adds	r7, #16
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}
 80172f4:	0801a9dc 	.word	0x0801a9dc
 80172f8:	20009a2c 	.word	0x20009a2c
 80172fc:	2000085c 	.word	0x2000085c
 8017300:	20009a70 	.word	0x20009a70
 8017304:	20008238 	.word	0x20008238
 8017308:	20009cb8 	.word	0x20009cb8
 801730c:	20009698 	.word	0x20009698
 8017310:	0801a9e8 	.word	0x0801a9e8
 8017314:	20009b70 	.word	0x20009b70
 8017318:	0801a9f8 	.word	0x0801a9f8
 801731c:	0801aa04 	.word	0x0801aa04
 8017320:	0801aa10 	.word	0x0801aa10
 8017324:	0801aa1c 	.word	0x0801aa1c
 8017328:	0801aa2c 	.word	0x0801aa2c
 801732c:	0801aa38 	.word	0x0801aa38
 8017330:	0801aa4c 	.word	0x0801aa4c
 8017334:	0801aa60 	.word	0x0801aa60
 8017338:	0801a910 	.word	0x0801a910
 801733c:	0801aa6c 	.word	0x0801aa6c
 8017340:	0801a980 	.word	0x0801a980

08017344 <request_to_server>:
	}
	return AT_ERROR;
}

uint8_t request_to_server() // функция запроса к серверу, чтобы тот прочитал регистры из устройства
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b082      	sub	sp, #8
 8017348:	af00      	add	r7, sp, #0
	uint8_t send_out[5] = {0x01, 0x02, 0x03, 0x04, 0x05};
 801734a:	4a0b      	ldr	r2, [pc, #44]	; (8017378 <request_to_server+0x34>)
 801734c:	463b      	mov	r3, r7
 801734e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017352:	6018      	str	r0, [r3, #0]
 8017354:	3304      	adds	r3, #4
 8017356:	7019      	strb	r1, [r3, #0]

	if( AT_QISEND(&send_out[0], 5) == AT_OK )
 8017358:	463b      	mov	r3, r7
 801735a:	2105      	movs	r1, #5
 801735c:	4618      	mov	r0, r3
 801735e:	f7ff fc77 	bl	8016c50 <AT_QISEND>
 8017362:	4603      	mov	r3, r0
 8017364:	2b00      	cmp	r3, #0
 8017366:	d101      	bne.n	801736c <request_to_server+0x28>
	{
		return AT_OK;
 8017368:	2300      	movs	r3, #0
 801736a:	e000      	b.n	801736e <request_to_server+0x2a>
	}

	return AT_ERROR;
 801736c:	2301      	movs	r3, #1
}
 801736e:	4618      	mov	r0, r3
 8017370:	3708      	adds	r7, #8
 8017372:	46bd      	mov	sp, r7
 8017374:	bd80      	pop	{r7, pc}
 8017376:	bf00      	nop
 8017378:	0801aad0 	.word	0x0801aad0

0801737c <read_status_registers>:
control_register_struct control_registers;
bootloader_register_struct bootloader_registers;

//----функция чтения из памяти регистров статуса--------------------------
void read_status_registers(void)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b082      	sub	sp, #8
 8017380:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8017382:	4bbc      	ldr	r3, [pc, #752]	; (8017674 <read_status_registers+0x2f8>)
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	f04f 31ff 	mov.w	r1, #4294967295
 801738a:	4618      	mov	r0, r3
 801738c:	f7ef fcd4 	bl	8006d38 <osMutexWait>

	fm25v02_read(2*VERSION_REG, &status_reg_temp_h);
 8017390:	1dfb      	adds	r3, r7, #7
 8017392:	4619      	mov	r1, r3
 8017394:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8017398:	f7fe fa28 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*VERSION_REG+1, &status_reg_temp_l);
 801739c:	1dbb      	adds	r3, r7, #6
 801739e:	4619      	mov	r1, r3
 80173a0:	f242 0001 	movw	r0, #8193	; 0x2001
 80173a4:	f7fe fa22 	bl	80157ec <fm25v02_read>
	status_registers.version_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80173a8:	79fb      	ldrb	r3, [r7, #7]
 80173aa:	021b      	lsls	r3, r3, #8
 80173ac:	b21a      	sxth	r2, r3
 80173ae:	79bb      	ldrb	r3, [r7, #6]
 80173b0:	b21b      	sxth	r3, r3
 80173b2:	4313      	orrs	r3, r2
 80173b4:	b21b      	sxth	r3, r3
 80173b6:	b29a      	uxth	r2, r3
 80173b8:	4baf      	ldr	r3, [pc, #700]	; (8017678 <read_status_registers+0x2fc>)
 80173ba:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*SECURITY_STATUS_REG, &status_reg_temp_h);
 80173bc:	1dfb      	adds	r3, r7, #7
 80173be:	4619      	mov	r1, r3
 80173c0:	f242 0002 	movw	r0, #8194	; 0x2002
 80173c4:	f7fe fa12 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*SECURITY_STATUS_REG+1, &status_reg_temp_l);
 80173c8:	1dbb      	adds	r3, r7, #6
 80173ca:	4619      	mov	r1, r3
 80173cc:	f242 0003 	movw	r0, #8195	; 0x2003
 80173d0:	f7fe fa0c 	bl	80157ec <fm25v02_read>
	status_registers.security_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80173d4:	79fb      	ldrb	r3, [r7, #7]
 80173d6:	021b      	lsls	r3, r3, #8
 80173d8:	b21a      	sxth	r2, r3
 80173da:	79bb      	ldrb	r3, [r7, #6]
 80173dc:	b21b      	sxth	r3, r3
 80173de:	4313      	orrs	r3, r2
 80173e0:	b21b      	sxth	r3, r3
 80173e2:	b29a      	uxth	r2, r3
 80173e4:	4ba4      	ldr	r3, [pc, #656]	; (8017678 <read_status_registers+0x2fc>)
 80173e6:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*STATUS_LOOP_REG, &status_reg_temp_h);
 80173e8:	1dfb      	adds	r3, r7, #7
 80173ea:	4619      	mov	r1, r3
 80173ec:	f242 0004 	movw	r0, #8196	; 0x2004
 80173f0:	f7fe f9fc 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*STATUS_LOOP_REG+1, &status_reg_temp_l);
 80173f4:	1dbb      	adds	r3, r7, #6
 80173f6:	4619      	mov	r1, r3
 80173f8:	f242 0005 	movw	r0, #8197	; 0x2005
 80173fc:	f7fe f9f6 	bl	80157ec <fm25v02_read>
	status_registers.status_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017400:	79fb      	ldrb	r3, [r7, #7]
 8017402:	021b      	lsls	r3, r3, #8
 8017404:	b21a      	sxth	r2, r3
 8017406:	79bb      	ldrb	r3, [r7, #6]
 8017408:	b21b      	sxth	r3, r3
 801740a:	4313      	orrs	r3, r2
 801740c:	b21b      	sxth	r3, r3
 801740e:	b29a      	uxth	r2, r3
 8017410:	4b99      	ldr	r3, [pc, #612]	; (8017678 <read_status_registers+0x2fc>)
 8017412:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*ERROR_LOOP_REG, &status_reg_temp_h);
 8017414:	1dfb      	adds	r3, r7, #7
 8017416:	4619      	mov	r1, r3
 8017418:	f242 0006 	movw	r0, #8198	; 0x2006
 801741c:	f7fe f9e6 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ERROR_LOOP_REG+1, &status_reg_temp_l);
 8017420:	1dbb      	adds	r3, r7, #6
 8017422:	4619      	mov	r1, r3
 8017424:	f242 0007 	movw	r0, #8199	; 0x2007
 8017428:	f7fe f9e0 	bl	80157ec <fm25v02_read>
	status_registers.error_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801742c:	79fb      	ldrb	r3, [r7, #7]
 801742e:	021b      	lsls	r3, r3, #8
 8017430:	b21a      	sxth	r2, r3
 8017432:	79bb      	ldrb	r3, [r7, #6]
 8017434:	b21b      	sxth	r3, r3
 8017436:	4313      	orrs	r3, r2
 8017438:	b21b      	sxth	r3, r3
 801743a:	b29a      	uxth	r2, r3
 801743c:	4b8e      	ldr	r3, [pc, #568]	; (8017678 <read_status_registers+0x2fc>)
 801743e:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*ALARM_LOOP_REG, &status_reg_temp_h);
 8017440:	1dfb      	adds	r3, r7, #7
 8017442:	4619      	mov	r1, r3
 8017444:	f242 0008 	movw	r0, #8200	; 0x2008
 8017448:	f7fe f9d0 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_REG+1, &status_reg_temp_l);
 801744c:	1dbb      	adds	r3, r7, #6
 801744e:	4619      	mov	r1, r3
 8017450:	f242 0009 	movw	r0, #8201	; 0x2009
 8017454:	f7fe f9ca 	bl	80157ec <fm25v02_read>
	status_registers.alarm_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017458:	79fb      	ldrb	r3, [r7, #7]
 801745a:	021b      	lsls	r3, r3, #8
 801745c:	b21a      	sxth	r2, r3
 801745e:	79bb      	ldrb	r3, [r7, #6]
 8017460:	b21b      	sxth	r3, r3
 8017462:	4313      	orrs	r3, r2
 8017464:	b21b      	sxth	r3, r3
 8017466:	b29a      	uxth	r2, r3
 8017468:	4b83      	ldr	r3, [pc, #524]	; (8017678 <read_status_registers+0x2fc>)
 801746a:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*TIME_CURRENT_YEAR_REG, &status_reg_temp_h);
 801746c:	1dfb      	adds	r3, r7, #7
 801746e:	4619      	mov	r1, r3
 8017470:	f242 000a 	movw	r0, #8202	; 0x200a
 8017474:	f7fe f9ba 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &status_reg_temp_l);
 8017478:	1dbb      	adds	r3, r7, #6
 801747a:	4619      	mov	r1, r3
 801747c:	f242 000b 	movw	r0, #8203	; 0x200b
 8017480:	f7fe f9b4 	bl	80157ec <fm25v02_read>
	status_registers.time_current_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017484:	79fb      	ldrb	r3, [r7, #7]
 8017486:	021b      	lsls	r3, r3, #8
 8017488:	b21a      	sxth	r2, r3
 801748a:	79bb      	ldrb	r3, [r7, #6]
 801748c:	b21b      	sxth	r3, r3
 801748e:	4313      	orrs	r3, r2
 8017490:	b21b      	sxth	r3, r3
 8017492:	b29a      	uxth	r2, r3
 8017494:	4b78      	ldr	r3, [pc, #480]	; (8017678 <read_status_registers+0x2fc>)
 8017496:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*TIME_CURRENT_MONTH_REG, &status_reg_temp_h);
 8017498:	1dfb      	adds	r3, r7, #7
 801749a:	4619      	mov	r1, r3
 801749c:	f242 000c 	movw	r0, #8204	; 0x200c
 80174a0:	f7fe f9a4 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &status_reg_temp_l);
 80174a4:	1dbb      	adds	r3, r7, #6
 80174a6:	4619      	mov	r1, r3
 80174a8:	f242 000d 	movw	r0, #8205	; 0x200d
 80174ac:	f7fe f99e 	bl	80157ec <fm25v02_read>
	status_registers.time_current_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80174b0:	79fb      	ldrb	r3, [r7, #7]
 80174b2:	021b      	lsls	r3, r3, #8
 80174b4:	b21a      	sxth	r2, r3
 80174b6:	79bb      	ldrb	r3, [r7, #6]
 80174b8:	b21b      	sxth	r3, r3
 80174ba:	4313      	orrs	r3, r2
 80174bc:	b21b      	sxth	r3, r3
 80174be:	b29a      	uxth	r2, r3
 80174c0:	4b6d      	ldr	r3, [pc, #436]	; (8017678 <read_status_registers+0x2fc>)
 80174c2:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*TIME_CURRENT_DAY_REG, &status_reg_temp_h);
 80174c4:	1dfb      	adds	r3, r7, #7
 80174c6:	4619      	mov	r1, r3
 80174c8:	f242 000e 	movw	r0, #8206	; 0x200e
 80174cc:	f7fe f98e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &status_reg_temp_l);
 80174d0:	1dbb      	adds	r3, r7, #6
 80174d2:	4619      	mov	r1, r3
 80174d4:	f242 000f 	movw	r0, #8207	; 0x200f
 80174d8:	f7fe f988 	bl	80157ec <fm25v02_read>
	status_registers.time_current_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80174dc:	79fb      	ldrb	r3, [r7, #7]
 80174de:	021b      	lsls	r3, r3, #8
 80174e0:	b21a      	sxth	r2, r3
 80174e2:	79bb      	ldrb	r3, [r7, #6]
 80174e4:	b21b      	sxth	r3, r3
 80174e6:	4313      	orrs	r3, r2
 80174e8:	b21b      	sxth	r3, r3
 80174ea:	b29a      	uxth	r2, r3
 80174ec:	4b62      	ldr	r3, [pc, #392]	; (8017678 <read_status_registers+0x2fc>)
 80174ee:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_CURRENT_HOUR_REG, &status_reg_temp_h);
 80174f0:	1dfb      	adds	r3, r7, #7
 80174f2:	4619      	mov	r1, r3
 80174f4:	f242 0010 	movw	r0, #8208	; 0x2010
 80174f8:	f7fe f978 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &status_reg_temp_l);
 80174fc:	1dbb      	adds	r3, r7, #6
 80174fe:	4619      	mov	r1, r3
 8017500:	f242 0011 	movw	r0, #8209	; 0x2011
 8017504:	f7fe f972 	bl	80157ec <fm25v02_read>
	status_registers.time_current_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017508:	79fb      	ldrb	r3, [r7, #7]
 801750a:	021b      	lsls	r3, r3, #8
 801750c:	b21a      	sxth	r2, r3
 801750e:	79bb      	ldrb	r3, [r7, #6]
 8017510:	b21b      	sxth	r3, r3
 8017512:	4313      	orrs	r3, r2
 8017514:	b21b      	sxth	r3, r3
 8017516:	b29a      	uxth	r2, r3
 8017518:	4b57      	ldr	r3, [pc, #348]	; (8017678 <read_status_registers+0x2fc>)
 801751a:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_CURRENT_MINUTE_REG, &status_reg_temp_h);
 801751c:	1dfb      	adds	r3, r7, #7
 801751e:	4619      	mov	r1, r3
 8017520:	f242 0012 	movw	r0, #8210	; 0x2012
 8017524:	f7fe f962 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &status_reg_temp_l);
 8017528:	1dbb      	adds	r3, r7, #6
 801752a:	4619      	mov	r1, r3
 801752c:	f242 0013 	movw	r0, #8211	; 0x2013
 8017530:	f7fe f95c 	bl	80157ec <fm25v02_read>
	status_registers.time_current_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017534:	79fb      	ldrb	r3, [r7, #7]
 8017536:	021b      	lsls	r3, r3, #8
 8017538:	b21a      	sxth	r2, r3
 801753a:	79bb      	ldrb	r3, [r7, #6]
 801753c:	b21b      	sxth	r3, r3
 801753e:	4313      	orrs	r3, r2
 8017540:	b21b      	sxth	r3, r3
 8017542:	b29a      	uxth	r2, r3
 8017544:	4b4c      	ldr	r3, [pc, #304]	; (8017678 <read_status_registers+0x2fc>)
 8017546:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_CURRENT_SECOND_REG, &status_reg_temp_h);
 8017548:	1dfb      	adds	r3, r7, #7
 801754a:	4619      	mov	r1, r3
 801754c:	f242 0014 	movw	r0, #8212	; 0x2014
 8017550:	f7fe f94c 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &status_reg_temp_l);
 8017554:	1dbb      	adds	r3, r7, #6
 8017556:	4619      	mov	r1, r3
 8017558:	f242 0015 	movw	r0, #8213	; 0x2015
 801755c:	f7fe f946 	bl	80157ec <fm25v02_read>
	status_registers.time_current_second_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017560:	79fb      	ldrb	r3, [r7, #7]
 8017562:	021b      	lsls	r3, r3, #8
 8017564:	b21a      	sxth	r2, r3
 8017566:	79bb      	ldrb	r3, [r7, #6]
 8017568:	b21b      	sxth	r3, r3
 801756a:	4313      	orrs	r3, r2
 801756c:	b21b      	sxth	r3, r3
 801756e:	b29a      	uxth	r2, r3
 8017570:	4b41      	ldr	r3, [pc, #260]	; (8017678 <read_status_registers+0x2fc>)
 8017572:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG, &status_reg_temp_h);
 8017574:	1dfb      	adds	r3, r7, #7
 8017576:	4619      	mov	r1, r3
 8017578:	f242 0016 	movw	r0, #8214	; 0x2016
 801757c:	f7fe f936 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG+1, &status_reg_temp_l);
 8017580:	1dbb      	adds	r3, r7, #6
 8017582:	4619      	mov	r1, r3
 8017584:	f242 0017 	movw	r0, #8215	; 0x2017
 8017588:	f7fe f930 	bl	80157ec <fm25v02_read>
	status_registers.time_current_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801758c:	79fb      	ldrb	r3, [r7, #7]
 801758e:	021b      	lsls	r3, r3, #8
 8017590:	b21a      	sxth	r2, r3
 8017592:	79bb      	ldrb	r3, [r7, #6]
 8017594:	b21b      	sxth	r3, r3
 8017596:	4313      	orrs	r3, r2
 8017598:	b21b      	sxth	r3, r3
 801759a:	b29a      	uxth	r2, r3
 801759c:	4b36      	ldr	r3, [pc, #216]	; (8017678 <read_status_registers+0x2fc>)
 801759e:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG, &status_reg_temp_h);
 80175a0:	1dfb      	adds	r3, r7, #7
 80175a2:	4619      	mov	r1, r3
 80175a4:	f242 0018 	movw	r0, #8216	; 0x2018
 80175a8:	f7fe f920 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG+1, &status_reg_temp_l);
 80175ac:	1dbb      	adds	r3, r7, #6
 80175ae:	4619      	mov	r1, r3
 80175b0:	f242 0019 	movw	r0, #8217	; 0x2019
 80175b4:	f7fe f91a 	bl	80157ec <fm25v02_read>
	status_registers.address_processed_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80175b8:	79fb      	ldrb	r3, [r7, #7]
 80175ba:	021b      	lsls	r3, r3, #8
 80175bc:	b21a      	sxth	r2, r3
 80175be:	79bb      	ldrb	r3, [r7, #6]
 80175c0:	b21b      	sxth	r3, r3
 80175c2:	4313      	orrs	r3, r2
 80175c4:	b21b      	sxth	r3, r3
 80175c6:	b29a      	uxth	r2, r3
 80175c8:	4b2b      	ldr	r3, [pc, #172]	; (8017678 <read_status_registers+0x2fc>)
 80175ca:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG, &status_reg_temp_h);
 80175cc:	1dfb      	adds	r3, r7, #7
 80175ce:	4619      	mov	r1, r3
 80175d0:	f242 001a 	movw	r0, #8218	; 0x201a
 80175d4:	f7fe f90a 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG+1, &status_reg_temp_l);
 80175d8:	1dbb      	adds	r3, r7, #6
 80175da:	4619      	mov	r1, r3
 80175dc:	f242 001b 	movw	r0, #8219	; 0x201b
 80175e0:	f7fe f904 	bl	80157ec <fm25v02_read>
	status_registers.address_processed_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80175e4:	79fb      	ldrb	r3, [r7, #7]
 80175e6:	021b      	lsls	r3, r3, #8
 80175e8:	b21a      	sxth	r2, r3
 80175ea:	79bb      	ldrb	r3, [r7, #6]
 80175ec:	b21b      	sxth	r3, r3
 80175ee:	4313      	orrs	r3, r2
 80175f0:	b21b      	sxth	r3, r3
 80175f2:	b29a      	uxth	r2, r3
 80175f4:	4b20      	ldr	r3, [pc, #128]	; (8017678 <read_status_registers+0x2fc>)
 80175f6:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG, &status_reg_temp_h);
 80175f8:	1dfb      	adds	r3, r7, #7
 80175fa:	4619      	mov	r1, r3
 80175fc:	f242 001c 	movw	r0, #8220	; 0x201c
 8017600:	f7fe f8f4 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &status_reg_temp_l);
 8017604:	1dbb      	adds	r3, r7, #6
 8017606:	4619      	mov	r1, r3
 8017608:	f242 001d 	movw	r0, #8221	; 0x201d
 801760c:	f7fe f8ee 	bl	80157ec <fm25v02_read>
	status_registers.address_last_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017610:	79fb      	ldrb	r3, [r7, #7]
 8017612:	021b      	lsls	r3, r3, #8
 8017614:	b21a      	sxth	r2, r3
 8017616:	79bb      	ldrb	r3, [r7, #6]
 8017618:	b21b      	sxth	r3, r3
 801761a:	4313      	orrs	r3, r2
 801761c:	b21b      	sxth	r3, r3
 801761e:	b29a      	uxth	r2, r3
 8017620:	4b15      	ldr	r3, [pc, #84]	; (8017678 <read_status_registers+0x2fc>)
 8017622:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG, &status_reg_temp_h);
 8017624:	1dfb      	adds	r3, r7, #7
 8017626:	4619      	mov	r1, r3
 8017628:	f242 001e 	movw	r0, #8222	; 0x201e
 801762c:	f7fe f8de 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &status_reg_temp_l);
 8017630:	1dbb      	adds	r3, r7, #6
 8017632:	4619      	mov	r1, r3
 8017634:	f242 001f 	movw	r0, #8223	; 0x201f
 8017638:	f7fe f8d8 	bl	80157ec <fm25v02_read>
	status_registers.address_last_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801763c:	79fb      	ldrb	r3, [r7, #7]
 801763e:	021b      	lsls	r3, r3, #8
 8017640:	b21a      	sxth	r2, r3
 8017642:	79bb      	ldrb	r3, [r7, #6]
 8017644:	b21b      	sxth	r3, r3
 8017646:	4313      	orrs	r3, r2
 8017648:	b21b      	sxth	r3, r3
 801764a:	b29a      	uxth	r2, r3
 801764c:	4b0a      	ldr	r3, [pc, #40]	; (8017678 <read_status_registers+0x2fc>)
 801764e:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*SYSTEM_STATUS_REG, &status_reg_temp_h);
 8017650:	1dfb      	adds	r3, r7, #7
 8017652:	4619      	mov	r1, r3
 8017654:	f242 0020 	movw	r0, #8224	; 0x2020
 8017658:	f7fe f8c8 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*SYSTEM_STATUS_REG+1, &status_reg_temp_l);
 801765c:	1dbb      	adds	r3, r7, #6
 801765e:	4619      	mov	r1, r3
 8017660:	f242 0021 	movw	r0, #8225	; 0x2021
 8017664:	f7fe f8c2 	bl	80157ec <fm25v02_read>
	status_registers.system_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017668:	79fb      	ldrb	r3, [r7, #7]
 801766a:	021b      	lsls	r3, r3, #8
 801766c:	b21a      	sxth	r2, r3
 801766e:	79bb      	ldrb	r3, [r7, #6]
 8017670:	e004      	b.n	801767c <read_status_registers+0x300>
 8017672:	bf00      	nop
 8017674:	20009a6c 	.word	0x20009a6c
 8017678:	2000a10c 	.word	0x2000a10c
 801767c:	b21b      	sxth	r3, r3
 801767e:	4313      	orrs	r3, r2
 8017680:	b21b      	sxth	r3, r3
 8017682:	b29a      	uxth	r2, r3
 8017684:	4bbc      	ldr	r3, [pc, #752]	; (8017978 <read_status_registers+0x5fc>)
 8017686:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*POWER_ON_REG, &status_reg_temp_h);
 8017688:	1dfb      	adds	r3, r7, #7
 801768a:	4619      	mov	r1, r3
 801768c:	f242 0022 	movw	r0, #8226	; 0x2022
 8017690:	f7fe f8ac 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*POWER_ON_REG+1, &status_reg_temp_l);
 8017694:	1dbb      	adds	r3, r7, #6
 8017696:	4619      	mov	r1, r3
 8017698:	f242 0023 	movw	r0, #8227	; 0x2023
 801769c:	f7fe f8a6 	bl	80157ec <fm25v02_read>
	status_registers.power_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80176a0:	79fb      	ldrb	r3, [r7, #7]
 80176a2:	021b      	lsls	r3, r3, #8
 80176a4:	b21a      	sxth	r2, r3
 80176a6:	79bb      	ldrb	r3, [r7, #6]
 80176a8:	b21b      	sxth	r3, r3
 80176aa:	4313      	orrs	r3, r2
 80176ac:	b21b      	sxth	r3, r3
 80176ae:	b29a      	uxth	r2, r3
 80176b0:	4bb1      	ldr	r3, [pc, #708]	; (8017978 <read_status_registers+0x5fc>)
 80176b2:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*ERROR_RTC_REG, &status_reg_temp_h);
 80176b4:	1dfb      	adds	r3, r7, #7
 80176b6:	4619      	mov	r1, r3
 80176b8:	f242 0024 	movw	r0, #8228	; 0x2024
 80176bc:	f7fe f896 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ERROR_RTC_REG+1, &status_reg_temp_l);
 80176c0:	1dbb      	adds	r3, r7, #6
 80176c2:	4619      	mov	r1, r3
 80176c4:	f242 0025 	movw	r0, #8229	; 0x2025
 80176c8:	f7fe f890 	bl	80157ec <fm25v02_read>
	status_registers.error_rtc_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80176cc:	79fb      	ldrb	r3, [r7, #7]
 80176ce:	021b      	lsls	r3, r3, #8
 80176d0:	b21a      	sxth	r2, r3
 80176d2:	79bb      	ldrb	r3, [r7, #6]
 80176d4:	b21b      	sxth	r3, r3
 80176d6:	4313      	orrs	r3, r2
 80176d8:	b21b      	sxth	r3, r3
 80176da:	b29a      	uxth	r2, r3
 80176dc:	4ba6      	ldr	r3, [pc, #664]	; (8017978 <read_status_registers+0x5fc>)
 80176de:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*POWER_ON_LIGHTING_REG, &status_reg_temp_h);
 80176e0:	1dfb      	adds	r3, r7, #7
 80176e2:	4619      	mov	r1, r3
 80176e4:	f242 0026 	movw	r0, #8230	; 0x2026
 80176e8:	f7fe f880 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*POWER_ON_LIGHTING_REG+1, &status_reg_temp_l);
 80176ec:	1dbb      	adds	r3, r7, #6
 80176ee:	4619      	mov	r1, r3
 80176f0:	f242 0027 	movw	r0, #8231	; 0x2027
 80176f4:	f7fe f87a 	bl	80157ec <fm25v02_read>
	status_registers.power_on_lighting_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80176f8:	79fb      	ldrb	r3, [r7, #7]
 80176fa:	021b      	lsls	r3, r3, #8
 80176fc:	b21a      	sxth	r2, r3
 80176fe:	79bb      	ldrb	r3, [r7, #6]
 8017700:	b21b      	sxth	r3, r3
 8017702:	4313      	orrs	r3, r2
 8017704:	b21b      	sxth	r3, r3
 8017706:	b29a      	uxth	r2, r3
 8017708:	4b9b      	ldr	r3, [pc, #620]	; (8017978 <read_status_registers+0x5fc>)
 801770a:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*IBUTTON_COMPLETE_0_REG, &status_reg_temp_h);
 801770c:	1dfb      	adds	r3, r7, #7
 801770e:	4619      	mov	r1, r3
 8017710:	f242 002a 	movw	r0, #8234	; 0x202a
 8017714:	f7fe f86a 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &status_reg_temp_l);
 8017718:	1dbb      	adds	r3, r7, #6
 801771a:	4619      	mov	r1, r3
 801771c:	f242 002b 	movw	r0, #8235	; 0x202b
 8017720:	f7fe f864 	bl	80157ec <fm25v02_read>
	status_registers.ibutton_complite_0_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017724:	79fb      	ldrb	r3, [r7, #7]
 8017726:	021b      	lsls	r3, r3, #8
 8017728:	b21a      	sxth	r2, r3
 801772a:	79bb      	ldrb	r3, [r7, #6]
 801772c:	b21b      	sxth	r3, r3
 801772e:	4313      	orrs	r3, r2
 8017730:	b21b      	sxth	r3, r3
 8017732:	b29a      	uxth	r2, r3
 8017734:	4b90      	ldr	r3, [pc, #576]	; (8017978 <read_status_registers+0x5fc>)
 8017736:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*IBUTTON_COMPLETE_1_REG, &status_reg_temp_h);
 8017738:	1dfb      	adds	r3, r7, #7
 801773a:	4619      	mov	r1, r3
 801773c:	f242 002c 	movw	r0, #8236	; 0x202c
 8017740:	f7fe f854 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &status_reg_temp_l);
 8017744:	1dbb      	adds	r3, r7, #6
 8017746:	4619      	mov	r1, r3
 8017748:	f242 002d 	movw	r0, #8237	; 0x202d
 801774c:	f7fe f84e 	bl	80157ec <fm25v02_read>
	status_registers.ibutton_complite_1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017750:	79fb      	ldrb	r3, [r7, #7]
 8017752:	021b      	lsls	r3, r3, #8
 8017754:	b21a      	sxth	r2, r3
 8017756:	79bb      	ldrb	r3, [r7, #6]
 8017758:	b21b      	sxth	r3, r3
 801775a:	4313      	orrs	r3, r2
 801775c:	b21b      	sxth	r3, r3
 801775e:	b29a      	uxth	r2, r3
 8017760:	4b85      	ldr	r3, [pc, #532]	; (8017978 <read_status_registers+0x5fc>)
 8017762:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*IBUTTON_COMPLETE_2_REG, &status_reg_temp_h);
 8017764:	1dfb      	adds	r3, r7, #7
 8017766:	4619      	mov	r1, r3
 8017768:	f242 002e 	movw	r0, #8238	; 0x202e
 801776c:	f7fe f83e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &status_reg_temp_l);
 8017770:	1dbb      	adds	r3, r7, #6
 8017772:	4619      	mov	r1, r3
 8017774:	f242 002f 	movw	r0, #8239	; 0x202f
 8017778:	f7fe f838 	bl	80157ec <fm25v02_read>
	status_registers.ibutton_complite_2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801777c:	79fb      	ldrb	r3, [r7, #7]
 801777e:	021b      	lsls	r3, r3, #8
 8017780:	b21a      	sxth	r2, r3
 8017782:	79bb      	ldrb	r3, [r7, #6]
 8017784:	b21b      	sxth	r3, r3
 8017786:	4313      	orrs	r3, r2
 8017788:	b21b      	sxth	r3, r3
 801778a:	b29a      	uxth	r2, r3
 801778c:	4b7a      	ldr	r3, [pc, #488]	; (8017978 <read_status_registers+0x5fc>)
 801778e:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*IBUTTON_COMPLETE_3_REG, &status_reg_temp_h);
 8017790:	1dfb      	adds	r3, r7, #7
 8017792:	4619      	mov	r1, r3
 8017794:	f242 0030 	movw	r0, #8240	; 0x2030
 8017798:	f7fe f828 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &status_reg_temp_l);
 801779c:	1dbb      	adds	r3, r7, #6
 801779e:	4619      	mov	r1, r3
 80177a0:	f242 0031 	movw	r0, #8241	; 0x2031
 80177a4:	f7fe f822 	bl	80157ec <fm25v02_read>
	status_registers.ibutton_complite_3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80177a8:	79fb      	ldrb	r3, [r7, #7]
 80177aa:	021b      	lsls	r3, r3, #8
 80177ac:	b21a      	sxth	r2, r3
 80177ae:	79bb      	ldrb	r3, [r7, #6]
 80177b0:	b21b      	sxth	r3, r3
 80177b2:	4313      	orrs	r3, r2
 80177b4:	b21b      	sxth	r3, r3
 80177b6:	b29a      	uxth	r2, r3
 80177b8:	4b6f      	ldr	r3, [pc, #444]	; (8017978 <read_status_registers+0x5fc>)
 80177ba:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*IBUTTON_COMPLETE_4_REG, &status_reg_temp_h);
 80177bc:	1dfb      	adds	r3, r7, #7
 80177be:	4619      	mov	r1, r3
 80177c0:	f242 0032 	movw	r0, #8242	; 0x2032
 80177c4:	f7fe f812 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &status_reg_temp_l);
 80177c8:	1dbb      	adds	r3, r7, #6
 80177ca:	4619      	mov	r1, r3
 80177cc:	f242 0033 	movw	r0, #8243	; 0x2033
 80177d0:	f7fe f80c 	bl	80157ec <fm25v02_read>
	status_registers.ibutton_complite_4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80177d4:	79fb      	ldrb	r3, [r7, #7]
 80177d6:	021b      	lsls	r3, r3, #8
 80177d8:	b21a      	sxth	r2, r3
 80177da:	79bb      	ldrb	r3, [r7, #6]
 80177dc:	b21b      	sxth	r3, r3
 80177de:	4313      	orrs	r3, r2
 80177e0:	b21b      	sxth	r3, r3
 80177e2:	b29a      	uxth	r2, r3
 80177e4:	4b64      	ldr	r3, [pc, #400]	; (8017978 <read_status_registers+0x5fc>)
 80177e6:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*IBUTTON_COMPLETE_5_REG, &status_reg_temp_h);
 80177e8:	1dfb      	adds	r3, r7, #7
 80177ea:	4619      	mov	r1, r3
 80177ec:	f242 0034 	movw	r0, #8244	; 0x2034
 80177f0:	f7fd fffc 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &status_reg_temp_l);
 80177f4:	1dbb      	adds	r3, r7, #6
 80177f6:	4619      	mov	r1, r3
 80177f8:	f242 0035 	movw	r0, #8245	; 0x2035
 80177fc:	f7fd fff6 	bl	80157ec <fm25v02_read>
	status_registers.ibutton_complite_5_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017800:	79fb      	ldrb	r3, [r7, #7]
 8017802:	021b      	lsls	r3, r3, #8
 8017804:	b21a      	sxth	r2, r3
 8017806:	79bb      	ldrb	r3, [r7, #6]
 8017808:	b21b      	sxth	r3, r3
 801780a:	4313      	orrs	r3, r2
 801780c:	b21b      	sxth	r3, r3
 801780e:	b29a      	uxth	r2, r3
 8017810:	4b59      	ldr	r3, [pc, #356]	; (8017978 <read_status_registers+0x5fc>)
 8017812:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*IBUTTON_COMPLETE_6_REG, &status_reg_temp_h);
 8017814:	1dfb      	adds	r3, r7, #7
 8017816:	4619      	mov	r1, r3
 8017818:	f242 0036 	movw	r0, #8246	; 0x2036
 801781c:	f7fd ffe6 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &status_reg_temp_l);
 8017820:	1dbb      	adds	r3, r7, #6
 8017822:	4619      	mov	r1, r3
 8017824:	f242 0037 	movw	r0, #8247	; 0x2037
 8017828:	f7fd ffe0 	bl	80157ec <fm25v02_read>
	status_registers.ibutton_complite_6_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801782c:	79fb      	ldrb	r3, [r7, #7]
 801782e:	021b      	lsls	r3, r3, #8
 8017830:	b21a      	sxth	r2, r3
 8017832:	79bb      	ldrb	r3, [r7, #6]
 8017834:	b21b      	sxth	r3, r3
 8017836:	4313      	orrs	r3, r2
 8017838:	b21b      	sxth	r3, r3
 801783a:	b29a      	uxth	r2, r3
 801783c:	4b4e      	ldr	r3, [pc, #312]	; (8017978 <read_status_registers+0x5fc>)
 801783e:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*IBUTTON_COMPLETE_7_REG, &status_reg_temp_h);
 8017840:	1dfb      	adds	r3, r7, #7
 8017842:	4619      	mov	r1, r3
 8017844:	f242 0038 	movw	r0, #8248	; 0x2038
 8017848:	f7fd ffd0 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &status_reg_temp_l);
 801784c:	1dbb      	adds	r3, r7, #6
 801784e:	4619      	mov	r1, r3
 8017850:	f242 0039 	movw	r0, #8249	; 0x2039
 8017854:	f7fd ffca 	bl	80157ec <fm25v02_read>
	status_registers.ibutton_complite_7_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017858:	79fb      	ldrb	r3, [r7, #7]
 801785a:	021b      	lsls	r3, r3, #8
 801785c:	b21a      	sxth	r2, r3
 801785e:	79bb      	ldrb	r3, [r7, #6]
 8017860:	b21b      	sxth	r3, r3
 8017862:	4313      	orrs	r3, r2
 8017864:	b21b      	sxth	r3, r3
 8017866:	b29a      	uxth	r2, r3
 8017868:	4b43      	ldr	r3, [pc, #268]	; (8017978 <read_status_registers+0x5fc>)
 801786a:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*CE_303_ERROR_REG, &status_reg_temp_h);
 801786c:	1dfb      	adds	r3, r7, #7
 801786e:	4619      	mov	r1, r3
 8017870:	f242 003c 	movw	r0, #8252	; 0x203c
 8017874:	f7fd ffba 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_ERROR_REG+1, &status_reg_temp_l);
 8017878:	1dbb      	adds	r3, r7, #6
 801787a:	4619      	mov	r1, r3
 801787c:	f242 003d 	movw	r0, #8253	; 0x203d
 8017880:	f7fd ffb4 	bl	80157ec <fm25v02_read>
	status_registers.ce303_error_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017884:	79fb      	ldrb	r3, [r7, #7]
 8017886:	021b      	lsls	r3, r3, #8
 8017888:	b21a      	sxth	r2, r3
 801788a:	79bb      	ldrb	r3, [r7, #6]
 801788c:	b21b      	sxth	r3, r3
 801788e:	4313      	orrs	r3, r2
 8017890:	b21b      	sxth	r3, r3
 8017892:	b29a      	uxth	r2, r3
 8017894:	4b38      	ldr	r3, [pc, #224]	; (8017978 <read_status_registers+0x5fc>)
 8017896:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*CE_303_CURRENT_A_REG, &status_reg_temp_h);
 8017898:	1dfb      	adds	r3, r7, #7
 801789a:	4619      	mov	r1, r3
 801789c:	f242 003e 	movw	r0, #8254	; 0x203e
 80178a0:	f7fd ffa4 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_A_REG+1, &status_reg_temp_l);
 80178a4:	1dbb      	adds	r3, r7, #6
 80178a6:	4619      	mov	r1, r3
 80178a8:	f242 003f 	movw	r0, #8255	; 0x203f
 80178ac:	f7fd ff9e 	bl	80157ec <fm25v02_read>
	status_registers.ce303_current_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80178b0:	79fb      	ldrb	r3, [r7, #7]
 80178b2:	021b      	lsls	r3, r3, #8
 80178b4:	b21a      	sxth	r2, r3
 80178b6:	79bb      	ldrb	r3, [r7, #6]
 80178b8:	b21b      	sxth	r3, r3
 80178ba:	4313      	orrs	r3, r2
 80178bc:	b21b      	sxth	r3, r3
 80178be:	b29a      	uxth	r2, r3
 80178c0:	4b2d      	ldr	r3, [pc, #180]	; (8017978 <read_status_registers+0x5fc>)
 80178c2:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*CE_303_CURRENT_B_REG, &status_reg_temp_h);
 80178c4:	1dfb      	adds	r3, r7, #7
 80178c6:	4619      	mov	r1, r3
 80178c8:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 80178cc:	f7fd ff8e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_B_REG+1, &status_reg_temp_l);
 80178d0:	1dbb      	adds	r3, r7, #6
 80178d2:	4619      	mov	r1, r3
 80178d4:	f242 0041 	movw	r0, #8257	; 0x2041
 80178d8:	f7fd ff88 	bl	80157ec <fm25v02_read>
	status_registers.ce303_current_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80178dc:	79fb      	ldrb	r3, [r7, #7]
 80178de:	021b      	lsls	r3, r3, #8
 80178e0:	b21a      	sxth	r2, r3
 80178e2:	79bb      	ldrb	r3, [r7, #6]
 80178e4:	b21b      	sxth	r3, r3
 80178e6:	4313      	orrs	r3, r2
 80178e8:	b21b      	sxth	r3, r3
 80178ea:	b29a      	uxth	r2, r3
 80178ec:	4b22      	ldr	r3, [pc, #136]	; (8017978 <read_status_registers+0x5fc>)
 80178ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*CE_303_CURRENT_C_REG, &status_reg_temp_h);
 80178f2:	1dfb      	adds	r3, r7, #7
 80178f4:	4619      	mov	r1, r3
 80178f6:	f242 0042 	movw	r0, #8258	; 0x2042
 80178fa:	f7fd ff77 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_C_REG+1, &status_reg_temp_l);
 80178fe:	1dbb      	adds	r3, r7, #6
 8017900:	4619      	mov	r1, r3
 8017902:	f242 0043 	movw	r0, #8259	; 0x2043
 8017906:	f7fd ff71 	bl	80157ec <fm25v02_read>
	status_registers.ce303_current_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801790a:	79fb      	ldrb	r3, [r7, #7]
 801790c:	021b      	lsls	r3, r3, #8
 801790e:	b21a      	sxth	r2, r3
 8017910:	79bb      	ldrb	r3, [r7, #6]
 8017912:	b21b      	sxth	r3, r3
 8017914:	4313      	orrs	r3, r2
 8017916:	b21b      	sxth	r3, r3
 8017918:	b29a      	uxth	r2, r3
 801791a:	4b17      	ldr	r3, [pc, #92]	; (8017978 <read_status_registers+0x5fc>)
 801791c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*CE_303_CURRENT_MIL_A_REG, &status_reg_temp_h);
 8017920:	1dfb      	adds	r3, r7, #7
 8017922:	4619      	mov	r1, r3
 8017924:	f242 0044 	movw	r0, #8260	; 0x2044
 8017928:	f7fd ff60 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_A_REG+1, &status_reg_temp_l);
 801792c:	1dbb      	adds	r3, r7, #6
 801792e:	4619      	mov	r1, r3
 8017930:	f242 0045 	movw	r0, #8261	; 0x2045
 8017934:	f7fd ff5a 	bl	80157ec <fm25v02_read>
	status_registers.ce303_current_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017938:	79fb      	ldrb	r3, [r7, #7]
 801793a:	021b      	lsls	r3, r3, #8
 801793c:	b21a      	sxth	r2, r3
 801793e:	79bb      	ldrb	r3, [r7, #6]
 8017940:	b21b      	sxth	r3, r3
 8017942:	4313      	orrs	r3, r2
 8017944:	b21b      	sxth	r3, r3
 8017946:	b29a      	uxth	r2, r3
 8017948:	4b0b      	ldr	r3, [pc, #44]	; (8017978 <read_status_registers+0x5fc>)
 801794a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*CE_303_CURRENT_MIL_B_REG, &status_reg_temp_h);
 801794e:	1dfb      	adds	r3, r7, #7
 8017950:	4619      	mov	r1, r3
 8017952:	f242 0046 	movw	r0, #8262	; 0x2046
 8017956:	f7fd ff49 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_B_REG+1, &status_reg_temp_l);
 801795a:	1dbb      	adds	r3, r7, #6
 801795c:	4619      	mov	r1, r3
 801795e:	f242 0047 	movw	r0, #8263	; 0x2047
 8017962:	f7fd ff43 	bl	80157ec <fm25v02_read>
	status_registers.ce303_current_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017966:	79fb      	ldrb	r3, [r7, #7]
 8017968:	021b      	lsls	r3, r3, #8
 801796a:	b21a      	sxth	r2, r3
 801796c:	79bb      	ldrb	r3, [r7, #6]
 801796e:	b21b      	sxth	r3, r3
 8017970:	4313      	orrs	r3, r2
 8017972:	b21b      	sxth	r3, r3
 8017974:	e002      	b.n	801797c <read_status_registers+0x600>
 8017976:	bf00      	nop
 8017978:	2000a10c 	.word	0x2000a10c
 801797c:	b29a      	uxth	r2, r3
 801797e:	4bc3      	ldr	r3, [pc, #780]	; (8017c8c <read_status_registers+0x910>)
 8017980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*CE_303_CURRENT_MIL_C_REG, &status_reg_temp_h);
 8017984:	1dfb      	adds	r3, r7, #7
 8017986:	4619      	mov	r1, r3
 8017988:	f242 0048 	movw	r0, #8264	; 0x2048
 801798c:	f7fd ff2e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_C_REG+1, &status_reg_temp_l);
 8017990:	1dbb      	adds	r3, r7, #6
 8017992:	4619      	mov	r1, r3
 8017994:	f242 0049 	movw	r0, #8265	; 0x2049
 8017998:	f7fd ff28 	bl	80157ec <fm25v02_read>
	status_registers.ce303_current_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801799c:	79fb      	ldrb	r3, [r7, #7]
 801799e:	021b      	lsls	r3, r3, #8
 80179a0:	b21a      	sxth	r2, r3
 80179a2:	79bb      	ldrb	r3, [r7, #6]
 80179a4:	b21b      	sxth	r3, r3
 80179a6:	4313      	orrs	r3, r2
 80179a8:	b21b      	sxth	r3, r3
 80179aa:	b29a      	uxth	r2, r3
 80179ac:	4bb7      	ldr	r3, [pc, #732]	; (8017c8c <read_status_registers+0x910>)
 80179ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*CE_303_VOLT_A_REG, &status_reg_temp_h);
 80179b2:	1dfb      	adds	r3, r7, #7
 80179b4:	4619      	mov	r1, r3
 80179b6:	f242 004a 	movw	r0, #8266	; 0x204a
 80179ba:	f7fd ff17 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_A_REG+1, &status_reg_temp_l);
 80179be:	1dbb      	adds	r3, r7, #6
 80179c0:	4619      	mov	r1, r3
 80179c2:	f242 004b 	movw	r0, #8267	; 0x204b
 80179c6:	f7fd ff11 	bl	80157ec <fm25v02_read>
	status_registers.ce303_volt_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80179ca:	79fb      	ldrb	r3, [r7, #7]
 80179cc:	021b      	lsls	r3, r3, #8
 80179ce:	b21a      	sxth	r2, r3
 80179d0:	79bb      	ldrb	r3, [r7, #6]
 80179d2:	b21b      	sxth	r3, r3
 80179d4:	4313      	orrs	r3, r2
 80179d6:	b21b      	sxth	r3, r3
 80179d8:	b29a      	uxth	r2, r3
 80179da:	4bac      	ldr	r3, [pc, #688]	; (8017c8c <read_status_registers+0x910>)
 80179dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*CE_303_VOLT_B_REG, &status_reg_temp_h);
 80179e0:	1dfb      	adds	r3, r7, #7
 80179e2:	4619      	mov	r1, r3
 80179e4:	f242 004c 	movw	r0, #8268	; 0x204c
 80179e8:	f7fd ff00 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_B_REG+1, &status_reg_temp_l);
 80179ec:	1dbb      	adds	r3, r7, #6
 80179ee:	4619      	mov	r1, r3
 80179f0:	f242 004d 	movw	r0, #8269	; 0x204d
 80179f4:	f7fd fefa 	bl	80157ec <fm25v02_read>
	status_registers.ce303_volt_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80179f8:	79fb      	ldrb	r3, [r7, #7]
 80179fa:	021b      	lsls	r3, r3, #8
 80179fc:	b21a      	sxth	r2, r3
 80179fe:	79bb      	ldrb	r3, [r7, #6]
 8017a00:	b21b      	sxth	r3, r3
 8017a02:	4313      	orrs	r3, r2
 8017a04:	b21b      	sxth	r3, r3
 8017a06:	b29a      	uxth	r2, r3
 8017a08:	4ba0      	ldr	r3, [pc, #640]	; (8017c8c <read_status_registers+0x910>)
 8017a0a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	fm25v02_read(2*CE_303_VOLT_C_REG, &status_reg_temp_h);
 8017a0e:	1dfb      	adds	r3, r7, #7
 8017a10:	4619      	mov	r1, r3
 8017a12:	f242 004e 	movw	r0, #8270	; 0x204e
 8017a16:	f7fd fee9 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_C_REG+1, &status_reg_temp_l);
 8017a1a:	1dbb      	adds	r3, r7, #6
 8017a1c:	4619      	mov	r1, r3
 8017a1e:	f242 004f 	movw	r0, #8271	; 0x204f
 8017a22:	f7fd fee3 	bl	80157ec <fm25v02_read>
	status_registers.ce303_volt_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017a26:	79fb      	ldrb	r3, [r7, #7]
 8017a28:	021b      	lsls	r3, r3, #8
 8017a2a:	b21a      	sxth	r2, r3
 8017a2c:	79bb      	ldrb	r3, [r7, #6]
 8017a2e:	b21b      	sxth	r3, r3
 8017a30:	4313      	orrs	r3, r2
 8017a32:	b21b      	sxth	r3, r3
 8017a34:	b29a      	uxth	r2, r3
 8017a36:	4b95      	ldr	r3, [pc, #596]	; (8017c8c <read_status_registers+0x910>)
 8017a38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	fm25v02_read(2*CE_303_VOLT_MIL_A_REG, &status_reg_temp_h);
 8017a3c:	1dfb      	adds	r3, r7, #7
 8017a3e:	4619      	mov	r1, r3
 8017a40:	f242 0050 	movw	r0, #8272	; 0x2050
 8017a44:	f7fd fed2 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_A_REG+1, &status_reg_temp_l);
 8017a48:	1dbb      	adds	r3, r7, #6
 8017a4a:	4619      	mov	r1, r3
 8017a4c:	f242 0051 	movw	r0, #8273	; 0x2051
 8017a50:	f7fd fecc 	bl	80157ec <fm25v02_read>
	status_registers.ce303_volt_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017a54:	79fb      	ldrb	r3, [r7, #7]
 8017a56:	021b      	lsls	r3, r3, #8
 8017a58:	b21a      	sxth	r2, r3
 8017a5a:	79bb      	ldrb	r3, [r7, #6]
 8017a5c:	b21b      	sxth	r3, r3
 8017a5e:	4313      	orrs	r3, r2
 8017a60:	b21b      	sxth	r3, r3
 8017a62:	b29a      	uxth	r2, r3
 8017a64:	4b89      	ldr	r3, [pc, #548]	; (8017c8c <read_status_registers+0x910>)
 8017a66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	fm25v02_read(2*CE_303_VOLT_MIL_B_REG, &status_reg_temp_h);
 8017a6a:	1dfb      	adds	r3, r7, #7
 8017a6c:	4619      	mov	r1, r3
 8017a6e:	f242 0052 	movw	r0, #8274	; 0x2052
 8017a72:	f7fd febb 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_B_REG+1, &status_reg_temp_l);
 8017a76:	1dbb      	adds	r3, r7, #6
 8017a78:	4619      	mov	r1, r3
 8017a7a:	f242 0053 	movw	r0, #8275	; 0x2053
 8017a7e:	f7fd feb5 	bl	80157ec <fm25v02_read>
	status_registers.ce303_volt_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017a82:	79fb      	ldrb	r3, [r7, #7]
 8017a84:	021b      	lsls	r3, r3, #8
 8017a86:	b21a      	sxth	r2, r3
 8017a88:	79bb      	ldrb	r3, [r7, #6]
 8017a8a:	b21b      	sxth	r3, r3
 8017a8c:	4313      	orrs	r3, r2
 8017a8e:	b21b      	sxth	r3, r3
 8017a90:	b29a      	uxth	r2, r3
 8017a92:	4b7e      	ldr	r3, [pc, #504]	; (8017c8c <read_status_registers+0x910>)
 8017a94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	fm25v02_read(2*CE_303_VOLT_MIL_C_REG, &status_reg_temp_h);
 8017a98:	1dfb      	adds	r3, r7, #7
 8017a9a:	4619      	mov	r1, r3
 8017a9c:	f242 0054 	movw	r0, #8276	; 0x2054
 8017aa0:	f7fd fea4 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_C_REG+1, &status_reg_temp_l);
 8017aa4:	1dbb      	adds	r3, r7, #6
 8017aa6:	4619      	mov	r1, r3
 8017aa8:	f242 0055 	movw	r0, #8277	; 0x2055
 8017aac:	f7fd fe9e 	bl	80157ec <fm25v02_read>
	status_registers.ce303_volt_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017ab0:	79fb      	ldrb	r3, [r7, #7]
 8017ab2:	021b      	lsls	r3, r3, #8
 8017ab4:	b21a      	sxth	r2, r3
 8017ab6:	79bb      	ldrb	r3, [r7, #6]
 8017ab8:	b21b      	sxth	r3, r3
 8017aba:	4313      	orrs	r3, r2
 8017abc:	b21b      	sxth	r3, r3
 8017abe:	b29a      	uxth	r2, r3
 8017ac0:	4b72      	ldr	r3, [pc, #456]	; (8017c8c <read_status_registers+0x910>)
 8017ac2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	fm25v02_read(2*CE_303_POWER_A_REG, &status_reg_temp_h);
 8017ac6:	1dfb      	adds	r3, r7, #7
 8017ac8:	4619      	mov	r1, r3
 8017aca:	f242 0056 	movw	r0, #8278	; 0x2056
 8017ace:	f7fd fe8d 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_A_REG+1, &status_reg_temp_l);
 8017ad2:	1dbb      	adds	r3, r7, #6
 8017ad4:	4619      	mov	r1, r3
 8017ad6:	f242 0057 	movw	r0, #8279	; 0x2057
 8017ada:	f7fd fe87 	bl	80157ec <fm25v02_read>
	status_registers.ce303_power_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017ade:	79fb      	ldrb	r3, [r7, #7]
 8017ae0:	021b      	lsls	r3, r3, #8
 8017ae2:	b21a      	sxth	r2, r3
 8017ae4:	79bb      	ldrb	r3, [r7, #6]
 8017ae6:	b21b      	sxth	r3, r3
 8017ae8:	4313      	orrs	r3, r2
 8017aea:	b21b      	sxth	r3, r3
 8017aec:	b29a      	uxth	r2, r3
 8017aee:	4b67      	ldr	r3, [pc, #412]	; (8017c8c <read_status_registers+0x910>)
 8017af0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	fm25v02_read(2*CE_303_POWER_B_REG, &status_reg_temp_h);
 8017af4:	1dfb      	adds	r3, r7, #7
 8017af6:	4619      	mov	r1, r3
 8017af8:	f242 0058 	movw	r0, #8280	; 0x2058
 8017afc:	f7fd fe76 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_B_REG+1, &status_reg_temp_l);
 8017b00:	1dbb      	adds	r3, r7, #6
 8017b02:	4619      	mov	r1, r3
 8017b04:	f242 0059 	movw	r0, #8281	; 0x2059
 8017b08:	f7fd fe70 	bl	80157ec <fm25v02_read>
	status_registers.ce303_power_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017b0c:	79fb      	ldrb	r3, [r7, #7]
 8017b0e:	021b      	lsls	r3, r3, #8
 8017b10:	b21a      	sxth	r2, r3
 8017b12:	79bb      	ldrb	r3, [r7, #6]
 8017b14:	b21b      	sxth	r3, r3
 8017b16:	4313      	orrs	r3, r2
 8017b18:	b21b      	sxth	r3, r3
 8017b1a:	b29a      	uxth	r2, r3
 8017b1c:	4b5b      	ldr	r3, [pc, #364]	; (8017c8c <read_status_registers+0x910>)
 8017b1e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	fm25v02_read(2*CE_303_POWER_C_REG, &status_reg_temp_h);
 8017b22:	1dfb      	adds	r3, r7, #7
 8017b24:	4619      	mov	r1, r3
 8017b26:	f242 005a 	movw	r0, #8282	; 0x205a
 8017b2a:	f7fd fe5f 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_C_REG+1, &status_reg_temp_l);
 8017b2e:	1dbb      	adds	r3, r7, #6
 8017b30:	4619      	mov	r1, r3
 8017b32:	f242 005b 	movw	r0, #8283	; 0x205b
 8017b36:	f7fd fe59 	bl	80157ec <fm25v02_read>
	status_registers.ce303_power_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017b3a:	79fb      	ldrb	r3, [r7, #7]
 8017b3c:	021b      	lsls	r3, r3, #8
 8017b3e:	b21a      	sxth	r2, r3
 8017b40:	79bb      	ldrb	r3, [r7, #6]
 8017b42:	b21b      	sxth	r3, r3
 8017b44:	4313      	orrs	r3, r2
 8017b46:	b21b      	sxth	r3, r3
 8017b48:	b29a      	uxth	r2, r3
 8017b4a:	4b50      	ldr	r3, [pc, #320]	; (8017c8c <read_status_registers+0x910>)
 8017b4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	fm25v02_read(2*CE_303_POWER_MIL_A_REG, &status_reg_temp_h);
 8017b50:	1dfb      	adds	r3, r7, #7
 8017b52:	4619      	mov	r1, r3
 8017b54:	f242 005c 	movw	r0, #8284	; 0x205c
 8017b58:	f7fd fe48 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_A_REG+1, &status_reg_temp_l);
 8017b5c:	1dbb      	adds	r3, r7, #6
 8017b5e:	4619      	mov	r1, r3
 8017b60:	f242 005d 	movw	r0, #8285	; 0x205d
 8017b64:	f7fd fe42 	bl	80157ec <fm25v02_read>
	status_registers.ce303_power_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017b68:	79fb      	ldrb	r3, [r7, #7]
 8017b6a:	021b      	lsls	r3, r3, #8
 8017b6c:	b21a      	sxth	r2, r3
 8017b6e:	79bb      	ldrb	r3, [r7, #6]
 8017b70:	b21b      	sxth	r3, r3
 8017b72:	4313      	orrs	r3, r2
 8017b74:	b21b      	sxth	r3, r3
 8017b76:	b29a      	uxth	r2, r3
 8017b78:	4b44      	ldr	r3, [pc, #272]	; (8017c8c <read_status_registers+0x910>)
 8017b7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	fm25v02_read(2*CE_303_POWER_MIL_B_REG, &status_reg_temp_h);
 8017b7e:	1dfb      	adds	r3, r7, #7
 8017b80:	4619      	mov	r1, r3
 8017b82:	f242 005e 	movw	r0, #8286	; 0x205e
 8017b86:	f7fd fe31 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_B_REG+1, &status_reg_temp_l);
 8017b8a:	1dbb      	adds	r3, r7, #6
 8017b8c:	4619      	mov	r1, r3
 8017b8e:	f242 005f 	movw	r0, #8287	; 0x205f
 8017b92:	f7fd fe2b 	bl	80157ec <fm25v02_read>
	status_registers.ce303_power_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017b96:	79fb      	ldrb	r3, [r7, #7]
 8017b98:	021b      	lsls	r3, r3, #8
 8017b9a:	b21a      	sxth	r2, r3
 8017b9c:	79bb      	ldrb	r3, [r7, #6]
 8017b9e:	b21b      	sxth	r3, r3
 8017ba0:	4313      	orrs	r3, r2
 8017ba2:	b21b      	sxth	r3, r3
 8017ba4:	b29a      	uxth	r2, r3
 8017ba6:	4b39      	ldr	r3, [pc, #228]	; (8017c8c <read_status_registers+0x910>)
 8017ba8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	fm25v02_read(2*CE_303_POWER_MIL_C_REG, &status_reg_temp_h);
 8017bac:	1dfb      	adds	r3, r7, #7
 8017bae:	4619      	mov	r1, r3
 8017bb0:	f242 0060 	movw	r0, #8288	; 0x2060
 8017bb4:	f7fd fe1a 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_C_REG+1, &status_reg_temp_l);
 8017bb8:	1dbb      	adds	r3, r7, #6
 8017bba:	4619      	mov	r1, r3
 8017bbc:	f242 0061 	movw	r0, #8289	; 0x2061
 8017bc0:	f7fd fe14 	bl	80157ec <fm25v02_read>
	status_registers.ce303_power_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017bc4:	79fb      	ldrb	r3, [r7, #7]
 8017bc6:	021b      	lsls	r3, r3, #8
 8017bc8:	b21a      	sxth	r2, r3
 8017bca:	79bb      	ldrb	r3, [r7, #6]
 8017bcc:	b21b      	sxth	r3, r3
 8017bce:	4313      	orrs	r3, r2
 8017bd0:	b21b      	sxth	r3, r3
 8017bd2:	b29a      	uxth	r2, r3
 8017bd4:	4b2d      	ldr	r3, [pc, #180]	; (8017c8c <read_status_registers+0x910>)
 8017bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	fm25v02_read(2*LIGHTING_STATUS_REG, &status_reg_temp_h);
 8017bda:	1dfb      	adds	r3, r7, #7
 8017bdc:	4619      	mov	r1, r3
 8017bde:	f242 0062 	movw	r0, #8290	; 0x2062
 8017be2:	f7fd fe03 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*LIGHTING_STATUS_REG+1, &status_reg_temp_l);
 8017be6:	1dbb      	adds	r3, r7, #6
 8017be8:	4619      	mov	r1, r3
 8017bea:	f242 0063 	movw	r0, #8291	; 0x2063
 8017bee:	f7fd fdfd 	bl	80157ec <fm25v02_read>
	status_registers.lighting_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017bf2:	79fb      	ldrb	r3, [r7, #7]
 8017bf4:	021b      	lsls	r3, r3, #8
 8017bf6:	b21a      	sxth	r2, r3
 8017bf8:	79bb      	ldrb	r3, [r7, #6]
 8017bfa:	b21b      	sxth	r3, r3
 8017bfc:	4313      	orrs	r3, r2
 8017bfe:	b21b      	sxth	r3, r3
 8017c00:	b29a      	uxth	r2, r3
 8017c02:	4b22      	ldr	r3, [pc, #136]	; (8017c8c <read_status_registers+0x910>)
 8017c04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	fm25v02_read(2*LIGHTING_ALARM_REG, &status_reg_temp_h);
 8017c08:	1dfb      	adds	r3, r7, #7
 8017c0a:	4619      	mov	r1, r3
 8017c0c:	f242 0064 	movw	r0, #8292	; 0x2064
 8017c10:	f7fd fdec 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*LIGHTING_ALARM_REG+1, &status_reg_temp_l);
 8017c14:	1dbb      	adds	r3, r7, #6
 8017c16:	4619      	mov	r1, r3
 8017c18:	f242 0065 	movw	r0, #8293	; 0x2065
 8017c1c:	f7fd fde6 	bl	80157ec <fm25v02_read>
	status_registers.lighting_alarm_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017c20:	79fb      	ldrb	r3, [r7, #7]
 8017c22:	021b      	lsls	r3, r3, #8
 8017c24:	b21a      	sxth	r2, r3
 8017c26:	79bb      	ldrb	r3, [r7, #6]
 8017c28:	b21b      	sxth	r3, r3
 8017c2a:	4313      	orrs	r3, r2
 8017c2c:	b21b      	sxth	r3, r3
 8017c2e:	b29a      	uxth	r2, r3
 8017c30:	4b16      	ldr	r3, [pc, #88]	; (8017c8c <read_status_registers+0x910>)
 8017c32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	fm25v02_read(2*MONTH_LIGHTING_OFF_REG, &status_reg_temp_h);
 8017c36:	1dfb      	adds	r3, r7, #7
 8017c38:	4619      	mov	r1, r3
 8017c3a:	f242 0066 	movw	r0, #8294	; 0x2066
 8017c3e:	f7fd fdd5 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MONTH_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8017c42:	1dbb      	adds	r3, r7, #6
 8017c44:	4619      	mov	r1, r3
 8017c46:	f242 0067 	movw	r0, #8295	; 0x2067
 8017c4a:	f7fd fdcf 	bl	80157ec <fm25v02_read>
	status_registers.month_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017c4e:	79fb      	ldrb	r3, [r7, #7]
 8017c50:	021b      	lsls	r3, r3, #8
 8017c52:	b21a      	sxth	r2, r3
 8017c54:	79bb      	ldrb	r3, [r7, #6]
 8017c56:	b21b      	sxth	r3, r3
 8017c58:	4313      	orrs	r3, r2
 8017c5a:	b21b      	sxth	r3, r3
 8017c5c:	b29a      	uxth	r2, r3
 8017c5e:	4b0b      	ldr	r3, [pc, #44]	; (8017c8c <read_status_registers+0x910>)
 8017c60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	fm25v02_read(2*DAY_LIGHTING_OFF_REG, &status_reg_temp_h);
 8017c64:	1dfb      	adds	r3, r7, #7
 8017c66:	4619      	mov	r1, r3
 8017c68:	f242 0068 	movw	r0, #8296	; 0x2068
 8017c6c:	f7fd fdbe 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*DAY_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8017c70:	1dbb      	adds	r3, r7, #6
 8017c72:	4619      	mov	r1, r3
 8017c74:	f242 0069 	movw	r0, #8297	; 0x2069
 8017c78:	f7fd fdb8 	bl	80157ec <fm25v02_read>
	status_registers.day_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017c7c:	79fb      	ldrb	r3, [r7, #7]
 8017c7e:	021b      	lsls	r3, r3, #8
 8017c80:	b21a      	sxth	r2, r3
 8017c82:	79bb      	ldrb	r3, [r7, #6]
 8017c84:	b21b      	sxth	r3, r3
 8017c86:	4313      	orrs	r3, r2
 8017c88:	b21b      	sxth	r3, r3
 8017c8a:	e001      	b.n	8017c90 <read_status_registers+0x914>
 8017c8c:	2000a10c 	.word	0x2000a10c
 8017c90:	b29a      	uxth	r2, r3
 8017c92:	4bc3      	ldr	r3, [pc, #780]	; (8017fa0 <read_status_registers+0xc24>)
 8017c94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	fm25v02_read(2*HOUR_LIGHTING_OFF_REG, &status_reg_temp_h);
 8017c98:	1dfb      	adds	r3, r7, #7
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	f242 006a 	movw	r0, #8298	; 0x206a
 8017ca0:	f7fd fda4 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*HOUR_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8017ca4:	1dbb      	adds	r3, r7, #6
 8017ca6:	4619      	mov	r1, r3
 8017ca8:	f242 006b 	movw	r0, #8299	; 0x206b
 8017cac:	f7fd fd9e 	bl	80157ec <fm25v02_read>
	status_registers.hour_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017cb0:	79fb      	ldrb	r3, [r7, #7]
 8017cb2:	021b      	lsls	r3, r3, #8
 8017cb4:	b21a      	sxth	r2, r3
 8017cb6:	79bb      	ldrb	r3, [r7, #6]
 8017cb8:	b21b      	sxth	r3, r3
 8017cba:	4313      	orrs	r3, r2
 8017cbc:	b21b      	sxth	r3, r3
 8017cbe:	b29a      	uxth	r2, r3
 8017cc0:	4bb7      	ldr	r3, [pc, #732]	; (8017fa0 <read_status_registers+0xc24>)
 8017cc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	fm25v02_read(2*MINUTE_LIGHTING_OFF_REG, &status_reg_temp_h);
 8017cc6:	1dfb      	adds	r3, r7, #7
 8017cc8:	4619      	mov	r1, r3
 8017cca:	f242 006c 	movw	r0, #8300	; 0x206c
 8017cce:	f7fd fd8d 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MINUTE_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8017cd2:	1dbb      	adds	r3, r7, #6
 8017cd4:	4619      	mov	r1, r3
 8017cd6:	f242 006d 	movw	r0, #8301	; 0x206d
 8017cda:	f7fd fd87 	bl	80157ec <fm25v02_read>
	status_registers.minute_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017cde:	79fb      	ldrb	r3, [r7, #7]
 8017ce0:	021b      	lsls	r3, r3, #8
 8017ce2:	b21a      	sxth	r2, r3
 8017ce4:	79bb      	ldrb	r3, [r7, #6]
 8017ce6:	b21b      	sxth	r3, r3
 8017ce8:	4313      	orrs	r3, r2
 8017cea:	b21b      	sxth	r3, r3
 8017cec:	b29a      	uxth	r2, r3
 8017cee:	4bac      	ldr	r3, [pc, #688]	; (8017fa0 <read_status_registers+0xc24>)
 8017cf0:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	fm25v02_read(2*MONTH_LIGHTING_ON_REG, &status_reg_temp_h);
 8017cf4:	1dfb      	adds	r3, r7, #7
 8017cf6:	4619      	mov	r1, r3
 8017cf8:	f242 006e 	movw	r0, #8302	; 0x206e
 8017cfc:	f7fd fd76 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MONTH_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8017d00:	1dbb      	adds	r3, r7, #6
 8017d02:	4619      	mov	r1, r3
 8017d04:	f242 006f 	movw	r0, #8303	; 0x206f
 8017d08:	f7fd fd70 	bl	80157ec <fm25v02_read>
	status_registers.month_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017d0c:	79fb      	ldrb	r3, [r7, #7]
 8017d0e:	021b      	lsls	r3, r3, #8
 8017d10:	b21a      	sxth	r2, r3
 8017d12:	79bb      	ldrb	r3, [r7, #6]
 8017d14:	b21b      	sxth	r3, r3
 8017d16:	4313      	orrs	r3, r2
 8017d18:	b21b      	sxth	r3, r3
 8017d1a:	b29a      	uxth	r2, r3
 8017d1c:	4ba0      	ldr	r3, [pc, #640]	; (8017fa0 <read_status_registers+0xc24>)
 8017d1e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	fm25v02_read(2*DAY_LIGHTING_ON_REG, &status_reg_temp_h);
 8017d22:	1dfb      	adds	r3, r7, #7
 8017d24:	4619      	mov	r1, r3
 8017d26:	f242 0070 	movw	r0, #8304	; 0x2070
 8017d2a:	f7fd fd5f 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*DAY_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8017d2e:	1dbb      	adds	r3, r7, #6
 8017d30:	4619      	mov	r1, r3
 8017d32:	f242 0071 	movw	r0, #8305	; 0x2071
 8017d36:	f7fd fd59 	bl	80157ec <fm25v02_read>
	status_registers.day_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017d3a:	79fb      	ldrb	r3, [r7, #7]
 8017d3c:	021b      	lsls	r3, r3, #8
 8017d3e:	b21a      	sxth	r2, r3
 8017d40:	79bb      	ldrb	r3, [r7, #6]
 8017d42:	b21b      	sxth	r3, r3
 8017d44:	4313      	orrs	r3, r2
 8017d46:	b21b      	sxth	r3, r3
 8017d48:	b29a      	uxth	r2, r3
 8017d4a:	4b95      	ldr	r3, [pc, #596]	; (8017fa0 <read_status_registers+0xc24>)
 8017d4c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	fm25v02_read(2*HOUR_LIGHTING_ON_REG, &status_reg_temp_h);
 8017d50:	1dfb      	adds	r3, r7, #7
 8017d52:	4619      	mov	r1, r3
 8017d54:	f242 0072 	movw	r0, #8306	; 0x2072
 8017d58:	f7fd fd48 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*HOUR_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8017d5c:	1dbb      	adds	r3, r7, #6
 8017d5e:	4619      	mov	r1, r3
 8017d60:	f242 0073 	movw	r0, #8307	; 0x2073
 8017d64:	f7fd fd42 	bl	80157ec <fm25v02_read>
	status_registers.hour_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017d68:	79fb      	ldrb	r3, [r7, #7]
 8017d6a:	021b      	lsls	r3, r3, #8
 8017d6c:	b21a      	sxth	r2, r3
 8017d6e:	79bb      	ldrb	r3, [r7, #6]
 8017d70:	b21b      	sxth	r3, r3
 8017d72:	4313      	orrs	r3, r2
 8017d74:	b21b      	sxth	r3, r3
 8017d76:	b29a      	uxth	r2, r3
 8017d78:	4b89      	ldr	r3, [pc, #548]	; (8017fa0 <read_status_registers+0xc24>)
 8017d7a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

	fm25v02_read(2*MINUTE_LIGHTING_ON_REG, &status_reg_temp_h);
 8017d7e:	1dfb      	adds	r3, r7, #7
 8017d80:	4619      	mov	r1, r3
 8017d82:	f242 0074 	movw	r0, #8308	; 0x2074
 8017d86:	f7fd fd31 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MINUTE_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8017d8a:	1dbb      	adds	r3, r7, #6
 8017d8c:	4619      	mov	r1, r3
 8017d8e:	f242 0075 	movw	r0, #8309	; 0x2075
 8017d92:	f7fd fd2b 	bl	80157ec <fm25v02_read>
	status_registers.minute_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017d96:	79fb      	ldrb	r3, [r7, #7]
 8017d98:	021b      	lsls	r3, r3, #8
 8017d9a:	b21a      	sxth	r2, r3
 8017d9c:	79bb      	ldrb	r3, [r7, #6]
 8017d9e:	b21b      	sxth	r3, r3
 8017da0:	4313      	orrs	r3, r2
 8017da2:	b21b      	sxth	r3, r3
 8017da4:	b29a      	uxth	r2, r3
 8017da6:	4b7e      	ldr	r3, [pc, #504]	; (8017fa0 <read_status_registers+0xc24>)
 8017da8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	fm25v02_read(2*CURRENT_PHASE_A_REG, &status_reg_temp_h);
 8017dac:	1dfb      	adds	r3, r7, #7
 8017dae:	4619      	mov	r1, r3
 8017db0:	f242 0076 	movw	r0, #8310	; 0x2076
 8017db4:	f7fd fd1a 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_A_REG+1, &status_reg_temp_l);
 8017db8:	1dbb      	adds	r3, r7, #6
 8017dba:	4619      	mov	r1, r3
 8017dbc:	f242 0077 	movw	r0, #8311	; 0x2077
 8017dc0:	f7fd fd14 	bl	80157ec <fm25v02_read>
	status_registers.current_phase_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017dc4:	79fb      	ldrb	r3, [r7, #7]
 8017dc6:	021b      	lsls	r3, r3, #8
 8017dc8:	b21a      	sxth	r2, r3
 8017dca:	79bb      	ldrb	r3, [r7, #6]
 8017dcc:	b21b      	sxth	r3, r3
 8017dce:	4313      	orrs	r3, r2
 8017dd0:	b21b      	sxth	r3, r3
 8017dd2:	b29a      	uxth	r2, r3
 8017dd4:	4b72      	ldr	r3, [pc, #456]	; (8017fa0 <read_status_registers+0xc24>)
 8017dd6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	fm25v02_read(2*CURRENT_PHASE_B_REG, &status_reg_temp_h);
 8017dda:	1dfb      	adds	r3, r7, #7
 8017ddc:	4619      	mov	r1, r3
 8017dde:	f242 0078 	movw	r0, #8312	; 0x2078
 8017de2:	f7fd fd03 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_B_REG+1, &status_reg_temp_l);
 8017de6:	1dbb      	adds	r3, r7, #6
 8017de8:	4619      	mov	r1, r3
 8017dea:	f242 0079 	movw	r0, #8313	; 0x2079
 8017dee:	f7fd fcfd 	bl	80157ec <fm25v02_read>
	status_registers.current_phase_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017df2:	79fb      	ldrb	r3, [r7, #7]
 8017df4:	021b      	lsls	r3, r3, #8
 8017df6:	b21a      	sxth	r2, r3
 8017df8:	79bb      	ldrb	r3, [r7, #6]
 8017dfa:	b21b      	sxth	r3, r3
 8017dfc:	4313      	orrs	r3, r2
 8017dfe:	b21b      	sxth	r3, r3
 8017e00:	b29a      	uxth	r2, r3
 8017e02:	4b67      	ldr	r3, [pc, #412]	; (8017fa0 <read_status_registers+0xc24>)
 8017e04:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

	fm25v02_read(2*CURRENT_PHASE_C_REG, &status_reg_temp_h);
 8017e08:	1dfb      	adds	r3, r7, #7
 8017e0a:	4619      	mov	r1, r3
 8017e0c:	f242 007a 	movw	r0, #8314	; 0x207a
 8017e10:	f7fd fcec 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_C_REG+1, &status_reg_temp_l);
 8017e14:	1dbb      	adds	r3, r7, #6
 8017e16:	4619      	mov	r1, r3
 8017e18:	f242 007b 	movw	r0, #8315	; 0x207b
 8017e1c:	f7fd fce6 	bl	80157ec <fm25v02_read>
	status_registers.current_phase_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017e20:	79fb      	ldrb	r3, [r7, #7]
 8017e22:	021b      	lsls	r3, r3, #8
 8017e24:	b21a      	sxth	r2, r3
 8017e26:	79bb      	ldrb	r3, [r7, #6]
 8017e28:	b21b      	sxth	r3, r3
 8017e2a:	4313      	orrs	r3, r2
 8017e2c:	b21b      	sxth	r3, r3
 8017e2e:	b29a      	uxth	r2, r3
 8017e30:	4b5b      	ldr	r3, [pc, #364]	; (8017fa0 <read_status_registers+0xc24>)
 8017e32:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

	fm25v02_read(2*CURRENT_VOLTAGE_A_REG, &status_reg_temp_h);
 8017e36:	1dfb      	adds	r3, r7, #7
 8017e38:	4619      	mov	r1, r3
 8017e3a:	f242 007c 	movw	r0, #8316	; 0x207c
 8017e3e:	f7fd fcd5 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_A_REG+1, &status_reg_temp_l);
 8017e42:	1dbb      	adds	r3, r7, #6
 8017e44:	4619      	mov	r1, r3
 8017e46:	f242 007d 	movw	r0, #8317	; 0x207d
 8017e4a:	f7fd fccf 	bl	80157ec <fm25v02_read>
	status_registers.current_voltage_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017e4e:	79fb      	ldrb	r3, [r7, #7]
 8017e50:	021b      	lsls	r3, r3, #8
 8017e52:	b21a      	sxth	r2, r3
 8017e54:	79bb      	ldrb	r3, [r7, #6]
 8017e56:	b21b      	sxth	r3, r3
 8017e58:	4313      	orrs	r3, r2
 8017e5a:	b21b      	sxth	r3, r3
 8017e5c:	b29a      	uxth	r2, r3
 8017e5e:	4b50      	ldr	r3, [pc, #320]	; (8017fa0 <read_status_registers+0xc24>)
 8017e60:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

	fm25v02_read(2*CURRENT_VOLTAGE_B_REG, &status_reg_temp_h);
 8017e64:	1dfb      	adds	r3, r7, #7
 8017e66:	4619      	mov	r1, r3
 8017e68:	f242 007e 	movw	r0, #8318	; 0x207e
 8017e6c:	f7fd fcbe 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_B_REG+1, &status_reg_temp_l);
 8017e70:	1dbb      	adds	r3, r7, #6
 8017e72:	4619      	mov	r1, r3
 8017e74:	f242 007f 	movw	r0, #8319	; 0x207f
 8017e78:	f7fd fcb8 	bl	80157ec <fm25v02_read>
	status_registers.current_voltage_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017e7c:	79fb      	ldrb	r3, [r7, #7]
 8017e7e:	021b      	lsls	r3, r3, #8
 8017e80:	b21a      	sxth	r2, r3
 8017e82:	79bb      	ldrb	r3, [r7, #6]
 8017e84:	b21b      	sxth	r3, r3
 8017e86:	4313      	orrs	r3, r2
 8017e88:	b21b      	sxth	r3, r3
 8017e8a:	b29a      	uxth	r2, r3
 8017e8c:	4b44      	ldr	r3, [pc, #272]	; (8017fa0 <read_status_registers+0xc24>)
 8017e8e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	fm25v02_read(2*CURRENT_VOLTAGE_C_REG, &status_reg_temp_h);
 8017e92:	1dfb      	adds	r3, r7, #7
 8017e94:	4619      	mov	r1, r3
 8017e96:	f44f 5002 	mov.w	r0, #8320	; 0x2080
 8017e9a:	f7fd fca7 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_C_REG+1, &status_reg_temp_l);
 8017e9e:	1dbb      	adds	r3, r7, #6
 8017ea0:	4619      	mov	r1, r3
 8017ea2:	f242 0081 	movw	r0, #8321	; 0x2081
 8017ea6:	f7fd fca1 	bl	80157ec <fm25v02_read>
	status_registers.current_voltage_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017eaa:	79fb      	ldrb	r3, [r7, #7]
 8017eac:	021b      	lsls	r3, r3, #8
 8017eae:	b21a      	sxth	r2, r3
 8017eb0:	79bb      	ldrb	r3, [r7, #6]
 8017eb2:	b21b      	sxth	r3, r3
 8017eb4:	4313      	orrs	r3, r2
 8017eb6:	b21b      	sxth	r3, r3
 8017eb8:	b29a      	uxth	r2, r3
 8017eba:	4b39      	ldr	r3, [pc, #228]	; (8017fa0 <read_status_registers+0xc24>)
 8017ebc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	fm25v02_read(2*CE_303_TOTAL_POWER_H_REG, &status_reg_temp_h);
 8017ec0:	1dfb      	adds	r3, r7, #7
 8017ec2:	4619      	mov	r1, r3
 8017ec4:	f242 0082 	movw	r0, #8322	; 0x2082
 8017ec8:	f7fd fc90 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_H_REG+1, &status_reg_temp_l);
 8017ecc:	1dbb      	adds	r3, r7, #6
 8017ece:	4619      	mov	r1, r3
 8017ed0:	f242 0083 	movw	r0, #8323	; 0x2083
 8017ed4:	f7fd fc8a 	bl	80157ec <fm25v02_read>
	status_registers.ce303_total_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017ed8:	79fb      	ldrb	r3, [r7, #7]
 8017eda:	021b      	lsls	r3, r3, #8
 8017edc:	b21a      	sxth	r2, r3
 8017ede:	79bb      	ldrb	r3, [r7, #6]
 8017ee0:	b21b      	sxth	r3, r3
 8017ee2:	4313      	orrs	r3, r2
 8017ee4:	b21b      	sxth	r3, r3
 8017ee6:	b29a      	uxth	r2, r3
 8017ee8:	4b2d      	ldr	r3, [pc, #180]	; (8017fa0 <read_status_registers+0xc24>)
 8017eea:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	fm25v02_read(2*CE_303_TOTAL_POWER_L_REG, &status_reg_temp_h);
 8017eee:	1dfb      	adds	r3, r7, #7
 8017ef0:	4619      	mov	r1, r3
 8017ef2:	f242 0084 	movw	r0, #8324	; 0x2084
 8017ef6:	f7fd fc79 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_L_REG+1, &status_reg_temp_l);
 8017efa:	1dbb      	adds	r3, r7, #6
 8017efc:	4619      	mov	r1, r3
 8017efe:	f242 0085 	movw	r0, #8325	; 0x2085
 8017f02:	f7fd fc73 	bl	80157ec <fm25v02_read>
	status_registers.ce303_total_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017f06:	79fb      	ldrb	r3, [r7, #7]
 8017f08:	021b      	lsls	r3, r3, #8
 8017f0a:	b21a      	sxth	r2, r3
 8017f0c:	79bb      	ldrb	r3, [r7, #6]
 8017f0e:	b21b      	sxth	r3, r3
 8017f10:	4313      	orrs	r3, r2
 8017f12:	b21b      	sxth	r3, r3
 8017f14:	b29a      	uxth	r2, r3
 8017f16:	4b22      	ldr	r3, [pc, #136]	; (8017fa0 <read_status_registers+0xc24>)
 8017f18:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

	fm25v02_read(2*CE_303_TOTAL_POWER_M_REG, &status_reg_temp_h);
 8017f1c:	1dfb      	adds	r3, r7, #7
 8017f1e:	4619      	mov	r1, r3
 8017f20:	f242 0086 	movw	r0, #8326	; 0x2086
 8017f24:	f7fd fc62 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_M_REG+1, &status_reg_temp_l);
 8017f28:	1dbb      	adds	r3, r7, #6
 8017f2a:	4619      	mov	r1, r3
 8017f2c:	f242 0087 	movw	r0, #8327	; 0x2087
 8017f30:	f7fd fc5c 	bl	80157ec <fm25v02_read>
	status_registers.ce303_total_power_m_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017f34:	79fb      	ldrb	r3, [r7, #7]
 8017f36:	021b      	lsls	r3, r3, #8
 8017f38:	b21a      	sxth	r2, r3
 8017f3a:	79bb      	ldrb	r3, [r7, #6]
 8017f3c:	b21b      	sxth	r3, r3
 8017f3e:	4313      	orrs	r3, r2
 8017f40:	b21b      	sxth	r3, r3
 8017f42:	b29a      	uxth	r2, r3
 8017f44:	4b16      	ldr	r3, [pc, #88]	; (8017fa0 <read_status_registers+0xc24>)
 8017f46:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	fm25v02_read(2*CE_303_TARIF1_POWER_H_REG, &status_reg_temp_h);
 8017f4a:	1dfb      	adds	r3, r7, #7
 8017f4c:	4619      	mov	r1, r3
 8017f4e:	f242 0088 	movw	r0, #8328	; 0x2088
 8017f52:	f7fd fc4b 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_H_REG+1, &status_reg_temp_l);
 8017f56:	1dbb      	adds	r3, r7, #6
 8017f58:	4619      	mov	r1, r3
 8017f5a:	f242 0089 	movw	r0, #8329	; 0x2089
 8017f5e:	f7fd fc45 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif1_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017f62:	79fb      	ldrb	r3, [r7, #7]
 8017f64:	021b      	lsls	r3, r3, #8
 8017f66:	b21a      	sxth	r2, r3
 8017f68:	79bb      	ldrb	r3, [r7, #6]
 8017f6a:	b21b      	sxth	r3, r3
 8017f6c:	4313      	orrs	r3, r2
 8017f6e:	b21b      	sxth	r3, r3
 8017f70:	b29a      	uxth	r2, r3
 8017f72:	4b0b      	ldr	r3, [pc, #44]	; (8017fa0 <read_status_registers+0xc24>)
 8017f74:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

	fm25v02_read(2*CE_303_TARIF1_POWER_L_REG, &status_reg_temp_h);
 8017f78:	1dfb      	adds	r3, r7, #7
 8017f7a:	4619      	mov	r1, r3
 8017f7c:	f242 008a 	movw	r0, #8330	; 0x208a
 8017f80:	f7fd fc34 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_L_REG+1, &status_reg_temp_l);
 8017f84:	1dbb      	adds	r3, r7, #6
 8017f86:	4619      	mov	r1, r3
 8017f88:	f242 008b 	movw	r0, #8331	; 0x208b
 8017f8c:	f7fd fc2e 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif1_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017f90:	79fb      	ldrb	r3, [r7, #7]
 8017f92:	021b      	lsls	r3, r3, #8
 8017f94:	b21a      	sxth	r2, r3
 8017f96:	79bb      	ldrb	r3, [r7, #6]
 8017f98:	b21b      	sxth	r3, r3
 8017f9a:	4313      	orrs	r3, r2
 8017f9c:	b21b      	sxth	r3, r3
 8017f9e:	e001      	b.n	8017fa4 <read_status_registers+0xc28>
 8017fa0:	2000a10c 	.word	0x2000a10c
 8017fa4:	b29a      	uxth	r2, r3
 8017fa6:	4bc3      	ldr	r3, [pc, #780]	; (80182b4 <read_status_registers+0xf38>)
 8017fa8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	fm25v02_read(2*CE_303_TARIF1_POWER_MIL_REG, &status_reg_temp_h);
 8017fac:	1dfb      	adds	r3, r7, #7
 8017fae:	4619      	mov	r1, r3
 8017fb0:	f242 008c 	movw	r0, #8332	; 0x208c
 8017fb4:	f7fd fc1a 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_MIL_REG+1, &status_reg_temp_l);
 8017fb8:	1dbb      	adds	r3, r7, #6
 8017fba:	4619      	mov	r1, r3
 8017fbc:	f242 008d 	movw	r0, #8333	; 0x208d
 8017fc0:	f7fd fc14 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif1_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017fc4:	79fb      	ldrb	r3, [r7, #7]
 8017fc6:	021b      	lsls	r3, r3, #8
 8017fc8:	b21a      	sxth	r2, r3
 8017fca:	79bb      	ldrb	r3, [r7, #6]
 8017fcc:	b21b      	sxth	r3, r3
 8017fce:	4313      	orrs	r3, r2
 8017fd0:	b21b      	sxth	r3, r3
 8017fd2:	b29a      	uxth	r2, r3
 8017fd4:	4bb7      	ldr	r3, [pc, #732]	; (80182b4 <read_status_registers+0xf38>)
 8017fd6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

	fm25v02_read(2*CE_303_TARIF2_POWER_H_REG, &status_reg_temp_h);
 8017fda:	1dfb      	adds	r3, r7, #7
 8017fdc:	4619      	mov	r1, r3
 8017fde:	f242 008e 	movw	r0, #8334	; 0x208e
 8017fe2:	f7fd fc03 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_H_REG+1, &status_reg_temp_l);
 8017fe6:	1dbb      	adds	r3, r7, #6
 8017fe8:	4619      	mov	r1, r3
 8017fea:	f242 008f 	movw	r0, #8335	; 0x208f
 8017fee:	f7fd fbfd 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif2_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8017ff2:	79fb      	ldrb	r3, [r7, #7]
 8017ff4:	021b      	lsls	r3, r3, #8
 8017ff6:	b21a      	sxth	r2, r3
 8017ff8:	79bb      	ldrb	r3, [r7, #6]
 8017ffa:	b21b      	sxth	r3, r3
 8017ffc:	4313      	orrs	r3, r2
 8017ffe:	b21b      	sxth	r3, r3
 8018000:	b29a      	uxth	r2, r3
 8018002:	4bac      	ldr	r3, [pc, #688]	; (80182b4 <read_status_registers+0xf38>)
 8018004:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

	fm25v02_read(2*CE_303_TARIF2_POWER_L_REG, &status_reg_temp_h);
 8018008:	1dfb      	adds	r3, r7, #7
 801800a:	4619      	mov	r1, r3
 801800c:	f242 0090 	movw	r0, #8336	; 0x2090
 8018010:	f7fd fbec 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_L_REG+1, &status_reg_temp_l);
 8018014:	1dbb      	adds	r3, r7, #6
 8018016:	4619      	mov	r1, r3
 8018018:	f242 0091 	movw	r0, #8337	; 0x2091
 801801c:	f7fd fbe6 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif2_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018020:	79fb      	ldrb	r3, [r7, #7]
 8018022:	021b      	lsls	r3, r3, #8
 8018024:	b21a      	sxth	r2, r3
 8018026:	79bb      	ldrb	r3, [r7, #6]
 8018028:	b21b      	sxth	r3, r3
 801802a:	4313      	orrs	r3, r2
 801802c:	b21b      	sxth	r3, r3
 801802e:	b29a      	uxth	r2, r3
 8018030:	4ba0      	ldr	r3, [pc, #640]	; (80182b4 <read_status_registers+0xf38>)
 8018032:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

	fm25v02_read(2*CE_303_TARIF2_POWER_MIL_REG, &status_reg_temp_h);
 8018036:	1dfb      	adds	r3, r7, #7
 8018038:	4619      	mov	r1, r3
 801803a:	f242 0092 	movw	r0, #8338	; 0x2092
 801803e:	f7fd fbd5 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_MIL_REG+1, &status_reg_temp_l);
 8018042:	1dbb      	adds	r3, r7, #6
 8018044:	4619      	mov	r1, r3
 8018046:	f242 0093 	movw	r0, #8339	; 0x2093
 801804a:	f7fd fbcf 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif2_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801804e:	79fb      	ldrb	r3, [r7, #7]
 8018050:	021b      	lsls	r3, r3, #8
 8018052:	b21a      	sxth	r2, r3
 8018054:	79bb      	ldrb	r3, [r7, #6]
 8018056:	b21b      	sxth	r3, r3
 8018058:	4313      	orrs	r3, r2
 801805a:	b21b      	sxth	r3, r3
 801805c:	b29a      	uxth	r2, r3
 801805e:	4b95      	ldr	r3, [pc, #596]	; (80182b4 <read_status_registers+0xf38>)
 8018060:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

	fm25v02_read(2*CE_303_TARIF3_POWER_H_REG, &status_reg_temp_h);
 8018064:	1dfb      	adds	r3, r7, #7
 8018066:	4619      	mov	r1, r3
 8018068:	f242 0094 	movw	r0, #8340	; 0x2094
 801806c:	f7fd fbbe 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_H_REG+1, &status_reg_temp_l);
 8018070:	1dbb      	adds	r3, r7, #6
 8018072:	4619      	mov	r1, r3
 8018074:	f242 0095 	movw	r0, #8341	; 0x2095
 8018078:	f7fd fbb8 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif3_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801807c:	79fb      	ldrb	r3, [r7, #7]
 801807e:	021b      	lsls	r3, r3, #8
 8018080:	b21a      	sxth	r2, r3
 8018082:	79bb      	ldrb	r3, [r7, #6]
 8018084:	b21b      	sxth	r3, r3
 8018086:	4313      	orrs	r3, r2
 8018088:	b21b      	sxth	r3, r3
 801808a:	b29a      	uxth	r2, r3
 801808c:	4b89      	ldr	r3, [pc, #548]	; (80182b4 <read_status_registers+0xf38>)
 801808e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	fm25v02_read(2*CE_303_TARIF3_POWER_L_REG, &status_reg_temp_h);
 8018092:	1dfb      	adds	r3, r7, #7
 8018094:	4619      	mov	r1, r3
 8018096:	f242 0096 	movw	r0, #8342	; 0x2096
 801809a:	f7fd fba7 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_L_REG+1, &status_reg_temp_l);
 801809e:	1dbb      	adds	r3, r7, #6
 80180a0:	4619      	mov	r1, r3
 80180a2:	f242 0097 	movw	r0, #8343	; 0x2097
 80180a6:	f7fd fba1 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif3_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80180aa:	79fb      	ldrb	r3, [r7, #7]
 80180ac:	021b      	lsls	r3, r3, #8
 80180ae:	b21a      	sxth	r2, r3
 80180b0:	79bb      	ldrb	r3, [r7, #6]
 80180b2:	b21b      	sxth	r3, r3
 80180b4:	4313      	orrs	r3, r2
 80180b6:	b21b      	sxth	r3, r3
 80180b8:	b29a      	uxth	r2, r3
 80180ba:	4b7e      	ldr	r3, [pc, #504]	; (80182b4 <read_status_registers+0xf38>)
 80180bc:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96

	fm25v02_read(2*CE_303_TARIF3_POWER_MIL_REG, &status_reg_temp_h);
 80180c0:	1dfb      	adds	r3, r7, #7
 80180c2:	4619      	mov	r1, r3
 80180c4:	f242 0098 	movw	r0, #8344	; 0x2098
 80180c8:	f7fd fb90 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_MIL_REG+1, &status_reg_temp_l);
 80180cc:	1dbb      	adds	r3, r7, #6
 80180ce:	4619      	mov	r1, r3
 80180d0:	f242 0099 	movw	r0, #8345	; 0x2099
 80180d4:	f7fd fb8a 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif3_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80180d8:	79fb      	ldrb	r3, [r7, #7]
 80180da:	021b      	lsls	r3, r3, #8
 80180dc:	b21a      	sxth	r2, r3
 80180de:	79bb      	ldrb	r3, [r7, #6]
 80180e0:	b21b      	sxth	r3, r3
 80180e2:	4313      	orrs	r3, r2
 80180e4:	b21b      	sxth	r3, r3
 80180e6:	b29a      	uxth	r2, r3
 80180e8:	4b72      	ldr	r3, [pc, #456]	; (80182b4 <read_status_registers+0xf38>)
 80180ea:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

	fm25v02_read(2*CE_303_TARIF4_POWER_H_REG, &status_reg_temp_h);
 80180ee:	1dfb      	adds	r3, r7, #7
 80180f0:	4619      	mov	r1, r3
 80180f2:	f242 009a 	movw	r0, #8346	; 0x209a
 80180f6:	f7fd fb79 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_H_REG+1, &status_reg_temp_l);
 80180fa:	1dbb      	adds	r3, r7, #6
 80180fc:	4619      	mov	r1, r3
 80180fe:	f242 009b 	movw	r0, #8347	; 0x209b
 8018102:	f7fd fb73 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif4_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018106:	79fb      	ldrb	r3, [r7, #7]
 8018108:	021b      	lsls	r3, r3, #8
 801810a:	b21a      	sxth	r2, r3
 801810c:	79bb      	ldrb	r3, [r7, #6]
 801810e:	b21b      	sxth	r3, r3
 8018110:	4313      	orrs	r3, r2
 8018112:	b21b      	sxth	r3, r3
 8018114:	b29a      	uxth	r2, r3
 8018116:	4b67      	ldr	r3, [pc, #412]	; (80182b4 <read_status_registers+0xf38>)
 8018118:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

	fm25v02_read(2*CE_303_TARIF4_POWER_L_REG, &status_reg_temp_h);
 801811c:	1dfb      	adds	r3, r7, #7
 801811e:	4619      	mov	r1, r3
 8018120:	f242 009c 	movw	r0, #8348	; 0x209c
 8018124:	f7fd fb62 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_L_REG+1, &status_reg_temp_l);
 8018128:	1dbb      	adds	r3, r7, #6
 801812a:	4619      	mov	r1, r3
 801812c:	f242 009d 	movw	r0, #8349	; 0x209d
 8018130:	f7fd fb5c 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif4_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018134:	79fb      	ldrb	r3, [r7, #7]
 8018136:	021b      	lsls	r3, r3, #8
 8018138:	b21a      	sxth	r2, r3
 801813a:	79bb      	ldrb	r3, [r7, #6]
 801813c:	b21b      	sxth	r3, r3
 801813e:	4313      	orrs	r3, r2
 8018140:	b21b      	sxth	r3, r3
 8018142:	b29a      	uxth	r2, r3
 8018144:	4b5b      	ldr	r3, [pc, #364]	; (80182b4 <read_status_registers+0xf38>)
 8018146:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	fm25v02_read(2*CE_303_TARIF4_POWER_MIL_REG, &status_reg_temp_h);
 801814a:	1dfb      	adds	r3, r7, #7
 801814c:	4619      	mov	r1, r3
 801814e:	f242 009e 	movw	r0, #8350	; 0x209e
 8018152:	f7fd fb4b 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_MIL_REG+1, &status_reg_temp_l);
 8018156:	1dbb      	adds	r3, r7, #6
 8018158:	4619      	mov	r1, r3
 801815a:	f242 009f 	movw	r0, #8351	; 0x209f
 801815e:	f7fd fb45 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif4_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018162:	79fb      	ldrb	r3, [r7, #7]
 8018164:	021b      	lsls	r3, r3, #8
 8018166:	b21a      	sxth	r2, r3
 8018168:	79bb      	ldrb	r3, [r7, #6]
 801816a:	b21b      	sxth	r3, r3
 801816c:	4313      	orrs	r3, r2
 801816e:	b21b      	sxth	r3, r3
 8018170:	b29a      	uxth	r2, r3
 8018172:	4b50      	ldr	r3, [pc, #320]	; (80182b4 <read_status_registers+0xf38>)
 8018174:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	fm25v02_read(2*CE_303_TARIF5_POWER_H_REG, &status_reg_temp_h);
 8018178:	1dfb      	adds	r3, r7, #7
 801817a:	4619      	mov	r1, r3
 801817c:	f242 00a0 	movw	r0, #8352	; 0x20a0
 8018180:	f7fd fb34 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_H_REG+1, &status_reg_temp_l);
 8018184:	1dbb      	adds	r3, r7, #6
 8018186:	4619      	mov	r1, r3
 8018188:	f242 00a1 	movw	r0, #8353	; 0x20a1
 801818c:	f7fd fb2e 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif5_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018190:	79fb      	ldrb	r3, [r7, #7]
 8018192:	021b      	lsls	r3, r3, #8
 8018194:	b21a      	sxth	r2, r3
 8018196:	79bb      	ldrb	r3, [r7, #6]
 8018198:	b21b      	sxth	r3, r3
 801819a:	4313      	orrs	r3, r2
 801819c:	b21b      	sxth	r3, r3
 801819e:	b29a      	uxth	r2, r3
 80181a0:	4b44      	ldr	r3, [pc, #272]	; (80182b4 <read_status_registers+0xf38>)
 80181a2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	fm25v02_read(2*CE_303_TARIF5_POWER_L_REG, &status_reg_temp_h);
 80181a6:	1dfb      	adds	r3, r7, #7
 80181a8:	4619      	mov	r1, r3
 80181aa:	f242 00a2 	movw	r0, #8354	; 0x20a2
 80181ae:	f7fd fb1d 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_L_REG+1, &status_reg_temp_l);
 80181b2:	1dbb      	adds	r3, r7, #6
 80181b4:	4619      	mov	r1, r3
 80181b6:	f242 00a3 	movw	r0, #8355	; 0x20a3
 80181ba:	f7fd fb17 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif5_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80181be:	79fb      	ldrb	r3, [r7, #7]
 80181c0:	021b      	lsls	r3, r3, #8
 80181c2:	b21a      	sxth	r2, r3
 80181c4:	79bb      	ldrb	r3, [r7, #6]
 80181c6:	b21b      	sxth	r3, r3
 80181c8:	4313      	orrs	r3, r2
 80181ca:	b21b      	sxth	r3, r3
 80181cc:	b29a      	uxth	r2, r3
 80181ce:	4b39      	ldr	r3, [pc, #228]	; (80182b4 <read_status_registers+0xf38>)
 80181d0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2

	fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG, &status_reg_temp_h);
 80181d4:	1dfb      	adds	r3, r7, #7
 80181d6:	4619      	mov	r1, r3
 80181d8:	f242 00a4 	movw	r0, #8356	; 0x20a4
 80181dc:	f7fd fb06 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG+1, &status_reg_temp_l);
 80181e0:	1dbb      	adds	r3, r7, #6
 80181e2:	4619      	mov	r1, r3
 80181e4:	f242 00a5 	movw	r0, #8357	; 0x20a5
 80181e8:	f7fd fb00 	bl	80157ec <fm25v02_read>
	status_registers.ce303_tarif5_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80181ec:	79fb      	ldrb	r3, [r7, #7]
 80181ee:	021b      	lsls	r3, r3, #8
 80181f0:	b21a      	sxth	r2, r3
 80181f2:	79bb      	ldrb	r3, [r7, #6]
 80181f4:	b21b      	sxth	r3, r3
 80181f6:	4313      	orrs	r3, r2
 80181f8:	b21b      	sxth	r3, r3
 80181fa:	b29a      	uxth	r2, r3
 80181fc:	4b2d      	ldr	r3, [pc, #180]	; (80182b4 <read_status_registers+0xf38>)
 80181fe:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4

	fm25v02_read(2*SIGNAL_LEVEL_REG, &status_reg_temp_h);
 8018202:	1dfb      	adds	r3, r7, #7
 8018204:	4619      	mov	r1, r3
 8018206:	f242 00a6 	movw	r0, #8358	; 0x20a6
 801820a:	f7fd faef 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*SIGNAL_LEVEL_REG+1, &status_reg_temp_l);
 801820e:	1dbb      	adds	r3, r7, #6
 8018210:	4619      	mov	r1, r3
 8018212:	f242 00a7 	movw	r0, #8359	; 0x20a7
 8018216:	f7fd fae9 	bl	80157ec <fm25v02_read>
	status_registers.signal_level_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801821a:	79fb      	ldrb	r3, [r7, #7]
 801821c:	021b      	lsls	r3, r3, #8
 801821e:	b21a      	sxth	r2, r3
 8018220:	79bb      	ldrb	r3, [r7, #6]
 8018222:	b21b      	sxth	r3, r3
 8018224:	4313      	orrs	r3, r2
 8018226:	b21b      	sxth	r3, r3
 8018228:	b29a      	uxth	r2, r3
 801822a:	4b22      	ldr	r3, [pc, #136]	; (80182b4 <read_status_registers+0xf38>)
 801822c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	fm25v02_read(2*ADVANCED_LOOP_REG, &status_reg_temp_h);
 8018230:	1dfb      	adds	r3, r7, #7
 8018232:	4619      	mov	r1, r3
 8018234:	f242 00aa 	movw	r0, #8362	; 0x20aa
 8018238:	f7fd fad8 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADVANCED_LOOP_REG+1, &status_reg_temp_l);
 801823c:	1dbb      	adds	r3, r7, #6
 801823e:	4619      	mov	r1, r3
 8018240:	f242 00ab 	movw	r0, #8363	; 0x20ab
 8018244:	f7fd fad2 	bl	80157ec <fm25v02_read>
	status_registers.advanced_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018248:	79fb      	ldrb	r3, [r7, #7]
 801824a:	021b      	lsls	r3, r3, #8
 801824c:	b21a      	sxth	r2, r3
 801824e:	79bb      	ldrb	r3, [r7, #6]
 8018250:	b21b      	sxth	r3, r3
 8018252:	4313      	orrs	r3, r2
 8018254:	b21b      	sxth	r3, r3
 8018256:	b29a      	uxth	r2, r3
 8018258:	4b16      	ldr	r3, [pc, #88]	; (80182b4 <read_status_registers+0xf38>)
 801825a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	fm25v02_read(2*ADDITIONAL_INPUT_REG1, &status_reg_temp_h);
 801825e:	1dfb      	adds	r3, r7, #7
 8018260:	4619      	mov	r1, r3
 8018262:	f242 00ac 	movw	r0, #8364	; 0x20ac
 8018266:	f7fd fac1 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDITIONAL_INPUT_REG1+1, &status_reg_temp_l);
 801826a:	1dbb      	adds	r3, r7, #6
 801826c:	4619      	mov	r1, r3
 801826e:	f242 00ad 	movw	r0, #8365	; 0x20ad
 8018272:	f7fd fabb 	bl	80157ec <fm25v02_read>
	status_registers.additional_input_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018276:	79fb      	ldrb	r3, [r7, #7]
 8018278:	021b      	lsls	r3, r3, #8
 801827a:	b21a      	sxth	r2, r3
 801827c:	79bb      	ldrb	r3, [r7, #6]
 801827e:	b21b      	sxth	r3, r3
 8018280:	4313      	orrs	r3, r2
 8018282:	b21b      	sxth	r3, r3
 8018284:	b29a      	uxth	r2, r3
 8018286:	4b0b      	ldr	r3, [pc, #44]	; (80182b4 <read_status_registers+0xf38>)
 8018288:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

	fm25v02_read(2*ADDITIONAL_INPUT_REG2, &status_reg_temp_h);
 801828c:	1dfb      	adds	r3, r7, #7
 801828e:	4619      	mov	r1, r3
 8018290:	f242 00ae 	movw	r0, #8366	; 0x20ae
 8018294:	f7fd faaa 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDITIONAL_INPUT_REG2+1, &status_reg_temp_l);
 8018298:	1dbb      	adds	r3, r7, #6
 801829a:	4619      	mov	r1, r3
 801829c:	f242 00af 	movw	r0, #8367	; 0x20af
 80182a0:	f7fd faa4 	bl	80157ec <fm25v02_read>
	status_registers.additional_input_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80182a4:	79fb      	ldrb	r3, [r7, #7]
 80182a6:	021b      	lsls	r3, r3, #8
 80182a8:	b21a      	sxth	r2, r3
 80182aa:	79bb      	ldrb	r3, [r7, #6]
 80182ac:	b21b      	sxth	r3, r3
 80182ae:	4313      	orrs	r3, r2
 80182b0:	b21b      	sxth	r3, r3
 80182b2:	e001      	b.n	80182b8 <read_status_registers+0xf3c>
 80182b4:	2000a10c 	.word	0x2000a10c
 80182b8:	b29a      	uxth	r2, r3
 80182ba:	4b62      	ldr	r3, [pc, #392]	; (8018444 <read_status_registers+0x10c8>)
 80182bc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	fm25v02_read(2*ICCID_NUMBER_REG1, &status_reg_temp_h);
 80182c0:	1dfb      	adds	r3, r7, #7
 80182c2:	4619      	mov	r1, r3
 80182c4:	f242 00b0 	movw	r0, #8368	; 0x20b0
 80182c8:	f7fd fa90 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG1+1, &status_reg_temp_l);
 80182cc:	1dbb      	adds	r3, r7, #6
 80182ce:	4619      	mov	r1, r3
 80182d0:	f242 00b1 	movw	r0, #8369	; 0x20b1
 80182d4:	f7fd fa8a 	bl	80157ec <fm25v02_read>
	status_registers.iccid_number_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80182d8:	79fb      	ldrb	r3, [r7, #7]
 80182da:	021b      	lsls	r3, r3, #8
 80182dc:	b21a      	sxth	r2, r3
 80182de:	79bb      	ldrb	r3, [r7, #6]
 80182e0:	b21b      	sxth	r3, r3
 80182e2:	4313      	orrs	r3, r2
 80182e4:	b21b      	sxth	r3, r3
 80182e6:	b29a      	uxth	r2, r3
 80182e8:	4b56      	ldr	r3, [pc, #344]	; (8018444 <read_status_registers+0x10c8>)
 80182ea:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	fm25v02_read(2*ICCID_NUMBER_REG2, &status_reg_temp_h);
 80182ee:	1dfb      	adds	r3, r7, #7
 80182f0:	4619      	mov	r1, r3
 80182f2:	f242 00b2 	movw	r0, #8370	; 0x20b2
 80182f6:	f7fd fa79 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG2+1, &status_reg_temp_l);
 80182fa:	1dbb      	adds	r3, r7, #6
 80182fc:	4619      	mov	r1, r3
 80182fe:	f242 00b3 	movw	r0, #8371	; 0x20b3
 8018302:	f7fd fa73 	bl	80157ec <fm25v02_read>
	status_registers.iccid_number_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018306:	79fb      	ldrb	r3, [r7, #7]
 8018308:	021b      	lsls	r3, r3, #8
 801830a:	b21a      	sxth	r2, r3
 801830c:	79bb      	ldrb	r3, [r7, #6]
 801830e:	b21b      	sxth	r3, r3
 8018310:	4313      	orrs	r3, r2
 8018312:	b21b      	sxth	r3, r3
 8018314:	b29a      	uxth	r2, r3
 8018316:	4b4b      	ldr	r3, [pc, #300]	; (8018444 <read_status_registers+0x10c8>)
 8018318:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	fm25v02_read(2*ICCID_NUMBER_REG3, &status_reg_temp_h);
 801831c:	1dfb      	adds	r3, r7, #7
 801831e:	4619      	mov	r1, r3
 8018320:	f242 00b4 	movw	r0, #8372	; 0x20b4
 8018324:	f7fd fa62 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG3+1, &status_reg_temp_l);
 8018328:	1dbb      	adds	r3, r7, #6
 801832a:	4619      	mov	r1, r3
 801832c:	f242 00b5 	movw	r0, #8373	; 0x20b5
 8018330:	f7fd fa5c 	bl	80157ec <fm25v02_read>
	status_registers.iccid_number_reg3 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018334:	79fb      	ldrb	r3, [r7, #7]
 8018336:	021b      	lsls	r3, r3, #8
 8018338:	b21a      	sxth	r2, r3
 801833a:	79bb      	ldrb	r3, [r7, #6]
 801833c:	b21b      	sxth	r3, r3
 801833e:	4313      	orrs	r3, r2
 8018340:	b21b      	sxth	r3, r3
 8018342:	b29a      	uxth	r2, r3
 8018344:	4b3f      	ldr	r3, [pc, #252]	; (8018444 <read_status_registers+0x10c8>)
 8018346:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	fm25v02_read(2*ICCID_NUMBER_REG4, &status_reg_temp_h);
 801834a:	1dfb      	adds	r3, r7, #7
 801834c:	4619      	mov	r1, r3
 801834e:	f242 00b6 	movw	r0, #8374	; 0x20b6
 8018352:	f7fd fa4b 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG4+1, &status_reg_temp_l);
 8018356:	1dbb      	adds	r3, r7, #6
 8018358:	4619      	mov	r1, r3
 801835a:	f242 00b7 	movw	r0, #8375	; 0x20b7
 801835e:	f7fd fa45 	bl	80157ec <fm25v02_read>
	status_registers.iccid_number_reg4 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018362:	79fb      	ldrb	r3, [r7, #7]
 8018364:	021b      	lsls	r3, r3, #8
 8018366:	b21a      	sxth	r2, r3
 8018368:	79bb      	ldrb	r3, [r7, #6]
 801836a:	b21b      	sxth	r3, r3
 801836c:	4313      	orrs	r3, r2
 801836e:	b21b      	sxth	r3, r3
 8018370:	b29a      	uxth	r2, r3
 8018372:	4b34      	ldr	r3, [pc, #208]	; (8018444 <read_status_registers+0x10c8>)
 8018374:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	fm25v02_read(2*ICCID_NUMBER_REG5, &status_reg_temp_h);
 8018378:	1dfb      	adds	r3, r7, #7
 801837a:	4619      	mov	r1, r3
 801837c:	f242 00b8 	movw	r0, #8376	; 0x20b8
 8018380:	f7fd fa34 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG5+1, &status_reg_temp_l);
 8018384:	1dbb      	adds	r3, r7, #6
 8018386:	4619      	mov	r1, r3
 8018388:	f242 00b9 	movw	r0, #8377	; 0x20b9
 801838c:	f7fd fa2e 	bl	80157ec <fm25v02_read>
	status_registers.iccid_number_reg5 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018390:	79fb      	ldrb	r3, [r7, #7]
 8018392:	021b      	lsls	r3, r3, #8
 8018394:	b21a      	sxth	r2, r3
 8018396:	79bb      	ldrb	r3, [r7, #6]
 8018398:	b21b      	sxth	r3, r3
 801839a:	4313      	orrs	r3, r2
 801839c:	b21b      	sxth	r3, r3
 801839e:	b29a      	uxth	r2, r3
 80183a0:	4b28      	ldr	r3, [pc, #160]	; (8018444 <read_status_registers+0x10c8>)
 80183a2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

	fm25v02_read(2*ICCID_NUMBER_REG6, &status_reg_temp_h);
 80183a6:	1dfb      	adds	r3, r7, #7
 80183a8:	4619      	mov	r1, r3
 80183aa:	f242 00ba 	movw	r0, #8378	; 0x20ba
 80183ae:	f7fd fa1d 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG6+1, &status_reg_temp_l);
 80183b2:	1dbb      	adds	r3, r7, #6
 80183b4:	4619      	mov	r1, r3
 80183b6:	f242 00bb 	movw	r0, #8379	; 0x20bb
 80183ba:	f7fd fa17 	bl	80157ec <fm25v02_read>
	status_registers.iccid_number_reg6 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80183be:	79fb      	ldrb	r3, [r7, #7]
 80183c0:	021b      	lsls	r3, r3, #8
 80183c2:	b21a      	sxth	r2, r3
 80183c4:	79bb      	ldrb	r3, [r7, #6]
 80183c6:	b21b      	sxth	r3, r3
 80183c8:	4313      	orrs	r3, r2
 80183ca:	b21b      	sxth	r3, r3
 80183cc:	b29a      	uxth	r2, r3
 80183ce:	4b1d      	ldr	r3, [pc, #116]	; (8018444 <read_status_registers+0x10c8>)
 80183d0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	fm25v02_read(2*ICCID_NUMBER_REG7, &status_reg_temp_h);
 80183d4:	1dfb      	adds	r3, r7, #7
 80183d6:	4619      	mov	r1, r3
 80183d8:	f242 00bc 	movw	r0, #8380	; 0x20bc
 80183dc:	f7fd fa06 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG7+1, &status_reg_temp_l);
 80183e0:	1dbb      	adds	r3, r7, #6
 80183e2:	4619      	mov	r1, r3
 80183e4:	f242 00bd 	movw	r0, #8381	; 0x20bd
 80183e8:	f7fd fa00 	bl	80157ec <fm25v02_read>
	status_registers.iccid_number_reg7 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80183ec:	79fb      	ldrb	r3, [r7, #7]
 80183ee:	021b      	lsls	r3, r3, #8
 80183f0:	b21a      	sxth	r2, r3
 80183f2:	79bb      	ldrb	r3, [r7, #6]
 80183f4:	b21b      	sxth	r3, r3
 80183f6:	4313      	orrs	r3, r2
 80183f8:	b21b      	sxth	r3, r3
 80183fa:	b29a      	uxth	r2, r3
 80183fc:	4b11      	ldr	r3, [pc, #68]	; (8018444 <read_status_registers+0x10c8>)
 80183fe:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	fm25v02_read(2*ICCID_NUMBER_REG8, &status_reg_temp_h);
 8018402:	1dfb      	adds	r3, r7, #7
 8018404:	4619      	mov	r1, r3
 8018406:	f242 00be 	movw	r0, #8382	; 0x20be
 801840a:	f7fd f9ef 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG8+1, &status_reg_temp_l);
 801840e:	1dbb      	adds	r3, r7, #6
 8018410:	4619      	mov	r1, r3
 8018412:	f242 00bf 	movw	r0, #8383	; 0x20bf
 8018416:	f7fd f9e9 	bl	80157ec <fm25v02_read>
	status_registers.iccid_number_reg8 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801841a:	79fb      	ldrb	r3, [r7, #7]
 801841c:	021b      	lsls	r3, r3, #8
 801841e:	b21a      	sxth	r2, r3
 8018420:	79bb      	ldrb	r3, [r7, #6]
 8018422:	b21b      	sxth	r3, r3
 8018424:	4313      	orrs	r3, r2
 8018426:	b21b      	sxth	r3, r3
 8018428:	b29a      	uxth	r2, r3
 801842a:	4b06      	ldr	r3, [pc, #24]	; (8018444 <read_status_registers+0x10c8>)
 801842c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

	osMutexRelease(Fm25v02MutexHandle);
 8018430:	4b05      	ldr	r3, [pc, #20]	; (8018448 <read_status_registers+0x10cc>)
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	4618      	mov	r0, r3
 8018436:	f7ee fccd 	bl	8006dd4 <osMutexRelease>
}
 801843a:	bf00      	nop
 801843c:	3708      	adds	r7, #8
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}
 8018442:	bf00      	nop
 8018444:	2000a10c 	.word	0x2000a10c
 8018448:	20009a6c 	.word	0x20009a6c

0801844c <read_control_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти управляющих регистров--------------
void read_control_registers(void)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b082      	sub	sp, #8
 8018450:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8018452:	4bbc      	ldr	r3, [pc, #752]	; (8018744 <read_control_registers+0x2f8>)
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	f04f 31ff 	mov.w	r1, #4294967295
 801845a:	4618      	mov	r0, r3
 801845c:	f7ee fc6c 	bl	8006d38 <osMutexWait>

	fm25v02_read(2*SECURITY_CONTROL_REG, &status_reg_temp_h);
 8018460:	1dfb      	adds	r3, r7, #7
 8018462:	4619      	mov	r1, r3
 8018464:	f242 1020 	movw	r0, #8480	; 0x2120
 8018468:	f7fd f9c0 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*SECURITY_CONTROL_REG+1, &status_reg_temp_l);
 801846c:	1dbb      	adds	r3, r7, #6
 801846e:	4619      	mov	r1, r3
 8018470:	f242 1021 	movw	r0, #8481	; 0x2121
 8018474:	f7fd f9ba 	bl	80157ec <fm25v02_read>
	control_registers.security_control_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018478:	79fb      	ldrb	r3, [r7, #7]
 801847a:	021b      	lsls	r3, r3, #8
 801847c:	b21a      	sxth	r2, r3
 801847e:	79bb      	ldrb	r3, [r7, #6]
 8018480:	b21b      	sxth	r3, r3
 8018482:	4313      	orrs	r3, r2
 8018484:	b21b      	sxth	r3, r3
 8018486:	b29a      	uxth	r2, r3
 8018488:	4baf      	ldr	r3, [pc, #700]	; (8018748 <read_control_registers+0x2fc>)
 801848a:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CONTROL_LOOP_REG, &status_reg_temp_h);
 801848c:	1dfb      	adds	r3, r7, #7
 801848e:	4619      	mov	r1, r3
 8018490:	f242 1022 	movw	r0, #8482	; 0x2122
 8018494:	f7fd f9aa 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CONTROL_LOOP_REG+1, &status_reg_temp_l);
 8018498:	1dbb      	adds	r3, r7, #6
 801849a:	4619      	mov	r1, r3
 801849c:	f242 1023 	movw	r0, #8483	; 0x2123
 80184a0:	f7fd f9a4 	bl	80157ec <fm25v02_read>
	control_registers.control_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80184a4:	79fb      	ldrb	r3, [r7, #7]
 80184a6:	021b      	lsls	r3, r3, #8
 80184a8:	b21a      	sxth	r2, r3
 80184aa:	79bb      	ldrb	r3, [r7, #6]
 80184ac:	b21b      	sxth	r3, r3
 80184ae:	4313      	orrs	r3, r2
 80184b0:	b21b      	sxth	r3, r3
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	4ba4      	ldr	r3, [pc, #656]	; (8018748 <read_control_registers+0x2fc>)
 80184b6:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*FILTER_TIME_LOOP_REG, &status_reg_temp_h);
 80184b8:	1dfb      	adds	r3, r7, #7
 80184ba:	4619      	mov	r1, r3
 80184bc:	f242 1024 	movw	r0, #8484	; 0x2124
 80184c0:	f7fd f994 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*FILTER_TIME_LOOP_REG+1, &status_reg_temp_l);
 80184c4:	1dbb      	adds	r3, r7, #6
 80184c6:	4619      	mov	r1, r3
 80184c8:	f242 1025 	movw	r0, #8485	; 0x2125
 80184cc:	f7fd f98e 	bl	80157ec <fm25v02_read>
	control_registers.filter_time_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80184d0:	79fb      	ldrb	r3, [r7, #7]
 80184d2:	021b      	lsls	r3, r3, #8
 80184d4:	b21a      	sxth	r2, r3
 80184d6:	79bb      	ldrb	r3, [r7, #6]
 80184d8:	b21b      	sxth	r3, r3
 80184da:	4313      	orrs	r3, r2
 80184dc:	b21b      	sxth	r3, r3
 80184de:	b29a      	uxth	r2, r3
 80184e0:	4b99      	ldr	r3, [pc, #612]	; (8018748 <read_control_registers+0x2fc>)
 80184e2:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG, &status_reg_temp_h);
 80184e4:	1dfb      	adds	r3, r7, #7
 80184e6:	4619      	mov	r1, r3
 80184e8:	f242 1026 	movw	r0, #8486	; 0x2126
 80184ec:	f7fd f97e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG+1, &status_reg_temp_l);
 80184f0:	1dbb      	adds	r3, r7, #6
 80184f2:	4619      	mov	r1, r3
 80184f4:	f242 1027 	movw	r0, #8487	; 0x2127
 80184f8:	f7fd f978 	bl	80157ec <fm25v02_read>
	control_registers.quantity_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80184fc:	79fb      	ldrb	r3, [r7, #7]
 80184fe:	021b      	lsls	r3, r3, #8
 8018500:	b21a      	sxth	r2, r3
 8018502:	79bb      	ldrb	r3, [r7, #6]
 8018504:	b21b      	sxth	r3, r3
 8018506:	4313      	orrs	r3, r2
 8018508:	b21b      	sxth	r3, r3
 801850a:	b29a      	uxth	r2, r3
 801850c:	4b8e      	ldr	r3, [pc, #568]	; (8018748 <read_control_registers+0x2fc>)
 801850e:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*TIME_FALSE_LOOP_REG, &status_reg_temp_h);
 8018510:	1dfb      	adds	r3, r7, #7
 8018512:	4619      	mov	r1, r3
 8018514:	f242 1028 	movw	r0, #8488	; 0x2128
 8018518:	f7fd f968 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_FALSE_LOOP_REG+1, &status_reg_temp_l);
 801851c:	1dbb      	adds	r3, r7, #6
 801851e:	4619      	mov	r1, r3
 8018520:	f242 1029 	movw	r0, #8489	; 0x2129
 8018524:	f7fd f962 	bl	80157ec <fm25v02_read>
	control_registers.time_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018528:	79fb      	ldrb	r3, [r7, #7]
 801852a:	021b      	lsls	r3, r3, #8
 801852c:	b21a      	sxth	r2, r3
 801852e:	79bb      	ldrb	r3, [r7, #6]
 8018530:	b21b      	sxth	r3, r3
 8018532:	4313      	orrs	r3, r2
 8018534:	b21b      	sxth	r3, r3
 8018536:	b29a      	uxth	r2, r3
 8018538:	4b83      	ldr	r3, [pc, #524]	; (8018748 <read_control_registers+0x2fc>)
 801853a:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*ALARM_LOOP_CLEAR_REG, &status_reg_temp_h);
 801853c:	1dfb      	adds	r3, r7, #7
 801853e:	4619      	mov	r1, r3
 8018540:	f242 102a 	movw	r0, #8490	; 0x212a
 8018544:	f7fd f952 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 8018548:	1dbb      	adds	r3, r7, #6
 801854a:	4619      	mov	r1, r3
 801854c:	f242 102b 	movw	r0, #8491	; 0x212b
 8018550:	f7fd f94c 	bl	80157ec <fm25v02_read>
	control_registers.alarm_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018554:	79fb      	ldrb	r3, [r7, #7]
 8018556:	021b      	lsls	r3, r3, #8
 8018558:	b21a      	sxth	r2, r3
 801855a:	79bb      	ldrb	r3, [r7, #6]
 801855c:	b21b      	sxth	r3, r3
 801855e:	4313      	orrs	r3, r2
 8018560:	b21b      	sxth	r3, r3
 8018562:	b29a      	uxth	r2, r3
 8018564:	4b78      	ldr	r3, [pc, #480]	; (8018748 <read_control_registers+0x2fc>)
 8018566:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*FALSE_LOOP_CLEAR_REG, &status_reg_temp_h);
 8018568:	1dfb      	adds	r3, r7, #7
 801856a:	4619      	mov	r1, r3
 801856c:	f242 102c 	movw	r0, #8492	; 0x212c
 8018570:	f7fd f93c 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*FALSE_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 8018574:	1dbb      	adds	r3, r7, #6
 8018576:	4619      	mov	r1, r3
 8018578:	f242 102d 	movw	r0, #8493	; 0x212d
 801857c:	f7fd f936 	bl	80157ec <fm25v02_read>
	control_registers.false_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018580:	79fb      	ldrb	r3, [r7, #7]
 8018582:	021b      	lsls	r3, r3, #8
 8018584:	b21a      	sxth	r2, r3
 8018586:	79bb      	ldrb	r3, [r7, #6]
 8018588:	b21b      	sxth	r3, r3
 801858a:	4313      	orrs	r3, r2
 801858c:	b21b      	sxth	r3, r3
 801858e:	b29a      	uxth	r2, r3
 8018590:	4b6d      	ldr	r3, [pc, #436]	; (8018748 <read_control_registers+0x2fc>)
 8018592:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*SECURITY_TIME_MAX_REG, &status_reg_temp_h);
 8018594:	1dfb      	adds	r3, r7, #7
 8018596:	4619      	mov	r1, r3
 8018598:	f242 102e 	movw	r0, #8494	; 0x212e
 801859c:	f7fd f926 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*SECURITY_TIME_MAX_REG+1, &status_reg_temp_l);
 80185a0:	1dbb      	adds	r3, r7, #6
 80185a2:	4619      	mov	r1, r3
 80185a4:	f242 102f 	movw	r0, #8495	; 0x212f
 80185a8:	f7fd f920 	bl	80157ec <fm25v02_read>
	control_registers.security_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80185ac:	79fb      	ldrb	r3, [r7, #7]
 80185ae:	021b      	lsls	r3, r3, #8
 80185b0:	b21a      	sxth	r2, r3
 80185b2:	79bb      	ldrb	r3, [r7, #6]
 80185b4:	b21b      	sxth	r3, r3
 80185b6:	4313      	orrs	r3, r2
 80185b8:	b21b      	sxth	r3, r3
 80185ba:	b29a      	uxth	r2, r3
 80185bc:	4b62      	ldr	r3, [pc, #392]	; (8018748 <read_control_registers+0x2fc>)
 80185be:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_UPDATE_REG, &status_reg_temp_h);
 80185c0:	1dfb      	adds	r3, r7, #7
 80185c2:	4619      	mov	r1, r3
 80185c4:	f242 1030 	movw	r0, #8496	; 0x2130
 80185c8:	f7fd f910 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_UPDATE_REG+1, &status_reg_temp_l);
 80185cc:	1dbb      	adds	r3, r7, #6
 80185ce:	4619      	mov	r1, r3
 80185d0:	f242 1031 	movw	r0, #8497	; 0x2131
 80185d4:	f7fd f90a 	bl	80157ec <fm25v02_read>
	control_registers.time_update_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80185d8:	79fb      	ldrb	r3, [r7, #7]
 80185da:	021b      	lsls	r3, r3, #8
 80185dc:	b21a      	sxth	r2, r3
 80185de:	79bb      	ldrb	r3, [r7, #6]
 80185e0:	b21b      	sxth	r3, r3
 80185e2:	4313      	orrs	r3, r2
 80185e4:	b21b      	sxth	r3, r3
 80185e6:	b29a      	uxth	r2, r3
 80185e8:	4b57      	ldr	r3, [pc, #348]	; (8018748 <read_control_registers+0x2fc>)
 80185ea:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_YEAR_REG, &status_reg_temp_h);
 80185ec:	1dfb      	adds	r3, r7, #7
 80185ee:	4619      	mov	r1, r3
 80185f0:	f242 1032 	movw	r0, #8498	; 0x2132
 80185f4:	f7fd f8fa 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_YEAR_REG+1, &status_reg_temp_l);
 80185f8:	1dbb      	adds	r3, r7, #6
 80185fa:	4619      	mov	r1, r3
 80185fc:	f242 1033 	movw	r0, #8499	; 0x2133
 8018600:	f7fd f8f4 	bl	80157ec <fm25v02_read>
	control_registers.time_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018604:	79fb      	ldrb	r3, [r7, #7]
 8018606:	021b      	lsls	r3, r3, #8
 8018608:	b21a      	sxth	r2, r3
 801860a:	79bb      	ldrb	r3, [r7, #6]
 801860c:	b21b      	sxth	r3, r3
 801860e:	4313      	orrs	r3, r2
 8018610:	b21b      	sxth	r3, r3
 8018612:	b29a      	uxth	r2, r3
 8018614:	4b4c      	ldr	r3, [pc, #304]	; (8018748 <read_control_registers+0x2fc>)
 8018616:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_MONTH_REG, &status_reg_temp_h);
 8018618:	1dfb      	adds	r3, r7, #7
 801861a:	4619      	mov	r1, r3
 801861c:	f242 1034 	movw	r0, #8500	; 0x2134
 8018620:	f7fd f8e4 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_MONTH_REG+1, &status_reg_temp_l);
 8018624:	1dbb      	adds	r3, r7, #6
 8018626:	4619      	mov	r1, r3
 8018628:	f242 1035 	movw	r0, #8501	; 0x2135
 801862c:	f7fd f8de 	bl	80157ec <fm25v02_read>
	control_registers.time_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018630:	79fb      	ldrb	r3, [r7, #7]
 8018632:	021b      	lsls	r3, r3, #8
 8018634:	b21a      	sxth	r2, r3
 8018636:	79bb      	ldrb	r3, [r7, #6]
 8018638:	b21b      	sxth	r3, r3
 801863a:	4313      	orrs	r3, r2
 801863c:	b21b      	sxth	r3, r3
 801863e:	b29a      	uxth	r2, r3
 8018640:	4b41      	ldr	r3, [pc, #260]	; (8018748 <read_control_registers+0x2fc>)
 8018642:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_DAY_REG, &status_reg_temp_h);
 8018644:	1dfb      	adds	r3, r7, #7
 8018646:	4619      	mov	r1, r3
 8018648:	f242 1036 	movw	r0, #8502	; 0x2136
 801864c:	f7fd f8ce 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_DAY_REG+1, &status_reg_temp_l);
 8018650:	1dbb      	adds	r3, r7, #6
 8018652:	4619      	mov	r1, r3
 8018654:	f242 1037 	movw	r0, #8503	; 0x2137
 8018658:	f7fd f8c8 	bl	80157ec <fm25v02_read>
	control_registers.time_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801865c:	79fb      	ldrb	r3, [r7, #7]
 801865e:	021b      	lsls	r3, r3, #8
 8018660:	b21a      	sxth	r2, r3
 8018662:	79bb      	ldrb	r3, [r7, #6]
 8018664:	b21b      	sxth	r3, r3
 8018666:	4313      	orrs	r3, r2
 8018668:	b21b      	sxth	r3, r3
 801866a:	b29a      	uxth	r2, r3
 801866c:	4b36      	ldr	r3, [pc, #216]	; (8018748 <read_control_registers+0x2fc>)
 801866e:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*TIME_HOUR_REG, &status_reg_temp_h);
 8018670:	1dfb      	adds	r3, r7, #7
 8018672:	4619      	mov	r1, r3
 8018674:	f242 1038 	movw	r0, #8504	; 0x2138
 8018678:	f7fd f8b8 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_HOUR_REG+1, &status_reg_temp_l);
 801867c:	1dbb      	adds	r3, r7, #6
 801867e:	4619      	mov	r1, r3
 8018680:	f242 1039 	movw	r0, #8505	; 0x2139
 8018684:	f7fd f8b2 	bl	80157ec <fm25v02_read>
	control_registers.time_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018688:	79fb      	ldrb	r3, [r7, #7]
 801868a:	021b      	lsls	r3, r3, #8
 801868c:	b21a      	sxth	r2, r3
 801868e:	79bb      	ldrb	r3, [r7, #6]
 8018690:	b21b      	sxth	r3, r3
 8018692:	4313      	orrs	r3, r2
 8018694:	b21b      	sxth	r3, r3
 8018696:	b29a      	uxth	r2, r3
 8018698:	4b2b      	ldr	r3, [pc, #172]	; (8018748 <read_control_registers+0x2fc>)
 801869a:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*TIME_MINUTE_REG, &status_reg_temp_h);
 801869c:	1dfb      	adds	r3, r7, #7
 801869e:	4619      	mov	r1, r3
 80186a0:	f242 103a 	movw	r0, #8506	; 0x213a
 80186a4:	f7fd f8a2 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_MINUTE_REG+1, &status_reg_temp_l);
 80186a8:	1dbb      	adds	r3, r7, #6
 80186aa:	4619      	mov	r1, r3
 80186ac:	f242 103b 	movw	r0, #8507	; 0x213b
 80186b0:	f7fd f89c 	bl	80157ec <fm25v02_read>
	control_registers.time_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80186b4:	79fb      	ldrb	r3, [r7, #7]
 80186b6:	021b      	lsls	r3, r3, #8
 80186b8:	b21a      	sxth	r2, r3
 80186ba:	79bb      	ldrb	r3, [r7, #6]
 80186bc:	b21b      	sxth	r3, r3
 80186be:	4313      	orrs	r3, r2
 80186c0:	b21b      	sxth	r3, r3
 80186c2:	b29a      	uxth	r2, r3
 80186c4:	4b20      	ldr	r3, [pc, #128]	; (8018748 <read_control_registers+0x2fc>)
 80186c6:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*TIME_SECONDS_REG, &status_reg_temp_h);
 80186c8:	1dfb      	adds	r3, r7, #7
 80186ca:	4619      	mov	r1, r3
 80186cc:	f242 103c 	movw	r0, #8508	; 0x213c
 80186d0:	f7fd f88c 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_SECONDS_REG+1, &status_reg_temp_l);
 80186d4:	1dbb      	adds	r3, r7, #6
 80186d6:	4619      	mov	r1, r3
 80186d8:	f242 103d 	movw	r0, #8509	; 0x213d
 80186dc:	f7fd f886 	bl	80157ec <fm25v02_read>
	control_registers.time_seconds_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80186e0:	79fb      	ldrb	r3, [r7, #7]
 80186e2:	021b      	lsls	r3, r3, #8
 80186e4:	b21a      	sxth	r2, r3
 80186e6:	79bb      	ldrb	r3, [r7, #6]
 80186e8:	b21b      	sxth	r3, r3
 80186ea:	4313      	orrs	r3, r2
 80186ec:	b21b      	sxth	r3, r3
 80186ee:	b29a      	uxth	r2, r3
 80186f0:	4b15      	ldr	r3, [pc, #84]	; (8018748 <read_control_registers+0x2fc>)
 80186f2:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*TIME_WEEKDAY_REG, &status_reg_temp_h);
 80186f4:	1dfb      	adds	r3, r7, #7
 80186f6:	4619      	mov	r1, r3
 80186f8:	f242 103e 	movw	r0, #8510	; 0x213e
 80186fc:	f7fd f876 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_WEEKDAY_REG+1, &status_reg_temp_l);
 8018700:	1dbb      	adds	r3, r7, #6
 8018702:	4619      	mov	r1, r3
 8018704:	f242 103f 	movw	r0, #8511	; 0x213f
 8018708:	f7fd f870 	bl	80157ec <fm25v02_read>
	control_registers.time_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801870c:	79fb      	ldrb	r3, [r7, #7]
 801870e:	021b      	lsls	r3, r3, #8
 8018710:	b21a      	sxth	r2, r3
 8018712:	79bb      	ldrb	r3, [r7, #6]
 8018714:	b21b      	sxth	r3, r3
 8018716:	4313      	orrs	r3, r2
 8018718:	b21b      	sxth	r3, r3
 801871a:	b29a      	uxth	r2, r3
 801871c:	4b0a      	ldr	r3, [pc, #40]	; (8018748 <read_control_registers+0x2fc>)
 801871e:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG, &status_reg_temp_h);
 8018720:	1dfb      	adds	r3, r7, #7
 8018722:	4619      	mov	r1, r3
 8018724:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 8018728:	f7fd f860 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG+1, &status_reg_temp_l);
 801872c:	1dbb      	adds	r3, r7, #6
 801872e:	4619      	mov	r1, r3
 8018730:	f242 1041 	movw	r0, #8513	; 0x2141
 8018734:	f7fd f85a 	bl	80157ec <fm25v02_read>
	control_registers.modbus_idle_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018738:	79fb      	ldrb	r3, [r7, #7]
 801873a:	021b      	lsls	r3, r3, #8
 801873c:	b21a      	sxth	r2, r3
 801873e:	79bb      	ldrb	r3, [r7, #6]
 8018740:	e004      	b.n	801874c <read_control_registers+0x300>
 8018742:	bf00      	nop
 8018744:	20009a6c 	.word	0x20009a6c
 8018748:	2000a1cc 	.word	0x2000a1cc
 801874c:	b21b      	sxth	r3, r3
 801874e:	4313      	orrs	r3, r2
 8018750:	b21b      	sxth	r3, r3
 8018752:	b29a      	uxth	r2, r3
 8018754:	4bbb      	ldr	r3, [pc, #748]	; (8018a44 <read_control_registers+0x5f8>)
 8018756:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*TIME_CONNECTION_TEST_REG, &status_reg_temp_h);
 8018758:	1dfb      	adds	r3, r7, #7
 801875a:	4619      	mov	r1, r3
 801875c:	f242 1042 	movw	r0, #8514	; 0x2142
 8018760:	f7fd f844 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*TIME_CONNECTION_TEST_REG+1, &status_reg_temp_l);
 8018764:	1dbb      	adds	r3, r7, #6
 8018766:	4619      	mov	r1, r3
 8018768:	f242 1043 	movw	r0, #8515	; 0x2143
 801876c:	f7fd f83e 	bl	80157ec <fm25v02_read>
	control_registers.time_connection_test_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018770:	79fb      	ldrb	r3, [r7, #7]
 8018772:	021b      	lsls	r3, r3, #8
 8018774:	b21a      	sxth	r2, r3
 8018776:	79bb      	ldrb	r3, [r7, #6]
 8018778:	b21b      	sxth	r3, r3
 801877a:	4313      	orrs	r3, r2
 801877c:	b21b      	sxth	r3, r3
 801877e:	b29a      	uxth	r2, r3
 8018780:	4bb0      	ldr	r3, [pc, #704]	; (8018a44 <read_control_registers+0x5f8>)
 8018782:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*EVENT_READ_REG, &status_reg_temp_h);
 8018784:	1dfb      	adds	r3, r7, #7
 8018786:	4619      	mov	r1, r3
 8018788:	f242 1044 	movw	r0, #8516	; 0x2144
 801878c:	f7fd f82e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*EVENT_READ_REG+1, &status_reg_temp_l);
 8018790:	1dbb      	adds	r3, r7, #6
 8018792:	4619      	mov	r1, r3
 8018794:	f242 1045 	movw	r0, #8517	; 0x2145
 8018798:	f7fd f828 	bl	80157ec <fm25v02_read>
	control_registers.event_read_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801879c:	79fb      	ldrb	r3, [r7, #7]
 801879e:	021b      	lsls	r3, r3, #8
 80187a0:	b21a      	sxth	r2, r3
 80187a2:	79bb      	ldrb	r3, [r7, #6]
 80187a4:	b21b      	sxth	r3, r3
 80187a6:	4313      	orrs	r3, r2
 80187a8:	b21b      	sxth	r3, r3
 80187aa:	b29a      	uxth	r2, r3
 80187ac:	4ba5      	ldr	r3, [pc, #660]	; (8018a44 <read_control_registers+0x5f8>)
 80187ae:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG, &status_reg_temp_h);
 80187b0:	1dfb      	adds	r3, r7, #7
 80187b2:	4619      	mov	r1, r3
 80187b4:	f242 1046 	movw	r0, #8518	; 0x2146
 80187b8:	f7fd f818 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG+1, &status_reg_temp_l);
 80187bc:	1dbb      	adds	r3, r7, #6
 80187be:	4619      	mov	r1, r3
 80187c0:	f242 1047 	movw	r0, #8519	; 0x2147
 80187c4:	f7fd f812 	bl	80157ec <fm25v02_read>
	control_registers.event_address_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80187c8:	79fb      	ldrb	r3, [r7, #7]
 80187ca:	021b      	lsls	r3, r3, #8
 80187cc:	b21a      	sxth	r2, r3
 80187ce:	79bb      	ldrb	r3, [r7, #6]
 80187d0:	b21b      	sxth	r3, r3
 80187d2:	4313      	orrs	r3, r2
 80187d4:	b21b      	sxth	r3, r3
 80187d6:	b29a      	uxth	r2, r3
 80187d8:	4b9a      	ldr	r3, [pc, #616]	; (8018a44 <read_control_registers+0x5f8>)
 80187da:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*EVENT_ADDRESS_LOW_REG, &status_reg_temp_h);
 80187dc:	1dfb      	adds	r3, r7, #7
 80187de:	4619      	mov	r1, r3
 80187e0:	f242 1048 	movw	r0, #8520	; 0x2148
 80187e4:	f7fd f802 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_LOW_REG+1, &status_reg_temp_l);
 80187e8:	1dbb      	adds	r3, r7, #6
 80187ea:	4619      	mov	r1, r3
 80187ec:	f242 1049 	movw	r0, #8521	; 0x2149
 80187f0:	f7fc fffc 	bl	80157ec <fm25v02_read>
	control_registers.event_address_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80187f4:	79fb      	ldrb	r3, [r7, #7]
 80187f6:	021b      	lsls	r3, r3, #8
 80187f8:	b21a      	sxth	r2, r3
 80187fa:	79bb      	ldrb	r3, [r7, #6]
 80187fc:	b21b      	sxth	r3, r3
 80187fe:	4313      	orrs	r3, r2
 8018800:	b21b      	sxth	r3, r3
 8018802:	b29a      	uxth	r2, r3
 8018804:	4b8f      	ldr	r3, [pc, #572]	; (8018a44 <read_control_registers+0x5f8>)
 8018806:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG, &status_reg_temp_h);
 8018808:	1dfb      	adds	r3, r7, #7
 801880a:	4619      	mov	r1, r3
 801880c:	f242 104a 	movw	r0, #8522	; 0x214a
 8018810:	f7fc ffec 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG+1, &status_reg_temp_l);
 8018814:	1dbb      	adds	r3, r7, #6
 8018816:	4619      	mov	r1, r3
 8018818:	f242 104b 	movw	r0, #8523	; 0x214b
 801881c:	f7fc ffe6 	bl	80157ec <fm25v02_read>
	control_registers.modem_ring_try_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018820:	79fb      	ldrb	r3, [r7, #7]
 8018822:	021b      	lsls	r3, r3, #8
 8018824:	b21a      	sxth	r2, r3
 8018826:	79bb      	ldrb	r3, [r7, #6]
 8018828:	b21b      	sxth	r3, r3
 801882a:	4313      	orrs	r3, r2
 801882c:	b21b      	sxth	r3, r3
 801882e:	b29a      	uxth	r2, r3
 8018830:	4b84      	ldr	r3, [pc, #528]	; (8018a44 <read_control_registers+0x5f8>)
 8018832:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG, &status_reg_temp_h);
 8018834:	1dfb      	adds	r3, r7, #7
 8018836:	4619      	mov	r1, r3
 8018838:	f242 104c 	movw	r0, #8524	; 0x214c
 801883c:	f7fc ffd6 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG+1, &status_reg_temp_l);
 8018840:	1dbb      	adds	r3, r7, #6
 8018842:	4619      	mov	r1, r3
 8018844:	f242 104d 	movw	r0, #8525	; 0x214d
 8018848:	f7fc ffd0 	bl	80157ec <fm25v02_read>
	control_registers.modem_ring_pause_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801884c:	79fb      	ldrb	r3, [r7, #7]
 801884e:	021b      	lsls	r3, r3, #8
 8018850:	b21a      	sxth	r2, r3
 8018852:	79bb      	ldrb	r3, [r7, #6]
 8018854:	b21b      	sxth	r3, r3
 8018856:	4313      	orrs	r3, r2
 8018858:	b21b      	sxth	r3, r3
 801885a:	b29a      	uxth	r2, r3
 801885c:	4b79      	ldr	r3, [pc, #484]	; (8018a44 <read_control_registers+0x5f8>)
 801885e:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG, &status_reg_temp_h);
 8018860:	1dfb      	adds	r3, r7, #7
 8018862:	4619      	mov	r1, r3
 8018864:	f242 104e 	movw	r0, #8526	; 0x214e
 8018868:	f7fc ffc0 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG+1, &status_reg_temp_l);
 801886c:	1dbb      	adds	r3, r7, #6
 801886e:	4619      	mov	r1, r3
 8018870:	f242 104f 	movw	r0, #8527	; 0x214f
 8018874:	f7fc ffba 	bl	80157ec <fm25v02_read>
	control_registers.modem_ring_pause2_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018878:	79fb      	ldrb	r3, [r7, #7]
 801887a:	021b      	lsls	r3, r3, #8
 801887c:	b21a      	sxth	r2, r3
 801887e:	79bb      	ldrb	r3, [r7, #6]
 8018880:	b21b      	sxth	r3, r3
 8018882:	4313      	orrs	r3, r2
 8018884:	b21b      	sxth	r3, r3
 8018886:	b29a      	uxth	r2, r3
 8018888:	4b6e      	ldr	r3, [pc, #440]	; (8018a44 <read_control_registers+0x5f8>)
 801888a:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*RING_MINUTE_TIME_REG, &status_reg_temp_h);
 801888c:	1dfb      	adds	r3, r7, #7
 801888e:	4619      	mov	r1, r3
 8018890:	f242 1050 	movw	r0, #8528	; 0x2150
 8018894:	f7fc ffaa 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*RING_MINUTE_TIME_REG+1, &status_reg_temp_l);
 8018898:	1dbb      	adds	r3, r7, #6
 801889a:	4619      	mov	r1, r3
 801889c:	f242 1051 	movw	r0, #8529	; 0x2151
 80188a0:	f7fc ffa4 	bl	80157ec <fm25v02_read>
	control_registers.ring_minute_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80188a4:	79fb      	ldrb	r3, [r7, #7]
 80188a6:	021b      	lsls	r3, r3, #8
 80188a8:	b21a      	sxth	r2, r3
 80188aa:	79bb      	ldrb	r3, [r7, #6]
 80188ac:	b21b      	sxth	r3, r3
 80188ae:	4313      	orrs	r3, r2
 80188b0:	b21b      	sxth	r3, r3
 80188b2:	b29a      	uxth	r2, r3
 80188b4:	4b63      	ldr	r3, [pc, #396]	; (8018a44 <read_control_registers+0x5f8>)
 80188b6:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*RING_HOUR_TIME_REG, &status_reg_temp_h);
 80188b8:	1dfb      	adds	r3, r7, #7
 80188ba:	4619      	mov	r1, r3
 80188bc:	f242 1052 	movw	r0, #8530	; 0x2152
 80188c0:	f7fc ff94 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*RING_HOUR_TIME_REG+1, &status_reg_temp_l);
 80188c4:	1dbb      	adds	r3, r7, #6
 80188c6:	4619      	mov	r1, r3
 80188c8:	f242 1053 	movw	r0, #8531	; 0x2153
 80188cc:	f7fc ff8e 	bl	80157ec <fm25v02_read>
	control_registers.ring_hour_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80188d0:	79fb      	ldrb	r3, [r7, #7]
 80188d2:	021b      	lsls	r3, r3, #8
 80188d4:	b21a      	sxth	r2, r3
 80188d6:	79bb      	ldrb	r3, [r7, #6]
 80188d8:	b21b      	sxth	r3, r3
 80188da:	4313      	orrs	r3, r2
 80188dc:	b21b      	sxth	r3, r3
 80188de:	b29a      	uxth	r2, r3
 80188e0:	4b58      	ldr	r3, [pc, #352]	; (8018a44 <read_control_registers+0x5f8>)
 80188e2:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*ID_HIGH_REG, &status_reg_temp_h);
 80188e4:	1dfb      	adds	r3, r7, #7
 80188e6:	4619      	mov	r1, r3
 80188e8:	f242 1056 	movw	r0, #8534	; 0x2156
 80188ec:	f7fc ff7e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ID_HIGH_REG+1, &status_reg_temp_l);
 80188f0:	1dbb      	adds	r3, r7, #6
 80188f2:	4619      	mov	r1, r3
 80188f4:	f242 1057 	movw	r0, #8535	; 0x2157
 80188f8:	f7fc ff78 	bl	80157ec <fm25v02_read>
	control_registers.id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80188fc:	79fb      	ldrb	r3, [r7, #7]
 80188fe:	021b      	lsls	r3, r3, #8
 8018900:	b21a      	sxth	r2, r3
 8018902:	79bb      	ldrb	r3, [r7, #6]
 8018904:	b21b      	sxth	r3, r3
 8018906:	4313      	orrs	r3, r2
 8018908:	b21b      	sxth	r3, r3
 801890a:	b29a      	uxth	r2, r3
 801890c:	4b4d      	ldr	r3, [pc, #308]	; (8018a44 <read_control_registers+0x5f8>)
 801890e:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ID_LOW_REG, &status_reg_temp_h);
 8018910:	1dfb      	adds	r3, r7, #7
 8018912:	4619      	mov	r1, r3
 8018914:	f242 1058 	movw	r0, #8536	; 0x2158
 8018918:	f7fc ff68 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ID_LOW_REG+1, &status_reg_temp_l);
 801891c:	1dbb      	adds	r3, r7, #6
 801891e:	4619      	mov	r1, r3
 8018920:	f242 1059 	movw	r0, #8537	; 0x2159
 8018924:	f7fc ff62 	bl	80157ec <fm25v02_read>
	control_registers.id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018928:	79fb      	ldrb	r3, [r7, #7]
 801892a:	021b      	lsls	r3, r3, #8
 801892c:	b21a      	sxth	r2, r3
 801892e:	79bb      	ldrb	r3, [r7, #6]
 8018930:	b21b      	sxth	r3, r3
 8018932:	4313      	orrs	r3, r2
 8018934:	b21b      	sxth	r3, r3
 8018936:	b29a      	uxth	r2, r3
 8018938:	4b42      	ldr	r3, [pc, #264]	; (8018a44 <read_control_registers+0x5f8>)
 801893a:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*RESET_CONTROL_REG, &status_reg_temp_h);
 801893c:	1dfb      	adds	r3, r7, #7
 801893e:	4619      	mov	r1, r3
 8018940:	f242 105a 	movw	r0, #8538	; 0x215a
 8018944:	f7fc ff52 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*RESET_CONTROL_REG+1, &status_reg_temp_l);
 8018948:	1dbb      	adds	r3, r7, #6
 801894a:	4619      	mov	r1, r3
 801894c:	f242 105b 	movw	r0, #8539	; 0x215b
 8018950:	f7fc ff4c 	bl	80157ec <fm25v02_read>
	control_registers.reset_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018954:	79fb      	ldrb	r3, [r7, #7]
 8018956:	021b      	lsls	r3, r3, #8
 8018958:	b21a      	sxth	r2, r3
 801895a:	79bb      	ldrb	r3, [r7, #6]
 801895c:	b21b      	sxth	r3, r3
 801895e:	4313      	orrs	r3, r2
 8018960:	b21b      	sxth	r3, r3
 8018962:	b29a      	uxth	r2, r3
 8018964:	4b37      	ldr	r3, [pc, #220]	; (8018a44 <read_control_registers+0x5f8>)
 8018966:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*METER_POLLING_REG, &status_reg_temp_h);
 8018968:	1dfb      	adds	r3, r7, #7
 801896a:	4619      	mov	r1, r3
 801896c:	f242 105c 	movw	r0, #8540	; 0x215c
 8018970:	f7fc ff3c 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*METER_POLLING_REG+1, &status_reg_temp_l);
 8018974:	1dbb      	adds	r3, r7, #6
 8018976:	4619      	mov	r1, r3
 8018978:	f242 105d 	movw	r0, #8541	; 0x215d
 801897c:	f7fc ff36 	bl	80157ec <fm25v02_read>
	control_registers.meter_polling_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018980:	79fb      	ldrb	r3, [r7, #7]
 8018982:	021b      	lsls	r3, r3, #8
 8018984:	b21a      	sxth	r2, r3
 8018986:	79bb      	ldrb	r3, [r7, #6]
 8018988:	b21b      	sxth	r3, r3
 801898a:	4313      	orrs	r3, r2
 801898c:	b21b      	sxth	r3, r3
 801898e:	b29a      	uxth	r2, r3
 8018990:	4b2c      	ldr	r3, [pc, #176]	; (8018a44 <read_control_registers+0x5f8>)
 8018992:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*IP_1_REG, &status_reg_temp_h);
 8018994:	1dfb      	adds	r3, r7, #7
 8018996:	4619      	mov	r1, r3
 8018998:	f242 105e 	movw	r0, #8542	; 0x215e
 801899c:	f7fc ff26 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IP_1_REG+1, &status_reg_temp_l);
 80189a0:	1dbb      	adds	r3, r7, #6
 80189a2:	4619      	mov	r1, r3
 80189a4:	f242 105f 	movw	r0, #8543	; 0x215f
 80189a8:	f7fc ff20 	bl	80157ec <fm25v02_read>
	control_registers.ip1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80189ac:	79fb      	ldrb	r3, [r7, #7]
 80189ae:	021b      	lsls	r3, r3, #8
 80189b0:	b21a      	sxth	r2, r3
 80189b2:	79bb      	ldrb	r3, [r7, #6]
 80189b4:	b21b      	sxth	r3, r3
 80189b6:	4313      	orrs	r3, r2
 80189b8:	b21b      	sxth	r3, r3
 80189ba:	b29a      	uxth	r2, r3
 80189bc:	4b21      	ldr	r3, [pc, #132]	; (8018a44 <read_control_registers+0x5f8>)
 80189be:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*IP_2_REG, &status_reg_temp_h);
 80189c0:	1dfb      	adds	r3, r7, #7
 80189c2:	4619      	mov	r1, r3
 80189c4:	f242 1060 	movw	r0, #8544	; 0x2160
 80189c8:	f7fc ff10 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IP_2_REG+1, &status_reg_temp_l);
 80189cc:	1dbb      	adds	r3, r7, #6
 80189ce:	4619      	mov	r1, r3
 80189d0:	f242 1061 	movw	r0, #8545	; 0x2161
 80189d4:	f7fc ff0a 	bl	80157ec <fm25v02_read>
	control_registers.ip2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80189d8:	79fb      	ldrb	r3, [r7, #7]
 80189da:	021b      	lsls	r3, r3, #8
 80189dc:	b21a      	sxth	r2, r3
 80189de:	79bb      	ldrb	r3, [r7, #6]
 80189e0:	b21b      	sxth	r3, r3
 80189e2:	4313      	orrs	r3, r2
 80189e4:	b21b      	sxth	r3, r3
 80189e6:	b29a      	uxth	r2, r3
 80189e8:	4b16      	ldr	r3, [pc, #88]	; (8018a44 <read_control_registers+0x5f8>)
 80189ea:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*IP_3_REG, &status_reg_temp_h);
 80189ec:	1dfb      	adds	r3, r7, #7
 80189ee:	4619      	mov	r1, r3
 80189f0:	f242 1062 	movw	r0, #8546	; 0x2162
 80189f4:	f7fc fefa 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IP_3_REG+1, &status_reg_temp_l);
 80189f8:	1dbb      	adds	r3, r7, #6
 80189fa:	4619      	mov	r1, r3
 80189fc:	f242 1063 	movw	r0, #8547	; 0x2163
 8018a00:	f7fc fef4 	bl	80157ec <fm25v02_read>
	control_registers.ip3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018a04:	79fb      	ldrb	r3, [r7, #7]
 8018a06:	021b      	lsls	r3, r3, #8
 8018a08:	b21a      	sxth	r2, r3
 8018a0a:	79bb      	ldrb	r3, [r7, #6]
 8018a0c:	b21b      	sxth	r3, r3
 8018a0e:	4313      	orrs	r3, r2
 8018a10:	b21b      	sxth	r3, r3
 8018a12:	b29a      	uxth	r2, r3
 8018a14:	4b0b      	ldr	r3, [pc, #44]	; (8018a44 <read_control_registers+0x5f8>)
 8018a16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*IP_4_REG, &status_reg_temp_h);
 8018a1a:	1dfb      	adds	r3, r7, #7
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	f242 1064 	movw	r0, #8548	; 0x2164
 8018a22:	f7fc fee3 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*IP_4_REG+1, &status_reg_temp_l);
 8018a26:	1dbb      	adds	r3, r7, #6
 8018a28:	4619      	mov	r1, r3
 8018a2a:	f242 1065 	movw	r0, #8549	; 0x2165
 8018a2e:	f7fc fedd 	bl	80157ec <fm25v02_read>
	control_registers.ip4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018a32:	79fb      	ldrb	r3, [r7, #7]
 8018a34:	021b      	lsls	r3, r3, #8
 8018a36:	b21a      	sxth	r2, r3
 8018a38:	79bb      	ldrb	r3, [r7, #6]
 8018a3a:	b21b      	sxth	r3, r3
 8018a3c:	4313      	orrs	r3, r2
 8018a3e:	b21b      	sxth	r3, r3
 8018a40:	e002      	b.n	8018a48 <read_control_registers+0x5fc>
 8018a42:	bf00      	nop
 8018a44:	2000a1cc 	.word	0x2000a1cc
 8018a48:	b29a      	uxth	r2, r3
 8018a4a:	4bb2      	ldr	r3, [pc, #712]	; (8018d14 <read_control_registers+0x8c8>)
 8018a4c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PORT_HIGH_REG, &status_reg_temp_h);
 8018a50:	1dfb      	adds	r3, r7, #7
 8018a52:	4619      	mov	r1, r3
 8018a54:	f242 1066 	movw	r0, #8550	; 0x2166
 8018a58:	f7fc fec8 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*PORT_HIGH_REG+1, &status_reg_temp_l);
 8018a5c:	1dbb      	adds	r3, r7, #6
 8018a5e:	4619      	mov	r1, r3
 8018a60:	f242 1067 	movw	r0, #8551	; 0x2167
 8018a64:	f7fc fec2 	bl	80157ec <fm25v02_read>
	control_registers.port_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018a68:	79fb      	ldrb	r3, [r7, #7]
 8018a6a:	021b      	lsls	r3, r3, #8
 8018a6c:	b21a      	sxth	r2, r3
 8018a6e:	79bb      	ldrb	r3, [r7, #6]
 8018a70:	b21b      	sxth	r3, r3
 8018a72:	4313      	orrs	r3, r2
 8018a74:	b21b      	sxth	r3, r3
 8018a76:	b29a      	uxth	r2, r3
 8018a78:	4ba6      	ldr	r3, [pc, #664]	; (8018d14 <read_control_registers+0x8c8>)
 8018a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PORT_LOW_REG, &status_reg_temp_h);
 8018a7e:	1dfb      	adds	r3, r7, #7
 8018a80:	4619      	mov	r1, r3
 8018a82:	f242 1068 	movw	r0, #8552	; 0x2168
 8018a86:	f7fc feb1 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*PORT_LOW_REG+1, &status_reg_temp_l);
 8018a8a:	1dbb      	adds	r3, r7, #6
 8018a8c:	4619      	mov	r1, r3
 8018a8e:	f242 1069 	movw	r0, #8553	; 0x2169
 8018a92:	f7fc feab 	bl	80157ec <fm25v02_read>
	control_registers.port_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018a96:	79fb      	ldrb	r3, [r7, #7]
 8018a98:	021b      	lsls	r3, r3, #8
 8018a9a:	b21a      	sxth	r2, r3
 8018a9c:	79bb      	ldrb	r3, [r7, #6]
 8018a9e:	b21b      	sxth	r3, r3
 8018aa0:	4313      	orrs	r3, r2
 8018aa2:	b21b      	sxth	r3, r3
 8018aa4:	b29a      	uxth	r2, r3
 8018aa6:	4b9b      	ldr	r3, [pc, #620]	; (8018d14 <read_control_registers+0x8c8>)
 8018aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*METER_ID_HIGH_REG, &status_reg_temp_h);
 8018aac:	1dfb      	adds	r3, r7, #7
 8018aae:	4619      	mov	r1, r3
 8018ab0:	f242 106a 	movw	r0, #8554	; 0x216a
 8018ab4:	f7fc fe9a 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*METER_ID_HIGH_REG+1, &status_reg_temp_l);
 8018ab8:	1dbb      	adds	r3, r7, #6
 8018aba:	4619      	mov	r1, r3
 8018abc:	f242 106b 	movw	r0, #8555	; 0x216b
 8018ac0:	f7fc fe94 	bl	80157ec <fm25v02_read>
	control_registers.meter_id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018ac4:	79fb      	ldrb	r3, [r7, #7]
 8018ac6:	021b      	lsls	r3, r3, #8
 8018ac8:	b21a      	sxth	r2, r3
 8018aca:	79bb      	ldrb	r3, [r7, #6]
 8018acc:	b21b      	sxth	r3, r3
 8018ace:	4313      	orrs	r3, r2
 8018ad0:	b21b      	sxth	r3, r3
 8018ad2:	b29a      	uxth	r2, r3
 8018ad4:	4b8f      	ldr	r3, [pc, #572]	; (8018d14 <read_control_registers+0x8c8>)
 8018ad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*METER_ID_LOW_REG, &status_reg_temp_h);
 8018ada:	1dfb      	adds	r3, r7, #7
 8018adc:	4619      	mov	r1, r3
 8018ade:	f242 106c 	movw	r0, #8556	; 0x216c
 8018ae2:	f7fc fe83 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*METER_ID_LOW_REG+1, &status_reg_temp_l);
 8018ae6:	1dbb      	adds	r3, r7, #6
 8018ae8:	4619      	mov	r1, r3
 8018aea:	f242 106d 	movw	r0, #8557	; 0x216d
 8018aee:	f7fc fe7d 	bl	80157ec <fm25v02_read>
	control_registers.meter_id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018af2:	79fb      	ldrb	r3, [r7, #7]
 8018af4:	021b      	lsls	r3, r3, #8
 8018af6:	b21a      	sxth	r2, r3
 8018af8:	79bb      	ldrb	r3, [r7, #6]
 8018afa:	b21b      	sxth	r3, r3
 8018afc:	4313      	orrs	r3, r2
 8018afe:	b21b      	sxth	r3, r3
 8018b00:	b29a      	uxth	r2, r3
 8018b02:	4b84      	ldr	r3, [pc, #528]	; (8018d14 <read_control_registers+0x8c8>)
 8018b04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*GPRS_CALL_REG, &status_reg_temp_h);
 8018b08:	1dfb      	adds	r3, r7, #7
 8018b0a:	4619      	mov	r1, r3
 8018b0c:	f242 106e 	movw	r0, #8558	; 0x216e
 8018b10:	f7fc fe6c 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*GPRS_CALL_REG+1, &status_reg_temp_l);
 8018b14:	1dbb      	adds	r3, r7, #6
 8018b16:	4619      	mov	r1, r3
 8018b18:	f242 106f 	movw	r0, #8559	; 0x216f
 8018b1c:	f7fc fe66 	bl	80157ec <fm25v02_read>
	control_registers.gprs_call_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018b20:	79fb      	ldrb	r3, [r7, #7]
 8018b22:	021b      	lsls	r3, r3, #8
 8018b24:	b21a      	sxth	r2, r3
 8018b26:	79bb      	ldrb	r3, [r7, #6]
 8018b28:	b21b      	sxth	r3, r3
 8018b2a:	4313      	orrs	r3, r2
 8018b2c:	b21b      	sxth	r3, r3
 8018b2e:	b29a      	uxth	r2, r3
 8018b30:	4b78      	ldr	r3, [pc, #480]	; (8018d14 <read_control_registers+0x8c8>)
 8018b32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	fm25v02_read(2*MUTE_REG, &status_reg_temp_h);
 8018b36:	1dfb      	adds	r3, r7, #7
 8018b38:	4619      	mov	r1, r3
 8018b3a:	f242 1072 	movw	r0, #8562	; 0x2172
 8018b3e:	f7fc fe55 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MUTE_REG+1, &status_reg_temp_l);
 8018b42:	1dbb      	adds	r3, r7, #6
 8018b44:	4619      	mov	r1, r3
 8018b46:	f242 1073 	movw	r0, #8563	; 0x2173
 8018b4a:	f7fc fe4f 	bl	80157ec <fm25v02_read>
	control_registers.mute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018b4e:	79fb      	ldrb	r3, [r7, #7]
 8018b50:	021b      	lsls	r3, r3, #8
 8018b52:	b21a      	sxth	r2, r3
 8018b54:	79bb      	ldrb	r3, [r7, #6]
 8018b56:	b21b      	sxth	r3, r3
 8018b58:	4313      	orrs	r3, r2
 8018b5a:	b21b      	sxth	r3, r3
 8018b5c:	b29a      	uxth	r2, r3
 8018b5e:	4b6d      	ldr	r3, [pc, #436]	; (8018d14 <read_control_registers+0x8c8>)
 8018b60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	fm25v02_read(2*LIGHT_CONTROL_REG, &status_reg_temp_h);
 8018b64:	1dfb      	adds	r3, r7, #7
 8018b66:	4619      	mov	r1, r3
 8018b68:	f242 1082 	movw	r0, #8578	; 0x2182
 8018b6c:	f7fc fe3e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*LIGHT_CONTROL_REG+1, &status_reg_temp_l);
 8018b70:	1dbb      	adds	r3, r7, #6
 8018b72:	4619      	mov	r1, r3
 8018b74:	f242 1083 	movw	r0, #8579	; 0x2183
 8018b78:	f7fc fe38 	bl	80157ec <fm25v02_read>
	control_registers.light_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018b7c:	79fb      	ldrb	r3, [r7, #7]
 8018b7e:	021b      	lsls	r3, r3, #8
 8018b80:	b21a      	sxth	r2, r3
 8018b82:	79bb      	ldrb	r3, [r7, #6]
 8018b84:	b21b      	sxth	r3, r3
 8018b86:	4313      	orrs	r3, r2
 8018b88:	b21b      	sxth	r3, r3
 8018b8a:	b29a      	uxth	r2, r3
 8018b8c:	4b61      	ldr	r3, [pc, #388]	; (8018d14 <read_control_registers+0x8c8>)
 8018b8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	fm25v02_read(2*LIGHTING_ALARM_RESET_REG, &status_reg_temp_h);
 8018b92:	1dfb      	adds	r3, r7, #7
 8018b94:	4619      	mov	r1, r3
 8018b96:	f242 1084 	movw	r0, #8580	; 0x2184
 8018b9a:	f7fc fe27 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*LIGHTING_ALARM_RESET_REG+1, &status_reg_temp_l);
 8018b9e:	1dbb      	adds	r3, r7, #6
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	f242 1085 	movw	r0, #8581	; 0x2185
 8018ba6:	f7fc fe21 	bl	80157ec <fm25v02_read>
	control_registers.lighting_alarm_reset_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018baa:	79fb      	ldrb	r3, [r7, #7]
 8018bac:	021b      	lsls	r3, r3, #8
 8018bae:	b21a      	sxth	r2, r3
 8018bb0:	79bb      	ldrb	r3, [r7, #6]
 8018bb2:	b21b      	sxth	r3, r3
 8018bb4:	4313      	orrs	r3, r2
 8018bb6:	b21b      	sxth	r3, r3
 8018bb8:	b29a      	uxth	r2, r3
 8018bba:	4b56      	ldr	r3, [pc, #344]	; (8018d14 <read_control_registers+0x8c8>)
 8018bbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	fm25v02_read(2*CURRENT_MEASUREMENT_ACCURACY_REG, &status_reg_temp_h);
 8018bc0:	1dfb      	adds	r3, r7, #7
 8018bc2:	4619      	mov	r1, r3
 8018bc4:	f242 1086 	movw	r0, #8582	; 0x2186
 8018bc8:	f7fc fe10 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CURRENT_MEASUREMENT_ACCURACY_REG+1, &status_reg_temp_l);
 8018bcc:	1dbb      	adds	r3, r7, #6
 8018bce:	4619      	mov	r1, r3
 8018bd0:	f242 1087 	movw	r0, #8583	; 0x2187
 8018bd4:	f7fc fe0a 	bl	80157ec <fm25v02_read>
	control_registers.current_measurement_accuracy_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018bd8:	79fb      	ldrb	r3, [r7, #7]
 8018bda:	021b      	lsls	r3, r3, #8
 8018bdc:	b21a      	sxth	r2, r3
 8018bde:	79bb      	ldrb	r3, [r7, #6]
 8018be0:	b21b      	sxth	r3, r3
 8018be2:	4313      	orrs	r3, r2
 8018be4:	b21b      	sxth	r3, r3
 8018be6:	b29a      	uxth	r2, r3
 8018be8:	4b4a      	ldr	r3, [pc, #296]	; (8018d14 <read_control_registers+0x8c8>)
 8018bea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	fm25v02_read(2*MAX_CURRENT_PHASE_A, &status_reg_temp_h);
 8018bee:	1dfb      	adds	r3, r7, #7
 8018bf0:	4619      	mov	r1, r3
 8018bf2:	f242 1088 	movw	r0, #8584	; 0x2188
 8018bf6:	f7fc fdf9 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_A+1, &status_reg_temp_l);
 8018bfa:	1dbb      	adds	r3, r7, #6
 8018bfc:	4619      	mov	r1, r3
 8018bfe:	f242 1089 	movw	r0, #8585	; 0x2189
 8018c02:	f7fc fdf3 	bl	80157ec <fm25v02_read>
	control_registers.max_current_phase_a = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018c06:	79fb      	ldrb	r3, [r7, #7]
 8018c08:	021b      	lsls	r3, r3, #8
 8018c0a:	b21a      	sxth	r2, r3
 8018c0c:	79bb      	ldrb	r3, [r7, #6]
 8018c0e:	b21b      	sxth	r3, r3
 8018c10:	4313      	orrs	r3, r2
 8018c12:	b21b      	sxth	r3, r3
 8018c14:	b29a      	uxth	r2, r3
 8018c16:	4b3f      	ldr	r3, [pc, #252]	; (8018d14 <read_control_registers+0x8c8>)
 8018c18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	fm25v02_read(2*MAX_CURRENT_PHASE_B, &status_reg_temp_h);
 8018c1c:	1dfb      	adds	r3, r7, #7
 8018c1e:	4619      	mov	r1, r3
 8018c20:	f242 108a 	movw	r0, #8586	; 0x218a
 8018c24:	f7fc fde2 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_B+1, &status_reg_temp_l);
 8018c28:	1dbb      	adds	r3, r7, #6
 8018c2a:	4619      	mov	r1, r3
 8018c2c:	f242 108b 	movw	r0, #8587	; 0x218b
 8018c30:	f7fc fddc 	bl	80157ec <fm25v02_read>
	control_registers.max_current_phase_b = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018c34:	79fb      	ldrb	r3, [r7, #7]
 8018c36:	021b      	lsls	r3, r3, #8
 8018c38:	b21a      	sxth	r2, r3
 8018c3a:	79bb      	ldrb	r3, [r7, #6]
 8018c3c:	b21b      	sxth	r3, r3
 8018c3e:	4313      	orrs	r3, r2
 8018c40:	b21b      	sxth	r3, r3
 8018c42:	b29a      	uxth	r2, r3
 8018c44:	4b33      	ldr	r3, [pc, #204]	; (8018d14 <read_control_registers+0x8c8>)
 8018c46:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	fm25v02_read(2*MAX_CURRENT_PHASE_C, &status_reg_temp_h);
 8018c4a:	1dfb      	adds	r3, r7, #7
 8018c4c:	4619      	mov	r1, r3
 8018c4e:	f242 108c 	movw	r0, #8588	; 0x218c
 8018c52:	f7fc fdcb 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_C+1, &status_reg_temp_l);
 8018c56:	1dbb      	adds	r3, r7, #6
 8018c58:	4619      	mov	r1, r3
 8018c5a:	f242 108d 	movw	r0, #8589	; 0x218d
 8018c5e:	f7fc fdc5 	bl	80157ec <fm25v02_read>
	control_registers.max_current_phase_c = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018c62:	79fb      	ldrb	r3, [r7, #7]
 8018c64:	021b      	lsls	r3, r3, #8
 8018c66:	b21a      	sxth	r2, r3
 8018c68:	79bb      	ldrb	r3, [r7, #6]
 8018c6a:	b21b      	sxth	r3, r3
 8018c6c:	4313      	orrs	r3, r2
 8018c6e:	b21b      	sxth	r3, r3
 8018c70:	b29a      	uxth	r2, r3
 8018c72:	4b28      	ldr	r3, [pc, #160]	; (8018d14 <read_control_registers+0x8c8>)
 8018c74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	fm25v02_read(2*LIGHTING_SWITCHING_REG, &status_reg_temp_h);
 8018c78:	1dfb      	adds	r3, r7, #7
 8018c7a:	4619      	mov	r1, r3
 8018c7c:	f242 108e 	movw	r0, #8590	; 0x218e
 8018c80:	f7fc fdb4 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*LIGHTING_SWITCHING_REG+1, &status_reg_temp_l);
 8018c84:	1dbb      	adds	r3, r7, #6
 8018c86:	4619      	mov	r1, r3
 8018c88:	f242 108f 	movw	r0, #8591	; 0x218f
 8018c8c:	f7fc fdae 	bl	80157ec <fm25v02_read>
	control_registers.lighting_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018c90:	79fb      	ldrb	r3, [r7, #7]
 8018c92:	021b      	lsls	r3, r3, #8
 8018c94:	b21a      	sxth	r2, r3
 8018c96:	79bb      	ldrb	r3, [r7, #6]
 8018c98:	b21b      	sxth	r3, r3
 8018c9a:	4313      	orrs	r3, r2
 8018c9c:	b21b      	sxth	r3, r3
 8018c9e:	b29a      	uxth	r2, r3
 8018ca0:	4b1c      	ldr	r3, [pc, #112]	; (8018d14 <read_control_registers+0x8c8>)
 8018ca2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	fm25v02_read(2*ALARM_SWITCHING_REG, &status_reg_temp_h);
 8018ca6:	1dfb      	adds	r3, r7, #7
 8018ca8:	4619      	mov	r1, r3
 8018caa:	f242 1090 	movw	r0, #8592	; 0x2190
 8018cae:	f7fc fd9d 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ALARM_SWITCHING_REG+1, &status_reg_temp_l);
 8018cb2:	1dbb      	adds	r3, r7, #6
 8018cb4:	4619      	mov	r1, r3
 8018cb6:	f242 1091 	movw	r0, #8593	; 0x2191
 8018cba:	f7fc fd97 	bl	80157ec <fm25v02_read>
	control_registers.alarm_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018cbe:	79fb      	ldrb	r3, [r7, #7]
 8018cc0:	021b      	lsls	r3, r3, #8
 8018cc2:	b21a      	sxth	r2, r3
 8018cc4:	79bb      	ldrb	r3, [r7, #6]
 8018cc6:	b21b      	sxth	r3, r3
 8018cc8:	4313      	orrs	r3, r2
 8018cca:	b21b      	sxth	r3, r3
 8018ccc:	b29a      	uxth	r2, r3
 8018cce:	4b11      	ldr	r3, [pc, #68]	; (8018d14 <read_control_registers+0x8c8>)
 8018cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	fm25v02_read(2*ARMING_TIMELEFT, &status_reg_temp_h);
 8018cd4:	1dfb      	adds	r3, r7, #7
 8018cd6:	4619      	mov	r1, r3
 8018cd8:	f242 1092 	movw	r0, #8594	; 0x2192
 8018cdc:	f7fc fd86 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ARMING_TIMELEFT+1, &status_reg_temp_l);
 8018ce0:	1dbb      	adds	r3, r7, #6
 8018ce2:	4619      	mov	r1, r3
 8018ce4:	f242 1093 	movw	r0, #8595	; 0x2193
 8018ce8:	f7fc fd80 	bl	80157ec <fm25v02_read>
	control_registers.arming_timeleft_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018cec:	79fb      	ldrb	r3, [r7, #7]
 8018cee:	021b      	lsls	r3, r3, #8
 8018cf0:	b21a      	sxth	r2, r3
 8018cf2:	79bb      	ldrb	r3, [r7, #6]
 8018cf4:	b21b      	sxth	r3, r3
 8018cf6:	4313      	orrs	r3, r2
 8018cf8:	b21b      	sxth	r3, r3
 8018cfa:	b29a      	uxth	r2, r3
 8018cfc:	4b05      	ldr	r3, [pc, #20]	; (8018d14 <read_control_registers+0x8c8>)
 8018cfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	osMutexRelease(Fm25v02MutexHandle);
 8018d02:	4b05      	ldr	r3, [pc, #20]	; (8018d18 <read_control_registers+0x8cc>)
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	4618      	mov	r0, r3
 8018d08:	f7ee f864 	bl	8006dd4 <osMutexRelease>

}
 8018d0c:	bf00      	nop
 8018d0e:	3708      	adds	r7, #8
 8018d10:	46bd      	mov	sp, r7
 8018d12:	bd80      	pop	{r7, pc}
 8018d14:	2000a1cc 	.word	0x2000a1cc
 8018d18:	20009a6c 	.word	0x20009a6c

08018d1c <read_bootloader_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти регистров бутлоадера---------------

void read_bootloader_registers(void)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b082      	sub	sp, #8
 8018d20:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8018d22:	4bbc      	ldr	r3, [pc, #752]	; (8019014 <read_bootloader_registers+0x2f8>)
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	f04f 31ff 	mov.w	r1, #4294967295
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f7ee f804 	bl	8006d38 <osMutexWait>

	fm25v02_read(2*BOOTLOADER_VERSION_REG, &status_reg_temp_h);
 8018d30:	1dfb      	adds	r3, r7, #7
 8018d32:	4619      	mov	r1, r3
 8018d34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018d38:	f7fc fd58 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*BOOTLOADER_VERSION_REG+1, &status_reg_temp_l);
 8018d3c:	1dbb      	adds	r3, r7, #6
 8018d3e:	4619      	mov	r1, r3
 8018d40:	f240 2001 	movw	r0, #513	; 0x201
 8018d44:	f7fc fd52 	bl	80157ec <fm25v02_read>
	bootloader_registers.bootloader_version_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018d48:	79fb      	ldrb	r3, [r7, #7]
 8018d4a:	021b      	lsls	r3, r3, #8
 8018d4c:	b21a      	sxth	r2, r3
 8018d4e:	79bb      	ldrb	r3, [r7, #6]
 8018d50:	b21b      	sxth	r3, r3
 8018d52:	4313      	orrs	r3, r2
 8018d54:	b21b      	sxth	r3, r3
 8018d56:	b29a      	uxth	r2, r3
 8018d58:	4baf      	ldr	r3, [pc, #700]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018d5a:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 8018d5c:	1dfb      	adds	r3, r7, #7
 8018d5e:	4619      	mov	r1, r3
 8018d60:	f44f 7001 	mov.w	r0, #516	; 0x204
 8018d64:	f7fc fd42 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 8018d68:	1dbb      	adds	r3, r7, #6
 8018d6a:	4619      	mov	r1, r3
 8018d6c:	f240 2005 	movw	r0, #517	; 0x205
 8018d70:	f7fc fd3c 	bl	80157ec <fm25v02_read>
	bootloader_registers.start_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018d74:	79fb      	ldrb	r3, [r7, #7]
 8018d76:	021b      	lsls	r3, r3, #8
 8018d78:	b21a      	sxth	r2, r3
 8018d7a:	79bb      	ldrb	r3, [r7, #6]
 8018d7c:	b21b      	sxth	r3, r3
 8018d7e:	4313      	orrs	r3, r2
 8018d80:	b21b      	sxth	r3, r3
 8018d82:	b29a      	uxth	r2, r3
 8018d84:	4ba4      	ldr	r3, [pc, #656]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018d86:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 8018d88:	1dfb      	adds	r3, r7, #7
 8018d8a:	4619      	mov	r1, r3
 8018d8c:	f240 2006 	movw	r0, #518	; 0x206
 8018d90:	f7fc fd2c 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 8018d94:	1dbb      	adds	r3, r7, #6
 8018d96:	4619      	mov	r1, r3
 8018d98:	f240 2007 	movw	r0, #519	; 0x207
 8018d9c:	f7fc fd26 	bl	80157ec <fm25v02_read>
	bootloader_registers.start_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018da0:	79fb      	ldrb	r3, [r7, #7]
 8018da2:	021b      	lsls	r3, r3, #8
 8018da4:	b21a      	sxth	r2, r3
 8018da6:	79bb      	ldrb	r3, [r7, #6]
 8018da8:	b21b      	sxth	r3, r3
 8018daa:	4313      	orrs	r3, r2
 8018dac:	b21b      	sxth	r3, r3
 8018dae:	b29a      	uxth	r2, r3
 8018db0:	4b99      	ldr	r3, [pc, #612]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018db2:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 8018db4:	1dfb      	adds	r3, r7, #7
 8018db6:	4619      	mov	r1, r3
 8018db8:	f44f 7002 	mov.w	r0, #520	; 0x208
 8018dbc:	f7fc fd16 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 8018dc0:	1dbb      	adds	r3, r7, #6
 8018dc2:	4619      	mov	r1, r3
 8018dc4:	f240 2009 	movw	r0, #521	; 0x209
 8018dc8:	f7fc fd10 	bl	80157ec <fm25v02_read>
	bootloader_registers.start_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018dcc:	79fb      	ldrb	r3, [r7, #7]
 8018dce:	021b      	lsls	r3, r3, #8
 8018dd0:	b21a      	sxth	r2, r3
 8018dd2:	79bb      	ldrb	r3, [r7, #6]
 8018dd4:	b21b      	sxth	r3, r3
 8018dd6:	4313      	orrs	r3, r2
 8018dd8:	b21b      	sxth	r3, r3
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	4b8e      	ldr	r3, [pc, #568]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018dde:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 8018de0:	1dfb      	adds	r3, r7, #7
 8018de2:	4619      	mov	r1, r3
 8018de4:	f240 200a 	movw	r0, #522	; 0x20a
 8018de8:	f7fc fd00 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 8018dec:	1dbb      	adds	r3, r7, #6
 8018dee:	4619      	mov	r1, r3
 8018df0:	f240 200b 	movw	r0, #523	; 0x20b
 8018df4:	f7fc fcfa 	bl	80157ec <fm25v02_read>
	bootloader_registers.start_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018df8:	79fb      	ldrb	r3, [r7, #7]
 8018dfa:	021b      	lsls	r3, r3, #8
 8018dfc:	b21a      	sxth	r2, r3
 8018dfe:	79bb      	ldrb	r3, [r7, #6]
 8018e00:	b21b      	sxth	r3, r3
 8018e02:	4313      	orrs	r3, r2
 8018e04:	b21b      	sxth	r3, r3
 8018e06:	b29a      	uxth	r2, r3
 8018e08:	4b83      	ldr	r3, [pc, #524]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018e0a:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 8018e0c:	1dfb      	adds	r3, r7, #7
 8018e0e:	4619      	mov	r1, r3
 8018e10:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8018e14:	f7fc fcea 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 8018e18:	1dbb      	adds	r3, r7, #6
 8018e1a:	4619      	mov	r1, r3
 8018e1c:	f240 200d 	movw	r0, #525	; 0x20d
 8018e20:	f7fc fce4 	bl	80157ec <fm25v02_read>
	bootloader_registers.end_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018e24:	79fb      	ldrb	r3, [r7, #7]
 8018e26:	021b      	lsls	r3, r3, #8
 8018e28:	b21a      	sxth	r2, r3
 8018e2a:	79bb      	ldrb	r3, [r7, #6]
 8018e2c:	b21b      	sxth	r3, r3
 8018e2e:	4313      	orrs	r3, r2
 8018e30:	b21b      	sxth	r3, r3
 8018e32:	b29a      	uxth	r2, r3
 8018e34:	4b78      	ldr	r3, [pc, #480]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018e36:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 8018e38:	1dfb      	adds	r3, r7, #7
 8018e3a:	4619      	mov	r1, r3
 8018e3c:	f240 200e 	movw	r0, #526	; 0x20e
 8018e40:	f7fc fcd4 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 8018e44:	1dbb      	adds	r3, r7, #6
 8018e46:	4619      	mov	r1, r3
 8018e48:	f240 200f 	movw	r0, #527	; 0x20f
 8018e4c:	f7fc fcce 	bl	80157ec <fm25v02_read>
	bootloader_registers.end_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018e50:	79fb      	ldrb	r3, [r7, #7]
 8018e52:	021b      	lsls	r3, r3, #8
 8018e54:	b21a      	sxth	r2, r3
 8018e56:	79bb      	ldrb	r3, [r7, #6]
 8018e58:	b21b      	sxth	r3, r3
 8018e5a:	4313      	orrs	r3, r2
 8018e5c:	b21b      	sxth	r3, r3
 8018e5e:	b29a      	uxth	r2, r3
 8018e60:	4b6d      	ldr	r3, [pc, #436]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018e62:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 8018e64:	1dfb      	adds	r3, r7, #7
 8018e66:	4619      	mov	r1, r3
 8018e68:	f44f 7004 	mov.w	r0, #528	; 0x210
 8018e6c:	f7fc fcbe 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 8018e70:	1dbb      	adds	r3, r7, #6
 8018e72:	4619      	mov	r1, r3
 8018e74:	f240 2011 	movw	r0, #529	; 0x211
 8018e78:	f7fc fcb8 	bl	80157ec <fm25v02_read>
	bootloader_registers.crc_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018e7c:	79fb      	ldrb	r3, [r7, #7]
 8018e7e:	021b      	lsls	r3, r3, #8
 8018e80:	b21a      	sxth	r2, r3
 8018e82:	79bb      	ldrb	r3, [r7, #6]
 8018e84:	b21b      	sxth	r3, r3
 8018e86:	4313      	orrs	r3, r2
 8018e88:	b21b      	sxth	r3, r3
 8018e8a:	b29a      	uxth	r2, r3
 8018e8c:	4b62      	ldr	r3, [pc, #392]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018e8e:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CRC_FIRMWARE_LOW_REG, &status_reg_temp_h);
 8018e90:	1dfb      	adds	r3, r7, #7
 8018e92:	4619      	mov	r1, r3
 8018e94:	f240 2012 	movw	r0, #530	; 0x212
 8018e98:	f7fc fca8 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 8018e9c:	1dbb      	adds	r3, r7, #6
 8018e9e:	4619      	mov	r1, r3
 8018ea0:	f240 2013 	movw	r0, #531	; 0x213
 8018ea4:	f7fc fca2 	bl	80157ec <fm25v02_read>
	bootloader_registers.crc_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018ea8:	79fb      	ldrb	r3, [r7, #7]
 8018eaa:	021b      	lsls	r3, r3, #8
 8018eac:	b21a      	sxth	r2, r3
 8018eae:	79bb      	ldrb	r3, [r7, #6]
 8018eb0:	b21b      	sxth	r3, r3
 8018eb2:	4313      	orrs	r3, r2
 8018eb4:	b21b      	sxth	r3, r3
 8018eb6:	b29a      	uxth	r2, r3
 8018eb8:	4b57      	ldr	r3, [pc, #348]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018eba:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*JUMP_VECTOR_HIGH_REG, &status_reg_temp_h);
 8018ebc:	1dfb      	adds	r3, r7, #7
 8018ebe:	4619      	mov	r1, r3
 8018ec0:	f44f 7005 	mov.w	r0, #532	; 0x214
 8018ec4:	f7fc fc92 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_HIGH_REG+1, &status_reg_temp_l);
 8018ec8:	1dbb      	adds	r3, r7, #6
 8018eca:	4619      	mov	r1, r3
 8018ecc:	f240 2015 	movw	r0, #533	; 0x215
 8018ed0:	f7fc fc8c 	bl	80157ec <fm25v02_read>
	bootloader_registers.jump_vector_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018ed4:	79fb      	ldrb	r3, [r7, #7]
 8018ed6:	021b      	lsls	r3, r3, #8
 8018ed8:	b21a      	sxth	r2, r3
 8018eda:	79bb      	ldrb	r3, [r7, #6]
 8018edc:	b21b      	sxth	r3, r3
 8018ede:	4313      	orrs	r3, r2
 8018ee0:	b21b      	sxth	r3, r3
 8018ee2:	b29a      	uxth	r2, r3
 8018ee4:	4b4c      	ldr	r3, [pc, #304]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018ee6:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*JUMP_VECTOR_2_REG, &status_reg_temp_h);
 8018ee8:	1dfb      	adds	r3, r7, #7
 8018eea:	4619      	mov	r1, r3
 8018eec:	f240 2016 	movw	r0, #534	; 0x216
 8018ef0:	f7fc fc7c 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_2_REG+1, &status_reg_temp_l);
 8018ef4:	1dbb      	adds	r3, r7, #6
 8018ef6:	4619      	mov	r1, r3
 8018ef8:	f240 2017 	movw	r0, #535	; 0x217
 8018efc:	f7fc fc76 	bl	80157ec <fm25v02_read>
	bootloader_registers.jump_vector_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018f00:	79fb      	ldrb	r3, [r7, #7]
 8018f02:	021b      	lsls	r3, r3, #8
 8018f04:	b21a      	sxth	r2, r3
 8018f06:	79bb      	ldrb	r3, [r7, #6]
 8018f08:	b21b      	sxth	r3, r3
 8018f0a:	4313      	orrs	r3, r2
 8018f0c:	b21b      	sxth	r3, r3
 8018f0e:	b29a      	uxth	r2, r3
 8018f10:	4b41      	ldr	r3, [pc, #260]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018f12:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*JUMP_VECTOR_3_REG, &status_reg_temp_h);
 8018f14:	1dfb      	adds	r3, r7, #7
 8018f16:	4619      	mov	r1, r3
 8018f18:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018f1c:	f7fc fc66 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_3_REG+1, &status_reg_temp_l);
 8018f20:	1dbb      	adds	r3, r7, #6
 8018f22:	4619      	mov	r1, r3
 8018f24:	f240 2019 	movw	r0, #537	; 0x219
 8018f28:	f7fc fc60 	bl	80157ec <fm25v02_read>
	bootloader_registers.jump_vector_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018f2c:	79fb      	ldrb	r3, [r7, #7]
 8018f2e:	021b      	lsls	r3, r3, #8
 8018f30:	b21a      	sxth	r2, r3
 8018f32:	79bb      	ldrb	r3, [r7, #6]
 8018f34:	b21b      	sxth	r3, r3
 8018f36:	4313      	orrs	r3, r2
 8018f38:	b21b      	sxth	r3, r3
 8018f3a:	b29a      	uxth	r2, r3
 8018f3c:	4b36      	ldr	r3, [pc, #216]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018f3e:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*JUMP_VECTOR_LOW_REG, &status_reg_temp_h);
 8018f40:	1dfb      	adds	r3, r7, #7
 8018f42:	4619      	mov	r1, r3
 8018f44:	f240 201a 	movw	r0, #538	; 0x21a
 8018f48:	f7fc fc50 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_LOW_REG+1, &status_reg_temp_l);
 8018f4c:	1dbb      	adds	r3, r7, #6
 8018f4e:	4619      	mov	r1, r3
 8018f50:	f240 201b 	movw	r0, #539	; 0x21b
 8018f54:	f7fc fc4a 	bl	80157ec <fm25v02_read>
	bootloader_registers.jump_vector_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018f58:	79fb      	ldrb	r3, [r7, #7]
 8018f5a:	021b      	lsls	r3, r3, #8
 8018f5c:	b21a      	sxth	r2, r3
 8018f5e:	79bb      	ldrb	r3, [r7, #6]
 8018f60:	b21b      	sxth	r3, r3
 8018f62:	4313      	orrs	r3, r2
 8018f64:	b21b      	sxth	r3, r3
 8018f66:	b29a      	uxth	r2, r3
 8018f68:	4b2b      	ldr	r3, [pc, #172]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018f6a:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG, &status_reg_temp_h);
 8018f6c:	1dfb      	adds	r3, r7, #7
 8018f6e:	4619      	mov	r1, r3
 8018f70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8018f74:	f7fc fc3a 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG+1, &status_reg_temp_l);
 8018f78:	1dbb      	adds	r3, r7, #6
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	f240 201d 	movw	r0, #541	; 0x21d
 8018f80:	f7fc fc34 	bl	80157ec <fm25v02_read>
	bootloader_registers.firmware_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018f84:	79fb      	ldrb	r3, [r7, #7]
 8018f86:	021b      	lsls	r3, r3, #8
 8018f88:	b21a      	sxth	r2, r3
 8018f8a:	79bb      	ldrb	r3, [r7, #6]
 8018f8c:	b21b      	sxth	r3, r3
 8018f8e:	4313      	orrs	r3, r2
 8018f90:	b21b      	sxth	r3, r3
 8018f92:	b29a      	uxth	r2, r3
 8018f94:	4b20      	ldr	r3, [pc, #128]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018f96:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*WORKING_MODE_REG, &status_reg_temp_h);
 8018f98:	1dfb      	adds	r3, r7, #7
 8018f9a:	4619      	mov	r1, r3
 8018f9c:	f240 201e 	movw	r0, #542	; 0x21e
 8018fa0:	f7fc fc24 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*WORKING_MODE_REG+1, &status_reg_temp_l);
 8018fa4:	1dbb      	adds	r3, r7, #6
 8018fa6:	4619      	mov	r1, r3
 8018fa8:	f240 201f 	movw	r0, #543	; 0x21f
 8018fac:	f7fc fc1e 	bl	80157ec <fm25v02_read>
	bootloader_registers.working_mode_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018fb0:	79fb      	ldrb	r3, [r7, #7]
 8018fb2:	021b      	lsls	r3, r3, #8
 8018fb4:	b21a      	sxth	r2, r3
 8018fb6:	79bb      	ldrb	r3, [r7, #6]
 8018fb8:	b21b      	sxth	r3, r3
 8018fba:	4313      	orrs	r3, r2
 8018fbc:	b21b      	sxth	r3, r3
 8018fbe:	b29a      	uxth	r2, r3
 8018fc0:	4b15      	ldr	r3, [pc, #84]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018fc2:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*READY_DOWNLOAD_REG, &status_reg_temp_h);
 8018fc4:	1dfb      	adds	r3, r7, #7
 8018fc6:	4619      	mov	r1, r3
 8018fc8:	f44f 7008 	mov.w	r0, #544	; 0x220
 8018fcc:	f7fc fc0e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*READY_DOWNLOAD_REG+1, &status_reg_temp_l);
 8018fd0:	1dbb      	adds	r3, r7, #6
 8018fd2:	4619      	mov	r1, r3
 8018fd4:	f240 2021 	movw	r0, #545	; 0x221
 8018fd8:	f7fc fc08 	bl	80157ec <fm25v02_read>
	bootloader_registers.ready_download_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8018fdc:	79fb      	ldrb	r3, [r7, #7]
 8018fde:	021b      	lsls	r3, r3, #8
 8018fe0:	b21a      	sxth	r2, r3
 8018fe2:	79bb      	ldrb	r3, [r7, #6]
 8018fe4:	b21b      	sxth	r3, r3
 8018fe6:	4313      	orrs	r3, r2
 8018fe8:	b21b      	sxth	r3, r3
 8018fea:	b29a      	uxth	r2, r3
 8018fec:	4b0a      	ldr	r3, [pc, #40]	; (8019018 <read_bootloader_registers+0x2fc>)
 8018fee:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG, &status_reg_temp_h);
 8018ff0:	1dfb      	adds	r3, r7, #7
 8018ff2:	4619      	mov	r1, r3
 8018ff4:	f240 2022 	movw	r0, #546	; 0x222
 8018ff8:	f7fc fbf8 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG+1, &status_reg_temp_l);
 8018ffc:	1dbb      	adds	r3, r7, #6
 8018ffe:	4619      	mov	r1, r3
 8019000:	f240 2023 	movw	r0, #547	; 0x223
 8019004:	f7fc fbf2 	bl	80157ec <fm25v02_read>
	bootloader_registers.download_timeout_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019008:	79fb      	ldrb	r3, [r7, #7]
 801900a:	021b      	lsls	r3, r3, #8
 801900c:	b21a      	sxth	r2, r3
 801900e:	79bb      	ldrb	r3, [r7, #6]
 8019010:	e004      	b.n	801901c <read_bootloader_registers+0x300>
 8019012:	bf00      	nop
 8019014:	20009a6c 	.word	0x20009a6c
 8019018:	2000a0c0 	.word	0x2000a0c0
 801901c:	b21b      	sxth	r3, r3
 801901e:	4313      	orrs	r3, r2
 8019020:	b21b      	sxth	r3, r3
 8019022:	b29a      	uxth	r2, r3
 8019024:	4bbb      	ldr	r3, [pc, #748]	; (8019314 <read_bootloader_registers+0x5f8>)
 8019026:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*JUMP_ATTEMPT_REG, &status_reg_temp_h);
 8019028:	1dfb      	adds	r3, r7, #7
 801902a:	4619      	mov	r1, r3
 801902c:	f44f 7009 	mov.w	r0, #548	; 0x224
 8019030:	f7fc fbdc 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 8019034:	1dbb      	adds	r3, r7, #6
 8019036:	4619      	mov	r1, r3
 8019038:	f240 2025 	movw	r0, #549	; 0x225
 801903c:	f7fc fbd6 	bl	80157ec <fm25v02_read>
	bootloader_registers.jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019040:	79fb      	ldrb	r3, [r7, #7]
 8019042:	021b      	lsls	r3, r3, #8
 8019044:	b21a      	sxth	r2, r3
 8019046:	79bb      	ldrb	r3, [r7, #6]
 8019048:	b21b      	sxth	r3, r3
 801904a:	4313      	orrs	r3, r2
 801904c:	b21b      	sxth	r3, r3
 801904e:	b29a      	uxth	r2, r3
 8019050:	4bb0      	ldr	r3, [pc, #704]	; (8019314 <read_bootloader_registers+0x5f8>)
 8019052:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &status_reg_temp_h);
 8019054:	1dfb      	adds	r3, r7, #7
 8019056:	4619      	mov	r1, r3
 8019058:	f240 2026 	movw	r0, #550	; 0x226
 801905c:	f7fc fbc6 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 8019060:	1dbb      	adds	r3, r7, #6
 8019062:	4619      	mov	r1, r3
 8019064:	f240 2027 	movw	r0, #551	; 0x227
 8019068:	f7fc fbc0 	bl	80157ec <fm25v02_read>
	bootloader_registers.max_jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 801906c:	79fb      	ldrb	r3, [r7, #7]
 801906e:	021b      	lsls	r3, r3, #8
 8019070:	b21a      	sxth	r2, r3
 8019072:	79bb      	ldrb	r3, [r7, #6]
 8019074:	b21b      	sxth	r3, r3
 8019076:	4313      	orrs	r3, r2
 8019078:	b21b      	sxth	r3, r3
 801907a:	b29a      	uxth	r2, r3
 801907c:	4ba5      	ldr	r3, [pc, #660]	; (8019314 <read_bootloader_registers+0x5f8>)
 801907e:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 8019080:	1dfb      	adds	r3, r7, #7
 8019082:	4619      	mov	r1, r3
 8019084:	f44f 700a 	mov.w	r0, #552	; 0x228
 8019088:	f7fc fbb0 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 801908c:	1dbb      	adds	r3, r7, #6
 801908e:	4619      	mov	r1, r3
 8019090:	f240 2029 	movw	r0, #553	; 0x229
 8019094:	f7fc fbaa 	bl	80157ec <fm25v02_read>
	bootloader_registers.end_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019098:	79fb      	ldrb	r3, [r7, #7]
 801909a:	021b      	lsls	r3, r3, #8
 801909c:	b21a      	sxth	r2, r3
 801909e:	79bb      	ldrb	r3, [r7, #6]
 80190a0:	b21b      	sxth	r3, r3
 80190a2:	4313      	orrs	r3, r2
 80190a4:	b21b      	sxth	r3, r3
 80190a6:	b29a      	uxth	r2, r3
 80190a8:	4b9a      	ldr	r3, [pc, #616]	; (8019314 <read_bootloader_registers+0x5f8>)
 80190aa:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 80190ac:	1dfb      	adds	r3, r7, #7
 80190ae:	4619      	mov	r1, r3
 80190b0:	f240 202a 	movw	r0, #554	; 0x22a
 80190b4:	f7fc fb9a 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 80190b8:	1dbb      	adds	r3, r7, #6
 80190ba:	4619      	mov	r1, r3
 80190bc:	f240 202b 	movw	r0, #555	; 0x22b
 80190c0:	f7fc fb94 	bl	80157ec <fm25v02_read>
	bootloader_registers.end_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 80190c4:	79fb      	ldrb	r3, [r7, #7]
 80190c6:	021b      	lsls	r3, r3, #8
 80190c8:	b21a      	sxth	r2, r3
 80190ca:	79bb      	ldrb	r3, [r7, #6]
 80190cc:	b21b      	sxth	r3, r3
 80190ce:	4313      	orrs	r3, r2
 80190d0:	b21b      	sxth	r3, r3
 80190d2:	b29a      	uxth	r2, r3
 80190d4:	4b8f      	ldr	r3, [pc, #572]	; (8019314 <read_bootloader_registers+0x5f8>)
 80190d6:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 80190d8:	1dfb      	adds	r3, r7, #7
 80190da:	4619      	mov	r1, r3
 80190dc:	f44f 700b 	mov.w	r0, #556	; 0x22c
 80190e0:	f7fc fb84 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 80190e4:	1dbb      	adds	r3, r7, #6
 80190e6:	4619      	mov	r1, r3
 80190e8:	f240 202d 	movw	r0, #557	; 0x22d
 80190ec:	f7fc fb7e 	bl	80157ec <fm25v02_read>
	bootloader_registers.address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 80190f0:	79fb      	ldrb	r3, [r7, #7]
 80190f2:	021b      	lsls	r3, r3, #8
 80190f4:	b21a      	sxth	r2, r3
 80190f6:	79bb      	ldrb	r3, [r7, #6]
 80190f8:	b21b      	sxth	r3, r3
 80190fa:	4313      	orrs	r3, r2
 80190fc:	b21b      	sxth	r3, r3
 80190fe:	b29a      	uxth	r2, r3
 8019100:	4b84      	ldr	r3, [pc, #528]	; (8019314 <read_bootloader_registers+0x5f8>)
 8019102:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 8019104:	1dfb      	adds	r3, r7, #7
 8019106:	4619      	mov	r1, r3
 8019108:	f240 202e 	movw	r0, #558	; 0x22e
 801910c:	f7fc fb6e 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 8019110:	1dbb      	adds	r3, r7, #6
 8019112:	4619      	mov	r1, r3
 8019114:	f240 202f 	movw	r0, #559	; 0x22f
 8019118:	f7fc fb68 	bl	80157ec <fm25v02_read>
	bootloader_registers.address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 801911c:	79fb      	ldrb	r3, [r7, #7]
 801911e:	021b      	lsls	r3, r3, #8
 8019120:	b21a      	sxth	r2, r3
 8019122:	79bb      	ldrb	r3, [r7, #6]
 8019124:	b21b      	sxth	r3, r3
 8019126:	4313      	orrs	r3, r2
 8019128:	b21b      	sxth	r3, r3
 801912a:	b29a      	uxth	r2, r3
 801912c:	4b79      	ldr	r3, [pc, #484]	; (8019314 <read_bootloader_registers+0x5f8>)
 801912e:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &status_reg_temp_h);
 8019130:	1dfb      	adds	r3, r7, #7
 8019132:	4619      	mov	r1, r3
 8019134:	f240 203e 	movw	r0, #574	; 0x23e
 8019138:	f7fc fb58 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &status_reg_temp_l);
 801913c:	1dbb      	adds	r3, r7, #6
 801913e:	4619      	mov	r1, r3
 8019140:	f240 203f 	movw	r0, #575	; 0x23f
 8019144:	f7fc fb52 	bl	80157ec <fm25v02_read>
	bootloader_registers.clear_page_number_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019148:	79fb      	ldrb	r3, [r7, #7]
 801914a:	021b      	lsls	r3, r3, #8
 801914c:	b21a      	sxth	r2, r3
 801914e:	79bb      	ldrb	r3, [r7, #6]
 8019150:	b21b      	sxth	r3, r3
 8019152:	4313      	orrs	r3, r2
 8019154:	b21b      	sxth	r3, r3
 8019156:	b29a      	uxth	r2, r3
 8019158:	4b6e      	ldr	r3, [pc, #440]	; (8019314 <read_bootloader_registers+0x5f8>)
 801915a:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &status_reg_temp_h);
 801915c:	1dfb      	adds	r3, r7, #7
 801915e:	4619      	mov	r1, r3
 8019160:	f44f 7010 	mov.w	r0, #576	; 0x240
 8019164:	f7fc fb42 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &status_reg_temp_l);
 8019168:	1dbb      	adds	r3, r7, #6
 801916a:	4619      	mov	r1, r3
 801916c:	f240 2041 	movw	r0, #577	; 0x241
 8019170:	f7fc fb3c 	bl	80157ec <fm25v02_read>
	bootloader_registers.clear_page_on_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019174:	79fb      	ldrb	r3, [r7, #7]
 8019176:	021b      	lsls	r3, r3, #8
 8019178:	b21a      	sxth	r2, r3
 801917a:	79bb      	ldrb	r3, [r7, #6]
 801917c:	b21b      	sxth	r3, r3
 801917e:	4313      	orrs	r3, r2
 8019180:	b21b      	sxth	r3, r3
 8019182:	b29a      	uxth	r2, r3
 8019184:	4b63      	ldr	r3, [pc, #396]	; (8019314 <read_bootloader_registers+0x5f8>)
 8019186:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &status_reg_temp_h);
 8019188:	1dfb      	adds	r3, r7, #7
 801918a:	4619      	mov	r1, r3
 801918c:	f240 2042 	movw	r0, #578	; 0x242
 8019190:	f7fc fb2c 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &status_reg_temp_l);
 8019194:	1dbb      	adds	r3, r7, #6
 8019196:	4619      	mov	r1, r3
 8019198:	f240 2043 	movw	r0, #579	; 0x243
 801919c:	f7fc fb26 	bl	80157ec <fm25v02_read>
	bootloader_registers.write_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 80191a0:	79fb      	ldrb	r3, [r7, #7]
 80191a2:	021b      	lsls	r3, r3, #8
 80191a4:	b21a      	sxth	r2, r3
 80191a6:	79bb      	ldrb	r3, [r7, #6]
 80191a8:	b21b      	sxth	r3, r3
 80191aa:	4313      	orrs	r3, r2
 80191ac:	b21b      	sxth	r3, r3
 80191ae:	b29a      	uxth	r2, r3
 80191b0:	4b58      	ldr	r3, [pc, #352]	; (8019314 <read_bootloader_registers+0x5f8>)
 80191b2:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &status_reg_temp_h);
 80191b4:	1dfb      	adds	r3, r7, #7
 80191b6:	4619      	mov	r1, r3
 80191b8:	f44f 7011 	mov.w	r0, #580	; 0x244
 80191bc:	f7fc fb16 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &status_reg_temp_l);
 80191c0:	1dbb      	adds	r3, r7, #6
 80191c2:	4619      	mov	r1, r3
 80191c4:	f240 2045 	movw	r0, #581	; 0x245
 80191c8:	f7fc fb10 	bl	80157ec <fm25v02_read>
	bootloader_registers.read_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 80191cc:	79fb      	ldrb	r3, [r7, #7]
 80191ce:	021b      	lsls	r3, r3, #8
 80191d0:	b21a      	sxth	r2, r3
 80191d2:	79bb      	ldrb	r3, [r7, #6]
 80191d4:	b21b      	sxth	r3, r3
 80191d6:	4313      	orrs	r3, r2
 80191d8:	b21b      	sxth	r3, r3
 80191da:	b29a      	uxth	r2, r3
 80191dc:	4b4d      	ldr	r3, [pc, #308]	; (8019314 <read_bootloader_registers+0x5f8>)
 80191de:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &status_reg_temp_h);
 80191e0:	1dfb      	adds	r3, r7, #7
 80191e2:	4619      	mov	r1, r3
 80191e4:	f240 2046 	movw	r0, #582	; 0x246
 80191e8:	f7fc fb00 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &status_reg_temp_l);
 80191ec:	1dbb      	adds	r3, r7, #6
 80191ee:	4619      	mov	r1, r3
 80191f0:	f240 2047 	movw	r0, #583	; 0x247
 80191f4:	f7fc fafa 	bl	80157ec <fm25v02_read>
	bootloader_registers.address_to_write_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 80191f8:	79fb      	ldrb	r3, [r7, #7]
 80191fa:	021b      	lsls	r3, r3, #8
 80191fc:	b21a      	sxth	r2, r3
 80191fe:	79bb      	ldrb	r3, [r7, #6]
 8019200:	b21b      	sxth	r3, r3
 8019202:	4313      	orrs	r3, r2
 8019204:	b21b      	sxth	r3, r3
 8019206:	b29a      	uxth	r2, r3
 8019208:	4b42      	ldr	r3, [pc, #264]	; (8019314 <read_bootloader_registers+0x5f8>)
 801920a:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &status_reg_temp_h);
 801920c:	1dfb      	adds	r3, r7, #7
 801920e:	4619      	mov	r1, r3
 8019210:	f44f 7012 	mov.w	r0, #584	; 0x248
 8019214:	f7fc faea 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &status_reg_temp_l);
 8019218:	1dbb      	adds	r3, r7, #6
 801921a:	4619      	mov	r1, r3
 801921c:	f240 2049 	movw	r0, #585	; 0x249
 8019220:	f7fc fae4 	bl	80157ec <fm25v02_read>
	bootloader_registers.address_to_write_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019224:	79fb      	ldrb	r3, [r7, #7]
 8019226:	021b      	lsls	r3, r3, #8
 8019228:	b21a      	sxth	r2, r3
 801922a:	79bb      	ldrb	r3, [r7, #6]
 801922c:	b21b      	sxth	r3, r3
 801922e:	4313      	orrs	r3, r2
 8019230:	b21b      	sxth	r3, r3
 8019232:	b29a      	uxth	r2, r3
 8019234:	4b37      	ldr	r3, [pc, #220]	; (8019314 <read_bootloader_registers+0x5f8>)
 8019236:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*BYTE_QUANTITY_REG, &status_reg_temp_h);
 8019238:	1dfb      	adds	r3, r7, #7
 801923a:	4619      	mov	r1, r3
 801923c:	f240 204a 	movw	r0, #586	; 0x24a
 8019240:	f7fc fad4 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*BYTE_QUANTITY_REG+1, &status_reg_temp_l);
 8019244:	1dbb      	adds	r3, r7, #6
 8019246:	4619      	mov	r1, r3
 8019248:	f240 204b 	movw	r0, #587	; 0x24b
 801924c:	f7fc face 	bl	80157ec <fm25v02_read>
	bootloader_registers.byte_quantity_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019250:	79fb      	ldrb	r3, [r7, #7]
 8019252:	021b      	lsls	r3, r3, #8
 8019254:	b21a      	sxth	r2, r3
 8019256:	79bb      	ldrb	r3, [r7, #6]
 8019258:	b21b      	sxth	r3, r3
 801925a:	4313      	orrs	r3, r2
 801925c:	b21b      	sxth	r3, r3
 801925e:	b29a      	uxth	r2, r3
 8019260:	4b2c      	ldr	r3, [pc, #176]	; (8019314 <read_bootloader_registers+0x5f8>)
 8019262:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*PACKET_CRC_HIGH_REG, &status_reg_temp_h);
 8019264:	1dfb      	adds	r3, r7, #7
 8019266:	4619      	mov	r1, r3
 8019268:	f44f 7013 	mov.w	r0, #588	; 0x24c
 801926c:	f7fc fabe 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &status_reg_temp_l);
 8019270:	1dbb      	adds	r3, r7, #6
 8019272:	4619      	mov	r1, r3
 8019274:	f240 204d 	movw	r0, #589	; 0x24d
 8019278:	f7fc fab8 	bl	80157ec <fm25v02_read>
	bootloader_registers.packet_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 801927c:	79fb      	ldrb	r3, [r7, #7]
 801927e:	021b      	lsls	r3, r3, #8
 8019280:	b21a      	sxth	r2, r3
 8019282:	79bb      	ldrb	r3, [r7, #6]
 8019284:	b21b      	sxth	r3, r3
 8019286:	4313      	orrs	r3, r2
 8019288:	b21b      	sxth	r3, r3
 801928a:	b29a      	uxth	r2, r3
 801928c:	4b21      	ldr	r3, [pc, #132]	; (8019314 <read_bootloader_registers+0x5f8>)
 801928e:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*PACKET_CRC_LOW_REG, &status_reg_temp_h);
 8019290:	1dfb      	adds	r3, r7, #7
 8019292:	4619      	mov	r1, r3
 8019294:	f240 204e 	movw	r0, #590	; 0x24e
 8019298:	f7fc faa8 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_LOW_REG+1, &status_reg_temp_l);
 801929c:	1dbb      	adds	r3, r7, #6
 801929e:	4619      	mov	r1, r3
 80192a0:	f240 204f 	movw	r0, #591	; 0x24f
 80192a4:	f7fc faa2 	bl	80157ec <fm25v02_read>
	bootloader_registers.packet_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 80192a8:	79fb      	ldrb	r3, [r7, #7]
 80192aa:	021b      	lsls	r3, r3, #8
 80192ac:	b21a      	sxth	r2, r3
 80192ae:	79bb      	ldrb	r3, [r7, #6]
 80192b0:	b21b      	sxth	r3, r3
 80192b2:	4313      	orrs	r3, r2
 80192b4:	b21b      	sxth	r3, r3
 80192b6:	b29a      	uxth	r2, r3
 80192b8:	4b16      	ldr	r3, [pc, #88]	; (8019314 <read_bootloader_registers+0x5f8>)
 80192ba:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*PACKET_DATA_0_REG, &status_reg_temp_h);
 80192bc:	1dfb      	adds	r3, r7, #7
 80192be:	4619      	mov	r1, r3
 80192c0:	f44f 7014 	mov.w	r0, #592	; 0x250
 80192c4:	f7fc fa92 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_0_REG+1, &status_reg_temp_l);
 80192c8:	1dbb      	adds	r3, r7, #6
 80192ca:	4619      	mov	r1, r3
 80192cc:	f240 2051 	movw	r0, #593	; 0x251
 80192d0:	f7fc fa8c 	bl	80157ec <fm25v02_read>
	bootloader_registers.packet_data_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 80192d4:	79fb      	ldrb	r3, [r7, #7]
 80192d6:	021b      	lsls	r3, r3, #8
 80192d8:	b21a      	sxth	r2, r3
 80192da:	79bb      	ldrb	r3, [r7, #6]
 80192dc:	b21b      	sxth	r3, r3
 80192de:	4313      	orrs	r3, r2
 80192e0:	b21b      	sxth	r3, r3
 80192e2:	b29a      	uxth	r2, r3
 80192e4:	4b0b      	ldr	r3, [pc, #44]	; (8019314 <read_bootloader_registers+0x5f8>)
 80192e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*PACKET_DATA_1_REG, &status_reg_temp_h);
 80192ea:	1dfb      	adds	r3, r7, #7
 80192ec:	4619      	mov	r1, r3
 80192ee:	f240 2052 	movw	r0, #594	; 0x252
 80192f2:	f7fc fa7b 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_1_REG+1, &status_reg_temp_l);
 80192f6:	1dbb      	adds	r3, r7, #6
 80192f8:	4619      	mov	r1, r3
 80192fa:	f240 2053 	movw	r0, #595	; 0x253
 80192fe:	f7fc fa75 	bl	80157ec <fm25v02_read>
	bootloader_registers.packet_data_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019302:	79fb      	ldrb	r3, [r7, #7]
 8019304:	021b      	lsls	r3, r3, #8
 8019306:	b21a      	sxth	r2, r3
 8019308:	79bb      	ldrb	r3, [r7, #6]
 801930a:	b21b      	sxth	r3, r3
 801930c:	4313      	orrs	r3, r2
 801930e:	b21b      	sxth	r3, r3
 8019310:	e002      	b.n	8019318 <read_bootloader_registers+0x5fc>
 8019312:	bf00      	nop
 8019314:	2000a0c0 	.word	0x2000a0c0
 8019318:	b29a      	uxth	r2, r3
 801931a:	4b28      	ldr	r3, [pc, #160]	; (80193bc <read_bootloader_registers+0x6a0>)
 801931c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PACKET_DATA_2_REG, &status_reg_temp_h);
 8019320:	1dfb      	adds	r3, r7, #7
 8019322:	4619      	mov	r1, r3
 8019324:	f44f 7015 	mov.w	r0, #596	; 0x254
 8019328:	f7fc fa60 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_2_REG+1, &status_reg_temp_l);
 801932c:	1dbb      	adds	r3, r7, #6
 801932e:	4619      	mov	r1, r3
 8019330:	f240 2055 	movw	r0, #597	; 0x255
 8019334:	f7fc fa5a 	bl	80157ec <fm25v02_read>
	bootloader_registers.packet_data_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019338:	79fb      	ldrb	r3, [r7, #7]
 801933a:	021b      	lsls	r3, r3, #8
 801933c:	b21a      	sxth	r2, r3
 801933e:	79bb      	ldrb	r3, [r7, #6]
 8019340:	b21b      	sxth	r3, r3
 8019342:	4313      	orrs	r3, r2
 8019344:	b21b      	sxth	r3, r3
 8019346:	b29a      	uxth	r2, r3
 8019348:	4b1c      	ldr	r3, [pc, #112]	; (80193bc <read_bootloader_registers+0x6a0>)
 801934a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PACKET_DATA_3_REG, &status_reg_temp_h);
 801934e:	1dfb      	adds	r3, r7, #7
 8019350:	4619      	mov	r1, r3
 8019352:	f240 2056 	movw	r0, #598	; 0x256
 8019356:	f7fc fa49 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_3_REG+1, &status_reg_temp_l);
 801935a:	1dbb      	adds	r3, r7, #6
 801935c:	4619      	mov	r1, r3
 801935e:	f240 2057 	movw	r0, #599	; 0x257
 8019362:	f7fc fa43 	bl	80157ec <fm25v02_read>
	bootloader_registers.packet_data_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019366:	79fb      	ldrb	r3, [r7, #7]
 8019368:	021b      	lsls	r3, r3, #8
 801936a:	b21a      	sxth	r2, r3
 801936c:	79bb      	ldrb	r3, [r7, #6]
 801936e:	b21b      	sxth	r3, r3
 8019370:	4313      	orrs	r3, r2
 8019372:	b21b      	sxth	r3, r3
 8019374:	b29a      	uxth	r2, r3
 8019376:	4b11      	ldr	r3, [pc, #68]	; (80193bc <read_bootloader_registers+0x6a0>)
 8019378:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*PACKET_DATA_4_REG, &status_reg_temp_h);
 801937c:	1dfb      	adds	r3, r7, #7
 801937e:	4619      	mov	r1, r3
 8019380:	f44f 7016 	mov.w	r0, #600	; 0x258
 8019384:	f7fc fa32 	bl	80157ec <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_4_REG+1, &status_reg_temp_l);
 8019388:	1dbb      	adds	r3, r7, #6
 801938a:	4619      	mov	r1, r3
 801938c:	f240 2059 	movw	r0, #601	; 0x259
 8019390:	f7fc fa2c 	bl	80157ec <fm25v02_read>
	bootloader_registers.packet_data_4_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 8019394:	79fb      	ldrb	r3, [r7, #7]
 8019396:	021b      	lsls	r3, r3, #8
 8019398:	b21a      	sxth	r2, r3
 801939a:	79bb      	ldrb	r3, [r7, #6]
 801939c:	b21b      	sxth	r3, r3
 801939e:	4313      	orrs	r3, r2
 80193a0:	b21b      	sxth	r3, r3
 80193a2:	b29a      	uxth	r2, r3
 80193a4:	4b05      	ldr	r3, [pc, #20]	; (80193bc <read_bootloader_registers+0x6a0>)
 80193a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	osMutexRelease(Fm25v02MutexHandle);
 80193aa:	4b05      	ldr	r3, [pc, #20]	; (80193c0 <read_bootloader_registers+0x6a4>)
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	4618      	mov	r0, r3
 80193b0:	f7ed fd10 	bl	8006dd4 <osMutexRelease>

}
 80193b4:	bf00      	nop
 80193b6:	3708      	adds	r7, #8
 80193b8:	46bd      	mov	sp, r7
 80193ba:	bd80      	pop	{r7, pc}
 80193bc:	2000a0c0 	.word	0x2000a0c0
 80193c0:	20009a6c 	.word	0x20009a6c

080193c4 <CRC16>:



//--------------------- Процедура расчета CRC16 -------------------------------------

 unsigned int CRC16( unsigned char * pucFrame, unsigned int usLen ){
 80193c4:	b480      	push	{r7}
 80193c6:	b085      	sub	sp, #20
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
 80193cc:	6039      	str	r1, [r7, #0]
  unsigned char MB_Slave_ucCRCHi = 0xFF;
 80193ce:	23ff      	movs	r3, #255	; 0xff
 80193d0:	73fb      	strb	r3, [r7, #15]
  unsigned char MB_Slave_ucCRCLo = 0xFF;
 80193d2:	23ff      	movs	r3, #255	; 0xff
 80193d4:	73bb      	strb	r3, [r7, #14]
  int iIndex;
  //
  while( usLen-- ){
 80193d6:	e013      	b.n	8019400 <CRC16+0x3c>
    iIndex = MB_Slave_ucCRCLo ^ *( pucFrame++ );
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	1c5a      	adds	r2, r3, #1
 80193dc:	607a      	str	r2, [r7, #4]
 80193de:	781a      	ldrb	r2, [r3, #0]
 80193e0:	7bbb      	ldrb	r3, [r7, #14]
 80193e2:	4053      	eors	r3, r2
 80193e4:	b2db      	uxtb	r3, r3
 80193e6:	60bb      	str	r3, [r7, #8]
    MB_Slave_ucCRCLo = MB_Slave_ucCRCHi ^ MB_Slave_aucCRCHi[iIndex];
 80193e8:	4a0d      	ldr	r2, [pc, #52]	; (8019420 <CRC16+0x5c>)
 80193ea:	68bb      	ldr	r3, [r7, #8]
 80193ec:	4413      	add	r3, r2
 80193ee:	781a      	ldrb	r2, [r3, #0]
 80193f0:	7bfb      	ldrb	r3, [r7, #15]
 80193f2:	4053      	eors	r3, r2
 80193f4:	73bb      	strb	r3, [r7, #14]
    MB_Slave_ucCRCHi = MB_Slave_aucCRCLo[iIndex];
 80193f6:	4a0b      	ldr	r2, [pc, #44]	; (8019424 <CRC16+0x60>)
 80193f8:	68bb      	ldr	r3, [r7, #8]
 80193fa:	4413      	add	r3, r2
 80193fc:	781b      	ldrb	r3, [r3, #0]
 80193fe:	73fb      	strb	r3, [r7, #15]
  while( usLen-- ){
 8019400:	683b      	ldr	r3, [r7, #0]
 8019402:	1e5a      	subs	r2, r3, #1
 8019404:	603a      	str	r2, [r7, #0]
 8019406:	2b00      	cmp	r3, #0
 8019408:	d1e6      	bne.n	80193d8 <CRC16+0x14>
  }
  return MB_Slave_ucCRCHi << 8 | MB_Slave_ucCRCLo;
 801940a:	7bfb      	ldrb	r3, [r7, #15]
 801940c:	021a      	lsls	r2, r3, #8
 801940e:	7bbb      	ldrb	r3, [r7, #14]
 8019410:	4313      	orrs	r3, r2
}
 8019412:	4618      	mov	r0, r3
 8019414:	3714      	adds	r7, #20
 8019416:	46bd      	mov	sp, r7
 8019418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941c:	4770      	bx	lr
 801941e:	bf00      	nop
 8019420:	0801aaf8 	.word	0x0801aaf8
 8019424:	0801abf8 	.word	0x0801abf8

08019428 <__errno>:
 8019428:	4b01      	ldr	r3, [pc, #4]	; (8019430 <__errno+0x8>)
 801942a:	6818      	ldr	r0, [r3, #0]
 801942c:	4770      	bx	lr
 801942e:	bf00      	nop
 8019430:	20000070 	.word	0x20000070

08019434 <std>:
 8019434:	2300      	movs	r3, #0
 8019436:	b510      	push	{r4, lr}
 8019438:	4604      	mov	r4, r0
 801943a:	e9c0 3300 	strd	r3, r3, [r0]
 801943e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019442:	6083      	str	r3, [r0, #8]
 8019444:	8181      	strh	r1, [r0, #12]
 8019446:	6643      	str	r3, [r0, #100]	; 0x64
 8019448:	81c2      	strh	r2, [r0, #14]
 801944a:	6183      	str	r3, [r0, #24]
 801944c:	4619      	mov	r1, r3
 801944e:	2208      	movs	r2, #8
 8019450:	305c      	adds	r0, #92	; 0x5c
 8019452:	f000 f91a 	bl	801968a <memset>
 8019456:	4b05      	ldr	r3, [pc, #20]	; (801946c <std+0x38>)
 8019458:	6263      	str	r3, [r4, #36]	; 0x24
 801945a:	4b05      	ldr	r3, [pc, #20]	; (8019470 <std+0x3c>)
 801945c:	62a3      	str	r3, [r4, #40]	; 0x28
 801945e:	4b05      	ldr	r3, [pc, #20]	; (8019474 <std+0x40>)
 8019460:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019462:	4b05      	ldr	r3, [pc, #20]	; (8019478 <std+0x44>)
 8019464:	6224      	str	r4, [r4, #32]
 8019466:	6323      	str	r3, [r4, #48]	; 0x30
 8019468:	bd10      	pop	{r4, pc}
 801946a:	bf00      	nop
 801946c:	08019971 	.word	0x08019971
 8019470:	08019993 	.word	0x08019993
 8019474:	080199cb 	.word	0x080199cb
 8019478:	080199ef 	.word	0x080199ef

0801947c <_cleanup_r>:
 801947c:	4901      	ldr	r1, [pc, #4]	; (8019484 <_cleanup_r+0x8>)
 801947e:	f000 b8af 	b.w	80195e0 <_fwalk_reent>
 8019482:	bf00      	nop
 8019484:	08019cf5 	.word	0x08019cf5

08019488 <__sfmoreglue>:
 8019488:	b570      	push	{r4, r5, r6, lr}
 801948a:	1e4a      	subs	r2, r1, #1
 801948c:	2568      	movs	r5, #104	; 0x68
 801948e:	4355      	muls	r5, r2
 8019490:	460e      	mov	r6, r1
 8019492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019496:	f000 f901 	bl	801969c <_malloc_r>
 801949a:	4604      	mov	r4, r0
 801949c:	b140      	cbz	r0, 80194b0 <__sfmoreglue+0x28>
 801949e:	2100      	movs	r1, #0
 80194a0:	e9c0 1600 	strd	r1, r6, [r0]
 80194a4:	300c      	adds	r0, #12
 80194a6:	60a0      	str	r0, [r4, #8]
 80194a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80194ac:	f000 f8ed 	bl	801968a <memset>
 80194b0:	4620      	mov	r0, r4
 80194b2:	bd70      	pop	{r4, r5, r6, pc}

080194b4 <__sfp_lock_acquire>:
 80194b4:	4801      	ldr	r0, [pc, #4]	; (80194bc <__sfp_lock_acquire+0x8>)
 80194b6:	f000 b8d8 	b.w	801966a <__retarget_lock_acquire_recursive>
 80194ba:	bf00      	nop
 80194bc:	2000a236 	.word	0x2000a236

080194c0 <__sfp_lock_release>:
 80194c0:	4801      	ldr	r0, [pc, #4]	; (80194c8 <__sfp_lock_release+0x8>)
 80194c2:	f000 b8d3 	b.w	801966c <__retarget_lock_release_recursive>
 80194c6:	bf00      	nop
 80194c8:	2000a236 	.word	0x2000a236

080194cc <__sinit_lock_acquire>:
 80194cc:	4801      	ldr	r0, [pc, #4]	; (80194d4 <__sinit_lock_acquire+0x8>)
 80194ce:	f000 b8cc 	b.w	801966a <__retarget_lock_acquire_recursive>
 80194d2:	bf00      	nop
 80194d4:	2000a231 	.word	0x2000a231

080194d8 <__sinit_lock_release>:
 80194d8:	4801      	ldr	r0, [pc, #4]	; (80194e0 <__sinit_lock_release+0x8>)
 80194da:	f000 b8c7 	b.w	801966c <__retarget_lock_release_recursive>
 80194de:	bf00      	nop
 80194e0:	2000a231 	.word	0x2000a231

080194e4 <__sinit>:
 80194e4:	b510      	push	{r4, lr}
 80194e6:	4604      	mov	r4, r0
 80194e8:	f7ff fff0 	bl	80194cc <__sinit_lock_acquire>
 80194ec:	69a3      	ldr	r3, [r4, #24]
 80194ee:	b11b      	cbz	r3, 80194f8 <__sinit+0x14>
 80194f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194f4:	f7ff bff0 	b.w	80194d8 <__sinit_lock_release>
 80194f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80194fc:	6523      	str	r3, [r4, #80]	; 0x50
 80194fe:	4b13      	ldr	r3, [pc, #76]	; (801954c <__sinit+0x68>)
 8019500:	4a13      	ldr	r2, [pc, #76]	; (8019550 <__sinit+0x6c>)
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	62a2      	str	r2, [r4, #40]	; 0x28
 8019506:	42a3      	cmp	r3, r4
 8019508:	bf04      	itt	eq
 801950a:	2301      	moveq	r3, #1
 801950c:	61a3      	streq	r3, [r4, #24]
 801950e:	4620      	mov	r0, r4
 8019510:	f000 f820 	bl	8019554 <__sfp>
 8019514:	6060      	str	r0, [r4, #4]
 8019516:	4620      	mov	r0, r4
 8019518:	f000 f81c 	bl	8019554 <__sfp>
 801951c:	60a0      	str	r0, [r4, #8]
 801951e:	4620      	mov	r0, r4
 8019520:	f000 f818 	bl	8019554 <__sfp>
 8019524:	2200      	movs	r2, #0
 8019526:	60e0      	str	r0, [r4, #12]
 8019528:	2104      	movs	r1, #4
 801952a:	6860      	ldr	r0, [r4, #4]
 801952c:	f7ff ff82 	bl	8019434 <std>
 8019530:	68a0      	ldr	r0, [r4, #8]
 8019532:	2201      	movs	r2, #1
 8019534:	2109      	movs	r1, #9
 8019536:	f7ff ff7d 	bl	8019434 <std>
 801953a:	68e0      	ldr	r0, [r4, #12]
 801953c:	2202      	movs	r2, #2
 801953e:	2112      	movs	r1, #18
 8019540:	f7ff ff78 	bl	8019434 <std>
 8019544:	2301      	movs	r3, #1
 8019546:	61a3      	str	r3, [r4, #24]
 8019548:	e7d2      	b.n	80194f0 <__sinit+0xc>
 801954a:	bf00      	nop
 801954c:	0801ad58 	.word	0x0801ad58
 8019550:	0801947d 	.word	0x0801947d

08019554 <__sfp>:
 8019554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019556:	4607      	mov	r7, r0
 8019558:	f7ff ffac 	bl	80194b4 <__sfp_lock_acquire>
 801955c:	4b1e      	ldr	r3, [pc, #120]	; (80195d8 <__sfp+0x84>)
 801955e:	681e      	ldr	r6, [r3, #0]
 8019560:	69b3      	ldr	r3, [r6, #24]
 8019562:	b913      	cbnz	r3, 801956a <__sfp+0x16>
 8019564:	4630      	mov	r0, r6
 8019566:	f7ff ffbd 	bl	80194e4 <__sinit>
 801956a:	3648      	adds	r6, #72	; 0x48
 801956c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019570:	3b01      	subs	r3, #1
 8019572:	d503      	bpl.n	801957c <__sfp+0x28>
 8019574:	6833      	ldr	r3, [r6, #0]
 8019576:	b30b      	cbz	r3, 80195bc <__sfp+0x68>
 8019578:	6836      	ldr	r6, [r6, #0]
 801957a:	e7f7      	b.n	801956c <__sfp+0x18>
 801957c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019580:	b9d5      	cbnz	r5, 80195b8 <__sfp+0x64>
 8019582:	4b16      	ldr	r3, [pc, #88]	; (80195dc <__sfp+0x88>)
 8019584:	60e3      	str	r3, [r4, #12]
 8019586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801958a:	6665      	str	r5, [r4, #100]	; 0x64
 801958c:	f000 f86c 	bl	8019668 <__retarget_lock_init_recursive>
 8019590:	f7ff ff96 	bl	80194c0 <__sfp_lock_release>
 8019594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801959c:	6025      	str	r5, [r4, #0]
 801959e:	61a5      	str	r5, [r4, #24]
 80195a0:	2208      	movs	r2, #8
 80195a2:	4629      	mov	r1, r5
 80195a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80195a8:	f000 f86f 	bl	801968a <memset>
 80195ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80195b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80195b4:	4620      	mov	r0, r4
 80195b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195b8:	3468      	adds	r4, #104	; 0x68
 80195ba:	e7d9      	b.n	8019570 <__sfp+0x1c>
 80195bc:	2104      	movs	r1, #4
 80195be:	4638      	mov	r0, r7
 80195c0:	f7ff ff62 	bl	8019488 <__sfmoreglue>
 80195c4:	4604      	mov	r4, r0
 80195c6:	6030      	str	r0, [r6, #0]
 80195c8:	2800      	cmp	r0, #0
 80195ca:	d1d5      	bne.n	8019578 <__sfp+0x24>
 80195cc:	f7ff ff78 	bl	80194c0 <__sfp_lock_release>
 80195d0:	230c      	movs	r3, #12
 80195d2:	603b      	str	r3, [r7, #0]
 80195d4:	e7ee      	b.n	80195b4 <__sfp+0x60>
 80195d6:	bf00      	nop
 80195d8:	0801ad58 	.word	0x0801ad58
 80195dc:	ffff0001 	.word	0xffff0001

080195e0 <_fwalk_reent>:
 80195e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195e4:	4606      	mov	r6, r0
 80195e6:	4688      	mov	r8, r1
 80195e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80195ec:	2700      	movs	r7, #0
 80195ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80195f2:	f1b9 0901 	subs.w	r9, r9, #1
 80195f6:	d505      	bpl.n	8019604 <_fwalk_reent+0x24>
 80195f8:	6824      	ldr	r4, [r4, #0]
 80195fa:	2c00      	cmp	r4, #0
 80195fc:	d1f7      	bne.n	80195ee <_fwalk_reent+0xe>
 80195fe:	4638      	mov	r0, r7
 8019600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019604:	89ab      	ldrh	r3, [r5, #12]
 8019606:	2b01      	cmp	r3, #1
 8019608:	d907      	bls.n	801961a <_fwalk_reent+0x3a>
 801960a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801960e:	3301      	adds	r3, #1
 8019610:	d003      	beq.n	801961a <_fwalk_reent+0x3a>
 8019612:	4629      	mov	r1, r5
 8019614:	4630      	mov	r0, r6
 8019616:	47c0      	blx	r8
 8019618:	4307      	orrs	r7, r0
 801961a:	3568      	adds	r5, #104	; 0x68
 801961c:	e7e9      	b.n	80195f2 <_fwalk_reent+0x12>
	...

08019620 <__libc_init_array>:
 8019620:	b570      	push	{r4, r5, r6, lr}
 8019622:	4d0d      	ldr	r5, [pc, #52]	; (8019658 <__libc_init_array+0x38>)
 8019624:	4c0d      	ldr	r4, [pc, #52]	; (801965c <__libc_init_array+0x3c>)
 8019626:	1b64      	subs	r4, r4, r5
 8019628:	10a4      	asrs	r4, r4, #2
 801962a:	2600      	movs	r6, #0
 801962c:	42a6      	cmp	r6, r4
 801962e:	d109      	bne.n	8019644 <__libc_init_array+0x24>
 8019630:	4d0b      	ldr	r5, [pc, #44]	; (8019660 <__libc_init_array+0x40>)
 8019632:	4c0c      	ldr	r4, [pc, #48]	; (8019664 <__libc_init_array+0x44>)
 8019634:	f000 ffd8 	bl	801a5e8 <_init>
 8019638:	1b64      	subs	r4, r4, r5
 801963a:	10a4      	asrs	r4, r4, #2
 801963c:	2600      	movs	r6, #0
 801963e:	42a6      	cmp	r6, r4
 8019640:	d105      	bne.n	801964e <__libc_init_array+0x2e>
 8019642:	bd70      	pop	{r4, r5, r6, pc}
 8019644:	f855 3b04 	ldr.w	r3, [r5], #4
 8019648:	4798      	blx	r3
 801964a:	3601      	adds	r6, #1
 801964c:	e7ee      	b.n	801962c <__libc_init_array+0xc>
 801964e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019652:	4798      	blx	r3
 8019654:	3601      	adds	r6, #1
 8019656:	e7f2      	b.n	801963e <__libc_init_array+0x1e>
 8019658:	0801ad98 	.word	0x0801ad98
 801965c:	0801ad98 	.word	0x0801ad98
 8019660:	0801ad98 	.word	0x0801ad98
 8019664:	0801ad9c 	.word	0x0801ad9c

08019668 <__retarget_lock_init_recursive>:
 8019668:	4770      	bx	lr

0801966a <__retarget_lock_acquire_recursive>:
 801966a:	4770      	bx	lr

0801966c <__retarget_lock_release_recursive>:
 801966c:	4770      	bx	lr

0801966e <memcpy>:
 801966e:	440a      	add	r2, r1
 8019670:	4291      	cmp	r1, r2
 8019672:	f100 33ff 	add.w	r3, r0, #4294967295
 8019676:	d100      	bne.n	801967a <memcpy+0xc>
 8019678:	4770      	bx	lr
 801967a:	b510      	push	{r4, lr}
 801967c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019684:	4291      	cmp	r1, r2
 8019686:	d1f9      	bne.n	801967c <memcpy+0xe>
 8019688:	bd10      	pop	{r4, pc}

0801968a <memset>:
 801968a:	4402      	add	r2, r0
 801968c:	4603      	mov	r3, r0
 801968e:	4293      	cmp	r3, r2
 8019690:	d100      	bne.n	8019694 <memset+0xa>
 8019692:	4770      	bx	lr
 8019694:	f803 1b01 	strb.w	r1, [r3], #1
 8019698:	e7f9      	b.n	801968e <memset+0x4>
	...

0801969c <_malloc_r>:
 801969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801969e:	1ccd      	adds	r5, r1, #3
 80196a0:	f025 0503 	bic.w	r5, r5, #3
 80196a4:	3508      	adds	r5, #8
 80196a6:	2d0c      	cmp	r5, #12
 80196a8:	bf38      	it	cc
 80196aa:	250c      	movcc	r5, #12
 80196ac:	2d00      	cmp	r5, #0
 80196ae:	4606      	mov	r6, r0
 80196b0:	db01      	blt.n	80196b6 <_malloc_r+0x1a>
 80196b2:	42a9      	cmp	r1, r5
 80196b4:	d903      	bls.n	80196be <_malloc_r+0x22>
 80196b6:	230c      	movs	r3, #12
 80196b8:	6033      	str	r3, [r6, #0]
 80196ba:	2000      	movs	r0, #0
 80196bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196be:	f000 fbcb 	bl	8019e58 <__malloc_lock>
 80196c2:	4921      	ldr	r1, [pc, #132]	; (8019748 <_malloc_r+0xac>)
 80196c4:	680a      	ldr	r2, [r1, #0]
 80196c6:	4614      	mov	r4, r2
 80196c8:	b99c      	cbnz	r4, 80196f2 <_malloc_r+0x56>
 80196ca:	4f20      	ldr	r7, [pc, #128]	; (801974c <_malloc_r+0xb0>)
 80196cc:	683b      	ldr	r3, [r7, #0]
 80196ce:	b923      	cbnz	r3, 80196da <_malloc_r+0x3e>
 80196d0:	4621      	mov	r1, r4
 80196d2:	4630      	mov	r0, r6
 80196d4:	f000 f91c 	bl	8019910 <_sbrk_r>
 80196d8:	6038      	str	r0, [r7, #0]
 80196da:	4629      	mov	r1, r5
 80196dc:	4630      	mov	r0, r6
 80196de:	f000 f917 	bl	8019910 <_sbrk_r>
 80196e2:	1c43      	adds	r3, r0, #1
 80196e4:	d123      	bne.n	801972e <_malloc_r+0x92>
 80196e6:	230c      	movs	r3, #12
 80196e8:	6033      	str	r3, [r6, #0]
 80196ea:	4630      	mov	r0, r6
 80196ec:	f000 fbba 	bl	8019e64 <__malloc_unlock>
 80196f0:	e7e3      	b.n	80196ba <_malloc_r+0x1e>
 80196f2:	6823      	ldr	r3, [r4, #0]
 80196f4:	1b5b      	subs	r3, r3, r5
 80196f6:	d417      	bmi.n	8019728 <_malloc_r+0x8c>
 80196f8:	2b0b      	cmp	r3, #11
 80196fa:	d903      	bls.n	8019704 <_malloc_r+0x68>
 80196fc:	6023      	str	r3, [r4, #0]
 80196fe:	441c      	add	r4, r3
 8019700:	6025      	str	r5, [r4, #0]
 8019702:	e004      	b.n	801970e <_malloc_r+0x72>
 8019704:	6863      	ldr	r3, [r4, #4]
 8019706:	42a2      	cmp	r2, r4
 8019708:	bf0c      	ite	eq
 801970a:	600b      	streq	r3, [r1, #0]
 801970c:	6053      	strne	r3, [r2, #4]
 801970e:	4630      	mov	r0, r6
 8019710:	f000 fba8 	bl	8019e64 <__malloc_unlock>
 8019714:	f104 000b 	add.w	r0, r4, #11
 8019718:	1d23      	adds	r3, r4, #4
 801971a:	f020 0007 	bic.w	r0, r0, #7
 801971e:	1ac2      	subs	r2, r0, r3
 8019720:	d0cc      	beq.n	80196bc <_malloc_r+0x20>
 8019722:	1a1b      	subs	r3, r3, r0
 8019724:	50a3      	str	r3, [r4, r2]
 8019726:	e7c9      	b.n	80196bc <_malloc_r+0x20>
 8019728:	4622      	mov	r2, r4
 801972a:	6864      	ldr	r4, [r4, #4]
 801972c:	e7cc      	b.n	80196c8 <_malloc_r+0x2c>
 801972e:	1cc4      	adds	r4, r0, #3
 8019730:	f024 0403 	bic.w	r4, r4, #3
 8019734:	42a0      	cmp	r0, r4
 8019736:	d0e3      	beq.n	8019700 <_malloc_r+0x64>
 8019738:	1a21      	subs	r1, r4, r0
 801973a:	4630      	mov	r0, r6
 801973c:	f000 f8e8 	bl	8019910 <_sbrk_r>
 8019740:	3001      	adds	r0, #1
 8019742:	d1dd      	bne.n	8019700 <_malloc_r+0x64>
 8019744:	e7cf      	b.n	80196e6 <_malloc_r+0x4a>
 8019746:	bf00      	nop
 8019748:	20008008 	.word	0x20008008
 801974c:	2000800c 	.word	0x2000800c

08019750 <_puts_r>:
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	460e      	mov	r6, r1
 8019754:	4605      	mov	r5, r0
 8019756:	b118      	cbz	r0, 8019760 <_puts_r+0x10>
 8019758:	6983      	ldr	r3, [r0, #24]
 801975a:	b90b      	cbnz	r3, 8019760 <_puts_r+0x10>
 801975c:	f7ff fec2 	bl	80194e4 <__sinit>
 8019760:	69ab      	ldr	r3, [r5, #24]
 8019762:	68ac      	ldr	r4, [r5, #8]
 8019764:	b913      	cbnz	r3, 801976c <_puts_r+0x1c>
 8019766:	4628      	mov	r0, r5
 8019768:	f7ff febc 	bl	80194e4 <__sinit>
 801976c:	4b2c      	ldr	r3, [pc, #176]	; (8019820 <_puts_r+0xd0>)
 801976e:	429c      	cmp	r4, r3
 8019770:	d120      	bne.n	80197b4 <_puts_r+0x64>
 8019772:	686c      	ldr	r4, [r5, #4]
 8019774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019776:	07db      	lsls	r3, r3, #31
 8019778:	d405      	bmi.n	8019786 <_puts_r+0x36>
 801977a:	89a3      	ldrh	r3, [r4, #12]
 801977c:	0598      	lsls	r0, r3, #22
 801977e:	d402      	bmi.n	8019786 <_puts_r+0x36>
 8019780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019782:	f7ff ff72 	bl	801966a <__retarget_lock_acquire_recursive>
 8019786:	89a3      	ldrh	r3, [r4, #12]
 8019788:	0719      	lsls	r1, r3, #28
 801978a:	d51d      	bpl.n	80197c8 <_puts_r+0x78>
 801978c:	6923      	ldr	r3, [r4, #16]
 801978e:	b1db      	cbz	r3, 80197c8 <_puts_r+0x78>
 8019790:	3e01      	subs	r6, #1
 8019792:	68a3      	ldr	r3, [r4, #8]
 8019794:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019798:	3b01      	subs	r3, #1
 801979a:	60a3      	str	r3, [r4, #8]
 801979c:	bb39      	cbnz	r1, 80197ee <_puts_r+0x9e>
 801979e:	2b00      	cmp	r3, #0
 80197a0:	da38      	bge.n	8019814 <_puts_r+0xc4>
 80197a2:	4622      	mov	r2, r4
 80197a4:	210a      	movs	r1, #10
 80197a6:	4628      	mov	r0, r5
 80197a8:	f000 f93c 	bl	8019a24 <__swbuf_r>
 80197ac:	3001      	adds	r0, #1
 80197ae:	d011      	beq.n	80197d4 <_puts_r+0x84>
 80197b0:	250a      	movs	r5, #10
 80197b2:	e011      	b.n	80197d8 <_puts_r+0x88>
 80197b4:	4b1b      	ldr	r3, [pc, #108]	; (8019824 <_puts_r+0xd4>)
 80197b6:	429c      	cmp	r4, r3
 80197b8:	d101      	bne.n	80197be <_puts_r+0x6e>
 80197ba:	68ac      	ldr	r4, [r5, #8]
 80197bc:	e7da      	b.n	8019774 <_puts_r+0x24>
 80197be:	4b1a      	ldr	r3, [pc, #104]	; (8019828 <_puts_r+0xd8>)
 80197c0:	429c      	cmp	r4, r3
 80197c2:	bf08      	it	eq
 80197c4:	68ec      	ldreq	r4, [r5, #12]
 80197c6:	e7d5      	b.n	8019774 <_puts_r+0x24>
 80197c8:	4621      	mov	r1, r4
 80197ca:	4628      	mov	r0, r5
 80197cc:	f000 f98e 	bl	8019aec <__swsetup_r>
 80197d0:	2800      	cmp	r0, #0
 80197d2:	d0dd      	beq.n	8019790 <_puts_r+0x40>
 80197d4:	f04f 35ff 	mov.w	r5, #4294967295
 80197d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80197da:	07da      	lsls	r2, r3, #31
 80197dc:	d405      	bmi.n	80197ea <_puts_r+0x9a>
 80197de:	89a3      	ldrh	r3, [r4, #12]
 80197e0:	059b      	lsls	r3, r3, #22
 80197e2:	d402      	bmi.n	80197ea <_puts_r+0x9a>
 80197e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197e6:	f7ff ff41 	bl	801966c <__retarget_lock_release_recursive>
 80197ea:	4628      	mov	r0, r5
 80197ec:	bd70      	pop	{r4, r5, r6, pc}
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	da04      	bge.n	80197fc <_puts_r+0xac>
 80197f2:	69a2      	ldr	r2, [r4, #24]
 80197f4:	429a      	cmp	r2, r3
 80197f6:	dc06      	bgt.n	8019806 <_puts_r+0xb6>
 80197f8:	290a      	cmp	r1, #10
 80197fa:	d004      	beq.n	8019806 <_puts_r+0xb6>
 80197fc:	6823      	ldr	r3, [r4, #0]
 80197fe:	1c5a      	adds	r2, r3, #1
 8019800:	6022      	str	r2, [r4, #0]
 8019802:	7019      	strb	r1, [r3, #0]
 8019804:	e7c5      	b.n	8019792 <_puts_r+0x42>
 8019806:	4622      	mov	r2, r4
 8019808:	4628      	mov	r0, r5
 801980a:	f000 f90b 	bl	8019a24 <__swbuf_r>
 801980e:	3001      	adds	r0, #1
 8019810:	d1bf      	bne.n	8019792 <_puts_r+0x42>
 8019812:	e7df      	b.n	80197d4 <_puts_r+0x84>
 8019814:	6823      	ldr	r3, [r4, #0]
 8019816:	250a      	movs	r5, #10
 8019818:	1c5a      	adds	r2, r3, #1
 801981a:	6022      	str	r2, [r4, #0]
 801981c:	701d      	strb	r5, [r3, #0]
 801981e:	e7db      	b.n	80197d8 <_puts_r+0x88>
 8019820:	0801ad18 	.word	0x0801ad18
 8019824:	0801ad38 	.word	0x0801ad38
 8019828:	0801acf8 	.word	0x0801acf8

0801982c <puts>:
 801982c:	4b02      	ldr	r3, [pc, #8]	; (8019838 <puts+0xc>)
 801982e:	4601      	mov	r1, r0
 8019830:	6818      	ldr	r0, [r3, #0]
 8019832:	f7ff bf8d 	b.w	8019750 <_puts_r>
 8019836:	bf00      	nop
 8019838:	20000070 	.word	0x20000070

0801983c <cleanup_glue>:
 801983c:	b538      	push	{r3, r4, r5, lr}
 801983e:	460c      	mov	r4, r1
 8019840:	6809      	ldr	r1, [r1, #0]
 8019842:	4605      	mov	r5, r0
 8019844:	b109      	cbz	r1, 801984a <cleanup_glue+0xe>
 8019846:	f7ff fff9 	bl	801983c <cleanup_glue>
 801984a:	4621      	mov	r1, r4
 801984c:	4628      	mov	r0, r5
 801984e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019852:	f000 bb0d 	b.w	8019e70 <_free_r>
	...

08019858 <_reclaim_reent>:
 8019858:	4b2c      	ldr	r3, [pc, #176]	; (801990c <_reclaim_reent+0xb4>)
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	4283      	cmp	r3, r0
 801985e:	b570      	push	{r4, r5, r6, lr}
 8019860:	4604      	mov	r4, r0
 8019862:	d051      	beq.n	8019908 <_reclaim_reent+0xb0>
 8019864:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019866:	b143      	cbz	r3, 801987a <_reclaim_reent+0x22>
 8019868:	68db      	ldr	r3, [r3, #12]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d14a      	bne.n	8019904 <_reclaim_reent+0xac>
 801986e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019870:	6819      	ldr	r1, [r3, #0]
 8019872:	b111      	cbz	r1, 801987a <_reclaim_reent+0x22>
 8019874:	4620      	mov	r0, r4
 8019876:	f000 fafb 	bl	8019e70 <_free_r>
 801987a:	6961      	ldr	r1, [r4, #20]
 801987c:	b111      	cbz	r1, 8019884 <_reclaim_reent+0x2c>
 801987e:	4620      	mov	r0, r4
 8019880:	f000 faf6 	bl	8019e70 <_free_r>
 8019884:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019886:	b111      	cbz	r1, 801988e <_reclaim_reent+0x36>
 8019888:	4620      	mov	r0, r4
 801988a:	f000 faf1 	bl	8019e70 <_free_r>
 801988e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019890:	b111      	cbz	r1, 8019898 <_reclaim_reent+0x40>
 8019892:	4620      	mov	r0, r4
 8019894:	f000 faec 	bl	8019e70 <_free_r>
 8019898:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801989a:	b111      	cbz	r1, 80198a2 <_reclaim_reent+0x4a>
 801989c:	4620      	mov	r0, r4
 801989e:	f000 fae7 	bl	8019e70 <_free_r>
 80198a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80198a4:	b111      	cbz	r1, 80198ac <_reclaim_reent+0x54>
 80198a6:	4620      	mov	r0, r4
 80198a8:	f000 fae2 	bl	8019e70 <_free_r>
 80198ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80198ae:	b111      	cbz	r1, 80198b6 <_reclaim_reent+0x5e>
 80198b0:	4620      	mov	r0, r4
 80198b2:	f000 fadd 	bl	8019e70 <_free_r>
 80198b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80198b8:	b111      	cbz	r1, 80198c0 <_reclaim_reent+0x68>
 80198ba:	4620      	mov	r0, r4
 80198bc:	f000 fad8 	bl	8019e70 <_free_r>
 80198c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198c2:	b111      	cbz	r1, 80198ca <_reclaim_reent+0x72>
 80198c4:	4620      	mov	r0, r4
 80198c6:	f000 fad3 	bl	8019e70 <_free_r>
 80198ca:	69a3      	ldr	r3, [r4, #24]
 80198cc:	b1e3      	cbz	r3, 8019908 <_reclaim_reent+0xb0>
 80198ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80198d0:	4620      	mov	r0, r4
 80198d2:	4798      	blx	r3
 80198d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80198d6:	b1b9      	cbz	r1, 8019908 <_reclaim_reent+0xb0>
 80198d8:	4620      	mov	r0, r4
 80198da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198de:	f7ff bfad 	b.w	801983c <cleanup_glue>
 80198e2:	5949      	ldr	r1, [r1, r5]
 80198e4:	b941      	cbnz	r1, 80198f8 <_reclaim_reent+0xa0>
 80198e6:	3504      	adds	r5, #4
 80198e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80198ea:	2d80      	cmp	r5, #128	; 0x80
 80198ec:	68d9      	ldr	r1, [r3, #12]
 80198ee:	d1f8      	bne.n	80198e2 <_reclaim_reent+0x8a>
 80198f0:	4620      	mov	r0, r4
 80198f2:	f000 fabd 	bl	8019e70 <_free_r>
 80198f6:	e7ba      	b.n	801986e <_reclaim_reent+0x16>
 80198f8:	680e      	ldr	r6, [r1, #0]
 80198fa:	4620      	mov	r0, r4
 80198fc:	f000 fab8 	bl	8019e70 <_free_r>
 8019900:	4631      	mov	r1, r6
 8019902:	e7ef      	b.n	80198e4 <_reclaim_reent+0x8c>
 8019904:	2500      	movs	r5, #0
 8019906:	e7ef      	b.n	80198e8 <_reclaim_reent+0x90>
 8019908:	bd70      	pop	{r4, r5, r6, pc}
 801990a:	bf00      	nop
 801990c:	20000070 	.word	0x20000070

08019910 <_sbrk_r>:
 8019910:	b538      	push	{r3, r4, r5, lr}
 8019912:	4d06      	ldr	r5, [pc, #24]	; (801992c <_sbrk_r+0x1c>)
 8019914:	2300      	movs	r3, #0
 8019916:	4604      	mov	r4, r0
 8019918:	4608      	mov	r0, r1
 801991a:	602b      	str	r3, [r5, #0]
 801991c:	f7e8 f93e 	bl	8001b9c <_sbrk>
 8019920:	1c43      	adds	r3, r0, #1
 8019922:	d102      	bne.n	801992a <_sbrk_r+0x1a>
 8019924:	682b      	ldr	r3, [r5, #0]
 8019926:	b103      	cbz	r3, 801992a <_sbrk_r+0x1a>
 8019928:	6023      	str	r3, [r4, #0]
 801992a:	bd38      	pop	{r3, r4, r5, pc}
 801992c:	2000a238 	.word	0x2000a238

08019930 <siprintf>:
 8019930:	b40e      	push	{r1, r2, r3}
 8019932:	b500      	push	{lr}
 8019934:	b09c      	sub	sp, #112	; 0x70
 8019936:	ab1d      	add	r3, sp, #116	; 0x74
 8019938:	9002      	str	r0, [sp, #8]
 801993a:	9006      	str	r0, [sp, #24]
 801993c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019940:	4809      	ldr	r0, [pc, #36]	; (8019968 <siprintf+0x38>)
 8019942:	9107      	str	r1, [sp, #28]
 8019944:	9104      	str	r1, [sp, #16]
 8019946:	4909      	ldr	r1, [pc, #36]	; (801996c <siprintf+0x3c>)
 8019948:	f853 2b04 	ldr.w	r2, [r3], #4
 801994c:	9105      	str	r1, [sp, #20]
 801994e:	6800      	ldr	r0, [r0, #0]
 8019950:	9301      	str	r3, [sp, #4]
 8019952:	a902      	add	r1, sp, #8
 8019954:	f000 fb38 	bl	8019fc8 <_svfiprintf_r>
 8019958:	9b02      	ldr	r3, [sp, #8]
 801995a:	2200      	movs	r2, #0
 801995c:	701a      	strb	r2, [r3, #0]
 801995e:	b01c      	add	sp, #112	; 0x70
 8019960:	f85d eb04 	ldr.w	lr, [sp], #4
 8019964:	b003      	add	sp, #12
 8019966:	4770      	bx	lr
 8019968:	20000070 	.word	0x20000070
 801996c:	ffff0208 	.word	0xffff0208

08019970 <__sread>:
 8019970:	b510      	push	{r4, lr}
 8019972:	460c      	mov	r4, r1
 8019974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019978:	f000 fdba 	bl	801a4f0 <_read_r>
 801997c:	2800      	cmp	r0, #0
 801997e:	bfab      	itete	ge
 8019980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019982:	89a3      	ldrhlt	r3, [r4, #12]
 8019984:	181b      	addge	r3, r3, r0
 8019986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801998a:	bfac      	ite	ge
 801998c:	6563      	strge	r3, [r4, #84]	; 0x54
 801998e:	81a3      	strhlt	r3, [r4, #12]
 8019990:	bd10      	pop	{r4, pc}

08019992 <__swrite>:
 8019992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019996:	461f      	mov	r7, r3
 8019998:	898b      	ldrh	r3, [r1, #12]
 801999a:	05db      	lsls	r3, r3, #23
 801999c:	4605      	mov	r5, r0
 801999e:	460c      	mov	r4, r1
 80199a0:	4616      	mov	r6, r2
 80199a2:	d505      	bpl.n	80199b0 <__swrite+0x1e>
 80199a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199a8:	2302      	movs	r3, #2
 80199aa:	2200      	movs	r2, #0
 80199ac:	f000 f9de 	bl	8019d6c <_lseek_r>
 80199b0:	89a3      	ldrh	r3, [r4, #12]
 80199b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80199b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80199ba:	81a3      	strh	r3, [r4, #12]
 80199bc:	4632      	mov	r2, r6
 80199be:	463b      	mov	r3, r7
 80199c0:	4628      	mov	r0, r5
 80199c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199c6:	f000 b87f 	b.w	8019ac8 <_write_r>

080199ca <__sseek>:
 80199ca:	b510      	push	{r4, lr}
 80199cc:	460c      	mov	r4, r1
 80199ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199d2:	f000 f9cb 	bl	8019d6c <_lseek_r>
 80199d6:	1c43      	adds	r3, r0, #1
 80199d8:	89a3      	ldrh	r3, [r4, #12]
 80199da:	bf15      	itete	ne
 80199dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80199de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80199e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80199e6:	81a3      	strheq	r3, [r4, #12]
 80199e8:	bf18      	it	ne
 80199ea:	81a3      	strhne	r3, [r4, #12]
 80199ec:	bd10      	pop	{r4, pc}

080199ee <__sclose>:
 80199ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199f2:	f000 b8e9 	b.w	8019bc8 <_close_r>

080199f6 <strstr>:
 80199f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199f8:	780c      	ldrb	r4, [r1, #0]
 80199fa:	b164      	cbz	r4, 8019a16 <strstr+0x20>
 80199fc:	4603      	mov	r3, r0
 80199fe:	781a      	ldrb	r2, [r3, #0]
 8019a00:	4618      	mov	r0, r3
 8019a02:	1c5e      	adds	r6, r3, #1
 8019a04:	b90a      	cbnz	r2, 8019a0a <strstr+0x14>
 8019a06:	4610      	mov	r0, r2
 8019a08:	e005      	b.n	8019a16 <strstr+0x20>
 8019a0a:	4294      	cmp	r4, r2
 8019a0c:	d108      	bne.n	8019a20 <strstr+0x2a>
 8019a0e:	460d      	mov	r5, r1
 8019a10:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8019a14:	b902      	cbnz	r2, 8019a18 <strstr+0x22>
 8019a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a18:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8019a1c:	4297      	cmp	r7, r2
 8019a1e:	d0f7      	beq.n	8019a10 <strstr+0x1a>
 8019a20:	4633      	mov	r3, r6
 8019a22:	e7ec      	b.n	80199fe <strstr+0x8>

08019a24 <__swbuf_r>:
 8019a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a26:	460e      	mov	r6, r1
 8019a28:	4614      	mov	r4, r2
 8019a2a:	4605      	mov	r5, r0
 8019a2c:	b118      	cbz	r0, 8019a36 <__swbuf_r+0x12>
 8019a2e:	6983      	ldr	r3, [r0, #24]
 8019a30:	b90b      	cbnz	r3, 8019a36 <__swbuf_r+0x12>
 8019a32:	f7ff fd57 	bl	80194e4 <__sinit>
 8019a36:	4b21      	ldr	r3, [pc, #132]	; (8019abc <__swbuf_r+0x98>)
 8019a38:	429c      	cmp	r4, r3
 8019a3a:	d12b      	bne.n	8019a94 <__swbuf_r+0x70>
 8019a3c:	686c      	ldr	r4, [r5, #4]
 8019a3e:	69a3      	ldr	r3, [r4, #24]
 8019a40:	60a3      	str	r3, [r4, #8]
 8019a42:	89a3      	ldrh	r3, [r4, #12]
 8019a44:	071a      	lsls	r2, r3, #28
 8019a46:	d52f      	bpl.n	8019aa8 <__swbuf_r+0x84>
 8019a48:	6923      	ldr	r3, [r4, #16]
 8019a4a:	b36b      	cbz	r3, 8019aa8 <__swbuf_r+0x84>
 8019a4c:	6923      	ldr	r3, [r4, #16]
 8019a4e:	6820      	ldr	r0, [r4, #0]
 8019a50:	1ac0      	subs	r0, r0, r3
 8019a52:	6963      	ldr	r3, [r4, #20]
 8019a54:	b2f6      	uxtb	r6, r6
 8019a56:	4283      	cmp	r3, r0
 8019a58:	4637      	mov	r7, r6
 8019a5a:	dc04      	bgt.n	8019a66 <__swbuf_r+0x42>
 8019a5c:	4621      	mov	r1, r4
 8019a5e:	4628      	mov	r0, r5
 8019a60:	f000 f948 	bl	8019cf4 <_fflush_r>
 8019a64:	bb30      	cbnz	r0, 8019ab4 <__swbuf_r+0x90>
 8019a66:	68a3      	ldr	r3, [r4, #8]
 8019a68:	3b01      	subs	r3, #1
 8019a6a:	60a3      	str	r3, [r4, #8]
 8019a6c:	6823      	ldr	r3, [r4, #0]
 8019a6e:	1c5a      	adds	r2, r3, #1
 8019a70:	6022      	str	r2, [r4, #0]
 8019a72:	701e      	strb	r6, [r3, #0]
 8019a74:	6963      	ldr	r3, [r4, #20]
 8019a76:	3001      	adds	r0, #1
 8019a78:	4283      	cmp	r3, r0
 8019a7a:	d004      	beq.n	8019a86 <__swbuf_r+0x62>
 8019a7c:	89a3      	ldrh	r3, [r4, #12]
 8019a7e:	07db      	lsls	r3, r3, #31
 8019a80:	d506      	bpl.n	8019a90 <__swbuf_r+0x6c>
 8019a82:	2e0a      	cmp	r6, #10
 8019a84:	d104      	bne.n	8019a90 <__swbuf_r+0x6c>
 8019a86:	4621      	mov	r1, r4
 8019a88:	4628      	mov	r0, r5
 8019a8a:	f000 f933 	bl	8019cf4 <_fflush_r>
 8019a8e:	b988      	cbnz	r0, 8019ab4 <__swbuf_r+0x90>
 8019a90:	4638      	mov	r0, r7
 8019a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a94:	4b0a      	ldr	r3, [pc, #40]	; (8019ac0 <__swbuf_r+0x9c>)
 8019a96:	429c      	cmp	r4, r3
 8019a98:	d101      	bne.n	8019a9e <__swbuf_r+0x7a>
 8019a9a:	68ac      	ldr	r4, [r5, #8]
 8019a9c:	e7cf      	b.n	8019a3e <__swbuf_r+0x1a>
 8019a9e:	4b09      	ldr	r3, [pc, #36]	; (8019ac4 <__swbuf_r+0xa0>)
 8019aa0:	429c      	cmp	r4, r3
 8019aa2:	bf08      	it	eq
 8019aa4:	68ec      	ldreq	r4, [r5, #12]
 8019aa6:	e7ca      	b.n	8019a3e <__swbuf_r+0x1a>
 8019aa8:	4621      	mov	r1, r4
 8019aaa:	4628      	mov	r0, r5
 8019aac:	f000 f81e 	bl	8019aec <__swsetup_r>
 8019ab0:	2800      	cmp	r0, #0
 8019ab2:	d0cb      	beq.n	8019a4c <__swbuf_r+0x28>
 8019ab4:	f04f 37ff 	mov.w	r7, #4294967295
 8019ab8:	e7ea      	b.n	8019a90 <__swbuf_r+0x6c>
 8019aba:	bf00      	nop
 8019abc:	0801ad18 	.word	0x0801ad18
 8019ac0:	0801ad38 	.word	0x0801ad38
 8019ac4:	0801acf8 	.word	0x0801acf8

08019ac8 <_write_r>:
 8019ac8:	b538      	push	{r3, r4, r5, lr}
 8019aca:	4d07      	ldr	r5, [pc, #28]	; (8019ae8 <_write_r+0x20>)
 8019acc:	4604      	mov	r4, r0
 8019ace:	4608      	mov	r0, r1
 8019ad0:	4611      	mov	r1, r2
 8019ad2:	2200      	movs	r2, #0
 8019ad4:	602a      	str	r2, [r5, #0]
 8019ad6:	461a      	mov	r2, r3
 8019ad8:	f7e8 f80f 	bl	8001afa <_write>
 8019adc:	1c43      	adds	r3, r0, #1
 8019ade:	d102      	bne.n	8019ae6 <_write_r+0x1e>
 8019ae0:	682b      	ldr	r3, [r5, #0]
 8019ae2:	b103      	cbz	r3, 8019ae6 <_write_r+0x1e>
 8019ae4:	6023      	str	r3, [r4, #0]
 8019ae6:	bd38      	pop	{r3, r4, r5, pc}
 8019ae8:	2000a238 	.word	0x2000a238

08019aec <__swsetup_r>:
 8019aec:	4b32      	ldr	r3, [pc, #200]	; (8019bb8 <__swsetup_r+0xcc>)
 8019aee:	b570      	push	{r4, r5, r6, lr}
 8019af0:	681d      	ldr	r5, [r3, #0]
 8019af2:	4606      	mov	r6, r0
 8019af4:	460c      	mov	r4, r1
 8019af6:	b125      	cbz	r5, 8019b02 <__swsetup_r+0x16>
 8019af8:	69ab      	ldr	r3, [r5, #24]
 8019afa:	b913      	cbnz	r3, 8019b02 <__swsetup_r+0x16>
 8019afc:	4628      	mov	r0, r5
 8019afe:	f7ff fcf1 	bl	80194e4 <__sinit>
 8019b02:	4b2e      	ldr	r3, [pc, #184]	; (8019bbc <__swsetup_r+0xd0>)
 8019b04:	429c      	cmp	r4, r3
 8019b06:	d10f      	bne.n	8019b28 <__swsetup_r+0x3c>
 8019b08:	686c      	ldr	r4, [r5, #4]
 8019b0a:	89a3      	ldrh	r3, [r4, #12]
 8019b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b10:	0719      	lsls	r1, r3, #28
 8019b12:	d42c      	bmi.n	8019b6e <__swsetup_r+0x82>
 8019b14:	06dd      	lsls	r5, r3, #27
 8019b16:	d411      	bmi.n	8019b3c <__swsetup_r+0x50>
 8019b18:	2309      	movs	r3, #9
 8019b1a:	6033      	str	r3, [r6, #0]
 8019b1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019b20:	81a3      	strh	r3, [r4, #12]
 8019b22:	f04f 30ff 	mov.w	r0, #4294967295
 8019b26:	e03e      	b.n	8019ba6 <__swsetup_r+0xba>
 8019b28:	4b25      	ldr	r3, [pc, #148]	; (8019bc0 <__swsetup_r+0xd4>)
 8019b2a:	429c      	cmp	r4, r3
 8019b2c:	d101      	bne.n	8019b32 <__swsetup_r+0x46>
 8019b2e:	68ac      	ldr	r4, [r5, #8]
 8019b30:	e7eb      	b.n	8019b0a <__swsetup_r+0x1e>
 8019b32:	4b24      	ldr	r3, [pc, #144]	; (8019bc4 <__swsetup_r+0xd8>)
 8019b34:	429c      	cmp	r4, r3
 8019b36:	bf08      	it	eq
 8019b38:	68ec      	ldreq	r4, [r5, #12]
 8019b3a:	e7e6      	b.n	8019b0a <__swsetup_r+0x1e>
 8019b3c:	0758      	lsls	r0, r3, #29
 8019b3e:	d512      	bpl.n	8019b66 <__swsetup_r+0x7a>
 8019b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b42:	b141      	cbz	r1, 8019b56 <__swsetup_r+0x6a>
 8019b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b48:	4299      	cmp	r1, r3
 8019b4a:	d002      	beq.n	8019b52 <__swsetup_r+0x66>
 8019b4c:	4630      	mov	r0, r6
 8019b4e:	f000 f98f 	bl	8019e70 <_free_r>
 8019b52:	2300      	movs	r3, #0
 8019b54:	6363      	str	r3, [r4, #52]	; 0x34
 8019b56:	89a3      	ldrh	r3, [r4, #12]
 8019b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019b5c:	81a3      	strh	r3, [r4, #12]
 8019b5e:	2300      	movs	r3, #0
 8019b60:	6063      	str	r3, [r4, #4]
 8019b62:	6923      	ldr	r3, [r4, #16]
 8019b64:	6023      	str	r3, [r4, #0]
 8019b66:	89a3      	ldrh	r3, [r4, #12]
 8019b68:	f043 0308 	orr.w	r3, r3, #8
 8019b6c:	81a3      	strh	r3, [r4, #12]
 8019b6e:	6923      	ldr	r3, [r4, #16]
 8019b70:	b94b      	cbnz	r3, 8019b86 <__swsetup_r+0x9a>
 8019b72:	89a3      	ldrh	r3, [r4, #12]
 8019b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019b7c:	d003      	beq.n	8019b86 <__swsetup_r+0x9a>
 8019b7e:	4621      	mov	r1, r4
 8019b80:	4630      	mov	r0, r6
 8019b82:	f000 f929 	bl	8019dd8 <__smakebuf_r>
 8019b86:	89a0      	ldrh	r0, [r4, #12]
 8019b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b8c:	f010 0301 	ands.w	r3, r0, #1
 8019b90:	d00a      	beq.n	8019ba8 <__swsetup_r+0xbc>
 8019b92:	2300      	movs	r3, #0
 8019b94:	60a3      	str	r3, [r4, #8]
 8019b96:	6963      	ldr	r3, [r4, #20]
 8019b98:	425b      	negs	r3, r3
 8019b9a:	61a3      	str	r3, [r4, #24]
 8019b9c:	6923      	ldr	r3, [r4, #16]
 8019b9e:	b943      	cbnz	r3, 8019bb2 <__swsetup_r+0xc6>
 8019ba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019ba4:	d1ba      	bne.n	8019b1c <__swsetup_r+0x30>
 8019ba6:	bd70      	pop	{r4, r5, r6, pc}
 8019ba8:	0781      	lsls	r1, r0, #30
 8019baa:	bf58      	it	pl
 8019bac:	6963      	ldrpl	r3, [r4, #20]
 8019bae:	60a3      	str	r3, [r4, #8]
 8019bb0:	e7f4      	b.n	8019b9c <__swsetup_r+0xb0>
 8019bb2:	2000      	movs	r0, #0
 8019bb4:	e7f7      	b.n	8019ba6 <__swsetup_r+0xba>
 8019bb6:	bf00      	nop
 8019bb8:	20000070 	.word	0x20000070
 8019bbc:	0801ad18 	.word	0x0801ad18
 8019bc0:	0801ad38 	.word	0x0801ad38
 8019bc4:	0801acf8 	.word	0x0801acf8

08019bc8 <_close_r>:
 8019bc8:	b538      	push	{r3, r4, r5, lr}
 8019bca:	4d06      	ldr	r5, [pc, #24]	; (8019be4 <_close_r+0x1c>)
 8019bcc:	2300      	movs	r3, #0
 8019bce:	4604      	mov	r4, r0
 8019bd0:	4608      	mov	r0, r1
 8019bd2:	602b      	str	r3, [r5, #0]
 8019bd4:	f7e7 ffad 	bl	8001b32 <_close>
 8019bd8:	1c43      	adds	r3, r0, #1
 8019bda:	d102      	bne.n	8019be2 <_close_r+0x1a>
 8019bdc:	682b      	ldr	r3, [r5, #0]
 8019bde:	b103      	cbz	r3, 8019be2 <_close_r+0x1a>
 8019be0:	6023      	str	r3, [r4, #0]
 8019be2:	bd38      	pop	{r3, r4, r5, pc}
 8019be4:	2000a238 	.word	0x2000a238

08019be8 <__sflush_r>:
 8019be8:	898a      	ldrh	r2, [r1, #12]
 8019bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bee:	4605      	mov	r5, r0
 8019bf0:	0710      	lsls	r0, r2, #28
 8019bf2:	460c      	mov	r4, r1
 8019bf4:	d458      	bmi.n	8019ca8 <__sflush_r+0xc0>
 8019bf6:	684b      	ldr	r3, [r1, #4]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	dc05      	bgt.n	8019c08 <__sflush_r+0x20>
 8019bfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	dc02      	bgt.n	8019c08 <__sflush_r+0x20>
 8019c02:	2000      	movs	r0, #0
 8019c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c0a:	2e00      	cmp	r6, #0
 8019c0c:	d0f9      	beq.n	8019c02 <__sflush_r+0x1a>
 8019c0e:	2300      	movs	r3, #0
 8019c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019c14:	682f      	ldr	r7, [r5, #0]
 8019c16:	602b      	str	r3, [r5, #0]
 8019c18:	d032      	beq.n	8019c80 <__sflush_r+0x98>
 8019c1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019c1c:	89a3      	ldrh	r3, [r4, #12]
 8019c1e:	075a      	lsls	r2, r3, #29
 8019c20:	d505      	bpl.n	8019c2e <__sflush_r+0x46>
 8019c22:	6863      	ldr	r3, [r4, #4]
 8019c24:	1ac0      	subs	r0, r0, r3
 8019c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019c28:	b10b      	cbz	r3, 8019c2e <__sflush_r+0x46>
 8019c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019c2c:	1ac0      	subs	r0, r0, r3
 8019c2e:	2300      	movs	r3, #0
 8019c30:	4602      	mov	r2, r0
 8019c32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019c34:	6a21      	ldr	r1, [r4, #32]
 8019c36:	4628      	mov	r0, r5
 8019c38:	47b0      	blx	r6
 8019c3a:	1c43      	adds	r3, r0, #1
 8019c3c:	89a3      	ldrh	r3, [r4, #12]
 8019c3e:	d106      	bne.n	8019c4e <__sflush_r+0x66>
 8019c40:	6829      	ldr	r1, [r5, #0]
 8019c42:	291d      	cmp	r1, #29
 8019c44:	d82c      	bhi.n	8019ca0 <__sflush_r+0xb8>
 8019c46:	4a2a      	ldr	r2, [pc, #168]	; (8019cf0 <__sflush_r+0x108>)
 8019c48:	40ca      	lsrs	r2, r1
 8019c4a:	07d6      	lsls	r6, r2, #31
 8019c4c:	d528      	bpl.n	8019ca0 <__sflush_r+0xb8>
 8019c4e:	2200      	movs	r2, #0
 8019c50:	6062      	str	r2, [r4, #4]
 8019c52:	04d9      	lsls	r1, r3, #19
 8019c54:	6922      	ldr	r2, [r4, #16]
 8019c56:	6022      	str	r2, [r4, #0]
 8019c58:	d504      	bpl.n	8019c64 <__sflush_r+0x7c>
 8019c5a:	1c42      	adds	r2, r0, #1
 8019c5c:	d101      	bne.n	8019c62 <__sflush_r+0x7a>
 8019c5e:	682b      	ldr	r3, [r5, #0]
 8019c60:	b903      	cbnz	r3, 8019c64 <__sflush_r+0x7c>
 8019c62:	6560      	str	r0, [r4, #84]	; 0x54
 8019c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c66:	602f      	str	r7, [r5, #0]
 8019c68:	2900      	cmp	r1, #0
 8019c6a:	d0ca      	beq.n	8019c02 <__sflush_r+0x1a>
 8019c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c70:	4299      	cmp	r1, r3
 8019c72:	d002      	beq.n	8019c7a <__sflush_r+0x92>
 8019c74:	4628      	mov	r0, r5
 8019c76:	f000 f8fb 	bl	8019e70 <_free_r>
 8019c7a:	2000      	movs	r0, #0
 8019c7c:	6360      	str	r0, [r4, #52]	; 0x34
 8019c7e:	e7c1      	b.n	8019c04 <__sflush_r+0x1c>
 8019c80:	6a21      	ldr	r1, [r4, #32]
 8019c82:	2301      	movs	r3, #1
 8019c84:	4628      	mov	r0, r5
 8019c86:	47b0      	blx	r6
 8019c88:	1c41      	adds	r1, r0, #1
 8019c8a:	d1c7      	bne.n	8019c1c <__sflush_r+0x34>
 8019c8c:	682b      	ldr	r3, [r5, #0]
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d0c4      	beq.n	8019c1c <__sflush_r+0x34>
 8019c92:	2b1d      	cmp	r3, #29
 8019c94:	d001      	beq.n	8019c9a <__sflush_r+0xb2>
 8019c96:	2b16      	cmp	r3, #22
 8019c98:	d101      	bne.n	8019c9e <__sflush_r+0xb6>
 8019c9a:	602f      	str	r7, [r5, #0]
 8019c9c:	e7b1      	b.n	8019c02 <__sflush_r+0x1a>
 8019c9e:	89a3      	ldrh	r3, [r4, #12]
 8019ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ca4:	81a3      	strh	r3, [r4, #12]
 8019ca6:	e7ad      	b.n	8019c04 <__sflush_r+0x1c>
 8019ca8:	690f      	ldr	r7, [r1, #16]
 8019caa:	2f00      	cmp	r7, #0
 8019cac:	d0a9      	beq.n	8019c02 <__sflush_r+0x1a>
 8019cae:	0793      	lsls	r3, r2, #30
 8019cb0:	680e      	ldr	r6, [r1, #0]
 8019cb2:	bf08      	it	eq
 8019cb4:	694b      	ldreq	r3, [r1, #20]
 8019cb6:	600f      	str	r7, [r1, #0]
 8019cb8:	bf18      	it	ne
 8019cba:	2300      	movne	r3, #0
 8019cbc:	eba6 0807 	sub.w	r8, r6, r7
 8019cc0:	608b      	str	r3, [r1, #8]
 8019cc2:	f1b8 0f00 	cmp.w	r8, #0
 8019cc6:	dd9c      	ble.n	8019c02 <__sflush_r+0x1a>
 8019cc8:	6a21      	ldr	r1, [r4, #32]
 8019cca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019ccc:	4643      	mov	r3, r8
 8019cce:	463a      	mov	r2, r7
 8019cd0:	4628      	mov	r0, r5
 8019cd2:	47b0      	blx	r6
 8019cd4:	2800      	cmp	r0, #0
 8019cd6:	dc06      	bgt.n	8019ce6 <__sflush_r+0xfe>
 8019cd8:	89a3      	ldrh	r3, [r4, #12]
 8019cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cde:	81a3      	strh	r3, [r4, #12]
 8019ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ce4:	e78e      	b.n	8019c04 <__sflush_r+0x1c>
 8019ce6:	4407      	add	r7, r0
 8019ce8:	eba8 0800 	sub.w	r8, r8, r0
 8019cec:	e7e9      	b.n	8019cc2 <__sflush_r+0xda>
 8019cee:	bf00      	nop
 8019cf0:	20400001 	.word	0x20400001

08019cf4 <_fflush_r>:
 8019cf4:	b538      	push	{r3, r4, r5, lr}
 8019cf6:	690b      	ldr	r3, [r1, #16]
 8019cf8:	4605      	mov	r5, r0
 8019cfa:	460c      	mov	r4, r1
 8019cfc:	b913      	cbnz	r3, 8019d04 <_fflush_r+0x10>
 8019cfe:	2500      	movs	r5, #0
 8019d00:	4628      	mov	r0, r5
 8019d02:	bd38      	pop	{r3, r4, r5, pc}
 8019d04:	b118      	cbz	r0, 8019d0e <_fflush_r+0x1a>
 8019d06:	6983      	ldr	r3, [r0, #24]
 8019d08:	b90b      	cbnz	r3, 8019d0e <_fflush_r+0x1a>
 8019d0a:	f7ff fbeb 	bl	80194e4 <__sinit>
 8019d0e:	4b14      	ldr	r3, [pc, #80]	; (8019d60 <_fflush_r+0x6c>)
 8019d10:	429c      	cmp	r4, r3
 8019d12:	d11b      	bne.n	8019d4c <_fflush_r+0x58>
 8019d14:	686c      	ldr	r4, [r5, #4]
 8019d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	d0ef      	beq.n	8019cfe <_fflush_r+0xa>
 8019d1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019d20:	07d0      	lsls	r0, r2, #31
 8019d22:	d404      	bmi.n	8019d2e <_fflush_r+0x3a>
 8019d24:	0599      	lsls	r1, r3, #22
 8019d26:	d402      	bmi.n	8019d2e <_fflush_r+0x3a>
 8019d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d2a:	f7ff fc9e 	bl	801966a <__retarget_lock_acquire_recursive>
 8019d2e:	4628      	mov	r0, r5
 8019d30:	4621      	mov	r1, r4
 8019d32:	f7ff ff59 	bl	8019be8 <__sflush_r>
 8019d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d38:	07da      	lsls	r2, r3, #31
 8019d3a:	4605      	mov	r5, r0
 8019d3c:	d4e0      	bmi.n	8019d00 <_fflush_r+0xc>
 8019d3e:	89a3      	ldrh	r3, [r4, #12]
 8019d40:	059b      	lsls	r3, r3, #22
 8019d42:	d4dd      	bmi.n	8019d00 <_fflush_r+0xc>
 8019d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d46:	f7ff fc91 	bl	801966c <__retarget_lock_release_recursive>
 8019d4a:	e7d9      	b.n	8019d00 <_fflush_r+0xc>
 8019d4c:	4b05      	ldr	r3, [pc, #20]	; (8019d64 <_fflush_r+0x70>)
 8019d4e:	429c      	cmp	r4, r3
 8019d50:	d101      	bne.n	8019d56 <_fflush_r+0x62>
 8019d52:	68ac      	ldr	r4, [r5, #8]
 8019d54:	e7df      	b.n	8019d16 <_fflush_r+0x22>
 8019d56:	4b04      	ldr	r3, [pc, #16]	; (8019d68 <_fflush_r+0x74>)
 8019d58:	429c      	cmp	r4, r3
 8019d5a:	bf08      	it	eq
 8019d5c:	68ec      	ldreq	r4, [r5, #12]
 8019d5e:	e7da      	b.n	8019d16 <_fflush_r+0x22>
 8019d60:	0801ad18 	.word	0x0801ad18
 8019d64:	0801ad38 	.word	0x0801ad38
 8019d68:	0801acf8 	.word	0x0801acf8

08019d6c <_lseek_r>:
 8019d6c:	b538      	push	{r3, r4, r5, lr}
 8019d6e:	4d07      	ldr	r5, [pc, #28]	; (8019d8c <_lseek_r+0x20>)
 8019d70:	4604      	mov	r4, r0
 8019d72:	4608      	mov	r0, r1
 8019d74:	4611      	mov	r1, r2
 8019d76:	2200      	movs	r2, #0
 8019d78:	602a      	str	r2, [r5, #0]
 8019d7a:	461a      	mov	r2, r3
 8019d7c:	f7e7 ff00 	bl	8001b80 <_lseek>
 8019d80:	1c43      	adds	r3, r0, #1
 8019d82:	d102      	bne.n	8019d8a <_lseek_r+0x1e>
 8019d84:	682b      	ldr	r3, [r5, #0]
 8019d86:	b103      	cbz	r3, 8019d8a <_lseek_r+0x1e>
 8019d88:	6023      	str	r3, [r4, #0]
 8019d8a:	bd38      	pop	{r3, r4, r5, pc}
 8019d8c:	2000a238 	.word	0x2000a238

08019d90 <__swhatbuf_r>:
 8019d90:	b570      	push	{r4, r5, r6, lr}
 8019d92:	460e      	mov	r6, r1
 8019d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d98:	2900      	cmp	r1, #0
 8019d9a:	b096      	sub	sp, #88	; 0x58
 8019d9c:	4614      	mov	r4, r2
 8019d9e:	461d      	mov	r5, r3
 8019da0:	da07      	bge.n	8019db2 <__swhatbuf_r+0x22>
 8019da2:	2300      	movs	r3, #0
 8019da4:	602b      	str	r3, [r5, #0]
 8019da6:	89b3      	ldrh	r3, [r6, #12]
 8019da8:	061a      	lsls	r2, r3, #24
 8019daa:	d410      	bmi.n	8019dce <__swhatbuf_r+0x3e>
 8019dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019db0:	e00e      	b.n	8019dd0 <__swhatbuf_r+0x40>
 8019db2:	466a      	mov	r2, sp
 8019db4:	f000 fbae 	bl	801a514 <_fstat_r>
 8019db8:	2800      	cmp	r0, #0
 8019dba:	dbf2      	blt.n	8019da2 <__swhatbuf_r+0x12>
 8019dbc:	9a01      	ldr	r2, [sp, #4]
 8019dbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019dc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019dc6:	425a      	negs	r2, r3
 8019dc8:	415a      	adcs	r2, r3
 8019dca:	602a      	str	r2, [r5, #0]
 8019dcc:	e7ee      	b.n	8019dac <__swhatbuf_r+0x1c>
 8019dce:	2340      	movs	r3, #64	; 0x40
 8019dd0:	2000      	movs	r0, #0
 8019dd2:	6023      	str	r3, [r4, #0]
 8019dd4:	b016      	add	sp, #88	; 0x58
 8019dd6:	bd70      	pop	{r4, r5, r6, pc}

08019dd8 <__smakebuf_r>:
 8019dd8:	898b      	ldrh	r3, [r1, #12]
 8019dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ddc:	079d      	lsls	r5, r3, #30
 8019dde:	4606      	mov	r6, r0
 8019de0:	460c      	mov	r4, r1
 8019de2:	d507      	bpl.n	8019df4 <__smakebuf_r+0x1c>
 8019de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019de8:	6023      	str	r3, [r4, #0]
 8019dea:	6123      	str	r3, [r4, #16]
 8019dec:	2301      	movs	r3, #1
 8019dee:	6163      	str	r3, [r4, #20]
 8019df0:	b002      	add	sp, #8
 8019df2:	bd70      	pop	{r4, r5, r6, pc}
 8019df4:	ab01      	add	r3, sp, #4
 8019df6:	466a      	mov	r2, sp
 8019df8:	f7ff ffca 	bl	8019d90 <__swhatbuf_r>
 8019dfc:	9900      	ldr	r1, [sp, #0]
 8019dfe:	4605      	mov	r5, r0
 8019e00:	4630      	mov	r0, r6
 8019e02:	f7ff fc4b 	bl	801969c <_malloc_r>
 8019e06:	b948      	cbnz	r0, 8019e1c <__smakebuf_r+0x44>
 8019e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e0c:	059a      	lsls	r2, r3, #22
 8019e0e:	d4ef      	bmi.n	8019df0 <__smakebuf_r+0x18>
 8019e10:	f023 0303 	bic.w	r3, r3, #3
 8019e14:	f043 0302 	orr.w	r3, r3, #2
 8019e18:	81a3      	strh	r3, [r4, #12]
 8019e1a:	e7e3      	b.n	8019de4 <__smakebuf_r+0xc>
 8019e1c:	4b0d      	ldr	r3, [pc, #52]	; (8019e54 <__smakebuf_r+0x7c>)
 8019e1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019e20:	89a3      	ldrh	r3, [r4, #12]
 8019e22:	6020      	str	r0, [r4, #0]
 8019e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e28:	81a3      	strh	r3, [r4, #12]
 8019e2a:	9b00      	ldr	r3, [sp, #0]
 8019e2c:	6163      	str	r3, [r4, #20]
 8019e2e:	9b01      	ldr	r3, [sp, #4]
 8019e30:	6120      	str	r0, [r4, #16]
 8019e32:	b15b      	cbz	r3, 8019e4c <__smakebuf_r+0x74>
 8019e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e38:	4630      	mov	r0, r6
 8019e3a:	f000 fb7d 	bl	801a538 <_isatty_r>
 8019e3e:	b128      	cbz	r0, 8019e4c <__smakebuf_r+0x74>
 8019e40:	89a3      	ldrh	r3, [r4, #12]
 8019e42:	f023 0303 	bic.w	r3, r3, #3
 8019e46:	f043 0301 	orr.w	r3, r3, #1
 8019e4a:	81a3      	strh	r3, [r4, #12]
 8019e4c:	89a0      	ldrh	r0, [r4, #12]
 8019e4e:	4305      	orrs	r5, r0
 8019e50:	81a5      	strh	r5, [r4, #12]
 8019e52:	e7cd      	b.n	8019df0 <__smakebuf_r+0x18>
 8019e54:	0801947d 	.word	0x0801947d

08019e58 <__malloc_lock>:
 8019e58:	4801      	ldr	r0, [pc, #4]	; (8019e60 <__malloc_lock+0x8>)
 8019e5a:	f7ff bc06 	b.w	801966a <__retarget_lock_acquire_recursive>
 8019e5e:	bf00      	nop
 8019e60:	2000a232 	.word	0x2000a232

08019e64 <__malloc_unlock>:
 8019e64:	4801      	ldr	r0, [pc, #4]	; (8019e6c <__malloc_unlock+0x8>)
 8019e66:	f7ff bc01 	b.w	801966c <__retarget_lock_release_recursive>
 8019e6a:	bf00      	nop
 8019e6c:	2000a232 	.word	0x2000a232

08019e70 <_free_r>:
 8019e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e72:	2900      	cmp	r1, #0
 8019e74:	d048      	beq.n	8019f08 <_free_r+0x98>
 8019e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e7a:	9001      	str	r0, [sp, #4]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8019e82:	bfb8      	it	lt
 8019e84:	18e4      	addlt	r4, r4, r3
 8019e86:	f7ff ffe7 	bl	8019e58 <__malloc_lock>
 8019e8a:	4a20      	ldr	r2, [pc, #128]	; (8019f0c <_free_r+0x9c>)
 8019e8c:	9801      	ldr	r0, [sp, #4]
 8019e8e:	6813      	ldr	r3, [r2, #0]
 8019e90:	4615      	mov	r5, r2
 8019e92:	b933      	cbnz	r3, 8019ea2 <_free_r+0x32>
 8019e94:	6063      	str	r3, [r4, #4]
 8019e96:	6014      	str	r4, [r2, #0]
 8019e98:	b003      	add	sp, #12
 8019e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e9e:	f7ff bfe1 	b.w	8019e64 <__malloc_unlock>
 8019ea2:	42a3      	cmp	r3, r4
 8019ea4:	d90b      	bls.n	8019ebe <_free_r+0x4e>
 8019ea6:	6821      	ldr	r1, [r4, #0]
 8019ea8:	1862      	adds	r2, r4, r1
 8019eaa:	4293      	cmp	r3, r2
 8019eac:	bf04      	itt	eq
 8019eae:	681a      	ldreq	r2, [r3, #0]
 8019eb0:	685b      	ldreq	r3, [r3, #4]
 8019eb2:	6063      	str	r3, [r4, #4]
 8019eb4:	bf04      	itt	eq
 8019eb6:	1852      	addeq	r2, r2, r1
 8019eb8:	6022      	streq	r2, [r4, #0]
 8019eba:	602c      	str	r4, [r5, #0]
 8019ebc:	e7ec      	b.n	8019e98 <_free_r+0x28>
 8019ebe:	461a      	mov	r2, r3
 8019ec0:	685b      	ldr	r3, [r3, #4]
 8019ec2:	b10b      	cbz	r3, 8019ec8 <_free_r+0x58>
 8019ec4:	42a3      	cmp	r3, r4
 8019ec6:	d9fa      	bls.n	8019ebe <_free_r+0x4e>
 8019ec8:	6811      	ldr	r1, [r2, #0]
 8019eca:	1855      	adds	r5, r2, r1
 8019ecc:	42a5      	cmp	r5, r4
 8019ece:	d10b      	bne.n	8019ee8 <_free_r+0x78>
 8019ed0:	6824      	ldr	r4, [r4, #0]
 8019ed2:	4421      	add	r1, r4
 8019ed4:	1854      	adds	r4, r2, r1
 8019ed6:	42a3      	cmp	r3, r4
 8019ed8:	6011      	str	r1, [r2, #0]
 8019eda:	d1dd      	bne.n	8019e98 <_free_r+0x28>
 8019edc:	681c      	ldr	r4, [r3, #0]
 8019ede:	685b      	ldr	r3, [r3, #4]
 8019ee0:	6053      	str	r3, [r2, #4]
 8019ee2:	4421      	add	r1, r4
 8019ee4:	6011      	str	r1, [r2, #0]
 8019ee6:	e7d7      	b.n	8019e98 <_free_r+0x28>
 8019ee8:	d902      	bls.n	8019ef0 <_free_r+0x80>
 8019eea:	230c      	movs	r3, #12
 8019eec:	6003      	str	r3, [r0, #0]
 8019eee:	e7d3      	b.n	8019e98 <_free_r+0x28>
 8019ef0:	6825      	ldr	r5, [r4, #0]
 8019ef2:	1961      	adds	r1, r4, r5
 8019ef4:	428b      	cmp	r3, r1
 8019ef6:	bf04      	itt	eq
 8019ef8:	6819      	ldreq	r1, [r3, #0]
 8019efa:	685b      	ldreq	r3, [r3, #4]
 8019efc:	6063      	str	r3, [r4, #4]
 8019efe:	bf04      	itt	eq
 8019f00:	1949      	addeq	r1, r1, r5
 8019f02:	6021      	streq	r1, [r4, #0]
 8019f04:	6054      	str	r4, [r2, #4]
 8019f06:	e7c7      	b.n	8019e98 <_free_r+0x28>
 8019f08:	b003      	add	sp, #12
 8019f0a:	bd30      	pop	{r4, r5, pc}
 8019f0c:	20008008 	.word	0x20008008

08019f10 <__ssputs_r>:
 8019f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f14:	688e      	ldr	r6, [r1, #8]
 8019f16:	429e      	cmp	r6, r3
 8019f18:	4682      	mov	sl, r0
 8019f1a:	460c      	mov	r4, r1
 8019f1c:	4690      	mov	r8, r2
 8019f1e:	461f      	mov	r7, r3
 8019f20:	d838      	bhi.n	8019f94 <__ssputs_r+0x84>
 8019f22:	898a      	ldrh	r2, [r1, #12]
 8019f24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019f28:	d032      	beq.n	8019f90 <__ssputs_r+0x80>
 8019f2a:	6825      	ldr	r5, [r4, #0]
 8019f2c:	6909      	ldr	r1, [r1, #16]
 8019f2e:	eba5 0901 	sub.w	r9, r5, r1
 8019f32:	6965      	ldr	r5, [r4, #20]
 8019f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019f3c:	3301      	adds	r3, #1
 8019f3e:	444b      	add	r3, r9
 8019f40:	106d      	asrs	r5, r5, #1
 8019f42:	429d      	cmp	r5, r3
 8019f44:	bf38      	it	cc
 8019f46:	461d      	movcc	r5, r3
 8019f48:	0553      	lsls	r3, r2, #21
 8019f4a:	d531      	bpl.n	8019fb0 <__ssputs_r+0xa0>
 8019f4c:	4629      	mov	r1, r5
 8019f4e:	f7ff fba5 	bl	801969c <_malloc_r>
 8019f52:	4606      	mov	r6, r0
 8019f54:	b950      	cbnz	r0, 8019f6c <__ssputs_r+0x5c>
 8019f56:	230c      	movs	r3, #12
 8019f58:	f8ca 3000 	str.w	r3, [sl]
 8019f5c:	89a3      	ldrh	r3, [r4, #12]
 8019f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f62:	81a3      	strh	r3, [r4, #12]
 8019f64:	f04f 30ff 	mov.w	r0, #4294967295
 8019f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f6c:	6921      	ldr	r1, [r4, #16]
 8019f6e:	464a      	mov	r2, r9
 8019f70:	f7ff fb7d 	bl	801966e <memcpy>
 8019f74:	89a3      	ldrh	r3, [r4, #12]
 8019f76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019f7e:	81a3      	strh	r3, [r4, #12]
 8019f80:	6126      	str	r6, [r4, #16]
 8019f82:	6165      	str	r5, [r4, #20]
 8019f84:	444e      	add	r6, r9
 8019f86:	eba5 0509 	sub.w	r5, r5, r9
 8019f8a:	6026      	str	r6, [r4, #0]
 8019f8c:	60a5      	str	r5, [r4, #8]
 8019f8e:	463e      	mov	r6, r7
 8019f90:	42be      	cmp	r6, r7
 8019f92:	d900      	bls.n	8019f96 <__ssputs_r+0x86>
 8019f94:	463e      	mov	r6, r7
 8019f96:	4632      	mov	r2, r6
 8019f98:	6820      	ldr	r0, [r4, #0]
 8019f9a:	4641      	mov	r1, r8
 8019f9c:	f000 fadc 	bl	801a558 <memmove>
 8019fa0:	68a3      	ldr	r3, [r4, #8]
 8019fa2:	6822      	ldr	r2, [r4, #0]
 8019fa4:	1b9b      	subs	r3, r3, r6
 8019fa6:	4432      	add	r2, r6
 8019fa8:	60a3      	str	r3, [r4, #8]
 8019faa:	6022      	str	r2, [r4, #0]
 8019fac:	2000      	movs	r0, #0
 8019fae:	e7db      	b.n	8019f68 <__ssputs_r+0x58>
 8019fb0:	462a      	mov	r2, r5
 8019fb2:	f000 faeb 	bl	801a58c <_realloc_r>
 8019fb6:	4606      	mov	r6, r0
 8019fb8:	2800      	cmp	r0, #0
 8019fba:	d1e1      	bne.n	8019f80 <__ssputs_r+0x70>
 8019fbc:	6921      	ldr	r1, [r4, #16]
 8019fbe:	4650      	mov	r0, sl
 8019fc0:	f7ff ff56 	bl	8019e70 <_free_r>
 8019fc4:	e7c7      	b.n	8019f56 <__ssputs_r+0x46>
	...

08019fc8 <_svfiprintf_r>:
 8019fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fcc:	4698      	mov	r8, r3
 8019fce:	898b      	ldrh	r3, [r1, #12]
 8019fd0:	061b      	lsls	r3, r3, #24
 8019fd2:	b09d      	sub	sp, #116	; 0x74
 8019fd4:	4607      	mov	r7, r0
 8019fd6:	460d      	mov	r5, r1
 8019fd8:	4614      	mov	r4, r2
 8019fda:	d50e      	bpl.n	8019ffa <_svfiprintf_r+0x32>
 8019fdc:	690b      	ldr	r3, [r1, #16]
 8019fde:	b963      	cbnz	r3, 8019ffa <_svfiprintf_r+0x32>
 8019fe0:	2140      	movs	r1, #64	; 0x40
 8019fe2:	f7ff fb5b 	bl	801969c <_malloc_r>
 8019fe6:	6028      	str	r0, [r5, #0]
 8019fe8:	6128      	str	r0, [r5, #16]
 8019fea:	b920      	cbnz	r0, 8019ff6 <_svfiprintf_r+0x2e>
 8019fec:	230c      	movs	r3, #12
 8019fee:	603b      	str	r3, [r7, #0]
 8019ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ff4:	e0d1      	b.n	801a19a <_svfiprintf_r+0x1d2>
 8019ff6:	2340      	movs	r3, #64	; 0x40
 8019ff8:	616b      	str	r3, [r5, #20]
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8019ffe:	2320      	movs	r3, #32
 801a000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a004:	f8cd 800c 	str.w	r8, [sp, #12]
 801a008:	2330      	movs	r3, #48	; 0x30
 801a00a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a1b4 <_svfiprintf_r+0x1ec>
 801a00e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a012:	f04f 0901 	mov.w	r9, #1
 801a016:	4623      	mov	r3, r4
 801a018:	469a      	mov	sl, r3
 801a01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a01e:	b10a      	cbz	r2, 801a024 <_svfiprintf_r+0x5c>
 801a020:	2a25      	cmp	r2, #37	; 0x25
 801a022:	d1f9      	bne.n	801a018 <_svfiprintf_r+0x50>
 801a024:	ebba 0b04 	subs.w	fp, sl, r4
 801a028:	d00b      	beq.n	801a042 <_svfiprintf_r+0x7a>
 801a02a:	465b      	mov	r3, fp
 801a02c:	4622      	mov	r2, r4
 801a02e:	4629      	mov	r1, r5
 801a030:	4638      	mov	r0, r7
 801a032:	f7ff ff6d 	bl	8019f10 <__ssputs_r>
 801a036:	3001      	adds	r0, #1
 801a038:	f000 80aa 	beq.w	801a190 <_svfiprintf_r+0x1c8>
 801a03c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a03e:	445a      	add	r2, fp
 801a040:	9209      	str	r2, [sp, #36]	; 0x24
 801a042:	f89a 3000 	ldrb.w	r3, [sl]
 801a046:	2b00      	cmp	r3, #0
 801a048:	f000 80a2 	beq.w	801a190 <_svfiprintf_r+0x1c8>
 801a04c:	2300      	movs	r3, #0
 801a04e:	f04f 32ff 	mov.w	r2, #4294967295
 801a052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a056:	f10a 0a01 	add.w	sl, sl, #1
 801a05a:	9304      	str	r3, [sp, #16]
 801a05c:	9307      	str	r3, [sp, #28]
 801a05e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a062:	931a      	str	r3, [sp, #104]	; 0x68
 801a064:	4654      	mov	r4, sl
 801a066:	2205      	movs	r2, #5
 801a068:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a06c:	4851      	ldr	r0, [pc, #324]	; (801a1b4 <_svfiprintf_r+0x1ec>)
 801a06e:	f7e6 f8b7 	bl	80001e0 <memchr>
 801a072:	9a04      	ldr	r2, [sp, #16]
 801a074:	b9d8      	cbnz	r0, 801a0ae <_svfiprintf_r+0xe6>
 801a076:	06d0      	lsls	r0, r2, #27
 801a078:	bf44      	itt	mi
 801a07a:	2320      	movmi	r3, #32
 801a07c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a080:	0711      	lsls	r1, r2, #28
 801a082:	bf44      	itt	mi
 801a084:	232b      	movmi	r3, #43	; 0x2b
 801a086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a08a:	f89a 3000 	ldrb.w	r3, [sl]
 801a08e:	2b2a      	cmp	r3, #42	; 0x2a
 801a090:	d015      	beq.n	801a0be <_svfiprintf_r+0xf6>
 801a092:	9a07      	ldr	r2, [sp, #28]
 801a094:	4654      	mov	r4, sl
 801a096:	2000      	movs	r0, #0
 801a098:	f04f 0c0a 	mov.w	ip, #10
 801a09c:	4621      	mov	r1, r4
 801a09e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0a2:	3b30      	subs	r3, #48	; 0x30
 801a0a4:	2b09      	cmp	r3, #9
 801a0a6:	d94e      	bls.n	801a146 <_svfiprintf_r+0x17e>
 801a0a8:	b1b0      	cbz	r0, 801a0d8 <_svfiprintf_r+0x110>
 801a0aa:	9207      	str	r2, [sp, #28]
 801a0ac:	e014      	b.n	801a0d8 <_svfiprintf_r+0x110>
 801a0ae:	eba0 0308 	sub.w	r3, r0, r8
 801a0b2:	fa09 f303 	lsl.w	r3, r9, r3
 801a0b6:	4313      	orrs	r3, r2
 801a0b8:	9304      	str	r3, [sp, #16]
 801a0ba:	46a2      	mov	sl, r4
 801a0bc:	e7d2      	b.n	801a064 <_svfiprintf_r+0x9c>
 801a0be:	9b03      	ldr	r3, [sp, #12]
 801a0c0:	1d19      	adds	r1, r3, #4
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	9103      	str	r1, [sp, #12]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	bfbb      	ittet	lt
 801a0ca:	425b      	neglt	r3, r3
 801a0cc:	f042 0202 	orrlt.w	r2, r2, #2
 801a0d0:	9307      	strge	r3, [sp, #28]
 801a0d2:	9307      	strlt	r3, [sp, #28]
 801a0d4:	bfb8      	it	lt
 801a0d6:	9204      	strlt	r2, [sp, #16]
 801a0d8:	7823      	ldrb	r3, [r4, #0]
 801a0da:	2b2e      	cmp	r3, #46	; 0x2e
 801a0dc:	d10c      	bne.n	801a0f8 <_svfiprintf_r+0x130>
 801a0de:	7863      	ldrb	r3, [r4, #1]
 801a0e0:	2b2a      	cmp	r3, #42	; 0x2a
 801a0e2:	d135      	bne.n	801a150 <_svfiprintf_r+0x188>
 801a0e4:	9b03      	ldr	r3, [sp, #12]
 801a0e6:	1d1a      	adds	r2, r3, #4
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	9203      	str	r2, [sp, #12]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	bfb8      	it	lt
 801a0f0:	f04f 33ff 	movlt.w	r3, #4294967295
 801a0f4:	3402      	adds	r4, #2
 801a0f6:	9305      	str	r3, [sp, #20]
 801a0f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a1c4 <_svfiprintf_r+0x1fc>
 801a0fc:	7821      	ldrb	r1, [r4, #0]
 801a0fe:	2203      	movs	r2, #3
 801a100:	4650      	mov	r0, sl
 801a102:	f7e6 f86d 	bl	80001e0 <memchr>
 801a106:	b140      	cbz	r0, 801a11a <_svfiprintf_r+0x152>
 801a108:	2340      	movs	r3, #64	; 0x40
 801a10a:	eba0 000a 	sub.w	r0, r0, sl
 801a10e:	fa03 f000 	lsl.w	r0, r3, r0
 801a112:	9b04      	ldr	r3, [sp, #16]
 801a114:	4303      	orrs	r3, r0
 801a116:	3401      	adds	r4, #1
 801a118:	9304      	str	r3, [sp, #16]
 801a11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a11e:	4826      	ldr	r0, [pc, #152]	; (801a1b8 <_svfiprintf_r+0x1f0>)
 801a120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a124:	2206      	movs	r2, #6
 801a126:	f7e6 f85b 	bl	80001e0 <memchr>
 801a12a:	2800      	cmp	r0, #0
 801a12c:	d038      	beq.n	801a1a0 <_svfiprintf_r+0x1d8>
 801a12e:	4b23      	ldr	r3, [pc, #140]	; (801a1bc <_svfiprintf_r+0x1f4>)
 801a130:	bb1b      	cbnz	r3, 801a17a <_svfiprintf_r+0x1b2>
 801a132:	9b03      	ldr	r3, [sp, #12]
 801a134:	3307      	adds	r3, #7
 801a136:	f023 0307 	bic.w	r3, r3, #7
 801a13a:	3308      	adds	r3, #8
 801a13c:	9303      	str	r3, [sp, #12]
 801a13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a140:	4433      	add	r3, r6
 801a142:	9309      	str	r3, [sp, #36]	; 0x24
 801a144:	e767      	b.n	801a016 <_svfiprintf_r+0x4e>
 801a146:	fb0c 3202 	mla	r2, ip, r2, r3
 801a14a:	460c      	mov	r4, r1
 801a14c:	2001      	movs	r0, #1
 801a14e:	e7a5      	b.n	801a09c <_svfiprintf_r+0xd4>
 801a150:	2300      	movs	r3, #0
 801a152:	3401      	adds	r4, #1
 801a154:	9305      	str	r3, [sp, #20]
 801a156:	4619      	mov	r1, r3
 801a158:	f04f 0c0a 	mov.w	ip, #10
 801a15c:	4620      	mov	r0, r4
 801a15e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a162:	3a30      	subs	r2, #48	; 0x30
 801a164:	2a09      	cmp	r2, #9
 801a166:	d903      	bls.n	801a170 <_svfiprintf_r+0x1a8>
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d0c5      	beq.n	801a0f8 <_svfiprintf_r+0x130>
 801a16c:	9105      	str	r1, [sp, #20]
 801a16e:	e7c3      	b.n	801a0f8 <_svfiprintf_r+0x130>
 801a170:	fb0c 2101 	mla	r1, ip, r1, r2
 801a174:	4604      	mov	r4, r0
 801a176:	2301      	movs	r3, #1
 801a178:	e7f0      	b.n	801a15c <_svfiprintf_r+0x194>
 801a17a:	ab03      	add	r3, sp, #12
 801a17c:	9300      	str	r3, [sp, #0]
 801a17e:	462a      	mov	r2, r5
 801a180:	4b0f      	ldr	r3, [pc, #60]	; (801a1c0 <_svfiprintf_r+0x1f8>)
 801a182:	a904      	add	r1, sp, #16
 801a184:	4638      	mov	r0, r7
 801a186:	f3af 8000 	nop.w
 801a18a:	1c42      	adds	r2, r0, #1
 801a18c:	4606      	mov	r6, r0
 801a18e:	d1d6      	bne.n	801a13e <_svfiprintf_r+0x176>
 801a190:	89ab      	ldrh	r3, [r5, #12]
 801a192:	065b      	lsls	r3, r3, #25
 801a194:	f53f af2c 	bmi.w	8019ff0 <_svfiprintf_r+0x28>
 801a198:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a19a:	b01d      	add	sp, #116	; 0x74
 801a19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1a0:	ab03      	add	r3, sp, #12
 801a1a2:	9300      	str	r3, [sp, #0]
 801a1a4:	462a      	mov	r2, r5
 801a1a6:	4b06      	ldr	r3, [pc, #24]	; (801a1c0 <_svfiprintf_r+0x1f8>)
 801a1a8:	a904      	add	r1, sp, #16
 801a1aa:	4638      	mov	r0, r7
 801a1ac:	f000 f87a 	bl	801a2a4 <_printf_i>
 801a1b0:	e7eb      	b.n	801a18a <_svfiprintf_r+0x1c2>
 801a1b2:	bf00      	nop
 801a1b4:	0801ad5c 	.word	0x0801ad5c
 801a1b8:	0801ad66 	.word	0x0801ad66
 801a1bc:	00000000 	.word	0x00000000
 801a1c0:	08019f11 	.word	0x08019f11
 801a1c4:	0801ad62 	.word	0x0801ad62

0801a1c8 <_printf_common>:
 801a1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1cc:	4616      	mov	r6, r2
 801a1ce:	4699      	mov	r9, r3
 801a1d0:	688a      	ldr	r2, [r1, #8]
 801a1d2:	690b      	ldr	r3, [r1, #16]
 801a1d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a1d8:	4293      	cmp	r3, r2
 801a1da:	bfb8      	it	lt
 801a1dc:	4613      	movlt	r3, r2
 801a1de:	6033      	str	r3, [r6, #0]
 801a1e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a1e4:	4607      	mov	r7, r0
 801a1e6:	460c      	mov	r4, r1
 801a1e8:	b10a      	cbz	r2, 801a1ee <_printf_common+0x26>
 801a1ea:	3301      	adds	r3, #1
 801a1ec:	6033      	str	r3, [r6, #0]
 801a1ee:	6823      	ldr	r3, [r4, #0]
 801a1f0:	0699      	lsls	r1, r3, #26
 801a1f2:	bf42      	ittt	mi
 801a1f4:	6833      	ldrmi	r3, [r6, #0]
 801a1f6:	3302      	addmi	r3, #2
 801a1f8:	6033      	strmi	r3, [r6, #0]
 801a1fa:	6825      	ldr	r5, [r4, #0]
 801a1fc:	f015 0506 	ands.w	r5, r5, #6
 801a200:	d106      	bne.n	801a210 <_printf_common+0x48>
 801a202:	f104 0a19 	add.w	sl, r4, #25
 801a206:	68e3      	ldr	r3, [r4, #12]
 801a208:	6832      	ldr	r2, [r6, #0]
 801a20a:	1a9b      	subs	r3, r3, r2
 801a20c:	42ab      	cmp	r3, r5
 801a20e:	dc26      	bgt.n	801a25e <_printf_common+0x96>
 801a210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a214:	1e13      	subs	r3, r2, #0
 801a216:	6822      	ldr	r2, [r4, #0]
 801a218:	bf18      	it	ne
 801a21a:	2301      	movne	r3, #1
 801a21c:	0692      	lsls	r2, r2, #26
 801a21e:	d42b      	bmi.n	801a278 <_printf_common+0xb0>
 801a220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a224:	4649      	mov	r1, r9
 801a226:	4638      	mov	r0, r7
 801a228:	47c0      	blx	r8
 801a22a:	3001      	adds	r0, #1
 801a22c:	d01e      	beq.n	801a26c <_printf_common+0xa4>
 801a22e:	6823      	ldr	r3, [r4, #0]
 801a230:	68e5      	ldr	r5, [r4, #12]
 801a232:	6832      	ldr	r2, [r6, #0]
 801a234:	f003 0306 	and.w	r3, r3, #6
 801a238:	2b04      	cmp	r3, #4
 801a23a:	bf08      	it	eq
 801a23c:	1aad      	subeq	r5, r5, r2
 801a23e:	68a3      	ldr	r3, [r4, #8]
 801a240:	6922      	ldr	r2, [r4, #16]
 801a242:	bf0c      	ite	eq
 801a244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a248:	2500      	movne	r5, #0
 801a24a:	4293      	cmp	r3, r2
 801a24c:	bfc4      	itt	gt
 801a24e:	1a9b      	subgt	r3, r3, r2
 801a250:	18ed      	addgt	r5, r5, r3
 801a252:	2600      	movs	r6, #0
 801a254:	341a      	adds	r4, #26
 801a256:	42b5      	cmp	r5, r6
 801a258:	d11a      	bne.n	801a290 <_printf_common+0xc8>
 801a25a:	2000      	movs	r0, #0
 801a25c:	e008      	b.n	801a270 <_printf_common+0xa8>
 801a25e:	2301      	movs	r3, #1
 801a260:	4652      	mov	r2, sl
 801a262:	4649      	mov	r1, r9
 801a264:	4638      	mov	r0, r7
 801a266:	47c0      	blx	r8
 801a268:	3001      	adds	r0, #1
 801a26a:	d103      	bne.n	801a274 <_printf_common+0xac>
 801a26c:	f04f 30ff 	mov.w	r0, #4294967295
 801a270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a274:	3501      	adds	r5, #1
 801a276:	e7c6      	b.n	801a206 <_printf_common+0x3e>
 801a278:	18e1      	adds	r1, r4, r3
 801a27a:	1c5a      	adds	r2, r3, #1
 801a27c:	2030      	movs	r0, #48	; 0x30
 801a27e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a282:	4422      	add	r2, r4
 801a284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a288:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a28c:	3302      	adds	r3, #2
 801a28e:	e7c7      	b.n	801a220 <_printf_common+0x58>
 801a290:	2301      	movs	r3, #1
 801a292:	4622      	mov	r2, r4
 801a294:	4649      	mov	r1, r9
 801a296:	4638      	mov	r0, r7
 801a298:	47c0      	blx	r8
 801a29a:	3001      	adds	r0, #1
 801a29c:	d0e6      	beq.n	801a26c <_printf_common+0xa4>
 801a29e:	3601      	adds	r6, #1
 801a2a0:	e7d9      	b.n	801a256 <_printf_common+0x8e>
	...

0801a2a4 <_printf_i>:
 801a2a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a2a8:	460c      	mov	r4, r1
 801a2aa:	4691      	mov	r9, r2
 801a2ac:	7e27      	ldrb	r7, [r4, #24]
 801a2ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a2b0:	2f78      	cmp	r7, #120	; 0x78
 801a2b2:	4680      	mov	r8, r0
 801a2b4:	469a      	mov	sl, r3
 801a2b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a2ba:	d807      	bhi.n	801a2cc <_printf_i+0x28>
 801a2bc:	2f62      	cmp	r7, #98	; 0x62
 801a2be:	d80a      	bhi.n	801a2d6 <_printf_i+0x32>
 801a2c0:	2f00      	cmp	r7, #0
 801a2c2:	f000 80d8 	beq.w	801a476 <_printf_i+0x1d2>
 801a2c6:	2f58      	cmp	r7, #88	; 0x58
 801a2c8:	f000 80a3 	beq.w	801a412 <_printf_i+0x16e>
 801a2cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a2d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a2d4:	e03a      	b.n	801a34c <_printf_i+0xa8>
 801a2d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a2da:	2b15      	cmp	r3, #21
 801a2dc:	d8f6      	bhi.n	801a2cc <_printf_i+0x28>
 801a2de:	a001      	add	r0, pc, #4	; (adr r0, 801a2e4 <_printf_i+0x40>)
 801a2e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a2e4:	0801a33d 	.word	0x0801a33d
 801a2e8:	0801a351 	.word	0x0801a351
 801a2ec:	0801a2cd 	.word	0x0801a2cd
 801a2f0:	0801a2cd 	.word	0x0801a2cd
 801a2f4:	0801a2cd 	.word	0x0801a2cd
 801a2f8:	0801a2cd 	.word	0x0801a2cd
 801a2fc:	0801a351 	.word	0x0801a351
 801a300:	0801a2cd 	.word	0x0801a2cd
 801a304:	0801a2cd 	.word	0x0801a2cd
 801a308:	0801a2cd 	.word	0x0801a2cd
 801a30c:	0801a2cd 	.word	0x0801a2cd
 801a310:	0801a45d 	.word	0x0801a45d
 801a314:	0801a381 	.word	0x0801a381
 801a318:	0801a43f 	.word	0x0801a43f
 801a31c:	0801a2cd 	.word	0x0801a2cd
 801a320:	0801a2cd 	.word	0x0801a2cd
 801a324:	0801a47f 	.word	0x0801a47f
 801a328:	0801a2cd 	.word	0x0801a2cd
 801a32c:	0801a381 	.word	0x0801a381
 801a330:	0801a2cd 	.word	0x0801a2cd
 801a334:	0801a2cd 	.word	0x0801a2cd
 801a338:	0801a447 	.word	0x0801a447
 801a33c:	680b      	ldr	r3, [r1, #0]
 801a33e:	1d1a      	adds	r2, r3, #4
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	600a      	str	r2, [r1, #0]
 801a344:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a34c:	2301      	movs	r3, #1
 801a34e:	e0a3      	b.n	801a498 <_printf_i+0x1f4>
 801a350:	6825      	ldr	r5, [r4, #0]
 801a352:	6808      	ldr	r0, [r1, #0]
 801a354:	062e      	lsls	r6, r5, #24
 801a356:	f100 0304 	add.w	r3, r0, #4
 801a35a:	d50a      	bpl.n	801a372 <_printf_i+0xce>
 801a35c:	6805      	ldr	r5, [r0, #0]
 801a35e:	600b      	str	r3, [r1, #0]
 801a360:	2d00      	cmp	r5, #0
 801a362:	da03      	bge.n	801a36c <_printf_i+0xc8>
 801a364:	232d      	movs	r3, #45	; 0x2d
 801a366:	426d      	negs	r5, r5
 801a368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a36c:	485e      	ldr	r0, [pc, #376]	; (801a4e8 <_printf_i+0x244>)
 801a36e:	230a      	movs	r3, #10
 801a370:	e019      	b.n	801a3a6 <_printf_i+0x102>
 801a372:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a376:	6805      	ldr	r5, [r0, #0]
 801a378:	600b      	str	r3, [r1, #0]
 801a37a:	bf18      	it	ne
 801a37c:	b22d      	sxthne	r5, r5
 801a37e:	e7ef      	b.n	801a360 <_printf_i+0xbc>
 801a380:	680b      	ldr	r3, [r1, #0]
 801a382:	6825      	ldr	r5, [r4, #0]
 801a384:	1d18      	adds	r0, r3, #4
 801a386:	6008      	str	r0, [r1, #0]
 801a388:	0628      	lsls	r0, r5, #24
 801a38a:	d501      	bpl.n	801a390 <_printf_i+0xec>
 801a38c:	681d      	ldr	r5, [r3, #0]
 801a38e:	e002      	b.n	801a396 <_printf_i+0xf2>
 801a390:	0669      	lsls	r1, r5, #25
 801a392:	d5fb      	bpl.n	801a38c <_printf_i+0xe8>
 801a394:	881d      	ldrh	r5, [r3, #0]
 801a396:	4854      	ldr	r0, [pc, #336]	; (801a4e8 <_printf_i+0x244>)
 801a398:	2f6f      	cmp	r7, #111	; 0x6f
 801a39a:	bf0c      	ite	eq
 801a39c:	2308      	moveq	r3, #8
 801a39e:	230a      	movne	r3, #10
 801a3a0:	2100      	movs	r1, #0
 801a3a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a3a6:	6866      	ldr	r6, [r4, #4]
 801a3a8:	60a6      	str	r6, [r4, #8]
 801a3aa:	2e00      	cmp	r6, #0
 801a3ac:	bfa2      	ittt	ge
 801a3ae:	6821      	ldrge	r1, [r4, #0]
 801a3b0:	f021 0104 	bicge.w	r1, r1, #4
 801a3b4:	6021      	strge	r1, [r4, #0]
 801a3b6:	b90d      	cbnz	r5, 801a3bc <_printf_i+0x118>
 801a3b8:	2e00      	cmp	r6, #0
 801a3ba:	d04d      	beq.n	801a458 <_printf_i+0x1b4>
 801a3bc:	4616      	mov	r6, r2
 801a3be:	fbb5 f1f3 	udiv	r1, r5, r3
 801a3c2:	fb03 5711 	mls	r7, r3, r1, r5
 801a3c6:	5dc7      	ldrb	r7, [r0, r7]
 801a3c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a3cc:	462f      	mov	r7, r5
 801a3ce:	42bb      	cmp	r3, r7
 801a3d0:	460d      	mov	r5, r1
 801a3d2:	d9f4      	bls.n	801a3be <_printf_i+0x11a>
 801a3d4:	2b08      	cmp	r3, #8
 801a3d6:	d10b      	bne.n	801a3f0 <_printf_i+0x14c>
 801a3d8:	6823      	ldr	r3, [r4, #0]
 801a3da:	07df      	lsls	r7, r3, #31
 801a3dc:	d508      	bpl.n	801a3f0 <_printf_i+0x14c>
 801a3de:	6923      	ldr	r3, [r4, #16]
 801a3e0:	6861      	ldr	r1, [r4, #4]
 801a3e2:	4299      	cmp	r1, r3
 801a3e4:	bfde      	ittt	le
 801a3e6:	2330      	movle	r3, #48	; 0x30
 801a3e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a3ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a3f0:	1b92      	subs	r2, r2, r6
 801a3f2:	6122      	str	r2, [r4, #16]
 801a3f4:	f8cd a000 	str.w	sl, [sp]
 801a3f8:	464b      	mov	r3, r9
 801a3fa:	aa03      	add	r2, sp, #12
 801a3fc:	4621      	mov	r1, r4
 801a3fe:	4640      	mov	r0, r8
 801a400:	f7ff fee2 	bl	801a1c8 <_printf_common>
 801a404:	3001      	adds	r0, #1
 801a406:	d14c      	bne.n	801a4a2 <_printf_i+0x1fe>
 801a408:	f04f 30ff 	mov.w	r0, #4294967295
 801a40c:	b004      	add	sp, #16
 801a40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a412:	4835      	ldr	r0, [pc, #212]	; (801a4e8 <_printf_i+0x244>)
 801a414:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a418:	6823      	ldr	r3, [r4, #0]
 801a41a:	680e      	ldr	r6, [r1, #0]
 801a41c:	061f      	lsls	r7, r3, #24
 801a41e:	f856 5b04 	ldr.w	r5, [r6], #4
 801a422:	600e      	str	r6, [r1, #0]
 801a424:	d514      	bpl.n	801a450 <_printf_i+0x1ac>
 801a426:	07d9      	lsls	r1, r3, #31
 801a428:	bf44      	itt	mi
 801a42a:	f043 0320 	orrmi.w	r3, r3, #32
 801a42e:	6023      	strmi	r3, [r4, #0]
 801a430:	b91d      	cbnz	r5, 801a43a <_printf_i+0x196>
 801a432:	6823      	ldr	r3, [r4, #0]
 801a434:	f023 0320 	bic.w	r3, r3, #32
 801a438:	6023      	str	r3, [r4, #0]
 801a43a:	2310      	movs	r3, #16
 801a43c:	e7b0      	b.n	801a3a0 <_printf_i+0xfc>
 801a43e:	6823      	ldr	r3, [r4, #0]
 801a440:	f043 0320 	orr.w	r3, r3, #32
 801a444:	6023      	str	r3, [r4, #0]
 801a446:	2378      	movs	r3, #120	; 0x78
 801a448:	4828      	ldr	r0, [pc, #160]	; (801a4ec <_printf_i+0x248>)
 801a44a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a44e:	e7e3      	b.n	801a418 <_printf_i+0x174>
 801a450:	065e      	lsls	r6, r3, #25
 801a452:	bf48      	it	mi
 801a454:	b2ad      	uxthmi	r5, r5
 801a456:	e7e6      	b.n	801a426 <_printf_i+0x182>
 801a458:	4616      	mov	r6, r2
 801a45a:	e7bb      	b.n	801a3d4 <_printf_i+0x130>
 801a45c:	680b      	ldr	r3, [r1, #0]
 801a45e:	6826      	ldr	r6, [r4, #0]
 801a460:	6960      	ldr	r0, [r4, #20]
 801a462:	1d1d      	adds	r5, r3, #4
 801a464:	600d      	str	r5, [r1, #0]
 801a466:	0635      	lsls	r5, r6, #24
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	d501      	bpl.n	801a470 <_printf_i+0x1cc>
 801a46c:	6018      	str	r0, [r3, #0]
 801a46e:	e002      	b.n	801a476 <_printf_i+0x1d2>
 801a470:	0671      	lsls	r1, r6, #25
 801a472:	d5fb      	bpl.n	801a46c <_printf_i+0x1c8>
 801a474:	8018      	strh	r0, [r3, #0]
 801a476:	2300      	movs	r3, #0
 801a478:	6123      	str	r3, [r4, #16]
 801a47a:	4616      	mov	r6, r2
 801a47c:	e7ba      	b.n	801a3f4 <_printf_i+0x150>
 801a47e:	680b      	ldr	r3, [r1, #0]
 801a480:	1d1a      	adds	r2, r3, #4
 801a482:	600a      	str	r2, [r1, #0]
 801a484:	681e      	ldr	r6, [r3, #0]
 801a486:	6862      	ldr	r2, [r4, #4]
 801a488:	2100      	movs	r1, #0
 801a48a:	4630      	mov	r0, r6
 801a48c:	f7e5 fea8 	bl	80001e0 <memchr>
 801a490:	b108      	cbz	r0, 801a496 <_printf_i+0x1f2>
 801a492:	1b80      	subs	r0, r0, r6
 801a494:	6060      	str	r0, [r4, #4]
 801a496:	6863      	ldr	r3, [r4, #4]
 801a498:	6123      	str	r3, [r4, #16]
 801a49a:	2300      	movs	r3, #0
 801a49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a4a0:	e7a8      	b.n	801a3f4 <_printf_i+0x150>
 801a4a2:	6923      	ldr	r3, [r4, #16]
 801a4a4:	4632      	mov	r2, r6
 801a4a6:	4649      	mov	r1, r9
 801a4a8:	4640      	mov	r0, r8
 801a4aa:	47d0      	blx	sl
 801a4ac:	3001      	adds	r0, #1
 801a4ae:	d0ab      	beq.n	801a408 <_printf_i+0x164>
 801a4b0:	6823      	ldr	r3, [r4, #0]
 801a4b2:	079b      	lsls	r3, r3, #30
 801a4b4:	d413      	bmi.n	801a4de <_printf_i+0x23a>
 801a4b6:	68e0      	ldr	r0, [r4, #12]
 801a4b8:	9b03      	ldr	r3, [sp, #12]
 801a4ba:	4298      	cmp	r0, r3
 801a4bc:	bfb8      	it	lt
 801a4be:	4618      	movlt	r0, r3
 801a4c0:	e7a4      	b.n	801a40c <_printf_i+0x168>
 801a4c2:	2301      	movs	r3, #1
 801a4c4:	4632      	mov	r2, r6
 801a4c6:	4649      	mov	r1, r9
 801a4c8:	4640      	mov	r0, r8
 801a4ca:	47d0      	blx	sl
 801a4cc:	3001      	adds	r0, #1
 801a4ce:	d09b      	beq.n	801a408 <_printf_i+0x164>
 801a4d0:	3501      	adds	r5, #1
 801a4d2:	68e3      	ldr	r3, [r4, #12]
 801a4d4:	9903      	ldr	r1, [sp, #12]
 801a4d6:	1a5b      	subs	r3, r3, r1
 801a4d8:	42ab      	cmp	r3, r5
 801a4da:	dcf2      	bgt.n	801a4c2 <_printf_i+0x21e>
 801a4dc:	e7eb      	b.n	801a4b6 <_printf_i+0x212>
 801a4de:	2500      	movs	r5, #0
 801a4e0:	f104 0619 	add.w	r6, r4, #25
 801a4e4:	e7f5      	b.n	801a4d2 <_printf_i+0x22e>
 801a4e6:	bf00      	nop
 801a4e8:	0801ad6d 	.word	0x0801ad6d
 801a4ec:	0801ad7e 	.word	0x0801ad7e

0801a4f0 <_read_r>:
 801a4f0:	b538      	push	{r3, r4, r5, lr}
 801a4f2:	4d07      	ldr	r5, [pc, #28]	; (801a510 <_read_r+0x20>)
 801a4f4:	4604      	mov	r4, r0
 801a4f6:	4608      	mov	r0, r1
 801a4f8:	4611      	mov	r1, r2
 801a4fa:	2200      	movs	r2, #0
 801a4fc:	602a      	str	r2, [r5, #0]
 801a4fe:	461a      	mov	r2, r3
 801a500:	f7e7 fade 	bl	8001ac0 <_read>
 801a504:	1c43      	adds	r3, r0, #1
 801a506:	d102      	bne.n	801a50e <_read_r+0x1e>
 801a508:	682b      	ldr	r3, [r5, #0]
 801a50a:	b103      	cbz	r3, 801a50e <_read_r+0x1e>
 801a50c:	6023      	str	r3, [r4, #0]
 801a50e:	bd38      	pop	{r3, r4, r5, pc}
 801a510:	2000a238 	.word	0x2000a238

0801a514 <_fstat_r>:
 801a514:	b538      	push	{r3, r4, r5, lr}
 801a516:	4d07      	ldr	r5, [pc, #28]	; (801a534 <_fstat_r+0x20>)
 801a518:	2300      	movs	r3, #0
 801a51a:	4604      	mov	r4, r0
 801a51c:	4608      	mov	r0, r1
 801a51e:	4611      	mov	r1, r2
 801a520:	602b      	str	r3, [r5, #0]
 801a522:	f7e7 fb12 	bl	8001b4a <_fstat>
 801a526:	1c43      	adds	r3, r0, #1
 801a528:	d102      	bne.n	801a530 <_fstat_r+0x1c>
 801a52a:	682b      	ldr	r3, [r5, #0]
 801a52c:	b103      	cbz	r3, 801a530 <_fstat_r+0x1c>
 801a52e:	6023      	str	r3, [r4, #0]
 801a530:	bd38      	pop	{r3, r4, r5, pc}
 801a532:	bf00      	nop
 801a534:	2000a238 	.word	0x2000a238

0801a538 <_isatty_r>:
 801a538:	b538      	push	{r3, r4, r5, lr}
 801a53a:	4d06      	ldr	r5, [pc, #24]	; (801a554 <_isatty_r+0x1c>)
 801a53c:	2300      	movs	r3, #0
 801a53e:	4604      	mov	r4, r0
 801a540:	4608      	mov	r0, r1
 801a542:	602b      	str	r3, [r5, #0]
 801a544:	f7e7 fb11 	bl	8001b6a <_isatty>
 801a548:	1c43      	adds	r3, r0, #1
 801a54a:	d102      	bne.n	801a552 <_isatty_r+0x1a>
 801a54c:	682b      	ldr	r3, [r5, #0]
 801a54e:	b103      	cbz	r3, 801a552 <_isatty_r+0x1a>
 801a550:	6023      	str	r3, [r4, #0]
 801a552:	bd38      	pop	{r3, r4, r5, pc}
 801a554:	2000a238 	.word	0x2000a238

0801a558 <memmove>:
 801a558:	4288      	cmp	r0, r1
 801a55a:	b510      	push	{r4, lr}
 801a55c:	eb01 0402 	add.w	r4, r1, r2
 801a560:	d902      	bls.n	801a568 <memmove+0x10>
 801a562:	4284      	cmp	r4, r0
 801a564:	4623      	mov	r3, r4
 801a566:	d807      	bhi.n	801a578 <memmove+0x20>
 801a568:	1e43      	subs	r3, r0, #1
 801a56a:	42a1      	cmp	r1, r4
 801a56c:	d008      	beq.n	801a580 <memmove+0x28>
 801a56e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a572:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a576:	e7f8      	b.n	801a56a <memmove+0x12>
 801a578:	4402      	add	r2, r0
 801a57a:	4601      	mov	r1, r0
 801a57c:	428a      	cmp	r2, r1
 801a57e:	d100      	bne.n	801a582 <memmove+0x2a>
 801a580:	bd10      	pop	{r4, pc}
 801a582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a58a:	e7f7      	b.n	801a57c <memmove+0x24>

0801a58c <_realloc_r>:
 801a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a58e:	4607      	mov	r7, r0
 801a590:	4614      	mov	r4, r2
 801a592:	460e      	mov	r6, r1
 801a594:	b921      	cbnz	r1, 801a5a0 <_realloc_r+0x14>
 801a596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a59a:	4611      	mov	r1, r2
 801a59c:	f7ff b87e 	b.w	801969c <_malloc_r>
 801a5a0:	b922      	cbnz	r2, 801a5ac <_realloc_r+0x20>
 801a5a2:	f7ff fc65 	bl	8019e70 <_free_r>
 801a5a6:	4625      	mov	r5, r4
 801a5a8:	4628      	mov	r0, r5
 801a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5ac:	f000 f814 	bl	801a5d8 <_malloc_usable_size_r>
 801a5b0:	42a0      	cmp	r0, r4
 801a5b2:	d20f      	bcs.n	801a5d4 <_realloc_r+0x48>
 801a5b4:	4621      	mov	r1, r4
 801a5b6:	4638      	mov	r0, r7
 801a5b8:	f7ff f870 	bl	801969c <_malloc_r>
 801a5bc:	4605      	mov	r5, r0
 801a5be:	2800      	cmp	r0, #0
 801a5c0:	d0f2      	beq.n	801a5a8 <_realloc_r+0x1c>
 801a5c2:	4631      	mov	r1, r6
 801a5c4:	4622      	mov	r2, r4
 801a5c6:	f7ff f852 	bl	801966e <memcpy>
 801a5ca:	4631      	mov	r1, r6
 801a5cc:	4638      	mov	r0, r7
 801a5ce:	f7ff fc4f 	bl	8019e70 <_free_r>
 801a5d2:	e7e9      	b.n	801a5a8 <_realloc_r+0x1c>
 801a5d4:	4635      	mov	r5, r6
 801a5d6:	e7e7      	b.n	801a5a8 <_realloc_r+0x1c>

0801a5d8 <_malloc_usable_size_r>:
 801a5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5dc:	1f18      	subs	r0, r3, #4
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	bfbc      	itt	lt
 801a5e2:	580b      	ldrlt	r3, [r1, r0]
 801a5e4:	18c0      	addlt	r0, r0, r3
 801a5e6:	4770      	bx	lr

0801a5e8 <_init>:
 801a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5ea:	bf00      	nop
 801a5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5ee:	bc08      	pop	{r3}
 801a5f0:	469e      	mov	lr, r3
 801a5f2:	4770      	bx	lr

0801a5f4 <_fini>:
 801a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5f6:	bf00      	nop
 801a5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5fa:	bc08      	pop	{r3}
 801a5fc:	469e      	mov	lr, r3
 801a5fe:	4770      	bx	lr
